import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,a as n,b as s,d as a,f as t}from"./app-3f278ba4.js";const r={},l=n("h1",{id:"views基于类的视图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#views基于类的视图","aria-hidden":"true"},"#"),s(" Views基于类的视图")],-1),d=n("br",null,null,-1),u={href:"http://reinout.vanrees.org/weblog/2011/08/24/class-based-views-usage.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>REST framework提供了一个<code>APIView</code>类，它是Django的<code>View</code>类的子类。<br><code>APIView</code>类和一般的<code>View</code>类有以下不同：</p><ul><li><p>被传入到处理方法的请求不会是Django的<code>HttpRequest</code>类的实例，而是REST framework的<code>Request</code>类的实例。</p></li><li><p>处理方法可以返回REST framework的<code>Response</code>，而不是Django的<code>HttpRequest</code>。视图会管理内容协议，给响应设置正确的渲染器。</p></li><li><p>任何<code>APIException</code>异常都会被捕获，并且传递给合适的响应。</p></li><li><p>进入的请求将会经过认证，合适的权限和（或）节流检查会在请求被派发到处理方法之前运行。</p></li></ul><p>使用<code>APIView</code>类和使用一般的<code>View</code>类非常相似，通常，进入的请求会被分发到合适处理方法比如<code>.get()</code>，或者<code>.post</code>。另外，很多属性会被设定在控制API策略的各种切面的类上。<br> 比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> authentication<span class="token punctuation">,</span> permissions
<span class="token keyword">class</span> <span class="token class-name">ListUsers</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    列出系统中的所有用户的视图。
    * 需要token认证
    * 只有管理员用户可以访问这个视图。
    &quot;&quot;&quot;</span>
    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>TokenAuthentication<span class="token punctuation">,</span><span class="token punctuation">)</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAdminUser<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Return a list of all users.
        &quot;&quot;&quot;</span>
        usernames <span class="token operator">=</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>username <span class="token keyword">for</span> user <span class="token keyword">in</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>usernames<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api策略属性" tabindex="-1"><a class="header-anchor" href="#api策略属性" aria-hidden="true">#</a> API策略属性</h2><p>下面这些属性控制了API视图可拔插的那些方面。</p><h3 id="renderer-classes" tabindex="-1"><a class="header-anchor" href="#renderer-classes" aria-hidden="true">#</a> .renderer_classes</h3><h3 id="parser-classes" tabindex="-1"><a class="header-anchor" href="#parser-classes" aria-hidden="true">#</a> .parser_classes</h3><h3 id="authentication-classes" tabindex="-1"><a class="header-anchor" href="#authentication-classes" aria-hidden="true">#</a> .authentication_classes</h3><h3 id="throttle-classes" tabindex="-1"><a class="header-anchor" href="#throttle-classes" aria-hidden="true">#</a> .throttle_classes</h3><h3 id="permission-classes" tabindex="-1"><a class="header-anchor" href="#permission-classes" aria-hidden="true">#</a> .permission_classes</h3><h3 id="content-negotiation-class" tabindex="-1"><a class="header-anchor" href="#content-negotiation-class" aria-hidden="true">#</a> .content_negotiation_class</h3><h2 id="api-policy-instantiation-methods" tabindex="-1"><a class="header-anchor" href="#api-policy-instantiation-methods" aria-hidden="true">#</a> API policy instantiation methods</h2><p>下面这些方法被REST framework用来实例化各种可拔插的API策略。你通常不需要重写这些方法。</p><h3 id="get-renderers-self" tabindex="-1"><a class="header-anchor" href="#get-renderers-self" aria-hidden="true">#</a> .get_renderers(self)</h3><h3 id="get-parsers-self" tabindex="-1"><a class="header-anchor" href="#get-parsers-self" aria-hidden="true">#</a> .get_parsers(self)</h3><h3 id="get-authenticators-self" tabindex="-1"><a class="header-anchor" href="#get-authenticators-self" aria-hidden="true">#</a> .get_authenticators(self)</h3><h3 id="get-throttles-self" tabindex="-1"><a class="header-anchor" href="#get-throttles-self" aria-hidden="true">#</a> .get_throttles(self)</h3><h3 id="get-permissions-self" tabindex="-1"><a class="header-anchor" href="#get-permissions-self" aria-hidden="true">#</a> .get_permissions(self)</h3><h3 id="get-content-negotiator-self" tabindex="-1"><a class="header-anchor" href="#get-content-negotiator-self" aria-hidden="true">#</a> .get_content_negotiator(self)</h3><h3 id="get-exception-handler-self" tabindex="-1"><a class="header-anchor" href="#get-exception-handler-self" aria-hidden="true">#</a> .get_exception_handler(self)</h3><h2 id="api-policy-implementation-methods" tabindex="-1"><a class="header-anchor" href="#api-policy-implementation-methods" aria-hidden="true">#</a> API policy implementation methods</h2><p>下面这些方法会在请求被分发到具体的处理方法之前调用。</p><h3 id="check-permissions-self-request" tabindex="-1"><a class="header-anchor" href="#check-permissions-self-request" aria-hidden="true">#</a> .check_permissions(self, request)</h3><h3 id="check-throttles-self-request" tabindex="-1"><a class="header-anchor" href="#check-throttles-self-request" aria-hidden="true">#</a> .check_throttles(self, request)</h3><h3 id="perform-content-negotiation-self-request-force-false" tabindex="-1"><a class="header-anchor" href="#perform-content-negotiation-self-request-force-false" aria-hidden="true">#</a> .perform_content_negotiation(self, request, force=False)</h3><h2 id="dispatch-methods" tabindex="-1"><a class="header-anchor" href="#dispatch-methods" aria-hidden="true">#</a> Dispatch methods</h2><p>下面这些方法会被视图的<code>.dispatch()</code>方法直接调用。它们在调用<code>.get</code>, <code>.post()</code>, <code>put()</code>, <code>patch()</code>和<code>delete()</code>之类的请求处理方法之前或者之后执行任何需要执行的操作。</p><h3 id="initial-self-request-args-kwargs" tabindex="-1"><a class="header-anchor" href="#initial-self-request-args-kwargs" aria-hidden="true">#</a> .initial(self, request, *args, **kwargs)</h3><p>在处理方法调用之前进行任何需要的动作。 这个方法用于执行权限认证和限制，并且执行内容协商。 你通常不需要重写此方法。</p><h3 id="handle-exception-self-exc" tabindex="-1"><a class="header-anchor" href="#handle-exception-self-exc" aria-hidden="true">#</a> .handle_exception(self, exc)</h3><p>任何被处理请求的方法抛出的异常都会被传递给这个方法，这个方法既不返回<code>Response</code>的实例，也不重新抛出异常。<br> 默认的实现会处理<code>rest_framework.expceptions.APIException</code>的任何子类异常，以及Django的<code>Http404</code>和<code>PermissionDenied</code>异常，并且返回一个适当的错误响应。<br> 如果你需要在自己的API中自定义返回的错误响应，你需要重写这个方法。</p><h3 id="initialize-request-self-request-args-kwargs" tabindex="-1"><a class="header-anchor" href="#initialize-request-self-request-args-kwargs" aria-hidden="true">#</a> .initialize_request(self, request, *args, **kwargs)</h3><p>确保传递给请求处理方法的请求对象是<code>Request</code>的实例，而不是通常的Django<code>HttpResquest</code>的实例。<br> 你通常不需要重写这个方法。</p><h3 id="finalize-response-self-request-response-args-kwargs" tabindex="-1"><a class="header-anchor" href="#finalize-response-self-request-response-args-kwargs" aria-hidden="true">#</a> .finalize_response(self, request, response, *args, **kwargs)</h3><p>确保任何从处理请求的方法返回的<code>Response</code>对象被渲染到由内容协商决定的正确内容类型。<br> 你通常不需要重写这个方法。</p><hr><h1 id="基于函数的视图" tabindex="-1"><a class="header-anchor" href="#基于函数的视图" aria-hidden="true">#</a> 基于函数的视图</h1>`,38),k=n("br",null,null,-1),m={href:"http://www.boredomandlaziness.org/2012/05/djangos-cbvs-are-not-mistake-but.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>在REST framework中，你也可以使用常规的基于函数的视图。它提供了一组简单的装饰器，用来包装你的视图函数，以确保视图函数会收到<code>Request</code>（而不是Django一般的<code>HttpRequest</code>)对象，并且返回<code>Response</code>（而不是Django的<code>HttpResponse</code>）对象，同时允许你设置这个请求的处理方式。</p><h2 id="api-view" tabindex="-1"><a class="header-anchor" href="#api-view" aria-hidden="true">#</a> @api_view()</h2><p><strong>函数签名:</strong> <code>@api_view(http_method_names=[&#39;GET&#39;], exclude_from_schema=False)</code><br> 此功能的核心是<code>api_view</code>装饰器，它接受视图应该响应的HTTP方法列表的参数。 比如，你可以像这样写一个返回一些数据的非常简单的视图。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view
<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/settings/",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),v=n("code",null,"GET",-1),b=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Got some data!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),w=n("code",null,"exclude_from_schema",-1),q={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/schemas/",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> exclude_from_schema<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">api_docs</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api-策略装饰器" tabindex="-1"><a class="header-anchor" href="#api-策略装饰器" aria-hidden="true">#</a> API 策略装饰器</h2>`,2),y=n("code",null,"@api_view",-1),R={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/throttling/",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"@throttle_classes",-1),P=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token punctuation">,</span> throttle_classes
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle
<span class="token keyword">class</span> <span class="token class-name">OncePerDayUserThrottle</span><span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
        rate <span class="token operator">=</span> <span class="token string">&#39;1/day&#39;</span>
<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@throttle_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>OncePerDayUserThrottle<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello for today! See you tomorrow!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些装饰器和上文中的<code>APIView</code>的子类中设置的属性相对应。<br> 可用的装饰器有：</p><ul><li><code>@renderer_classes(...)</code></li><li><code>@parser_classes(...)</code></li><li><code>@authentication_classes(...)</code></li><li><code>@throttle_classes(...)</code></li><li><code>@permission_classes(...)</code></li></ul><p>这些装饰器中的每一个都接受一个参数，这个参数必须是类的列表或元组。</p>`,4);function A(I,E){const e=i("ExternalLinkIcon");return c(),p("div",null,[l,n("blockquote",null,[n("p",null,[s("Django中基于类的视图对于旧式风格的视图来说是良好的替代品。"),d,s(" — "),n("a",u,[s("reinout van rees"),a(e)])])]),h,n("blockquote",null,[n("p",null,[s("说[基于类的视图]不管什么时候都是更好的解决方案，那是错误的。"),k,s(" — "),n("a",m,[s("Nick Coghlan"),a(e)])])]),f,n("p",null,[s("这个视图会使用"),n("a",g,[s("settings"),a(e)]),s("中指定的默认的渲染器，解析器，认证类等等。"),_,s(" 默认的情况下，只有"),v,s('请求会被接受。其他的请求方法会得到一个"405 Method Not Allowed"响应。可以像下面的示例代码一样改变默认行为：')]),b,n("p",null,[s("你也可以用"),w,s("参数标记API视图来忽略任何"),n("a",q,[s("自动生成的视图"),a(e)]),s(",")]),x,n("p",null,[s("REST framework提供了一组可以加到视图上的装饰器来重写默认设置。这些装饰器必须放在"),y,s("的_后_(下)面。比如，要创建一个使用"),n("a",R,[s("限制器"),a(e)]),s("确保特定用户每天只能调用一次的视图，可以用"),T,s("装饰器并给它传递一个限制器类的列表。")]),P])}const j=o(r,[["render",A],["__file","03.Views（视图）.html.vue"]]);export{j as default};
