import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as o,f as a,a as n,b as s}from"./app-207e7d61.js";const p={},l=a(`<h1 id="routers-路由" tabindex="-1"><a class="header-anchor" href="#routers-路由" aria-hidden="true">#</a> Routers（路由）</h1><blockquote><p>资源路由允许你快速声明给定的有足够控制器的所有公共路由。而不是为你的index...声明单独的路由，一个强大的路由能在一行代码中声明它们。<br> — [Ruby on Rails 文档][cite]</p></blockquote><p>某些Web框架（如Rails）提供了自动确定应用程序的URL应如何映射到处理传入请求的逻辑的功能。<br> REST框架添加了对自动URL路由到Django的支持，并为你提供了一种简单、快速和一致的方式来将视图逻辑连接到一组URL。</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>这里有一个简单的URL conf的例子，它使用 <code>SimpleRouter</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> routers
router <span class="token operator">=</span> routers<span class="token punctuation">.</span>SimpleRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;users&#39;</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;accounts&#39;</span><span class="token punctuation">,</span> AccountViewSet<span class="token punctuation">)</span>
urlpatterns <span class="token operator">=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>register()</code> 方法有两个强制参数：</p><ul><li><code>prefix</code> - 用于此组路由的URL前缀。</li><li><code>viewset</code> - 处理请求的viewset类。</li></ul><p>还可以指定一个附加参数（可选）：</p><ul><li><code>base_name</code> - 用于创建的URL名称的基本名称。如果不设置该参数，将根据视图集的<code>queryset</code>属性（如果有）来自动生成基本名称。注意，如果视图集不包括<code>queryset</code>属性，那么在注册视图集时必须设置<code>base_name</code>。</li></ul><p>上面的示例将生成以下URL模式：</p><ul><li>URL pattern: <code>^users/$</code> Name: <code>&#39;user-list&#39;</code></li><li>URL pattern: <code>^users/{pk}/$</code> Name: <code>&#39;user-detail&#39;</code></li><li>URL pattern: <code>^accounts/$</code> Name: <code>&#39;account-list&#39;</code></li><li>URL pattern: <code>^accounts/{pk}/$</code> Name: <code>&#39;account-detail&#39;</code></li></ul><hr><p><strong>注意</strong>: <code>base_name</code> 参数用于指定视图名称模式的初始部分。在上面的例子中就是指 <code>user</code> 或 <code>account</code> 部分。<br> 通常，你_不需要_指定<code>base_name</code>参数，但是如果你有自定义<code>get_queryset</code>方法的视图集，那么那个视图集可能没有设置<code>.queryset</code>属性。当你注册这个视图集的时候，你就有可能会看到类似如下的错误：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;base_name&#39;</span> argument <span class="token keyword">not</span> specified<span class="token punctuation">,</span> <span class="token keyword">and</span> could <span class="token keyword">not</span> automatically determine the name <span class="token keyword">from</span> the viewset<span class="token punctuation">,</span> <span class="token keyword">as</span> it does <span class="token keyword">not</span> have a <span class="token string">&#39;.queryset&#39;</span> attribute<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这意味着你需要在注册视图集时显式设置<code>base_name</code>参数，因为无法从model名自动确定。</p><hr><h3 id="在路由中使用-include" tabindex="-1"><a class="header-anchor" href="#在路由中使用-include" aria-hidden="true">#</a> 在路由中使用 <code>include</code></h3><p>路由器实例上的<code>.urls</code>属性只是一个URL模式的标准列表。对于如何添加这些URL，有很多不同的写法。<br> 例如，你可以将<code>router.urls</code>附加到现有视图的列表中...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> routers<span class="token punctuation">.</span>SimpleRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;users&#39;</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;accounts&#39;</span><span class="token punctuation">,</span> AccountViewSet<span class="token punctuation">)</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^forgot-password/$&#39;</span><span class="token punctuation">,</span> ForgotPasswordFormView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
urlpatterns <span class="token operator">+=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你可以使用Django的<code>include</code>函数，像这样...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^forgot-password/$&#39;</span><span class="token punctuation">,</span> ForgotPasswordFormView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由器URL模式也支持命名空间的写法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^forgot-password/$&#39;</span><span class="token punctuation">,</span> ForgotPasswordFormView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">&#39;api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用带超链接序列化器的命名空间，你还需要确保序列化器上的任何<code>view_name</code>参数正确地反映命名空间。在上面的示例中，你需要让超链接到用户详细信息视图的序列化器字段包含一个参数，例如<code>view_name =&#39;api：user-detail&#39;</code>。</p><h3 id="额外链接和操作" tabindex="-1"><a class="header-anchor" href="#额外链接和操作" aria-hidden="true">#</a> 额外链接和操作</h3><p>用<code>@detail_route</code>或<code>@list_route</code>装饰的视图集上的任何方法也将被路由。 例如，给定一个类似这样的方法在<code>UserViewSet</code>类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminOrIsSelf
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route
<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> permission_classes<span class="token operator">=</span><span class="token punctuation">[</span>IsAdminOrIsSelf<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将另外生成以下URL模式：</p><ul><li>URL pattern: <code>^users/{pk}/set_password/$</code> Name: <code>&#39;user-set-password&#39;</code></li></ul><p>如果你不想让自定义的操作使用自动生成的默认URL，你可以改用url_path参数进行自定义。<br> 例如，如果你要将自定义操作的URL更改为<code>^users/{pk}/change-password/$</code>, 你可以这样写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminOrIsSelf
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route
<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> permission_classes<span class="token operator">=</span><span class="token punctuation">[</span>IsAdminOrIsSelf<span class="token punctuation">]</span><span class="token punctuation">,</span> url_path<span class="token operator">=</span><span class="token string">&#39;change-password&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例将生成以下URL格式：</p><ul><li>URL pattern: <code>^users/{pk}/change-password/$</code> Name: <code>&#39;user-change-password&#39;</code></li></ul><p>在你不想使用为自定义操作生成的默认名称的情况下，ni可以使用url_name参数来自定义它。<br> 例如，如果要将自定义操作的名称更改为<code>&#39;user-change-password&#39;</code>，则可以写为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAdminOrIsSelf
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route
<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> permission_classes<span class="token operator">=</span><span class="token punctuation">[</span>IsAdminOrIsSelf<span class="token punctuation">]</span><span class="token punctuation">,</span> url_name<span class="token operator">=</span><span class="token string">&#39;change-password&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">set_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上示例现在将生成以下URL格式：</p><ul><li>URL pattern: <code>^users/{pk}/set_password/$</code> Name: <code>&#39;user-change-password&#39;</code></li></ul><p>你还可以同时设置url_path和url_name参数对自定义视图的URL生成进行额外的控制。<br> 有关更多信息，请参阅viewset文档 [标记路由的额外操作][route-decorators].</p><h1 id="api-向导" tabindex="-1"><a class="header-anchor" href="#api-向导" aria-hidden="true">#</a> API 向导</h1><h2 id="simplerouter" tabindex="-1"><a class="header-anchor" href="#simplerouter" aria-hidden="true">#</a> SimpleRouter</h2><p>该路由器包括标准集合<code>list</code>, <code>create</code>, <code>retrieve</code>, <code>update</code>, <code>partial_update</code> 和 <code>destroy</code>动作的路由。视图集中还可以使用<code>@ detail_route</code>或<code>@ list_route</code>装饰器标记要被路由的其他方法。</p>`,42),c=n("table",{methodname:""},[n("thead",null,[n("tr",null,[n("th",null,"URL 样式"),n("th",null,"HTTP 方法"),n("th",null,"动作"),n("th",null,"URL 名")])]),n("tbody",null,[n("tr",null,[n("td",null,"{prefix}/"),n("td",null,"GET"),n("td",null,"list"),n("td",null,"{basename}-list")]),n("tr",null,[n("td"),n("td",null,"POST"),n("td",null,"create"),n("td")]),n("tr",{methodname:""},[n("td",null,"{prefix}/{methodname}/"),n("td",null,[s("GET, or as specified by "),n("code",null,"methods"),s(" argument")]),n("td",null,[n("code",null,"@list_route"),s(" decorated method")]),n("td",null,"{basename}-")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/"),n("td",null,"GET"),n("td",null,"retrieve"),n("td",null,"{basename}-detail")]),n("tr",null,[n("td"),n("td",null,"PUT"),n("td",null,"update"),n("td")]),n("tr",null,[n("td"),n("td",null,"PATCH"),n("td",null,"partial_update"),n("td")]),n("tr",null,[n("td"),n("td",null,"DELETE"),n("td",null,"destroy"),n("td")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/{methodname}/"),n("td",null,[s("GET, or as specified by "),n("code",null,"methods"),s(" argument")]),n("td",null,[n("code",null,"@detail_route"),s(" decorated method")]),n("td",null,"{basename}-")])])],-1),u=a(`<p>默认情况下，由<code>SimpleRouter</code>创建的URL将附加尾部斜杠。 在实例化路由器时，可以通过将<code>trailing_slash</code>参数设置为\`False&#39;来修改此行为。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> SimpleRouter<span class="token punctuation">(</span>trailing_slash<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>尾部斜杠在Django中是常见的，但是在其他一些框架（如Rails）中默认不使用。你选择使用哪种风格在很大程度上是你个人偏好问题，虽然一些javascript框架可能需要一个特定的路由风格。<br> 路由器将匹配包含除斜杠和句点字符以外的任何字符的查找值。对于更严格（或更宽松）的查找模式，请在视图集上设置<code>lookup_value_regex</code>属性。例如，你可以将查找限制为有效的UUID：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyModelViewSet</span><span class="token punctuation">(</span>mixins<span class="token punctuation">.</span>RetrieveModelMixin<span class="token punctuation">,</span> viewsets<span class="token punctuation">.</span>GenericViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lookup_field <span class="token operator">=</span> <span class="token string">&#39;my_model_id&#39;</span>
    lookup_value_regex <span class="token operator">=</span> <span class="token string">&#39;[0-9a-f]{32}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="defaultrouter" tabindex="-1"><a class="header-anchor" href="#defaultrouter" aria-hidden="true">#</a> DefaultRouter</h2><p>这个路由器类似于上面的<code>SimpleRouter</code>，但是还包括一个默认返回所有列表视图的超链接的API根视图。它还生成可选的<code>.json</code>样式格式后缀的路由。</p>`,6),i=n("table",{methodname:""},[n("thead",null,[n("tr",null,[n("th",null,"URL 样式"),n("th",null,"HTTP 方法"),n("th",null,"动作"),n("th",null,"URL 名称")])]),n("tbody",null,[n("tr",null,[n("td",null,"[.format]"),n("td",null,"GET"),n("td",null,"automatically generated root view"),n("td",null,"api-root")]),n("tr",null,[n("td",null,"{prefix}/[.format]"),n("td",null,"GET"),n("td",null,"list"),n("td",null,"{basename}-list")]),n("tr",null,[n("td"),n("td",null,"POST"),n("td",null,"create"),n("td")]),n("tr",{methodname:""},[n("td",null,"{prefix}/{methodname}/[.format]"),n("td",null,[s("GET, or as specified by "),n("code",null,"methods"),s(" argument")]),n("td",null,[n("code",null,"@list_route"),s(" decorated method")]),n("td",null,"{basename}-")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/[.format]"),n("td",null,"GET"),n("td",null,"retrieve"),n("td",null,"{basename}-detail")]),n("tr",null,[n("td"),n("td",null,"PUT"),n("td",null,"update"),n("td")]),n("tr",null,[n("td"),n("td",null,"PATCH"),n("td",null,"partial_update"),n("td")]),n("tr",null,[n("td"),n("td",null,"DELETE"),n("td",null,"destroy"),n("td")]),n("tr",null,[n("td",null,"{prefix}/{lookup}/{methodname}/[.format]"),n("td",null,[s("GET, or as specified by "),n("code",null,"methods"),s(" argument")]),n("td",null,[n("code",null,"@detail_route"),s(" decorated method")]),n("td",null,"{basename}-")])])],-1),r=a(`<p>与<code>SimpleRouter</code>一样，在实例化路由器时，可以通过将<code>trailing_slash</code>参数设置为\`False&#39;来删除URL路由的尾部斜杠。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>router = DefaultRouter(trailing_slash=False)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="自定义-routers" tabindex="-1"><a class="header-anchor" href="#自定义-routers" aria-hidden="true">#</a> 自定义 Routers</h1><p>通常你并不需要实现自定义路由器，但如果你对API的网址结构有特定的要求，那它就十分有用了。这样做允许你以可重用的方式封装URL结构，确保你不必为每个新视图显式地编写URL模式。<br> 实现自定义路由器的最简单的方法是继承一个现有的路由器类。<code>.routes</code>属性用于模板将被映射到每个视图集的URL模式。<code>.routes</code>属性是一个名为tuples的Route对象的列表。<br><code>Route</code>命名元组的参数是：<br><strong>url</strong>: 表示要路由的URL的字符串。可能包括以下格式字符串：</p><ul><li><code>{prefix}</code> - 用于此组路由的URL前缀。</li><li><code>{lookup}</code> - 用于与单个实例进行匹配的查找字段。</li><li><code>{trailing_slash}</code> - 可以是一个&#39;/&#39;或一个空字符串，这取决于<code>trailing_slash</code>参数。</li></ul><p><strong>mapping</strong>: HTTP方法名称到视图方法的映射<br><strong>name</strong>: 在<code>reverse</code>调用中使用的URL的名称。可能包括以下格式字符串：</p><ul><li><code>{basename}</code> - 用于创建的URL名称的基本名称</li></ul><p><strong>initkwargs</strong>: 实例化视图时应传递的任何其他参数的字典。注意，<code>suffix</code>参数被保留用于标识视图集类型，在生成视图名称和面包屑链接时使用。</p><h2 id="自定义动态路由" tabindex="-1"><a class="header-anchor" href="#自定义动态路由" aria-hidden="true">#</a> 自定义动态路由</h2><p>你还可以定制<code>@ list_route</code>和<code>@detail_route</code>装饰器的路由。要路由这些装饰器中的一个或两个，请在<code>.routes</code>列表中包含一个<code>DynamicListRoute</code>和/或<code>DynamicDetailRoute</code>命名的元组。<br><code>DynamicListRoute</code>和<code>DynamicDetailRoute</code>的参数是：<br><strong>url</strong>: 表示要路由的URL的字符串。可以包括与“Route”相同的格式字符串，并且另外接受<code>{methodname}</code>和<code>{methodnamehyphen}</code>格式字符串。<br><strong>name</strong>: 在<code>reverse</code>调用中使用的URL的名称。可能包括以下格式字符串：<code>{basename}</code>，<code>{methodname}</code>和<code>{methodnamehyphen}</code>。<br><strong>initkwargs</strong>: 实例化视图时应传递的任何其他参数的字典。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>以下示例将只路由到<code>list</code>和<code>retrieve</code>操作，并且不使用尾部斜线约定。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> Route<span class="token punctuation">,</span> DynamicDetailRoute<span class="token punctuation">,</span> SimpleRouter
<span class="token keyword">class</span> <span class="token class-name">CustomReadOnlyRouter</span><span class="token punctuation">(</span>SimpleRouter<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A router for read-only APIs, which doesn&#39;t use trailing slashes.
    &quot;&quot;&quot;</span>
    routes <span class="token operator">=</span> <span class="token punctuation">[</span>
        Route<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">r&#39;^{prefix}$&#39;</span><span class="token punctuation">,</span>
            mapping<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token string">&#39;{basename}-list&#39;</span><span class="token punctuation">,</span>
            initkwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;suffix&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;List&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        Route<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">r&#39;^{prefix}/{lookup}$&#39;</span><span class="token punctuation">,</span>
            mapping<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;retrieve&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token string">&#39;{basename}-detail&#39;</span><span class="token punctuation">,</span>
            initkwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;suffix&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Detail&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        DynamicDetailRoute<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">r&#39;^{prefix}/{lookup}/{methodnamehyphen}$&#39;</span><span class="token punctuation">,</span>
            name<span class="token operator">=</span><span class="token string">&#39;{basename}-{methodnamehyphen}&#39;</span><span class="token punctuation">,</span>
            initkwargs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们来看看我们定义的<code>CustomReadOnlyRouter</code>为简单视图生成的路由。<br><code>views.py</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ReadOnlyModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A viewset that provides the standard actions
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    lookup_field <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span>
    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">group_names</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Returns a list of all the group names that the given
        user belongs to.
        &quot;&quot;&quot;</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        groups <span class="token operator">=</span> user<span class="token punctuation">.</span>groups<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">[</span>group<span class="token punctuation">.</span>name <span class="token keyword">for</span> group <span class="token keyword">in</span> groups<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>urls.py</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>router <span class="token operator">=</span> CustomReadOnlyRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> UserViewSet<span class="token punctuation">)</span>
urlpatterns <span class="token operator">=</span> router<span class="token punctuation">.</span>urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将生成以下映射...</p>`,18),d=n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"URL"),n("th",null,"HTTP 方法"),n("th",null,"动作"),n("th",null,"URL 名称")])]),n("tbody",null,[n("tr",null,[n("td",null,"/users"),n("td",null,"GET"),n("td",null,"list"),n("td",null,"user-list")]),n("tr",null,[n("td",{username:""},"/users/"),n("td",null,"GET"),n("td",null,"retrieve"),n("td",null,"user-detail")]),n("tr",null,[n("td",null,"/users/{username}/group-names"),n("td",null,"GET"),n("td",null,"group_names"),n("td",null,"user-group-names")])])],-1),k=[l,c,u,i,r,d];function m(v,b){return t(),o("div",null,k)}const y=e(p,[["render",m],["__file","06.Routers（路由）.html.vue"]]);export{y as default};
