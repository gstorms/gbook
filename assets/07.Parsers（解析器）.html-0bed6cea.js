import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c as i,a as n,b as a,d as e,f as t}from"./app-3f278ba4.js";const c={},l=n("h1",{id:"parsers-解析器-解析器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parsers-解析器-解析器","aria-hidden":"true"},"#"),a(" Parsers（解析器）解析器")],-1),d=n("br",null,null,-1),u={href:"https://groups.google.com/d/topic/django-developers/dxI4qVzrBY4/discussion",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"REST 框架包括一些内置的Parser类，允许你接受各种媒体类型的请求。还支持定义自己的自定义解析器，这使你可以灵活地设计API接受的媒体类型。",-1),h=n("h2",{id:"解析器如何确定",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解析器如何确定","aria-hidden":"true"},"#"),a(" 解析器如何确定")],-1),m=n("p",null,[a("一组视图的有效解析器总是被定义为一个类的列表。当访问"),n("code",null,"request.data"),a("时，REST框架将检查传入请求中的"),n("code",null,"Content-Type"),a("头，并确定用于解析请求内容的解析器。")],-1),v=n("hr",null,null,-1),b=n("strong",null,"注意",-1),_=n("code",null,"Content-Type",-1),g=n("br",null,null,-1),f=n("code",null,"'application/x-www-form-urlencoded'",-1),y=n("br",null,null,-1),w={href:"http://api.jquery.com/jQuery.ajax/",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"json",-1),P=n("code",null,"contentType：'application / json'",-1),S=t(`<hr><h2 id="设置解析器" tabindex="-1"><a class="header-anchor" href="#设置解析器" aria-hidden="true">#</a> 设置解析器</h2><p>可以使用<code>DEFAULT_PARSER_CLASSES</code>设置全局默认的解析器集。例如，以下设置将仅允许具有<code>JSON</code>内容的请求，而不是JSON或表单数据的默认值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.parsers.JSONParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以设置用于单个视图或视图集的解析器， 使用<code>APIView</code>类视图。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>parsers <span class="token keyword">import</span> JSONParser
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    可以接收JSON内容POST请求的视图。
    &quot;&quot;&quot;</span>
    parser_classes <span class="token operator">=</span> <span class="token punctuation">(</span>JSONParser<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;received data&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果你使用基于方法的视图的<code>@api_view</code>装饰器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> parser_classes
<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@parser_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>JSONParser<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    可以接收JSON内容POST请求的视图
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;received data&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="api参考" tabindex="-1"><a class="header-anchor" href="#api参考" aria-hidden="true">#</a> API参考</h1><h2 id="jsonparser" tabindex="-1"><a class="header-anchor" href="#jsonparser" aria-hidden="true">#</a> JSONParser</h2><p>解析 <code>JSON</code> 请求内容。<br><strong>.media_type</strong>: <code>application/json</code></p><h2 id="formparser" tabindex="-1"><a class="header-anchor" href="#formparser" aria-hidden="true">#</a> FormParser</h2><p>解析 HTML 表单内容。<code>request.data</code>将被填充一个<code>QueryDict</code>的数据。<br> 通常，你需要使用<code>FormParser</code>和<code>MultiPartParser</code>两者，以便完全支持HTML表单数据。<br><strong>.media_type</strong>: <code>application/x-www-form-urlencoded</code></p><h2 id="multipartparser" tabindex="-1"><a class="header-anchor" href="#multipartparser" aria-hidden="true">#</a> MultiPartParser</h2><p>解析多部分HTML表单内容，支持文件上传。<code>request.data</code> 都将被一个 <code>QueryDict</code>填充。<br> 你通常会同时使用<code>FormParser</code>和<code>MultiPartParser</code>两者，以便完全支持HTML表单数据。<br><strong>.media_type</strong>: <code>multipart/form-data</code></p><h2 id="fileuploadparser" tabindex="-1"><a class="header-anchor" href="#fileuploadparser" aria-hidden="true">#</a> FileUploadParser</h2><p>解析原始文件上传内容。 <code>request.data</code> 属性将是有单个key <code>&#39;file&#39;</code>的包含上传文件的字典。<br> 如果与<code>FileUploadParser</code>一起使用的视图使用<code>filename</code> URL关键字参数调用，则该参数将用作文件名。<br> 如果没有<code>filename</code> URL关键字参数调用，那么客户端必须在<code>Content-Disposition</code> HTTP头中设置文件名。例如 <code>Content-Disposition: attachment; filename=upload.jpg</code>.<br><strong>.media_type</strong>: <code>*/*</code></p><h5 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明:</h5>`,19),q=n("li",null,[n("code",null,"FileUploadParser"),a(" 用于与原始数据请求一起上传文件的本机客户端。对于基于Web的上传，或者对于具有多部分上传支持的本机客户端，您应该使用"),n("code",null,"MultiPartParser"),a("解析器。")],-1),E=n("li",null,[a("由于该解析器的"),n("code",null,"media_type"),a("与任何内容类型匹配，所以"),n("code",null,"FileUploadParser"),a("通常应该是API视图中唯一的解析器。")],-1),R=n("code",null,"FileUploadParser",-1),T=n("code",null,"FILE_UPLOAD_HANDLERS",-1),j=n("code",null,"request.upload_handlers",-1),A={href:"https://docs.djangoproject.com/en/stable/topics/http/file-uploads/#upload-handlers",target:"_blank",rel:"noopener noreferrer"},L=t(`<h5 id="基本用法示例" tabindex="-1"><a class="header-anchor" href="#基本用法示例" aria-hidden="true">#</a> 基本用法示例：</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># views.py</span>
<span class="token keyword">class</span> <span class="token class-name">FileUploadView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser_classes <span class="token operator">=</span> <span class="token punctuation">(</span>FileUploadParser<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        file_obj <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">]</span>
        <span class="token comment"># ...</span>
        <span class="token comment"># do some stuff with uploaded file</span>
        <span class="token comment"># ...</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">204</span><span class="token punctuation">)</span>
<span class="token comment"># urls.py</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># ...</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^upload/(?P&lt;filename&gt;[^/]+)$&#39;</span><span class="token punctuation">,</span> FileUploadView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="自定义解析器" tabindex="-1"><a class="header-anchor" href="#自定义解析器" aria-hidden="true">#</a> 自定义解析器</h1><p>要实现一个自定义解析器，你应该重写<code>BaseParser</code>，设置<code>.media_type</code>属性，并实现<code>.parse(self，stream，media_type，parser_context)</code>方法。<br> 该方法应该返回用于填充<code>request.data</code> 属性的数据。<br> 传递给 <code>.parse()</code> 的参数是:</p><h3 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> stream</h3><p>表示请求体的数据流。</p><h3 id="media-type" tabindex="-1"><a class="header-anchor" href="#media-type" aria-hidden="true">#</a> media_type</h3><p>可选的。如果提供，这是传入请求内容的媒体类型。<br> 基于请求的<code>Content-Type:</code>头，这可能比渲染器的<code>media_type</code>属性更具体，可能包括媒体类型参数。例如 <code>&quot;text/plain; charset=utf-8&quot;</code>。</p><h3 id="parser-context" tabindex="-1"><a class="header-anchor" href="#parser-context" aria-hidden="true">#</a> parser_context</h3><p>可选的。如果提供，该参数将是一个包含解析请求内容可能需要的任何附加上下文的字典。<br> 默认情况下将包含以下keys: <code>view</code>, <code>request</code>, <code>args</code>, <code>kwargs</code>。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>以下是一个Plain text的示例，它将使用表示请求正文的字符串填充<code>request.data</code>属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PlainTextParser</span><span class="token punctuation">(</span>BaseParser<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Plain text 解析器。
    &quot;&quot;&quot;</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> parser_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        只需返回一个表示请求正文的字符串。
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="第三方包" tabindex="-1"><a class="header-anchor" href="#第三方包" aria-hidden="true">#</a> 第三方包</h1><p>以下是可用的第三方包。</p><h2 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> YAML</h2>`,18),M={href:"http://jpadilla.github.io/django-rest-framework-yaml/",target:"_blank",rel:"noopener noreferrer"},N={href:"http://www.yaml.org/",target:"_blank",rel:"noopener noreferrer"},F=t(`<h4 id="安装和配置" tabindex="-1"><a class="header-anchor" href="#安装和配置" aria-hidden="true">#</a> 安装和配置</h4><p>使用pip进行安装。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>$ pip install djangorestframework<span class="token operator">-</span>yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改你的 REST framework settings。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_yaml.parsers.YAMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_yaml.renderers.YAMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h2>`,6),O={href:"http://jpadilla.github.io/django-rest-framework-xml/",target:"_blank",rel:"noopener noreferrer"},D=t(`<h4 id="安装和配置-1" tabindex="-1"><a class="header-anchor" href="#安装和配置-1" aria-hidden="true">#</a> 安装和配置</h4><p>使用pip进行安装。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>$ pip install djangorestframework<span class="token operator">-</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改你的 REST framework settings.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_xml.parsers.XMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_xml.renderers.XMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="messagepack" tabindex="-1"><a class="header-anchor" href="#messagepack" aria-hidden="true">#</a> MessagePack</h2>`,6),U={href:"https://github.com/juanriaza/django-rest-framework-msgpack",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/juanriaza",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/juanriaza/django-rest-framework-msgpack",target:"_blank",rel:"noopener noreferrer"},V=n("h2",{id:"camelcase-json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#camelcase-json","aria-hidden":"true"},"#"),a(" CamelCase JSON")],-1),I={href:"https://github.com/vbabiy/djangorestframework-camel-case",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/vbabiy",target:"_blank",rel:"noopener noreferrer"};function H(Y,z){const s=p("ExternalLinkIcon");return r(),i("div",null,[l,n("blockquote",null,[n("p",null,[a("机器互动的Web服务往往使用更多结构化的格式发送数据而不是使用表单编码，因为它们发送的是比简单形式更复杂的数据。"),d,a(" — Malcom Tredinnick, "),n("a",u,[a("Django developers group"),e(s)])])]),k,h,m,v,n("p",null,[b,a(": 开发客户端应用程序时应该始终记住在HTTP请求中发送数据时确保设置"),_,a("头。"),g,a(" 如果你不设置内容类型，大多数客户端将默认使用"),f,a("，而这可能并不是你想要的。"),y,a(" 举个例子，如果你使用jQuery的"),n("a",w,[a(".ajax() 方法"),e(s)]),a("发送"),x,a("编码数据，你应该确保包含"),P,a("设置。")]),S,n("ul",null,[q,E,n("li",null,[R,a(" 遵循 Django 的标准 "),T,a(" 设置，和 "),j,a(" 属性。参见 "),n("a",A,[a("Django 文档"),e(s)]),a(" 获取更多细节。")])]),L,n("p",null,[n("a",M,[a("REST framework YAML"),e(s)]),a(" 提供了 "),n("a",N,[a("YAML"),e(s)]),a(" 解析和呈现的支持。之前它是直接包含在REST框架包中的，现在被替代为第三方包支持。")]),F,n("p",null,[n("a",O,[a("REST Framework XML"),e(s)]),a(" 提供了一种简单的非正式XML格式。它以前是直接包含在REST框架包中，现在被替代为第三方包支持。")]),D,n("p",null,[n("a",U,[a("MessagePack"),e(s)]),a(" 是一种快速，高效的二进制序列化格式。 "),n("a",C,[a("Juan Riaza"),e(s)]),a(" 维护了 "),n("a",J,[a("djangorestframework-msgpack"),e(s)]),a(" 包，它为REST框架提供MessagePack渲染器和解析器支持。")]),V,n("p",null,[n("a",I,[a("djangorestframework-camel-case"),e(s)]),a(" 为REST framework提供了驼峰类型JSON 生成和解析。这个库允许序列化程序使用Python风格的下划线字段名称，并且将其转变为Javascript风格的驼峰字段名称在API中公开。这个库由 "),n("a",B,[a("Vitaly Babiy"),e(s)]),a("维护。")])])}const Q=o(c,[["render",H],["__file","07.Parsers（解析器）.html.vue"]]);export{Q as default};
