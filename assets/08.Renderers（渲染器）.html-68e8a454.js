import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as p,c,a as n,b as s,d as a,f as t}from"./app-207e7d61.js";const l={},i=n("h1",{id:"renderers-渲染器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#renderers-渲染器","aria-hidden":"true"},"#"),s(" Renderers（渲染器）")],-1),d=n("br",null,null,-1),u={href:"https://docs.djangoproject.com/en/stable/stable/template-response/#the-rendering-process",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"REST框架包括许多内置的Renderer类，它们允许你使用各种媒体类型返回响应。还支持定义你自己的自定义渲染器，这样可以灵活地设计你自己的媒体类型。",-1),h=n("h2",{id:"渲染器的确定方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#渲染器的确定方式","aria-hidden":"true"},"#"),s(" 渲染器的确定方式")],-1),m=n("br",null,null,-1),_=n("code",null,"Accept",-1),b=n("code",null,"http://example.com/api/users_count.json",-1),v=n("br",null,null,-1),g={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/content-negotiation/",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="设置渲染器" tabindex="-1"><a class="header-anchor" href="#设置渲染器" aria-hidden="true">#</a> 设置渲染器</h2><p>可以使用<code>DEFAULT_RENDERER_CLASSES</code>设置全局默认的渲染器集。例如，以下设置将使用<code>JSON</code>作为主要媒体类型，并且还包括自描述API。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.renderers.JSONRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.BrowsableAPIRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以设置用于单个视图或视图集的渲染器，使用<code>APIView</code>类视图。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> JSONRenderer
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">UserCountView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    返回JSON格式活动用户数的视图。
    &quot;&quot;&quot;</span>
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">(</span>JSONRenderer<span class="token punctuation">,</span> <span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        user_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;user_count&#39;</span><span class="token punctuation">:</span> user_count<span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果你使用基于功能的视图的<code>@api_view</code>装饰器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>JSONRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">user_count_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    返回JSON格式活动用户数的视图。
    &quot;&quot;&quot;</span>
    user_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;user_count&#39;</span><span class="token punctuation">:</span> user_count<span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="渲染器类的排序" tabindex="-1"><a class="header-anchor" href="#渲染器类的排序" aria-hidden="true">#</a> 渲染器类的排序</h2>`,8),y=n("code",null,"Accept: */*",-1),w=n("code",null,"Accept",-1),R=n("br",null,null,-1),S=n("code",null,"JSONRenderer",-1),T=n("code",null,"Accept",-1),x=n("code",null,"JSON",-1),E=n("br",null,null,-1),A=n("code",null,"TemplateHTMLRenderer",-1),q={href:"http://www.gethifi.com/blog/browser-rest-http-accept-headers",target:"_blank",rel:"noopener noreferrer"},j=t(`<hr><h1 id="api-参考" tabindex="-1"><a class="header-anchor" href="#api-参考" aria-hidden="true">#</a> API 参考</h1><h2 id="jsonrenderer" tabindex="-1"><a class="header-anchor" href="#jsonrenderer" aria-hidden="true">#</a> JSONRenderer</h2><p>使用utf-8编码将请求的数据渲染成<code>JSON</code>。<br> 请注意，默认样式是包括unicode字符，并使用没有不必要空格的紧凑样式渲染响应:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&quot;unicode black star&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;★&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">:</span><span class="token number">999</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端还可以包含<code>&#39;indent&#39;</code>媒体类型参数，在这种情况下，返回的<code>JSON</code>将被缩进。例如<code>Accept: application/json; indent=4</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;unicode black star&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;★&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;value&quot;</span><span class="token punctuation">:</span> <span class="token number">999</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用<code>UNICODE_JSON</code>和<code>COMPACT_JSON</code>更改默认JSON编码样式。<br><strong>.media_type</strong>: <code>application/json</code><br><strong>.format</strong>: <code>&#39;.json&#39;</code><br><strong>.charset</strong>: <code>None</code></p><h2 id="templatehtmlrenderer" tabindex="-1"><a class="header-anchor" href="#templatehtmlrenderer" aria-hidden="true">#</a> TemplateHTMLRenderer</h2><p>使用Django的标准模板将数据渲染成HTML。<br> 与其他渲染器不同，传递给<code>Response</code>的数据不需要序列化。此外，与其他渲染器不同，你可能希望在创建<code>Response</code>时包含一个<code>template_name</code>参数。<br> TemplateHTMLRenderer将创建一个<code>RequestContext</code>，使用<code>response.data</code>作为上下文字典，并确定用于渲染上下文的模板名称。<br> 模板名称由（按优先顺序）确定：</p><ol><li>一个显式的<code>template_name</code>参数传递给响应。</li><li>在类中显式定义<code>.template_name</code>属性。</li><li>调用<code>view.get_template_names（）</code>的返回结果。</li></ol><p>使用 <code>TemplateHTMLRenderer</code>的视图的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    返回给定用户的模板HTML表示的视图。
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">(</span>TemplateHTMLRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">object</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">}</span><span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token string">&#39;user_detail.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),L=n("code",null,"TemplateHTMLRenderer",-1),N=n("br",null,null,-1),M=n("code",null,"TemplateHTMLRenderer",-1),P=n("code",null,"TemplateHTMLRenderer",-1),H=n("code",null,"renderer_classes",-1),O=n("code",null,"ACCEPT:",-1),J=n("br",null,null,-1),I=n("code",null,"TemplateHTMLRenderer",-1),C={href:"https://q1mi.github.io/Django-REST-framework-documentation/topics/html-and-forms/",target:"_blank",rel:"noopener noreferrer"},D=n("br",null,null,-1),U=n("strong",null,".media_type",-1),F=n("code",null,"text/html",-1),z=n("br",null,null,-1),B=n("strong",null,".format",-1),V=n("code",null,"'.html'",-1),G=n("br",null,null,-1),W=n("strong",null,".charset",-1),X=n("code",null,"utf-8",-1),Y=n("br",null,null,-1),K=n("code",null,"StaticHTMLRenderer",-1),$=t(`<h2 id="statichtmlrenderer" tabindex="-1"><a class="header-anchor" href="#statichtmlrenderer" aria-hidden="true">#</a> StaticHTMLRenderer</h2><p>一个简单的渲染器，只需返回预渲染的HTML。与其他渲染器不同，传递给响应对象的数据应该是表示要返回的内容的字符串。<br> 一个使用 <code>StaticHTMLRenderer</code>的视图的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>StaticHTMLRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">simple_html_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token string">&#39;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用<code>StaticHTMLRenderer</code>使用REST框架返回常规HTML页面，也可以从单个路径返回HTML和API响应。<br><strong>.media_type</strong>: <code>text/html</code><br><strong>.format</strong>: <code>&#39;.html&#39;</code><br><strong>.charset</strong>: <code>utf-8</code><br> 也可以看看： <code>TemplateHTMLRenderer</code></p><h2 id="browsableapirenderer" tabindex="-1"><a class="header-anchor" href="#browsableapirenderer" aria-hidden="true">#</a> BrowsableAPIRenderer</h2><p>将数据渲染成可浏览的API：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1622687073094-38845e7b-9a45-48e5-9599-a1eea48c9134.png#align=left&amp;display=inline&amp;height=696&amp;margin=[object Object]&amp;originHeight=696&amp;originWidth=791&amp;size=0&amp;status=done&amp;style=none&amp;width=791" alt="" loading="lazy"><br> 此渲染器将确定哪个其他渲染器将被赋予最高优先级，并使用它在HTML页面中显示API。<br><strong>.media_type</strong>: <code>text/html</code><br><strong>.format</strong>: <code>&#39;.api&#39;</code><br><strong>.charset</strong>: <code>utf-8</code><br><strong>.template</strong>: <code>&#39;rest_framework/api.html&#39;</code></p><h4 id="自定义-browsableapirenderer" tabindex="-1"><a class="header-anchor" href="#自定义-browsableapirenderer" aria-hidden="true">#</a> 自定义 BrowsableAPIRenderer</h4><p>默认情况下，响应内容将以与<code>BrowsableAPIRenderer</code>不同的最高优先级渲染器渲染。如果你需要自定义此行为，例如使用HTML作为默认返回格式，但在可浏览的API中使用JSON，则可以通过重写<code>get_default_renderer()</code>方法来实现。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomBrowsableAPIRenderer</span><span class="token punctuation">(</span>BrowsableAPIRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_default_renderer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> JSONRenderer<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adminrenderer" tabindex="-1"><a class="header-anchor" href="#adminrenderer" aria-hidden="true">#</a> AdminRenderer</h2><p>将数据渲染给HTML以进行类似管理的显示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1622687073260-14b7c29d-e5cf-4c03-9d1d-1b1021e8dea2.png#align=left&amp;display=inline&amp;height=528&amp;margin=[object Object]&amp;originHeight=528&amp;originWidth=996&amp;size=0&amp;status=done&amp;style=none&amp;width=996" alt="" loading="lazy"><br> 此渲染器适用于CRUD风格的Web API，还应提供用于管理数据的用户友好界面。<br> 请注意，包含嵌套或列表序列化器的输入视图对于<code>AdminRenderer</code>将无法正常工作，因为HTML表单无法正确支持它们。<br><strong>注意</strong>: 当数据中存在正确配置的<code>URL_FIELD_NAME</code>（缺省<code>url</code>）属性时，<code>AdminRenderer</code>才能够包含指向详细页面的链接。对于<code>HyperlinkedModelSerializer</code>，这将是这种情况，但是对于<code>ModelSerializer</code> 或者简单的<code>Serializer</code>类，你需要确保明确地包含该字段。例如，我们使用模型<code>get_absolute_url</code>方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;get_absolute_url&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.media_type</strong>: <code>text/html</code><br><strong>.format</strong>: <code>&#39;.admin&#39;</code><br><strong>.charset</strong>: <code>utf-8</code><br><strong>.template</strong>: <code>&#39;rest_framework/admin.html&#39;</code></p><h2 id="htmlformrenderer" tabindex="-1"><a class="header-anchor" href="#htmlformrenderer" aria-hidden="true">#</a> HTMLFormRenderer</h2><p>将序列化程序返回的数据渲染为HTML表单。此渲染器的输出不包括封闭的<code>&lt;form&gt;</code>标签，隐藏的CSRF输入或任何提交按钮。<br> 此渲染器不是直接使用，而是可以通过将序列化器实例传递给<code>render_form</code>模板标记来替代模板。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token operator">%</span> load rest_framework <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">&quot;/submit-report/&quot;</span> method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> csrf_token <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> render_form serializer <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;Save&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),Q={href:"https://q1mi.github.io/Django-REST-framework-documentation/topics/html-and-forms/",target:"_blank",rel:"noopener noreferrer"},Z=n("br",null,null,-1),nn=n("strong",null,".media_type",-1),sn=n("code",null,"text/html",-1),en=n("br",null,null,-1),an=n("strong",null,".format",-1),tn=n("code",null,"'.form'",-1),on=n("br",null,null,-1),rn=n("strong",null,".charset",-1),pn=n("code",null,"utf-8",-1),cn=n("br",null,null,-1),ln=n("strong",null,".template",-1),dn=n("code",null,"'rest_framework/horizontal/form.html'",-1),un=n("h2",{id:"multipartrenderer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#multipartrenderer","aria-hidden":"true"},"#"),s(" MultiPartRenderer")],-1),kn=n("strong",null,"它不适合作为响应渲染器",-1),hn={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/testing/",target:"_blank",rel:"noopener noreferrer"},mn=n("br",null,null,-1),_n=n("strong",null,".media_type",-1),bn=n("code",null,"multipart/form-data; boundary=BoUnDaRyStRiNg",-1),vn=n("br",null,null,-1),gn=n("strong",null,".format",-1),fn=n("code",null,"'.multipart'",-1),yn=n("br",null,null,-1),wn=n("strong",null,".charset",-1),Rn=n("code",null,"utf-8",-1),Sn=t(`<hr><h1 id="custom-renderers" tabindex="-1"><a class="header-anchor" href="#custom-renderers" aria-hidden="true">#</a> Custom renderers</h1><p>要实现自定义渲染器，你应该重写<code>BaseRenderer</code>，设置 <code>.media_type</code>和<code>.format</code>属性，并且实现 <code>.render(self, data, media_type=None, renderer_context=None)</code> 方法。<br> 这个方法应当返回一个字节bytestring，它将被用于HTTP响应的主体。<br> 传递给 <code>.render()</code> 方法的参数是：</p><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> <code>data</code></h3><p>请求数据，由 <code>Response()</code> 实例化设置。</p><h3 id="media-type-none" tabindex="-1"><a class="header-anchor" href="#media-type-none" aria-hidden="true">#</a> <code>media_type=None</code></h3><p>可选的。如果提供，这是由内容协商阶段确定的所接受的媒体类型。<br> 根据客户端的 <code>Accept:</code> 头，这可能比渲染器的 <code>media_type</code> 属性更具体，可能包括媒体类型参数。例如 <code>&quot;application/json; nested=true&quot;</code>。</p><h3 id="renderer-context-none" tabindex="-1"><a class="header-anchor" href="#renderer-context-none" aria-hidden="true">#</a> <code>renderer_context=None</code></h3><p>可选的。如果提供，这是一个由view提供的上下文信息的字典。<br> 默认情况下这个字典会包括以下键： <code>view</code>, <code>request</code>, <code>response</code>, <code>args</code>, <code>kwargs</code>。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>下面是一个示例明文渲染器，它将使用参数作为响应 <code>data</code> 的内容返回响应。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>encoding <span class="token keyword">import</span> smart_unicode
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> renderers
<span class="token keyword">class</span> <span class="token class-name">PlainTextRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;txt&#39;</span>
    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>charset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置字符集" tabindex="-1"><a class="header-anchor" href="#设置字符集" aria-hidden="true">#</a> 设置字符集</h2><p>假设默认的渲染器类正在使用 <code>UTF-8</code> 编码。要使用其他编码，请在渲染器设置 <code>charset</code> 属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PlainTextRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;txt&#39;</span>
    charset <span class="token operator">=</span> <span class="token string">&#39;iso-8859-1&#39;</span>
    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>charset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果一个渲染类返回了一个unicode字符串，则响应内容将被<code>Response</code>类强制转换成bytestring，渲染器上的设置的 <code>charset</code> 属性将用于确定编码。<br> 如果渲染器返回一个bytestring表示原始的二进制内容，则应该设置字符集的值为 <code>None</code>，确保响应请求头的 <code>Content-Type</code> 中不会设置 <code>charset</code> 值。<br> 在某些情况下你可能还需要将 <code>render_style</code> 属性设置成 <code>&#39;binary&#39;</code>。这么做也将确保可浏览的API不会尝试将二进制内容显示为字符串。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">JPEGRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;image/jpeg&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;jpg&#39;</span>
    charset <span class="token operator">=</span> <span class="token boolean">None</span>
    render_style <span class="token operator">=</span> <span class="token string">&#39;binary&#39;</span>
    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="高级渲染器使用" tabindex="-1"><a class="header-anchor" href="#高级渲染器使用" aria-hidden="true">#</a> 高级渲染器使用</h1><p>你可以使用REST framework的渲染器做一些非常灵活的事情。一些例子...</p><ul><li>根据请求的媒体类型，从同一个路径既能提供单独的或者嵌套的表示。</li><li>提供常规HTML网页和来自同一路径的基于JSON的API响应。</li><li>为API客户端指定要使用的多种类型的HTML表示形式。</li><li>未指定渲染器的媒体类型，例如使用 <code>media_type = &#39;image/*&#39;</code>，并使用 <code>Accept</code> 标头来更改响应的编码。</li></ul><h2 id="媒体类型的不同行为" tabindex="-1"><a class="header-anchor" href="#媒体类型的不同行为" aria-hidden="true">#</a> 媒体类型的不同行为</h2><p>在某些情况下，你可能希望视图根据所接受的媒体类型使用不同的序列化样式。如果你需要实现这个功能，你可以根据 <code>request.accepted_renderer</code> 来确定将用于响应的协商渲染器。<br> 例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TemplateHTMLRenderer<span class="token punctuation">,</span> JSONRenderer<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">list_users</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    一个可以返回系统中用户的JSON或HTML表示的视图。
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Users<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>accepted_renderer<span class="token punctuation">.</span><span class="token builtin">format</span> <span class="token operator">==</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">:</span>
        <span class="token comment"># TemplateHTMLRenderer 采用一个上下文的字典，</span>
        <span class="token comment"># 并且额外需要一个 &#39;template_name&#39;。</span>
        <span class="token comment"># 它不需要序列化。</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">:</span> queryset<span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token string">&#39;list_users.html&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># JSONRenderer 需要正常的序列化数据。</span>
    serializer <span class="token operator">=</span> UserSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>queryset<span class="token punctuation">)</span>
    data <span class="token operator">=</span> serializer<span class="token punctuation">.</span>data
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不明确的媒体类型" tabindex="-1"><a class="header-anchor" href="#不明确的媒体类型" aria-hidden="true">#</a> 不明确的媒体类型</h2><p>在某些情况下你可能希望渲染器提供一些列媒体类型。 在这种情况下，你可以通过为 <code>media_type</code> 设置诸如 <code>image/*</code> 或 <code>*/*</code>这样的值来指定应该响应的媒体类型。<br> 如果你指定了渲染器的媒体类型，你应该确保在返回响应时使用 <code>content_type</code> 属性明确指定媒体类型。 例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="设计你的媒体类型" tabindex="-1"><a class="header-anchor" href="#设计你的媒体类型" aria-hidden="true">#</a> 设计你的媒体类型</h2>`,28),Tn=n("code",null,"JSON",-1),xn={href:"http://timelessrepo.com/haters-gonna-hateoas",target:"_blank",rel:"noopener noreferrer"},En=n("br",null,null,-1),An={href:"http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven",target:"_blank",rel:"noopener noreferrer"},qn=n("br",null,null,-1),jn={href:"http://developer.github.com/v3/media/",target:"_blank",rel:"noopener noreferrer"},Ln={href:"http://www.amundsen.com/media-types/collection/",target:"_blank",rel:"noopener noreferrer"},Nn=n("h2",{id:"html错误视图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#html错误视图","aria-hidden":"true"},"#"),s(" HTML错误视图")],-1),Mn=n("code",null,"Http404",-1),Pn=n("code",null,"PermissionDenied",-1),Hn=n("code",null,"APIException",-1),On=n("br",null,null,-1),Jn=n("code",null,"TemplateHTMLRenderer",-1),In=n("code",null,"StaticHTMLRenderer",-1),Cn={href:"https://docs.djangoproject.com/en/stable/topics/http/views/#customizing-error-views",target:"_blank",rel:"noopener noreferrer"},Dn=n("br",null,null,-1),Un=t('<ul><li>加载并渲染一个名为 <code>{status_code}.html</code>的模板。</li><li>加载并渲染一个名为 <code>api_exception.html</code>的模板。</li><li>渲染HTTP状态码和文本，例如 &quot;404 Not Found&quot;。</li></ul><p>模板们将使用一个包括<code>status_code</code>和<code>details</code>的 <code>RequestContext</code> 渲染。<br><strong>注意</strong>: 如果设置了 <code>DEBUG=True</code>，Django将展示它的标准回溯错误页面而不是渲染HTTP状态码和文本。</p><hr><h1 id="第三方包" tabindex="-1"><a class="header-anchor" href="#第三方包" aria-hidden="true">#</a> 第三方包</h1><p>以下第三方包都是可用的。</p><h2 id="yaml" tabindex="-1"><a class="header-anchor" href="#yaml" aria-hidden="true">#</a> YAML</h2>',6),Fn={href:"http://jpadilla.github.io/django-rest-framework-yaml/",target:"_blank",rel:"noopener noreferrer"},zn={href:"http://www.yaml.org/",target:"_blank",rel:"noopener noreferrer"},Bn=t(`<h4 id="安装和配置" tabindex="-1"><a class="header-anchor" href="#安装和配置" aria-hidden="true">#</a> 安装和配置</h4><p>使用pip安装。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ pip install djangorestframework-yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改你的REST framework设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_yaml.parsers.YAMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_yaml.renderers.YAMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h2>`,6),Vn={href:"http://jpadilla.github.io/django-rest-framework-xml/",target:"_blank",rel:"noopener noreferrer"},Gn=t(`<h4 id="安装和配置-1" tabindex="-1"><a class="header-anchor" href="#安装和配置-1" aria-hidden="true">#</a> 安装和配置</h4><p>使用pip安装。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ pip install djangorestframework-xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改你的REST framework设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_xml.parsers.XMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_xml.renderers.XMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h2>`,6),Wn={href:"http://jpadilla.github.io/django-rest-framework-jsonp/",target:"_blank",rel:"noopener noreferrer"},Xn=n("hr",null,null,-1),Yn=n("strong",null,"警告",-1),Kn={href:"http://www.w3.org/TR/cors/",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"JSONP",-1),Qn={href:"http://www.django-rest-framework.org/topics/ajax-csrf-cors/",target:"_blank",rel:"noopener noreferrer"},Zn=n("br",null,null,-1),ns=n("code",null,"jsonp",-1),ss={href:"http://stackoverflow.com/questions/613962/is-jsonp-safe-to-use",target:"_blank",rel:"noopener noreferrer"},es=n("code",null,"GET",-1),as=t(`<hr><h4 id="安装和配置-2" tabindex="-1"><a class="header-anchor" href="#安装和配置-2" aria-hidden="true">#</a> 安装和配置</h4><p>使用pip安装。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ pip install djangorestframework-jsonp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改你的REST framework设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_jsonp.renderers.JSONPRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="messagepack" tabindex="-1"><a class="header-anchor" href="#messagepack" aria-hidden="true">#</a> MessagePack</h2>`,7),ts={href:"http://msgpack.org/",target:"_blank",rel:"noopener noreferrer"},os={href:"https://github.com/juanriaza",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://github.com/juanriaza/django-rest-framework-msgpack",target:"_blank",rel:"noopener noreferrer"},ps=n("h2",{id:"csv",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#csv","aria-hidden":"true"},"#"),s(" CSV")],-1),cs={href:"https://github.com/mjumbewu",target:"_blank",rel:"noopener noreferrer"},ls={href:"https://github.com/mjumbewu/django-rest-framework-csv",target:"_blank",rel:"noopener noreferrer"},is=n("h2",{id:"ultrajson",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ultrajson","aria-hidden":"true"},"#"),s(" UltraJSON")],-1),ds={href:"https://github.com/esnme/ultrajson",target:"_blank",rel:"noopener noreferrer"},us={href:"https://github.com/hzy",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://github.com/gizmag/drf-ujson-renderer",target:"_blank",rel:"noopener noreferrer"},hs=n("h2",{id:"camelcase-json",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#camelcase-json","aria-hidden":"true"},"#"),s(" CamelCase JSON")],-1),ms={href:"https://github.com/vbabiy/djangorestframework-camel-case",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://github.com/vbabiy",target:"_blank",rel:"noopener noreferrer"},bs=n("h2",{id:"pandas-csv-excel-png",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pandas-csv-excel-png","aria-hidden":"true"},"#"),s(" Pandas (CSV, Excel, PNG)")],-1),vs={href:"https://github.com/wq/django-rest-pandas",target:"_blank",rel:"noopener noreferrer"},gs={href:"http://pandas.pydata.org/",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,".xls",-1),ys=n("code",null,".xlsx",-1),ws={href:"https://github.com/wq/django-rest-pandas#supported-formats",target:"_blank",rel:"noopener noreferrer"},Rs={href:"https://github.com/wq",target:"_blank",rel:"noopener noreferrer"},Ss={href:"https://github.com/sheppard",target:"_blank",rel:"noopener noreferrer"},Ts=n("h2",{id:"latex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#latex","aria-hidden":"true"},"#"),s(" LaTeX")],-1),xs={href:"https://github.com/mypebble/rest-framework-latex",target:"_blank",rel:"noopener noreferrer"},Es={href:"https://github.com/mypebble",target:"_blank",rel:"noopener noreferrer"};function As(qs,js){const e=r("ExternalLinkIcon");return p(),c("div",null,[i,n("blockquote",null,[n("p",null,[s("在将TemplateResponse实例返回给客户端之前，必须渲染它。渲染过程采用模板和上下文的中间表示，并将其转换为可以提供给客户端的最终字节流。"),d,s(" — "),n("a",u,[s("Django 文档"),a(e)])])]),k,h,n("p",null,[s("视图的有效渲染器集合始终被定义为一个元素都是类的列表。当输入视图时，REST框架将对传入请求执行内容协商，并确定最适合的渲染器来满足请求。"),m,s(" 内容协商的基本过程包括检查请求的"),_,s("头，以确定响应中期望的媒体类型。URL上可选的格式后缀可以用于显式请求特定表示。例如URL"),b,s("可能是始终返回JSON数据的路径。"),v,s(" 有关详细信息，请参阅有关"),n("a",g,[s("内容协商"),a(e)]),s("的文档。")]),f,n("p",null,[s("指定你的API的渲染器类时要考虑到每个媒体类型要分配哪些优先级，这一点非常重要。如果一个客户端不能指定它可以接受的表示形式，例如发送一个"),y,s("头，或者不包含一个"),w,s("头，那么REST框架将选择列表中用于响应的第一个渲染器。"),R,s(" 例如，如果你的API提供JSON响应和HTML可浏览的API，则可能需要将"),S,s("设置为你的默认渲染器，以便向不指定"),T,s("标头的客户端发送"),x,s("响应。"),E,s(" 如果你的API包含可以根据请求提供常规网页和API响应的视图，那么你就可以考虑使用"),A,s("作为你的默认渲染器，以便能在那些发送"),n("a",q,[s("破坏的接收头"),a(e)]),s("的旧版本的浏览器上能很好的展示。")]),j,n("p",null,[s("你可以使用"),L,s("来返回使用REST框架的常规HTML页面，或者从单个路径返回HTML和API响应。"),N,s(" 如果你正在构建使用 "),M,s(" 和其他渲染类的网站，你应该考虑将"),P,s("列为"),H,s("列表中的第一个类，这样即使对于发送格式不正确的"),O,s("头文件的浏览器它也将被优先排序。"),J,s(" 有关"),I,s("用法的更多示例，请参阅"),n("a",C,[s("_HTML&Forms_主题页"),a(e)]),s("。"),D,U,s(": "),F,z,B,s(": "),V,G,W,s(": "),X,Y,s(" 也可以看看: "),K]),$,n("p",null,[s("有关更多信息，请参阅"),n("a",Q,[s("HTML和表单"),a(e)]),s("文档。"),Z,nn,s(": "),sn,en,an,s(": "),tn,on,rn,s(": "),pn,cn,ln,s(": "),dn]),un,n("p",null,[s("此渲染器用于渲染HTML multipart表单数据。 "),kn,s("，而是用于创建测试请求，使用REST framework的 "),n("a",hn,[s("测试客户端和测试请求工厂"),a(e)]),s("。"),mn,_n,s(": "),bn,vn,gn,s(": "),fn,yn,wn,s(": "),Rn]),Sn,n("p",null,[s("许多Web API的目标，简单的具有超链接的 "),Tn,s(" 响应可能就已经足够了。如果你想完全拥抱RESTful设计和"),n("a",xn,[s("HATEOAS"),a(e)]),s("则需要更详细地考虑媒体类型的设计和使用。"),En,s(" 用"),n("a",An,[s("Roy Fielding的话"),a(e)]),s('来说，"REST API 应该花费所有的描述性努力来定义用于表示资源和驱动应用程序状态的媒体类型（们），或者为现有的标准媒体类型定义扩展关系名称和/或超文本启用标记。"。'),qn,s(" 有关自定义媒体类型的优秀示例，请参阅GitHub关于自定义 "),n("a",jn,[s("application/vnd.github+json"),a(e)]),s(" 媒体类型的应用以及 Mike Amundsen的IANA认可的 "),n("a",Ln,[s("application/vnd.collection+json"),a(e)]),s(" JSON超媒体。")]),Nn,n("p",null,[s("通常渲染器都具有相同的行为，无论它处理的是正常的响应还是由异常引起的响应，如 "),Mn,s(" 或 "),Pn,s(" 异常，或者一个 "),Hn,s(" 的子类。"),On,s(" 如果你正在使用 "),Jn,s(" 或 "),In,s(" 时抛出了异常，行为略有不同。并且反映 "),n("a",Cn,[s("Django对错误视图的默认处理"),a(e)]),s("."),Dn,s(" 由HTML渲染器引发和处理的异常将尝试按照优先顺序使用以下方法之一进行渲染。")]),Un,n("p",null,[n("a",Fn,[s("REST framework YAML"),a(e)]),s(" 提供 "),n("a",zn,[s("YAML"),a(e)]),s(" 解析和渲染支持。它之前直接包含在REST framework 包中，现在被替代为第三方包支持。")]),Bn,n("p",null,[n("a",Vn,[s("REST Framework XML"),a(e)]),s(" 提供了一个简单的非正式XML格式。它之前直接包含在REST framework 包中，现在被替代为第三方包支持。")]),Gn,n("p",null,[n("a",Wn,[s("REST framework JSONP"),a(e)]),s(" 提供JSONP渲染支持。它之前直接包含在REST framework 包中，现在被替代为第三方包支持。")]),Xn,n("p",null,[Yn,s(": 如果你需要跨域的AJAX请求，你通常应该使用更现代化的"),n("a",Kn,[s("CORS"),a(e)]),s("方法代替"),$n,s("。更多详细信息请参阅"),n("a",Qn,[s("CORS文档"),a(e)]),s("。"),Zn,ns,s(" 本质上是一个浏览器hack方法，"),n("a",ss,[s("仅适用于全局可读的API路径"),a(e)]),s("，其中"),es,s("请求未经身份验证，并且不需要任何用户权限。")]),as,n("p",null,[n("a",ts,[s("MessagePack"),a(e)]),s("是一种快速，高效的二进制序列化格式。"),n("a",os,[s("Juan Riaza"),a(e)]),s("维护着"),n("a",rs,[s("djangorestframework-msgpack"),a(e)]),s(" 包，它为REST framework提供MessagePack渲染器和解析器支持。")]),ps,n("p",null,[s("逗号分隔的值是纯文本数据格式，可以轻松导入到电子表格应用中。"),n("a",cs,[s("Mjumbe Poe"),a(e)]),s("维护着"),n("a",ls,[s("djangorestframework-csv"),a(e)]),s("包，它为REST framework提供了CSV渲染器支持。")]),is,n("p",null,[n("a",ds,[s("UltraJSON"),a(e)]),s("是一个优化的C JSON编码器，可以显著提高JSON渲染速度。"),n("a",us,[s("Jacob Haslehurst"),a(e)]),s("维护着使用UJSON包实现JSON渲染的"),n("a",ks,[s("drf-ujson-renderer"),a(e)]),s("包。")]),hs,n("p",null,[n("a",ms,[s("djangorestframework-camel-case"),a(e)]),s("为REST framework提供了驼峰样式的JSON渲染器和解析器。这使序列化程序可以使用Python风格的下划线字段名，但是在API中显示成Javascript样式的驼峰字段名。它被"),n("a",_s,[s("Vitaly Babiy"),a(e)]),s("维护着。")]),bs,n("p",null,[n("a",vs,[s("Django REST Pandas"),a(e)]),s("提供了一个序列化器和渲染器，通过"),n("a",gs,[s("Pandas"),a(e)]),s(" DataFrame API提供额外的数据处理和输出。Django REST Pandas包括Pandas风格的CSV文件，Excel表格(包括 "),fs,s(" 和 "),ys,s(")以及许多"),n("a",ws,[s("其他格式"),a(e)]),s("的渲染器。作为"),n("a",Rs,[s("wq 项目"),a(e)]),s("的一部分由"),n("a",Ss,[s("S. Andrew Sheppard"),a(e)]),s("维护着。")]),Ts,n("p",null,[n("a",xs,[s("Rest Framework Latex"),a(e)]),s("提供了一个使用Laulatex输出PDF的渲染器。它由"),n("a",Es,[s("Pebble (S/F Software)"),a(e)]),s("维护着。")])])}const Ms=o(l,[["render",As],["__file","08.Renderers（渲染器）.html.vue"]]);export{Ms as default};
