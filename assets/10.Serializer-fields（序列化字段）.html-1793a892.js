import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as i,a,b as n,d as e,f as o}from"./app-cfbf85c1.js";const l={},d=a("h1",{id:"serializer-fields-序列化字段",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#serializer-fields-序列化字段","aria-hidden":"true"},"#"),n(" Serializer-fields（序列化字段）")],-1),r={href:"https://docs.djangoproject.com/en/stable/ref/forms/api/#django.forms.Form.cleaned_data",target:"_blank",rel:"noopener noreferrer"},u=o(`<p>序列化字段负责在原始数据和内部数据类型之间转换。它们同样负责校验输入的值，以及从父级对象查询和设置值。</p><hr><p><strong>NOTE:</strong> 序列化的字段在<code>fields.py</code>中定义，但是根据惯例，你应该使用<code>from rest_framework import serializers</code>然后使用<code>serializers.&lt;FieldName&gt;</code>来引用它们。</p><hr><h2 id="核心参数" tabindex="-1"><a class="header-anchor" href="#核心参数" aria-hidden="true">#</a> 核心参数</h2><p>每一个序列化字段类的构造函数都至少接收这些参数。一下字段类接口额外的，特定字段类型的参数，但是下面这些参数是一定会接收的。</p><h3 id="read-only" tabindex="-1"><a class="header-anchor" href="#read-only" aria-hidden="true">#</a> <code>read_only</code></h3><p>只读字段只能包含在API的输出中，但是不应该包含在创建或者更新的操作。任何错误的包含在序列化输入的只读字段都会被忽略。<br> 将其设置为<code>True</code>确保序列化时使用这个字段，但是创建或者更新的反序列化操作时不会使用。<br> 默认是<code>False</code></p><h3 id="write-only" tabindex="-1"><a class="header-anchor" href="#write-only" aria-hidden="true">#</a> <code>Write_only</code></h3><p>将其设置为<code>True</code>确保在创建或者更新的反序列化操作时使用，但是序列化时不适用这个字段。</p><h3 id="required" tabindex="-1"><a class="header-anchor" href="#required" aria-hidden="true">#</a> <code>required</code></h3><p>如果在反序列化时候没有提供这个字段，通常会抛出一个错误。如果在反序列化操作中不需要这个字段，将其设置为<code>False</code>。<br> 将其设置为<code>False</code>同样允许在序列化实例时忽略对象属性或者字段的键。如果这个键不存在，则该键根本不会出现在输出中。<br> 默认是<code>True</code></p><h3 id="default" tabindex="-1"><a class="header-anchor" href="#default" aria-hidden="true">#</a> <code>default</code></h3><p>如果设置了这个参数，提供的默认值会在这个字段没有提供输入值的时候使用。如果没有设置，默认不填充这个属性。<br> 部分更新操作不会接受<code>default</code>的值，部分更新情况下，仅返回输入数据中提供字段校验后的值。<br> 可以设置为函数或其他可调用对象，这种情况下，每次使用该值都会对其评估。被调用时不接受参数，如果可调用的对象有<code>requires_context = True</code>属性，则序列化字段将作为参数传进可调用对象中。<br> 例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CurrentUserDefault</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    可以作为序列化字段参数\`default=...\`的值。
    返回当前用户
    &quot;&quot;&quot;</span>
    requires_context <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer_field<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> serializer_field<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当序列化实例时，如果实例或者字典没有对应的属性或键，会返回默认值。<br> 记住设置字段的<code>default</code>值，意味着这个字段不是必须的，同时包含<code>default</code>和<code>required</code>关键字参数都是无效的，并且会引发错误。</p><h3 id="allow-null" tabindex="-1"><a class="header-anchor" href="#allow-null" aria-hidden="true">#</a> <code>allow_null</code></h3><p>一般情况下，如果向序列化字段传递<code>None</code>是会抛出异常的。如果<code>None</code>可以作为值，将这个参数设置为<code>True</code><br> 默认是<code>False</code></p><h3 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> <code>source</code></h3><p>用于填充这个字段的属性名称。可以是一个仅接受<code>self</code>参数的方法，例如<code>URLField(source=&#39;get_absolute_url&#39;)</code>，或者使用点分符遍历属性，例如<code>EmailField(source=&#39;user.email&#39;)</code>。当使用点分符序列化字段时，如果在属性遍历期间不存在任何对象或该对象为空，则可能需要提供“默认”值。<br> 该值<code>source=&#39;*&#39;</code>具有特殊含义，用于指示应将整个对象传递给该字段。这对于创建嵌套表示或对于需要访问完整对象才能确定输出表示的字段很有用。<br> 默认为字段名称。</p><h3 id="validators" tabindex="-1"><a class="header-anchor" href="#validators" aria-hidden="true">#</a> <code>validators</code></h3><p>验证器功能列表，应将其应用于输入字段输入，并引发验证错误或简单地返回。验证器函数通常应该提高<code>serializers.ValidationError</code>，但是<code>ValidationError</code>还支持Django的内置函数，以便与Django代码库或第三方Django软件包中定义的验证器兼容。</p><h3 id="error-message" tabindex="-1"><a class="header-anchor" href="#error-message" aria-hidden="true">#</a> <code>error_message</code></h3><p>错误代码到错误消息的字典。</p><h3 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> <code>label</code></h3><p>一个简短的文本字符串，可用作HTML表单字段或其他描述性元素中的字段名称。</p><h3 id="help-text" tabindex="-1"><a class="header-anchor" href="#help-text" aria-hidden="true">#</a> <code>help_text</code></h3><p>可用作在HTML表单字段或其他描述性元素中对该字段进行描述的文本字符串。</p><h3 id="initial" tabindex="-1"><a class="header-anchor" href="#initial" aria-hidden="true">#</a> <code>initial</code></h3><p>该值应用于预先填充HTML表单字段的值。您可以将callable传递给它，就像处理任何常规Django一样<code>Field</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">class</span> <span class="token class-name">ExampleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    day <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>initial<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> <code>style</code></h3><p>键值对字典，可用于控制渲染器应如何渲染字段。<br> 这里的两个例子是<code>&#39;input_type&#39;</code>和<code>&#39;base_template&#39;</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Use &lt;input type=&quot;password&quot;&gt; for the input.</span>
password <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;input_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token comment"># Use a radio input instead of a select input.</span>
color_channel <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>
    choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;base_template&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;radio.html&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),k={href:"https://q1mi.github.io/Django-REST-framework-documentation/topics/html-and-forms/",target:"_blank",rel:"noopener noreferrer"},h=o(`<hr><h1 id="布尔字段" tabindex="-1"><a class="header-anchor" href="#布尔字段" aria-hidden="true">#</a> 布尔字段</h1><h2 id="booleanfield" tabindex="-1"><a class="header-anchor" href="#booleanfield" aria-hidden="true">#</a> BooleanField</h2><p>布尔值的表示。<br> 使用HTML编码的表单输入时，请注意，即使省略了值，也将始终将其设置为<code>False</code>，即使该字段<code>default=True</code>指定了选项。这是因为HTML复选框输入通过忽略该值来表示未选中状态，因此REST框架将忽略视为其为空复选框输入。<br> 注意，Django2.1移除了<code>models.BooleanField</code>中的<code>blank</code>关键字参数。在Django 2.1之前，<code>models.BooleanField</code>字段始终为<code>blank = True</code>。所以从Django2.1开始，默认的<code>serializers.BooleanField</code>实例将被生成没有<code>required</code> 关键字参数的值（即等同于<code>required = True</code>）而之前版本的Django，将生成默认的BooleanField实例带有<code>required = False</code>选项。如果你想手动控制它的行为，在序列化程序类上显式声明<code>BooleanField</code>，或者使用<code>extra_kwargs</code>选项来设置<code>required</code>参数。</p><h2 id="nullbooleanfield" tabindex="-1"><a class="header-anchor" href="#nullbooleanfield" aria-hidden="true">#</a> NullBooleanField</h2><p>表示布尔值，也接受None为有效值。<br> 对应于<code>django.db.models.fields.NullBooleanField</code>.<br><strong>签名：</strong> <code>NullBooleanField()</code></p><hr><h1 id="字符串字段" tabindex="-1"><a class="header-anchor" href="#字符串字段" aria-hidden="true">#</a> 字符串字段</h1><h2 id="charfield" tabindex="-1"><a class="header-anchor" href="#charfield" aria-hidden="true">#</a> CharField</h2><p>表示文本。（可选）验证文本是否短于max_length和长于min_length。<br> 对应于<code>django.db.models.fields.CharField</code>或<code>django.db.models.fields.TextField</code>。<br><strong>签名：</strong> <code>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</code></p><ul><li><code>max_length</code> - 验证输入的字符数不超过此数量。</li><li><code>min_length</code> - 验证输入的字符数不少于此。</li><li><code>allow_blank</code> - 如果设置为<code>True</code>，则应将空字符串视为有效值。如果设置为，<code>False</code>则认为空字符串无效，并将引发验证错误。默认为<code>False</code>。</li><li><code>trim_whitespace</code> - 如果设置为，<code>True</code>则修剪前后的空白。默认为<code>True</code>。</li></ul><p>该 <code>allow_null</code>选项也可用于字符串字段，尽管不建议使用<code>allow_blank</code>。设置<code>allow_blank=True</code>和<code>allow_null=True</code>都是有效的，但是这样做意味着对于字符串表示而言，将存在两种不同类型的空值，这可能导致数据不一致和细微的应用程序错误。</p><h2 id="emailfield" tabindex="-1"><a class="header-anchor" href="#emailfield" aria-hidden="true">#</a> EmailField</h2><p>表示文本形式，将文本验证为有效的电子邮件地址。<br> 对应于<code>django.db.models.fields.EmailField</code><br><strong>签名：</strong> <code>EmailField(max_length=None, min_length=None, allow_blank=False)</code></p><h2 id="regexfield" tabindex="-1"><a class="header-anchor" href="#regexfield" aria-hidden="true">#</a> RegexField</h2><p>表示文本形式，用于验证给定值是否与某个正则表达式匹配。<br> 对应于<code>django.forms.fields.RegexField</code>。<br><strong>签名：</strong> <code>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</code><br> 强制<code>regex</code>参数可以是字符串，也可以是已编译的python正则表达式对象。<br> 使用Django的<code>django.core.validators.RegexValidator</code>进行验证。</p><h2 id="slugfield" tabindex="-1"><a class="header-anchor" href="#slugfield" aria-hidden="true">#</a> SlugField</h2><p>一个验证输入满足表达式<code>[a-zA-Z0-9_-]+</code>的RegexField字段。<br> 对应于<code>django.db.models.fields.SlugField</code>.<br><strong>签名：</strong> <code>SlugField(max_length=50, min_length=None, allow_blank=False)</code></p><h2 id="urlfield" tabindex="-1"><a class="header-anchor" href="#urlfield" aria-hidden="true">#</a> URLField</h2><p>一个验证输入满足URL格式的<code>RegexField</code>字段。要求使用以下格式的完全限定网址<code>http://&lt;host&gt;/&lt;path&gt;</code>.<br> 对应于 <code>django.db.models.fields.URLField</code>。 使用Django的 <code>django.core.validators.URLValidator</code>进行验证。<br><strong>签名：</strong> <code>URLField(max_length=200, min_length=None, allow_blank=False)</code></p><h2 id="uuidfield" tabindex="-1"><a class="header-anchor" href="#uuidfield" aria-hidden="true">#</a> UUIDField</h2><p>确保输入为有效UUID字符串的字段。该<code>to_internal_value</code>方法将返回一个<code>uuid.UUID</code>实例。在输出时，该字段将返回标准连字符格式的字符串，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;de305d54-75b4-431b-adb2-eb6b9e546013&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>签名：</strong> <code>UUIDField(format=&#39;hex_verbose&#39;)</code></p><ul><li>format: 确定uuid值的表示格式 <ul><li><code>&#39;hex_verbose&#39;</code> - 规范的十六进制表示形式，包括连字符： <code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></li><li><code>&#39;hex&#39;</code> - UUID的紧凑十六进制表示形式，不包括连字符： <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code></li><li><code>&#39;int&#39;</code> - UUID的128位整数表示： <code>&quot;123456789012312313134124512351145145114&quot;</code></li><li><code>&#39;urn&#39;</code> - UUID的RFC 4122 URN表示形式： <code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code> 更改<code>format</code>参数仅影响表示形式值。 所有格式均被<code>to_internal_value</code>接受。</li></ul></li></ul><h2 id="filepathfield" tabindex="-1"><a class="header-anchor" href="#filepathfield" aria-hidden="true">#</a> FilePathField</h2><p>一个字段，其选择仅限于文件系统上某个目录中的文件名<br> 对应于 <code>django.forms.fields.FilePathField</code>.<br><strong>签名：</strong> <code>FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs)</code></p><ul><li><code>path</code> - 目录的绝对文件系统路径，应从中选择此FilePathField。</li><li><code>match</code> - FilePathField将用于过滤文件名的正则表达式（作为字符串）。</li><li><code>recursive</code> - 指定是否应包含路径的所有子目录。默认值为<code>False</code>。</li><li><code>allow_files</code> - 指定是否应包含指定位置的文件。默认值为<code>True</code>。这个参数和下面的 <code>allow_folders</code> 必须有一个为 <code>True</code>。</li><li><code>allow_folders</code> - 指定是否应包含指定位置的文件夹。默认值为<code>False</code>。 这个参数和上面的 <code>allow_files</code> 必须有一个为 <code>True</code>。</li></ul><h2 id="ipaddressfield" tabindex="-1"><a class="header-anchor" href="#ipaddressfield" aria-hidden="true">#</a> IPAddressField</h2><p>确保输入为有效IPv4或IPv6字符串的字段。<br> 对应于 <code>django.forms.fields.IPAddressField</code> 和 <code>django.forms.fields.GenericIPAddressField</code>.<br><strong>签名：</strong>: <code>IPAddressField(protocol=&#39;both&#39;, unpack_ipv4=False, **options)</code></p><ul><li><code>protocol</code> 将有效输入限制为指定的协议。接受的值是“两个”（默认），“ IPv4”或“ IPv6”。匹配不区分大小写。</li><li><code>unpack_ipv4</code> 解压缩IPv4映射的地址，如:: ffff：192.0.2.1。如果启用此选项，则该地址将解压缩为192.0.2.1。默认设置为禁用。只能在协议设置为“ both”时使用。</li></ul><h1 id="数字字段" tabindex="-1"><a class="header-anchor" href="#数字字段" aria-hidden="true">#</a> 数字字段</h1><h2 id="integerfield" tabindex="-1"><a class="header-anchor" href="#integerfield" aria-hidden="true">#</a> IntegerField</h2><p>表示整数<br> 对应于 <code>django.db.models.fields.IntegerField</code>, <code>django.db.models.fields.SmallIntegerField</code>, <code>django.db.models.fields.PositiveIntegerField</code> 和 <code>django.db.models.fields.PositiveSmallIntegerField</code>。<br><strong>签名</strong>: <code>IntegerField(max_value=None, min_value=None)</code></p><ul><li><code>max_value</code> 验证提供的数字不大于此值。</li><li><code>min_value</code> 验证提供的数字不小于此值。</li></ul><h2 id="floatfield" tabindex="-1"><a class="header-anchor" href="#floatfield" aria-hidden="true">#</a> FloatField</h2><p>表示浮点<br> 对应于 <code>django.db.models.fields.FloatField</code>.<br><strong>Signature</strong>: <code>FloatField(max_value=None, min_value=None)</code></p><ul><li><code>max_value</code> 验证提供的数字不大于此值。</li><li><code>min_value</code> 验证提供的数字不小于此值。</li></ul><h2 id="decimalfield" tabindex="-1"><a class="header-anchor" href="#decimalfield" aria-hidden="true">#</a> DecimalField</h2><p>表示十进制形式，在Python中由Decimal实例表示。<br> 对应于 <code>django.db.models.fields.DecimalField</code>。<br><strong>签名</strong>: <code>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)</code></p><ul><li><code>max_digits</code> 数字中允许的最大位数。它必须是<code>None</code>或大于或等于的整数<code>decimal_places</code>。</li><li><code>decimal_places</code> 与数字一起存储的小数位数。</li><li><code>coerce_to_string</code> 如果表示形式应该返回字符串值就设置为<code>True</code>, 或者应该返回<code>Decimal</code>对象的话就设置为 <code>False</code>。除非覆盖，否则默认为设置中<code>COERCE_DECIMAL_TO_STRING</code>设置键相同值的<code>True</code>值。 如果<code>Decimal</code>对象由序列化程序返回，则最终输出格式将由渲染器确定。请注意，设置<code>localize</code>会将值强制设为<code>True</code>。</li><li><code>max_value</code> 验证提供的数字不大于此值。</li><li><code>min_value</code> 验证提供的数字不小于此值。</li><li><code>localize</code> 设置为<code>True</code>启用以基于当前语言环境本地化输入和输出。这也将迫使<code>coerce_to_string</code>到<code>True</code>。默认为<code>False</code>。请注意，如果你<code>USE_L10N=True</code>在设置文件中进行了设置，则会启用数据格式设置。</li><li><code>rounding</code> 设置取值到配置精度的舍入模式。有效值是[<code>decimal</code> 模块的舍入模式][python-decimal-rounding-modes]。默认是<code>None</code>。</li></ul><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h4><p>要验证最大为999且分辨率为2位小数的数字，请使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializers<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并使用十进制小数位数来验证小于十亿的数字：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializers<span class="token punctuation">.</span>DecimalField<span class="token punctuation">(</span>max_digits<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span> decimal_places<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该字段还带有一个可选参数<code>coerce_to_string</code>。如果设置为<code>True</code>表示将作为字符串输出。如果设置为<code>False</code>，表示将作为<code>Decimal</code>实例保留，最终表示将由渲染器确定。<br> 如果未设置，则默认为与<code>COERCE_DECIMAL_TO_STRING</code>设置相同的值，<code>True</code>除非另行设置。</p><h1 id="日期时间字段" tabindex="-1"><a class="header-anchor" href="#日期时间字段" aria-hidden="true">#</a> 日期时间字段</h1><h2 id="datetimefield" tabindex="-1"><a class="header-anchor" href="#datetimefield" aria-hidden="true">#</a> DateTimeField</h2><p>表示日期和时间。<br> 对应于 <code>django.db.models.fields.DateTimeField</code>.<br><strong>签名：</strong> <code>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</code></p><ul><li><code>format</code> - 代表输出格式的字符串。如果未指定，则默认为与<code>DATETIME_FORMAT</code>设置键相同的值，<code>&#39;iso-8601&#39;</code>除非设置，否则为默认值。设置为格式字符串表示<code>to_representation</code>应将返回值强制为字符串输出。格式字符串如下所述。将此值设置为<code>None</code>表示应由<code>to_representation</code>返回Python <code>datetime</code>对象。在这种情况下，日期时间编码将由渲染器确定。</li><li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。如果未指定，<code>DATETIME_INPUT_FORMATS</code>将使用该设置，默认为<code>[&#39;iso-8601&#39;]</code>。</li><li><code>default_timezone</code> - 一个<code>pytz.timezone</code>表示的时区。如果没有指定，并且<code>USE_TZ</code>设置打开，这个参数的默认值是[当前时区][django-current-timezone]。如果<code>USE_TZ</code>没有打开，会使用原始的日期对象。</li></ul><h4 id="datetimefield-format-strings" tabindex="-1"><a class="header-anchor" href="#datetimefield-format-strings" aria-hidden="true">#</a> <code>DateTimeField</code> format strings.</h4>`,52),m={href:"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior",target:"_blank",rel:"noopener noreferrer"},b=a("code",null,"'iso-8601'",-1),g={href:"http://www.w3.org/TR/NOTE-datetime",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"'2013-01-29T12:34:56.000000Z'",-1),_=a("br",null,null,-1),f=a("code",null,"None",-1),y=a("code",null,"datetime",-1),F=a("code",null,"to_representation",-1),x=o(`<h4 id="auto-now-and-auto-now-add-model-fields" tabindex="-1"><a class="header-anchor" href="#auto-now-and-auto-now-add-model-fields" aria-hidden="true">#</a> <code>auto_now</code> and <code>auto_now_add</code> model fields.</h4><p>使用<code>ModelSerializer</code>或<code>HyperlinkedModelSerializer</code>，请注意，默认情况下带有<code>auto_now=True</code>或任何模型字段<code>auto_now_add=True</code>都将使用<code>read_only=True</code>的序列化器字段。<br> 如果要覆盖此行为，则需要<code>DateTimeField</code>在序列化程序上显式声明。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Comment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="datefield" tabindex="-1"><a class="header-anchor" href="#datefield" aria-hidden="true">#</a> DateField</h2><p>表示日期<br> 对应于 <code>django.db.models.fields.DateField</code><br><strong>签名：</strong> <code>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</code></p><ul><li><code>format</code> - 代表输出格式的字符串。如果未指定，则默认为与<code>DATE_FORMAT</code>设置键相同的值，除非设置，否则默认值为<code>&#39;iso-8601&#39;</code>。设置为格式字符串表示<code>to_representation</code>应将返回值强制为字符串输出。格式字符串如下所述。将此值设置为<code>None</code>表示Python的<code>date</code>对象应由<code>to_representation</code>返回。在这种情况下，时间编码将由渲染器确定。</li><li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。如果未指定，<code>DATE_INPUT_FORMATS</code>将使用该设置，默认为<code>[&#39;iso-8601&#39;]</code>。</li></ul><h4 id="datefield-格式化字符串" tabindex="-1"><a class="header-anchor" href="#datefield-格式化字符串" aria-hidden="true">#</a> <code>DateField</code> 格式化字符串</h4>`,7),w={href:"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior",target:"_blank",rel:"noopener noreferrer"},T=a("code",null,"'iso-8601'",-1),D={href:"http://www.w3.org/TR/NOTE-datetime",target:"_blank",rel:"noopener noreferrer"},q=a("code",null,"'2013-01-29'",-1),z=o('<h2 id="timefield" tabindex="-1"><a class="header-anchor" href="#timefield" aria-hidden="true">#</a> TimeField</h2><p>表示时间<br> 对应于 <code>django.db.models.fields.TimeField</code><br><strong>签名：</strong> <code>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</code></p><ul><li><code>format</code> - 代表输出格式的字符串。如果未指定，则默认为与<code>TIME_FORMAT</code>设置键相同的值，<code>&#39;iso-8601&#39;</code>除非设置，否则为默认值。设置为格式字符串表示<code>to_representation</code>应将返回值强制为字符串输出。格式字符串如下所述。将此值设置为<code>None</code>表示Python <code>time</code>对象应由<code>to_representation</code>返回。在这种情况下，时间编码将由渲染器确定。</li><li><code>input_formats</code> - 表示可用于解析日期的输入格式的字符串列表。如果未指定，<code>TIME_INPUT_FORMATS</code>将使用该设置，默认为<code>[&#39;iso-8601&#39;]</code></li></ul><h4 id="timefield-format-strings" tabindex="-1"><a class="header-anchor" href="#timefield-format-strings" aria-hidden="true">#</a> <code>TimeField</code> format strings</h4>',4),S={href:"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior",target:"_blank",rel:"noopener noreferrer"},j=a("code",null,"'iso-8601'",-1),E={href:"http://www.w3.org/TR/NOTE-datetime",target:"_blank",rel:"noopener noreferrer"},N=a("code",null,"'12:34:56.000000'",-1),I=o('<h2 id="durationfield" tabindex="-1"><a class="header-anchor" href="#durationfield" aria-hidden="true">#</a> DurationField</h2><p>表示时间间隔 对应于 <code>django.db.models.fields.DurationField</code><br> 在这些字段的<code>validated_data</code>将包含一个<code>datetime.timedelta</code>实例。该表示形式是遵循此格式的字符串<code>&#39;[DD] [HH:[MM:]]ss[.uuuuuu]&#39;</code>。<br><strong>签名：</strong> <code>DurationField()</code></p><ul><li><code>max_value</code> 验证提供的间隔不大于这个值。</li><li><code>min_value</code> 验证提供的间隔不小于这个值。</li></ul><hr><h1 id="选择字段" tabindex="-1"><a class="header-anchor" href="#选择字段" aria-hidden="true">#</a> 选择字段</h1><h2 id="choicefield" tabindex="-1"><a class="header-anchor" href="#choicefield" aria-hidden="true">#</a> ChoiceField</h2><p>可以接受有限选择集中的值的字段。<br><code>ModelSerializer</code>如果相应的模型字段包含<code>choices=…</code>参数，则用于自动生成字段。<br><strong>签名：</strong> <code>ChoiceField(choices)</code></p><ul><li><code>choices</code> - 有效值列表或<code>(key, display_name)</code>元组列表。</li><li><code>allow_blank</code> - 如果设置为<code>True</code>，则应将空字符串视为有效值。如果设置为，<code>False</code>则认为空字符串无效，并将引发验证错误。默认为<code>False</code>。</li><li><code>html_cutoff</code> - 如果设置，则将是HTML select下拉列表将显示的最大选择数。可以用来确保自动生成的ChoiceFields具有非常大的选择范围，不会阻止模板的呈现。默认为<code>None</code>。</li><li><code>html_cutoff_text</code> - 如果设置了此选项，则如果在HTML选择下拉列表中已截断最大数量的项目，则它将显示文本指示器。默认为<code>&quot;More than {count} items…&quot;</code>。</li></ul><p>无论是<code>allow_blank</code>与<code>allow_null</code>上有效的选项<code>ChoiceField</code>，但我们强烈建议您只使用一个，而不是两个。<code>allow_blank</code>应该首选用于文本选择，并且<code>allow_null</code>应该首选用于数字或其他非文本选择。</p><h2 id="multiplechoicefield" tabindex="-1"><a class="header-anchor" href="#multiplechoicefield" aria-hidden="true">#</a> MultipleChoiceField</h2><p>一个可以接受一组零个，一个或多个值的字段，这些值是从一组有限的选择中选择的。接受一个强制性参数。<code>to_internal_value</code>返回<code>set</code>包含所选值的。<br><strong>签名：</strong> <code>MultipleChoiceField(choices)</code></p><ul><li><code>choices</code> - 有效值列表或<code>(key, display_name)</code>元组列表。</li><li><code>allow_blank</code> - 如果设置为<code>True</code>，则应将空字符串视为有效值。如果设置为，<code>False</code>则认为空字符串无效，并将引发验证错误。默认为<code>False</code>。</li><li><code>html_cutoff</code> - 如果设置，则将是HTML select下拉列表将显示的最大选择数。可以用来确保自动生成的ChoiceFields具有非常大的选择范围，不会阻止模板的呈现。默认为<code>None</code>。</li><li><code>html_cutoff_text</code> - 如果设置了此选项，则如果在HTML选择下拉列表中已截断最大数量的项目，则它将显示文本指示器。默认为<code>&quot;More than {count} items…&quot;</code>。</li></ul><p>与<code>ChoiceField</code>一样，<code>allow_blank</code>和<code>allow_null</code>选项都有效，尽管强烈建议您仅使用一个，而不要同时使用。<code>allow_blank</code>应该首选用于文本选择，并且<code>allow_null</code>应该首选用于数字或其他非文本选择。</p><hr><h1 id="文件上传字段" tabindex="-1"><a class="header-anchor" href="#文件上传字段" aria-hidden="true">#</a> 文件上传字段</h1><h4 id="解析和文件上传" tabindex="-1"><a class="header-anchor" href="#解析和文件上传" aria-hidden="true">#</a> 解析和文件上传</h4>',16),M=a("code",null,"FileField",-1),P=a("code",null,"ImageField",-1),R=a("code",null,"MultiPartParser",-1),L=a("code",null,"FileUploadParser",-1),U={href:"https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-FILE_UPLOAD_HANDLERS",target:"_blank",rel:"noopener noreferrer"},C=o(`<h2 id="filefield" tabindex="-1"><a class="header-anchor" href="#filefield" aria-hidden="true">#</a> FileField</h2><p>表示文件。执行Django的标准FileField验证。<br> 对应于 <code>django.forms.fields.FileField</code>.<br><strong>签名：</strong> <code>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</code></p><ul><li><code>max_length</code> - 指定文件名的最大长度。</li><li><code>allow_empty_file</code> - 指定是否允许空文件。</li><li><code>use_url</code> - 如果设置为<code>True</code>则URL字符串值将用于输出表示。如果设置为<code>False</code>则文件名字符串值将用于输出表示。默认为<code>UPLOADED_FILES_USE_URL</code>设置键的值，除非另有设置，否则为默认值<code>True</code>。</li></ul><h2 id="imagefield" tabindex="-1"><a class="header-anchor" href="#imagefield" aria-hidden="true">#</a> ImageField</h2><p>表示图片。 验证上传的文件内容是否与已知图像格式匹配。<br> 对应于 <code>django.forms.fields.ImageField</code>.<br><strong>签名：</strong> <code>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</code></p><ul><li><code>max_length</code> - 指定文件名的最大长度。</li><li><code>allow_empty_file</code> - 指定是否允许空文件。</li><li><code>use_url</code> - 如果设置为<code>True</code>则URL字符串值将用于输出表示。如果设置为<code>False</code>则文件名字符串值将用于输出表示。默认为<code>UPLOADED_FILES_USE_URL</code>设置键的值，除非另有设置，否则为默认值<code>True</code>。</li></ul><p>需要安装<code>Pillow</code>包或<code>PIL</code>包。推荐使用<code>Pillow</code>包，因为<code>PIL</code>包已经不积极维护。</p><hr><h1 id="复合字段" tabindex="-1"><a class="header-anchor" href="#复合字段" aria-hidden="true">#</a> 复合字段</h1><h2 id="listfield" tabindex="-1"><a class="header-anchor" href="#listfield" aria-hidden="true">#</a> ListField</h2><p>验证对象列表的字段类。<br><strong>签名</strong>: <code>ListField(child, min_length=None, max_length=None)</code></p><ul><li><code>child</code> - 应该用于验证列表中对象的字段实例。如果未提供此参数，则将不验证列表中的对象。</li><li><code>min_length</code> - 验证列表中包含的元素不少于此数量。</li><li><code>max_length</code> - 验证列表中所包含的元素数量不超过此数量。</li></ul><p>例如，要验证整数列表，可以使用如下所示的内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>scores <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ListField<span class="token punctuation">(</span>
   child<span class="token operator">=</span>serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>min_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max_value<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ListField</code>类还支持声明式样式，该样式允许你编写可重用的列表字段类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">StringListField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ListField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    child <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以在整个应用程序中重用自定义的<code>StringListField</code>类，而不必为其提供<code>child</code>参数。</p><h2 id="dictfield" tabindex="-1"><a class="header-anchor" href="#dictfield" aria-hidden="true">#</a> DictField</h2><p>一个验证对象字典的字段类。 <code>DictField</code> 中的key都总是假定为字符串值。<br><strong>签名</strong>: <code>DictField(child)</code></p><ul><li><code>child</code> - 应该用于验证字典中值的字段实例。如果未提供此参数，则将不验证映射中的值。</li><li><code>allow_empty</code> - 指定是否允许空字典。</li></ul><p>例如，要创建一个验证字符串到字符串映射的字段，你可以编写如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>document <span class="token operator">=</span> DictField<span class="token punctuation">(</span>child<span class="token operator">=</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以像使用一样使用声明式样式<code>ListField</code>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DocumentField</span><span class="token punctuation">(</span>DictField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    child <span class="token operator">=</span> CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hstorefield" tabindex="-1"><a class="header-anchor" href="#hstorefield" aria-hidden="true">#</a> HStoreField</h2><p>预留的<code>DictField</code>兼容Django的postgres<code>HStoreField</code>字段。<br><strong>签名：</strong> <code>HStoreField(child=&lt;A_FIELD_INSTANCE&gt;, allow_empty=True)</code></p><ul><li><code>child</code> - 应该用于验证字典中值的字段实例。如果未提供此参数，则将不验证映射中的值。</li><li><code>allow_empty</code> - 指定是否允许空字典。</li></ul><p>注意子字段<strong>必须</strong>是<code>CharField</code>的实例，因为hstore的扩展存储值为字符串。</p><h2 id="jsonfield" tabindex="-1"><a class="header-anchor" href="#jsonfield" aria-hidden="true">#</a> JSONField</h2><p>一个字段类，用于验证传入的数据结构是否包含有效的JSON原语。在其备用二进制模式下，它将表示并验证JSON编码的二进制字符串。<br><strong>签名</strong>: <code>JSONField(binary)</code></p><ul><li><code>binary</code> - 如果设置为<code>True</code>则该字段将输出并验证JSON编码的字符串，而不是原始数据结构。默认为<code>False</code>。</li><li><code>encoder</code> - 使用这个编码器序列化输入的对象。默认是<code>None</code>。</li></ul><hr><h1 id="杂项字段" tabindex="-1"><a class="header-anchor" href="#杂项字段" aria-hidden="true">#</a> 杂项字段</h1><h2 id="readonlyfield" tabindex="-1"><a class="header-anchor" href="#readonlyfield" aria-hidden="true">#</a> ReadOnlyField</h2><p>一个字段类，仅返回该字段的值而无需修改。<br><code>ModelSerializer</code>当包含与属性而不是模型字段相关的字段名称时，默认情况下使用此字段。<br><strong>签名</strong>: <code>ReadOnlyField()</code><br> 例如，如果<code>has_expired</code>是<code>Account</code>模型的属性，则以下序列化器将自动将其生成为<code>ReadOnlyField</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;has_expired&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hiddenfield" tabindex="-1"><a class="header-anchor" href="#hiddenfield" aria-hidden="true">#</a> HiddenField</h2><p>一个字段类，它不基于用户输入获取值，而是从默认值或可调用对象获取其值。<br><strong>签名</strong>: <code>HiddenField()</code><br> 例如，要包括一个始终提供当前时间的字段作为序列化程序验证数据的一部分，则可以使用以下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>modified <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HiddenField<span class="token punctuation">(</span>default<span class="token operator">=</span>timezone<span class="token punctuation">.</span>now<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,39),A=a("code",null,"HiddenField",-1),O=a("br",null,null,-1),H=a("code",null,"HiddenField",-1),V={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/validators/",target:"_blank",rel:"noopener noreferrer"},B=o(`<h2 id="modelfield" tabindex="-1"><a class="header-anchor" href="#modelfield" aria-hidden="true">#</a> ModelField</h2><p>可以绑定到任意模型字段的通用字段。 <code>ModelField</code>类将序列化/反序列化任务委托给与其关联的model字段。 此字段可用于为自定义模型字段创建序列化程序字段，而不必创建新的自定义序列化程序字段。<br> 该字段用于<code>ModelSerializer</code>对应于自定义模型字段类。<br><strong>签名:</strong> <code>ModelField(model_field=&lt;Django ModelField instance&gt;)</code><br><code>ModelField</code>一般用于内部使用，但如果需要的话可以通过你的API使用。为了正确地实例化<code>ModelField</code>，必须传递一个附加到实例化模型的字段。例如：<code>ModelField(model_field=MyModel()._meta.get_field(&#39;custom_field&#39;))</code>。</p><h2 id="serializermethodfield" tabindex="-1"><a class="header-anchor" href="#serializermethodfield" aria-hidden="true">#</a> SerializerMethodField</h2><p>这是一个只读字段。它通过在附加的序列化器类上调用一个方法来获取其值。它可以用于将任何类型的数据添加到对象的序列化表示中。<br><strong>签名</strong>: <code>SerializerMethodField(method_name=None)</code></p><ul><li><code>method_name</code> - 要调用的序列化程序上的方法的名称。如果未包括，则默认为<code>get_&lt;field_name&gt;</code>。</li></ul><p><code>method_name</code>参数引用的序列化程序方法应接受单个参数（除了之外<code>self</code>），该参数是要序列化的对象。它应该返回要包含在对象的序列化表示中的任何内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>timezone <span class="token keyword">import</span> now
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    days_since_joined <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> User
    <span class="token keyword">def</span> <span class="token function">get_days_since_joined</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> obj<span class="token punctuation">.</span>date_joined<span class="token punctuation">)</span><span class="token punctuation">.</span>days
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="自定义字段" tabindex="-1"><a class="header-anchor" href="#自定义字段" aria-hidden="true">#</a> 自定义字段</h1><p>如果要创建自定义字段，则需要继承<code>Field</code>类，然后重写<code>.to_representation()</code>和<code>.to_internal_value()</code>方法之一或二者。这两种方法用于在初始数据类型和原始的可序列化数据类型之间进行转换。基本数据类型通常是任何数字，字符串，布尔，<code>date/time/datetime</code>或<code>None</code>。它们也可以是仅包含其他原始对象的任何列表或字典之类的对象。根据您使用的渲染器，可能支持其他类型。<br><code>.to_representation()</code> 调用该方法可将初始数据类型转换为原始的可序列化数据类型。<br><code>to_internal_value()</code>调用该方法可将原始数据类型恢复为其内部python表示形式。如果数据无效，则此方法应抛出一个 <code>serializers.ValidationError</code>。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="基础自定义字段" tabindex="-1"><a class="header-anchor" href="#基础自定义字段" aria-hidden="true">#</a> 基础自定义字段</h3><p>让我们看一个序列化代表RGB颜色值的类的示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A color represented in the RGB colorspace.
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>red <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> green <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> blue <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>red <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token keyword">and</span> green <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token keyword">and</span> blue <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>red<span class="token punctuation">,</span> self<span class="token punctuation">.</span>green<span class="token punctuation">,</span> self<span class="token punctuation">.</span>blue <span class="token operator">=</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue
<span class="token keyword">class</span> <span class="token class-name">ColorField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Color objects are serialized into &#39;rgb(#, #, #)&#39; notation.
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;rgb(%d, %d, %d)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>red<span class="token punctuation">,</span> value<span class="token punctuation">.</span>green<span class="token punctuation">,</span> value<span class="token punctuation">.</span>blue<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
        red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，字段值被视为映射到对象上的属性。如果需要自定义如何访问和设置字段值，则需要覆盖<code>.get_attribute()</code>和/或<code>.get_value()</code>。<br> 例如，让我们创建一个字段，该字段可用来表示要序列化的对象的类名：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ClassNameField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_attribute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># We pass the object instance onto \`to_representation\`,</span>
        <span class="token comment"># not just the field attribute.</span>
        <span class="token keyword">return</span> instance
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Serialize the value&#39;s class name.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="抛出验证异常" tabindex="-1"><a class="header-anchor" href="#抛出验证异常" aria-hidden="true">#</a> 抛出验证异常</h4><p>我们上面的<code>ColorField</code>类目前不执行任何数据验证。 为了指示无效数据，我们应该引发一个<code>serializers.ValidationError</code>，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        msg <span class="token operator">=</span> <span class="token string">&#39;Incorrect type. Expected a string, but got %s&#39;</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span>msg <span class="token operator">%</span> <span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;Incorrect format. Expected \`rgb(#,#,#)\`.&#39;</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>col <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">or</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;Value out of range. Must be between 0 and 255.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.fail()</code>方法是引发的快捷方式<code>ValidationError</code>，它从<code>error_messages</code>字典中获取消息字符串。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>default_error_messages <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;incorrect_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Incorrect type. Expected a string, but got {input_type}&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;incorrect_format&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Incorrect format. Expected \`rgb(#,#,#)\`.&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;out_of_range&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Value out of range. Must be between 0 and 255.&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;incorrect_type&#39;</span><span class="token punctuation">,</span> input_type<span class="token operator">=</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;incorrect_format&#39;</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>col <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">or</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;out_of_range&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种样式使您的错误消息与代码更清晰地分开，因此应首选。</p><h3 id="使用source" tabindex="-1"><a class="header-anchor" href="#使用source" aria-hidden="true">#</a> 使用<code>source=&#39;*&#39;</code></h3><p>这里我们来看一个例子，一个 <em>平面</em> 的<code>DataPoint</code>模型，有<code>x_coordinate</code>和<code>y_coordinate</code>字段。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DataPoint</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    label <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
    x_coordinate <span class="token operator">=</span> models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    y_coordinate <span class="token operator">=</span> models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义字段和<code>source=&#39;*&#39;</code>，我们可以生成坐标对的嵌套表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CoordinateField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>x_coordinate<span class="token punctuation">,</span>
            <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>y_coordinate
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret
    <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;x_coordinate&quot;</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&quot;y_coordinate&quot;</span><span class="token punctuation">:</span> data<span class="token punctuation">[</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret
<span class="token keyword">class</span> <span class="token class-name">DataPointSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    coordinates <span class="token operator">=</span> CoordinateField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> DataPoint
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这个例子不能进行验证。部分因为这个原因，在真实的项目中，使用有<code>source=&#39;*&#39;</code>参数的序列化器和两个有自己的<code>source</code>参数指向关联的字段的<code>IntegerField</code>实例来表示嵌套坐标更好。</p><ul><li><code>to_representation</code> 传入整个<code>DataPoint</code>对象，必须将其映射到所需的输出。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> instance <span class="token operator">=</span> DataPoint<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">,</span> x_coordinate<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y_coordinate<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out_serializer<span class="token punctuation">.</span>data
ReturnDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>除非我们的字段时只读的，<code>to_internal_value</code>必须映射回适合更新目标对象的字典。使用<code>source=&#39;*&#39;</code>，<code>to_internal_value</code>的返回可以更新验证的数据字典，而不是单个键。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;label&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Second Example&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;coordinates&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>validated_data
OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Second Example&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;y_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;x_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了完整性，让我们再次做同样的事情，但使用上面建议的嵌套序列化程序方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">NestedCoordinateSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;x_coordinate&#39;</span><span class="token punctuation">)</span>
    y <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;y_coordinate&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">DataPointSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    coordinates <span class="token operator">=</span> NestedCoordinateSerializer<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> DataPoint
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里在<code>IntegerField</code>声明中处理目标和源属性对(<code>x</code>和<code>x_coherate</code>，<code>y</code>和<code>y_cocoate</code>)之间的映射。它就是接受<code>source=‘*’</code>的<code>NestedConsulateSerializer</code>。<br> 我们的新<code>DataPointSerializer</code>与自定义字段方法行为相同。<br> 序列化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> out_serializer<span class="token punctuation">.</span>data
ReturnDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;testing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">,</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反序列化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> in_serializer<span class="token punctuation">.</span>validated_data
OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;still testing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;x_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token punctuation">(</span><span class="token string">&#39;y_coordinate&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们同样有内置的验证器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_data <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;label&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;still testing&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">&quot;coordinates&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;x&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token string">&quot;y&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_serializer <span class="token operator">=</span> DataPointSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>invalid_data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> invalid_serializer<span class="token punctuation">.</span>errors
ReturnDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;coordinates&#39;</span><span class="token punctuation">,</span>
             <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A valid integer is required.&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A valid integer is required.&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，嵌套序列化程序方法将是第一个尝试的方法。当嵌套的序列化程序变得不可行或过于复杂时，您可以使用自定义字段方法。</p><h1 id="第三方包" tabindex="-1"><a class="header-anchor" href="#第三方包" aria-hidden="true">#</a> 第三方包</h1><p>以下第三方软件包也可使用。</p><h2 id="drf-compound-fields" tabindex="-1"><a class="header-anchor" href="#drf-compound-fields" aria-hidden="true">#</a> DRF Compound Fields</h2>`,44),G={href:"https://drf-compound-fields.readthedocs.io/",target:"_blank",rel:"noopener noreferrer"},J=a("code",null,"many = True",-1),Z=a("h2",{id:"drf-extra-fields",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#drf-extra-fields","aria-hidden":"true"},"#"),n(" DRF Extra Fields")],-1),W={href:"https://github.com/Hipo/drf-extra-fields",target:"_blank",rel:"noopener noreferrer"},$=a("code",null,"Base64ImageField",-1),K=a("code",null,"PointField",-1),Q=a("h2",{id:"djangrestframework-recursive",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#djangrestframework-recursive","aria-hidden":"true"},"#"),n(" djangrestframework-recursive")],-1),X={href:"https://github.com/heywbj/django-rest-framework-recursive",target:"_blank",rel:"noopener noreferrer"},Y=a("code",null,"RecursiveField",-1),nn=a("h2",{id:"django-rest-framework-gis",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#django-rest-framework-gis","aria-hidden":"true"},"#"),n(" django-rest-framework-gis")],-1),an={href:"https://github.com/djangonauts/django-rest-framework-gis",target:"_blank",rel:"noopener noreferrer"},sn=a("code",null,"GeometryField",-1),en=a("h2",{id:"django-rest-framework-hstore",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#django-rest-framework-hstore","aria-hidden":"true"},"#"),n(" django-rest-framework-hstore")],-1),on={href:"https://github.com/djangonauts/django-rest-framework-hstore",target:"_blank",rel:"noopener noreferrer"},tn=a("code",null,"HStoreField",-1),cn={href:"https://github.com/djangonauts/django-hstore",target:"_blank",rel:"noopener noreferrer"},pn=a("code",null,"DictionaryField",-1);function ln(dn,rn){const s=c("ExternalLinkIcon");return p(),i("div",null,[d,a("blockquote",null,[a("p",null,[n("每一个Form类的字段不仅负责验证数据，同样需要“清理”数据 — 标准化为统一的格式。 — "),a("a",r,[n("Django documentation"),e(s)])])]),u,a("p",null,[n("有关更多详细信息，请参见 "),a("a",k,[n("HTML & Forms"),e(s)]),n(" 文档。")]),h,a("p",null,[n("格式字符串可以是显式指定格式的"),a("a",m,[n("Python strftime formats"),e(s)]),n("，也可以是特殊字符串"),b,n("，它指示应使用"),a("a",g,[n("ISO 8601"),e(s)]),n("样式的日期时间。（例如"),v,n("）"),_,n(" 当将值"),f,n("用于格式时，"),y,n("对象将由"),F,n("返回，并且最终输出表示形式将由renderer类确定。")]),x,a("p",null,[n("格式字符串可以是显式指定格式的"),a("a",w,[n("Python strftime formats"),e(s)]),n("，也可以是特殊字符串"),T,n("，它指示应使用"),a("a",D,[n("ISO 8601"),e(s)]),n("样式时间。（例如"),q,n("）")]),z,a("p",null,[n("格式字符串可以是显式指定格式的"),a("a",S,[n("Python strftime 格式"),e(s)]),n("，也可以是特殊字符串"),j,n("，它指示应使用"),a("a",E,[n("ISO 8601"),e(s)]),n("样式时间。（例如"),N,n("）")]),I,a("p",null,[M,n(" 和 "),P,n("类是仅适用于使用"),R,n("或"),L,n("的。大多数解析器（例如JSON）不支持文件上传。Django的常规"),a("a",U,[n("FILE_UPLOAD_HANDLERS"),e(s)]),n("用于处理上传的文件。")]),C,a("p",null,[A,n("通常只有在你需要基于某些预先提供的字段值来运行某些验证，而又不想将所有这些字段公开给最终用户时，才需要使用该类。"),O,n(" 有关 "),H,n(" 的更多示例，请参照"),a("a",V,[n("validators"),e(s)]),n(" 文档。")]),B,a("p",null,[a("a",G,[n("drf-compound-fields"),e(s)]),n("包提供了“复合”序列化器字段，例如简单值列表，可以由其他字段来描述，而不是带有"),J,n("选项的序列化器。 还提供了用于键入字典和值的字段，这些字段可以是特定类型，也可以是该类型的项目的列表。")]),Z,a("p",null,[a("a",W,[n("drf-extra-fields"),e(s)]),n(" 包为REST框架提供了额外的序列化器字段，包括"),$,n("和"),K,n("类。")]),Q,a("p",null,[a("a",X,[n("djangorestframework-recursive"),e(s)]),n(" 包提供了一个"),Y,n("，用于序列化和反序列化递归结构")]),nn,a("p",null,[a("a",an,[n("django-rest-framework-gis"),e(s)]),n(" 包为django rest框架提供了地理插件，例如"),sn,n("字段和GeoJSON序列化器。")]),en,a("p",null,[n("The "),a("a",on,[n("django-rest-framework-hstore"),e(s)]),n(" 包提供了一个"),tn,n("来支持 "),a("a",cn,[n("django-hstore"),e(s)]),n(),pn,n(" 模型字段。")])])}const hn=t(l,[["render",ln],["__file","10.Serializer-fields（序列化字段）.html.vue"]]);export{hn as default};
