import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as r,a,b as n,d as s,f as t}from"./app-3f278ba4.js";const p={},l=a("h1",{id:"authentication-认证",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#authentication-认证","aria-hidden":"true"},"#"),n(" Authentication（认证）")],-1),d=a("br",null,null,-1),u={href:"http://jacobian.org/writing/rest-worst-practices/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/permissions_zh/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/throttling/",target:"_blank",rel:"noopener noreferrer"},m=a("br",null,null,-1),_=a("br",null,null,-1),b=a("br",null,null,-1),g=a("code",null,"request.user",-1),v=a("code",null,"contrib.auth",-1),f=a("code",null,"User",-1),w=a("br",null,null,-1),T=a("code",null,"request.auth",-1),A=a("hr",null,null,-1),y=a("strong",null,"注意：",-1),j=a("strong",null,"认证本身不会允许或拒绝传入的请求",-1),x=a("br",null,null,-1),S={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/permissions_zh/",target:"_blank",rel:"noopener noreferrer"},E=t(`<hr><h2 id="如何确定身份验证" tabindex="-1"><a class="header-anchor" href="#如何确定身份验证" aria-hidden="true">#</a> 如何确定身份验证</h2><p>认证方案总是被定义为一个类的列表。REST framework 将尝试使用列表中的每个类进行身份验证，并使用成功完成验证的第一个类的返回值设置 <code>request.user</code> 和<code>request.auth</code>。<br> 如果没有类进行验证，<code>request.user</code> 将被设置成 <code>django.contrib.auth.models.AnonymousUser</code>的实例，<code>request.auth</code> 将被设置成<code>None</code>。<br> 未认证请求的<code>request.user</code> 和 <code>request.auth</code> 的值可以使用 <code>UNAUTHENTICATED_USER</code>和<code>UNAUTHENTICATED_TOKEN</code> 设置进行修改。</p><h2 id="设置认证方案" tabindex="-1"><a class="header-anchor" href="#设置认证方案" aria-hidden="true">#</a> 设置认证方案</h2><p>可以使用 <code>DEFAULT_AUTHENTICATION_CLASSES</code> 设置全局的默认身份验证方案。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.authentication.BasicAuthentication&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.authentication.SessionAuthentication&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用基于<code>APIView</code>类视图的方式，在每个view或每个viewset基础上设置身份验证方案。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAuthenticated
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">)</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># \`django.contrib.auth.User\` 实例。</span>
            <span class="token string">&#39;auth&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># None</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果你使用基于函数的视图，那就使用<code>@api_view</code>装饰器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@authentication_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@permission_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># \`django.contrib.auth.User\` 实例。</span>
        <span class="token string">&#39;auth&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># None</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="未认证和禁止的响应" tabindex="-1"><a class="header-anchor" href="#未认证和禁止的响应" aria-hidden="true">#</a> 未认证和禁止的响应</h2><p>当未经身份验证的请求被拒绝时，有下面两种不同的错误代码可使用。</p>`,12),P={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2",target:"_blank",rel:"noopener noreferrer"},R={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4",target:"_blank",rel:"noopener noreferrer"},D=t('<p>HTTP 401 响应必须始终包括一个<code>WWW-Authenticate</code>头，指示客户端如何进行身份验证。 HTTP 403响应不包括<code>WWW-Authenticate</code>。<br> 具体使用哪种响应取决于认证方案。虽然可以使用多种认证方案，但是仅可以使用一种方案来确定响应的类型。<strong>在确定响应类型时，将使用视图上设置的第一个认证类。</strong><br> 注意，当一个请求通过了验证但是被拒绝执行请求的权限时，不管认证方案是什么，都要使用 <code>403 Permission Denied</code> 响应。</p><h2 id="apache-mod-wsgi-具体配置" tabindex="-1"><a class="header-anchor" href="#apache-mod-wsgi-具体配置" aria-hidden="true">#</a> Apache mod_wsgi 具体配置</h2>',2),N={href:"http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIPassAuthorization",target:"_blank",rel:"noopener noreferrer"},I=a("br",null,null,-1),H=a("code",null,"WSGIPassAuthorization",-1),q=a("code",null,"'On'",-1),O=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这可能会在服务器配置，虚拟主机，目录或.htaccess</span>
WSGIPassAuthorization On
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="api-参考" tabindex="-1"><a class="header-anchor" href="#api-参考" aria-hidden="true">#</a> API 参考</h1><h2 id="basicauthentication" tabindex="-1"><a class="header-anchor" href="#basicauthentication" aria-hidden="true">#</a> BasicAuthentication</h2>`,4),U={href:"http://tools.ietf.org/html/rfc2617",target:"_blank",rel:"noopener noreferrer"},W=a("br",null,null,-1),L=a("code",null,"BasicAuthentication",-1),C=t(`<ul><li><code>request.user</code> 将是一个 Django <code>User</code> 实例。</li><li><code>request.auth</code> 将是 <code>None</code>。</li></ul><p>那些被拒绝的未经身份验证的请求会返回使用适当WWW-Authenticate标头的<code>HTTP 401 Unauthorized</code>响应。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WWW<span class="token operator">-</span>Authenticate<span class="token punctuation">:</span> Basic realm<span class="token operator">=</span><span class="token string">&quot;api&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong> 如果你在生产中使用<code>BasicAuthentication</code>，那么你必须确保你的API仅在<code>https</code>中可用。你还应确保你的API客户端始终在登录时重新请求用户名和密码，并且不会将这些详细信息存储到持久存储中。</p><h2 id="tokenauthentication" tabindex="-1"><a class="header-anchor" href="#tokenauthentication" aria-hidden="true">#</a> TokenAuthentication</h2>`,5),F=a("br",null,null,-1),z=a("code",null,"TokenAuthentication",-1),B={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/authentication_zh/#setting-the-authentication-scheme",target:"_blank",rel:"noopener noreferrer"},J=a("code",null,"TokenAuthentication",-1),G=a("code",null,"INSTALLED_APPS",-1),M=a("code",null,"rest_framework.authtoken",-1),V=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;rest_framework.authtoken&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>注意：</strong> 确保在修改设置后运行一下<code>manage.py migrate</code>。<code>rest_framework.authtoken</code> app 会提交一些Django数据库迁移操作。</p><hr><p>你还需要为你的用户创建令牌。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token
token <span class="token operator">=</span> Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> token<span class="token punctuation">.</span>key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对客户端进行身份验证，token需要包含在 <code>Authorization</code>HTTP头中。密钥应该是以字符串&quot;Token&quot;为前缀，以空格分割的两个字符串。例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong> 如果你想在HTTP头中使用其他的关键字，比如<code>Bearer</code>，只需要继承<code>TokenAuthentication</code>类并设置 <code>keyword</code>类变量。<br> 如果认证成功，<code>TokenAuthentication</code> 提供以下认证信息：</p><ul><li><code>request.user</code> 将是一个Django <code>User</code> 实例。</li><li><code>request.auth</code> 将是一个<code>rest_framework.authtoken.models.Token</code> 实例。</li></ul><p>那些被拒绝的未经身份验证的请求会返回使用适当WWW-Authenticate标头的<code>HTTP 401 Unauthorized</code>响应。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WWW<span class="token operator">-</span>Authenticate<span class="token punctuation">:</span> Token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令行工具<code>curl</code> 可用于测试基于Token认证的API，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -X GET http://127.0.0.1:8000/api/example/ -H &#39;Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>注意：</strong> 如果你在生产环境下使用<code>TokenAuthentication</code>认证，你必须确保你的API仅在<code>https</code>可用。</p><hr><h4 id="生成tokens" tabindex="-1"><a class="header-anchor" href="#生成tokens" aria-hidden="true">#</a> 生成Tokens</h4><h5 id="通过使用信号" tabindex="-1"><a class="header-anchor" href="#通过使用信号" aria-hidden="true">#</a> 通过使用信号</h5><p>如果你希望每个用户拥有自动生成的令牌，你可以简单地捕获用户的<code>post_save</code>信号。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings
<span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signals <span class="token keyword">import</span> post_save
<span class="token keyword">from</span> django<span class="token punctuation">.</span>dispatch <span class="token keyword">import</span> receiver
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token
<span class="token decorator annotation punctuation">@receiver</span><span class="token punctuation">(</span>post_save<span class="token punctuation">,</span> sender<span class="token operator">=</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_auth_token</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> instance<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> created<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> created<span class="token punctuation">:</span>
        Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>instance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，你需要确保将此代码段放置在已安装的<code>models.py</code>模块或Django在启动时导入的其他位置。<br> 如果你已经创建了一些用户，则可以如下所示为所有现有用户生成令牌：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token
<span class="token keyword">for</span> user <span class="token keyword">in</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_or_create<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="通过暴露-api-端点" tabindex="-1"><a class="header-anchor" href="#通过暴露-api-端点" aria-hidden="true">#</a> 通过暴露 api 端点</h5><p>当使用<code>TokenAuthentication</code>时，你可能希望为客户端提供一个获取给定用户名和密码的令牌的机制。 REST framework 提供了一个内置的视图来提供这个功能。要使用它，需要将 <code>obtain_auth_token</code> 视图添加到你的URLconf：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken <span class="token keyword">import</span> views
urlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api-token-auth/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>obtain_auth_token<span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意URL正则匹配模式那里可以是你想要使用的任何内容。<br> 当使用form表单或JSON将有效的<code>username</code>和<code>password</code>字段POST提交到视图时，<code>obtain_auth_token</code>视图将返回JSON响应：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span> <span class="token string">&#39;token&#39;</span> <span class="token punctuation">:</span> <span class="token string">&#39;9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，默认的<code>obtain_auth_token</code>视图显式使用JSON请求和响应，而不是使用settings中配置的默认渲染器和解析器类。如果需要自定义版本的<code>obtain_auth_token</code>视图，可以通过重写<code>ObtainAuthToken</code>类，并在url conf中使用它来实现。<br> 默认情况下，没有权限或限制应用于<code>obtain_auth_token</code>视图。如果你希望应用限制，则需要重写视图类，并使用<code>throttle_classes</code>属性包含它们。</p><h5 id="with-django-admin" tabindex="-1"><a class="header-anchor" href="#with-django-admin" aria-hidden="true">#</a> With Django admin</h5><p>也可以通过管理界面手动创建令牌。如果你使用的是大型用户群，我们建议你动态修改<code>TokenAdmin</code>类，以根据你的需要进行自定义，更具体地说，将<code>user</code>字段声明为<code>raw_field</code>。<br><code>your_app/admin.py</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>admin <span class="token keyword">import</span> TokenAdmin
TokenAdmin<span class="token punctuation">.</span>raw_id_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="session认证" tabindex="-1"><a class="header-anchor" href="#session认证" aria-hidden="true">#</a> Session认证</h2><p>此认证方案使用Django的默认session后端进行身份验证。Session身份验证适用于与你的网站在相同的Session环境中运行的AJAX客户端。<br> 如果成功验证，<code>SessionAuthentication</code> 提供以下凭据。</p><ul><li><code>request.user</code> 是一个 Django <code>User</code> 实例。</li><li><code>request.auth</code> 是 <code>None</code>。</li></ul>`,35),X=a("code",null,"HTTP 403 Forbidden",-1),K=a("br",null,null,-1),Q=a("code",null,"PUT",-1),Y=a("code",null,"PATCH",-1),Z=a("code",null,"POST",-1),$=a("code",null,"DELETE",-1),nn={href:"https://docs.djangoproject.com/en/stable/ref/csrf/#ajax",target:"_blank",rel:"noopener noreferrer"},an=a("br",null,null,-1),en=a("strong",null,"警告",-1),sn=a("br",null,null,-1),tn=t(`<h1 id="自定义认证" tabindex="-1"><a class="header-anchor" href="#自定义认证" aria-hidden="true">#</a> 自定义认证</h1><p>要实现自定义的认证方案，要继承<code>BaseAuthentication</code>类并且重写<code>.authenticate(self, request)</code> 方法。如果认证成功，该方法应返回<code>(user, auth)</code>的二元元组，否则返回<code>None</code>。<br> 在某些情况下，你可能不想返回<code>None</code>，而是希望从<code>.authenticate()</code>方法抛出<code>AuthenticationFailed</code>异常。<br> 通常你应该采取的方法是：</p><ul><li>如果不尝试验证，返回<code>None</code>。还将检查任何其他正在使用的身份验证方案。</li><li>如果尝试验证但失败，则抛出<code>AuthenticationFailed</code>异常。无论任何权限检查也不检查任何其他身份验证方案，立即返回错误响应。</li></ul><p>你也_可以_重写<code>.authenticate_header(self, request)</code>方法。如果实现该方法，则应返回一个字符串，该字符串将用作<code>HTTP 401 Unauthorized</code>响应中的<code>WWW-Authenticate</code>头的值。<br> 如果<code>.authenticate_header()</code>方法未被重写，则认证方案将在未验证的请求被拒绝访问时返回<code>HTTP 403 Forbidden</code>响应。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>以下示例将以自定义请求标头中名称为&#39;X_USERNAME&#39;提供的用户名作为用户对任何传入请求进行身份验证。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> authentication
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> exceptions
<span class="token keyword">class</span> <span class="token class-name">ExampleAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>BaseAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;X_USERNAME&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> username<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>
        <span class="token keyword">except</span> User<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>AuthenticationFailed<span class="token punctuation">(</span><span class="token string">&#39;No such user&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="第三方包" tabindex="-1"><a class="header-anchor" href="#第三方包" aria-hidden="true">#</a> 第三方包</h1><p>以下第三方包都是可用的。</p><h2 id="django-oauth-toolkit" tabindex="-1"><a class="header-anchor" href="#django-oauth-toolkit" aria-hidden="true">#</a> Django OAuth Toolkit</h2>`,11),on={href:"https://github.com/evonove/django-oauth-toolkit",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://github.com/idan/oauthlib",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://github.com/evonove/",target:"_blank",rel:"noopener noreferrer"},pn=a("strong",null,"推荐使用的OAuth 2.0支持软件包",-1),ln=t(`<h4 id="安装和配置" tabindex="-1"><a class="header-anchor" href="#安装和配置" aria-hidden="true">#</a> 安装和配置</h4><p>使用<code>pip</code>安装。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install django-oauth-toolkit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把这个包添加到你的<code>INSTALLED_APPS</code>中，并且修改你的REST framework设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;oauth2_provider&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;oauth2_provider.ext.rest_framework.OAuth2Authentication&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),dn={href:"https://django-oauth-toolkit.readthedocs.io/en/latest/rest-framework/getting_started.html",target:"_blank",rel:"noopener noreferrer"},un=a("h2",{id:"django-rest-framework-oauth",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#django-rest-framework-oauth","aria-hidden":"true"},"#"),n(" Django REST framework OAuth")],-1),hn={href:"http://jpadilla.github.io/django-rest-framework-oauth/",target:"_blank",rel:"noopener noreferrer"},kn=a("br",null,null,-1),mn=t(`<h4 id="安装和配置-1" tabindex="-1"><a class="header-anchor" href="#安装和配置-1" aria-hidden="true">#</a> 安装和配置</h4><p>使用<code>pip</code>进行安装。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install djangorestframework-oauth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),_n={href:"http://jpadilla.github.io/django-rest-framework-oauth/authentication/",target:"_blank",rel:"noopener noreferrer"},bn={href:"http://jpadilla.github.io/django-rest-framework-oauth/permissions/",target:"_blank",rel:"noopener noreferrer"},gn=a("h2",{id:"digest-authentication",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#digest-authentication","aria-hidden":"true"},"#"),n(" Digest Authentication")],-1),vn={href:"https://github.com/juanriaza",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://github.com/juanriaza/django-rest-framework-digestauth",target:"_blank",rel:"noopener noreferrer"},wn=a("h2",{id:"django-oauth2-consumer",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#django-oauth2-consumer","aria-hidden":"true"},"#"),n(" Django OAuth2 Consumer")],-1),Tn={href:"https://github.com/Rediker-Software",target:"_blank",rel:"noopener noreferrer"},An={href:"https://github.com/Rediker-Software/doac",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://github.com/Rediker-Software/doac/blob/master/docs/integrations.md#",target:"_blank",rel:"noopener noreferrer"},jn=a("h2",{id:"json-web-token-authentication",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#json-web-token-authentication","aria-hidden":"true"},"#"),n(" JSON Web Token Authentication")],-1),xn={href:"https://github.com/GetBlimp",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://github.com/GetBlimp/django-rest-framework-jwt",target:"_blank",rel:"noopener noreferrer"},En=a("h2",{id:"hawk-http-authentication",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#hawk-http-authentication","aria-hidden":"true"},"#"),n(" Hawk HTTP Authentication")],-1),Pn={href:"https://hawkrest.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://mohawk.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://github.com/hueniverse/hawk",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://github.com/hueniverse/hawk",target:"_blank",rel:"noopener noreferrer"},In={href:"http://tools.ietf.org/html/draft-hammer-oauth-v2-mac-token-05",target:"_blank",rel:"noopener noreferrer"},Hn={href:"http://oauth.net/core/1.0a",target:"_blank",rel:"noopener noreferrer"},qn=a("h2",{id:"http-signature-authentication",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#http-signature-authentication","aria-hidden":"true"},"#"),n(" HTTP Signature Authentication")],-1),On={href:"https://datatracker.ietf.org/doc/draft-cavage-http-signatures/",target:"_blank",rel:"noopener noreferrer"},Un={href:"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://github.com/etoccalino/",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://github.com/etoccalino/django-rest-framework-httpsignature",target:"_blank",rel:"noopener noreferrer"},Cn=a("h2",{id:"djoser",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#djoser","aria-hidden":"true"},"#"),n(" Djoser")],-1),Fn={href:"https://github.com/sunscrapers/djoser",target:"_blank",rel:"noopener noreferrer"},zn=a("h2",{id:"django-rest-auth",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#django-rest-auth","aria-hidden":"true"},"#"),n(" django-rest-auth")],-1),Bn={href:"https://github.com/Tivix/django-rest-auth",target:"_blank",rel:"noopener noreferrer"},Jn=a("h2",{id:"django-rest-framework-social-oauth2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#django-rest-framework-social-oauth2","aria-hidden":"true"},"#"),n(" django-rest-framework-social-oauth2")],-1),Gn={href:"https://github.com/PhilipGarnero/django-rest-framework-social-oauth2",target:"_blank",rel:"noopener noreferrer"},Mn=a("h2",{id:"django-rest-knox",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#django-rest-knox","aria-hidden":"true"},"#"),n(" django-rest-knox")],-1),Vn={href:"https://github.com/James1345/django-rest-knox",target:"_blank",rel:"noopener noreferrer"};function Xn(Kn,Qn){const e=i("ExternalLinkIcon");return c(),r("div",null,[l,a("blockquote",null,[a("p",null,[n("身份验证功能需要可插拔。"),d,n(" — Jacob Kaplan-Moss, "),a("a",u,[n('"REST worst practices"'),s(e)])])]),a("p",null,[n("身份验证是将传入请求与一组标识凭据（例如请求来自的用户或其签名的令牌）相关联的机制。然后，"),a("a",h,[n("权限"),s(e)]),n(" 和 "),a("a",k,[n("限制"),s(e)]),n(" 可以使用这些凭据来确定是否应允许该请求。"),m,n(" REST framework 提供了一些开箱即用的身份验证方案，并且还允许你实现自定义方案。"),_,n(" 验证始终在视图的最开始进行，在执行权限和限制检查之前以及允许任何其他代码继续执行之前。"),b,g,n(" 属性通常被设置为"),v,n(" 包中 "),f,n(" 类的一个实例。"),w,T,n(" 属性用于任何其他身份验证信息，例如，它可以用于表示请求签名的身份验证令牌。")]),A,a("p",null,[y,n(" 不要忘了"),j,n("，它只是简单识别请求携带的凭证。"),x,n(" 有关如何设置API权限策略的信息，请参阅 "),a("a",S,[n("权限文档"),s(e)]),n("。")]),E,a("ul",null,[a("li",null,[a("a",P,[n("HTTP 401 未认证"),s(e)])]),a("li",null,[a("a",R,[n("HTTP 403 无权限"),s(e)])])]),D,a("p",null,[n("注意，如果使用 "),a("a",N,[n("Apache using mod_wsgi"),s(e)]),n("部署，认证头默认不会传递给WSGI应用程序，它假定由Apache处理认证，而不是在应用层面处理。"),I,n(" 如果你正在部署到Apache，并且使用任何non-session的身份验证，则需要显式配置mod_wsgi才能将所需的头文件传递给应用程序。这可以通过在适当的上下文中指定"),H,n("指令并将其设置为"),q,n("来完成。")]),O,a("p",null,[n("此认证方案使用"),a("a",U,[n("HTTP 基本认证"),s(e)]),n("，针对用户的用户名和密码进行认证。基本认证通常只适用于测试。"),W,n(" 如果认证成功 "),L,n(" 提供以下信息。")]),C,a("p",null,[n("该认证方案使用简单的基于Token的HTTP认证方案。Token认证适用于客户端 - 服务器设置，如本地桌面和移动客户端。"),F,n(" 要使用"),z,n("方案，你需要"),a("a",B,[n("配置认证类"),s(e)]),n(" 以便包含"),J,n("，另外在"),G,n("设置中还需要包含"),M,n("：")]),V,a("p",null,[n("那些被拒绝的未经身份验证的请求会返回"),X,n("响应。"),K,n(' 如果你正在使用带有SessionAuthentication的AJAX样式的API，你需要确保任何"任何"不安全的HTTP方法调用（如：'),Q,n(", "),Y,n(", "),Z,n(" or "),$,n("请求）都包含有效的CSRF token。有关详细信息，请参阅"),a("a",nn,[n("Django CSRF 文档"),s(e)]),n("。"),an,en,n("：在创建登陆页面时，始终要使用Django的标准登陆视图。这样才能确保你的登陆视图被正确的认证保护。"),sn,n(" 由于需要同时支持session和non-session非会话身份验证，REST框架中的CSRF验证与标准Django中的工作方式略有不同。这意味着只有经过身份验证的请求需要CSRF令牌，匿名请求可能不会发送CSRF令牌tokens。此行为不适用于始终需要使用CSRF验证的登录视图。")]),tn,a("p",null,[a("a",on,[n("Django OAuth Toolkit"),s(e)]),n(" 包提供了OAuth 2.0 认证支持，并且兼容Python 2.7和Python 3.3+。这个包使用优秀的"),a("a",cn,[n("OAuthLib"),s(e)]),n("，由"),a("a",rn,[n("Evonove"),s(e)]),n("维护。该软件包有很完善的文档，并得到很好的支持，目前是我们"),pn,n("。")]),ln,a("p",null,[n("更多详情请参阅"),a("a",dn,[n("Django REST framework - Getting started"),s(e)]),n("文档。")]),un,a("p",null,[a("a",hn,[n("Django REST framework OAuth"),s(e)]),n("包提供OAuth1和OAuth2支持。"),kn,n(" 这个软件包以前直接包含在REST framework中，但现在已被作为第三方软件包支持和维护。")]),mn,a("p",null,[n("更多配置和使用信息请查阅Django REST framework OAuth文档中的"),a("a",_n,[n("authentication"),s(e)]),n("和"),a("a",bn,[n("permissions"),s(e)]),n("。")]),gn,a("p",null,[n("HTTP摘要认证是一种广泛实现的方案，旨在替代HTTP基本认证，并提供简单的加密认证机制。"),a("a",vn,[n("Juan Riaza"),s(e)]),n("维护着"),a("a",fn,[n("djangorestframework-digestauth"),s(e)]),n("为REST framework提供了HTTP摘要认证支持。")]),wn,a("p",null,[a("a",Tn,[n("Rediker Software"),s(e)]),n("的"),a("a",An,[n("Django OAuth2 Consumer"),s(e)]),n("是另一个为REST框架提供"),a("a",yn,[n("OAuth 2.0 support for REST framework"),s(e)]),n("的软件包。该包包含tokens范围限制权限，允许对你的API进行更细粒度的访问。")]),jn,a("p",null,[n("JSON Web Token是一种相当新的标准，可用于基于token的身份验证。与内置的TokenAuthentication方案不同，JWT身份验证不需要使用数据库来验证令牌。"),a("a",xn,[n("Blimp"),s(e)]),n("维护"),a("a",Sn,[n("djangorestframework-jwt"),s(e)]),n("软件包，它提供了一个JWT Authentication类以及一个机制，客户端获得一个给定用户名和密码的JWT。")]),En,a("p",null,[a("a",Pn,[n("HawkREST"),s(e)]),n("库基于"),a("a",Rn,[n("Mohawk"),s(e)]),n("库，让你可以在API中使用"),a("a",Dn,[n("Hawk"),s(e)]),n("签名的请求和响应。"),a("a",Nn,[n("Hawk"),s(e)]),n("让双方使用共享密钥签名的消息彼此安全地进行通信。它基于"),a("a",In,[n("HTTP MAC access authentication"),s(e)]),n("访问认证（它基于"),a("a",Hn,[n("OAuth 1.0"),s(e)]),n("的部分）。")]),qn,a("p",null,[n("HTTP签名（目前为"),a("a",On,[n("IETF草案"),s(e)]),n("）提供了一种实现HTTP消息的源认证和消息完整性的方法。与"),a("a",Un,[n("Amazon的HTTP签名方案"),s(e)]),n("类似，许多服务使用它，它允许无状态的每个请求的身份验证。"),a("a",Wn,[n("Elvio Toccalino"),s(e)]),n("维护了"),a("a",Ln,[n("djangorestframework-httpsignature"),s(e)]),n("包，提供了一个易于使用的HTTP签名身份验证机制。")]),Cn,a("p",null,[a("a",Fn,[n("Djoser"),s(e)]),n("库提供一组视图来处理基本操作，如注册，登录，注销，密码重置和帐户激活。该包使用自定义用户模型，它使用基于token的身份验证。这是一个可以使用REST实现的Django认证系统。")]),zn,a("p",null,[a("a",Bn,[n("Django-rest-auth"),s(e)]),n("库提供了一组REST API端点，用于注册，身份验证（包括社交媒体身份验证），密码重置，检索和更新用户详细信息等。有了这些API端点之后，你的客户端应用程序（如AngularJS，iOS，Android和其他）可以通过REST API独立通信到Django后端站点，以进行用户管理。")]),Jn,a("p",null,[a("a",Gn,[n("Django-rest-framework-social-oauth2"),s(e)]),n("库提供了一种将社交插件（facebook，twitter，google等）集成到你的身份验证系统和简单的oauth2设置的简单方法。使用这个库，你将能够根据外部token（例如，Facebook访问token）对用户进行身份验证，将这些令牌转换为“内部”oauth2 tokens，并使用和生成oauth2 tokens来验证用户。")]),Mn,a("p",null,[a("a",Vn,[n("Django-rest-knox"),s(e)]),n("库提供了模型和视图，以比内置的TokenAuthentication方案更安全和可扩展的方式来处理基于token的身份验证 - 使用单页面应用程序和移动客户端能够一起。它为每个客户端提供tokens，以及在提供一些其他身份验证（通常是基本身份验证）时生成tokens，删除token（提供服务器强制注销）和删除所有tokens（注销用户登录的所有客户端）的视图。")])])}const $n=o(p,[["render",Xn],["__file","13.Authentication（认证）.html.vue"]]);export{$n as default};
