import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,a as n,b as s,d as a,f as o}from"./app-cfbf85c1.js";const r={},d=n("h1",{id:"permissions-权限",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#permissions-权限","aria-hidden":"true"},"#"),s(" Permissions（权限）")],-1),l=n("br",null,null,-1),u={href:"https://developer.apple.com/library/mac/#documentation/security/Conceptual/AuthenticationAndAuthorizationGuide/Authorization/Authorization.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/authentication_zh/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/throttling/",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),_=n("code",null,"request.user",-1),b=n("code",null,"request.auth",-1),v=n("br",null,null,-1),g=n("br",null,null,-1),f=n("code",null,"IsAuthenticated",-1),y=n("br",null,null,-1),w=n("code",null,"IsAuthenticatedOrReadOnly",-1),j=o(`<h2 id="如何确定权限" tabindex="-1"><a class="header-anchor" href="#如何确定权限" aria-hidden="true">#</a> 如何确定权限</h2><p>REST框架中的权限始终被定义为一个权限类的列表。<br> 在运行视图的主体之前，检查列表中的每个权限。 如果任何权限检查失败，会抛出一个<code>exceptions.PermissionDenied</code>或<code>exceptions.NotAuthenticated</code>异常，并且视图的主体将不会运行。<br> 当权限检查失败时，将返回&quot;403 Forbidden&quot;或&quot;401 Unauthorized&quot;响应，具体根据以下规则：</p><ul><li>请求已成功通过身份验证，但权限被拒绝。 <em>— 将返回403 Forbidden响应。</em></li><li>请求未成功认证，最高优先级的认证类_不使用_<code>WWW-Authenticate</code>标头。<em>— 将返回403 Forbidden响应。</em></li><li>请求未成功认证，最高优先级的认证类_使用_<code>WWW-Authenticate</code>标头。<em>— 将返回HTTP 401未经授权的响应，并附带适当的<code>WWW-Authenticate</code>标头。</em></li></ul><h2 id="对象级权限" tabindex="-1"><a class="header-anchor" href="#对象级权限" aria-hidden="true">#</a> 对象级权限</h2><p>REST框架权限还支持对象级的许可。对象级权限用于确定是否允许用户操作特定对象（通常是模型实例）。<br> 当调用<code>.get_object()</code>时，由REST框架的通用视图运行对象级权限检测。 与视图级别权限一样，如果不允许用户操作给定对象，则会抛出<code>exceptions.PermissionDenied</code>异常。<br> 如果你正在编写自己的视图并希望强制执行对象级权限检测，或者你想在通用视图中重写<code>get_object</code>方法，那么你需要在检索对象的时候显式调用视图上的<code>.check_object_permissions(request, obj)</code>方法。<br> 这将抛出<code>PermissionDenied</code>或<code>NotAuthenticated</code>异常，或者如果视图具有适当的权限，则返回。<br> 例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    obj <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>check_object_permissions<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
    <span class="token keyword">return</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象级别的权限限制" tabindex="-1"><a class="header-anchor" href="#对象级别的权限限制" aria-hidden="true">#</a> 对象级别的权限限制</h4>`,7),A=n("br",null,null,-1),P={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/filtering_zh/",target:"_blank",rel:"noopener noreferrer"},E=o(`<h2 id="设置权限策略" tabindex="-1"><a class="header-anchor" href="#设置权限策略" aria-hidden="true">#</a> 设置权限策略</h2><p>默认权限策略可以使用<code>DEFAULT_PERMISSION_CLASSES</code>设置进行全局设置。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PERMISSION_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.permissions.IsAuthenticated&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未指定，则此设置默认为允许无限制访问：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;DEFAULT_PERMISSION_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
   <span class="token string">&#39;rest_framework.permissions.AllowAny&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用基于<code>APIView</code>类的视图在每个视图或每个视图集的基础上设置身份验证策略。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAuthenticated
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;request was permitted&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者你可以使用<code>@api_view</code>装饰器装饰基于函数的视图。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token punctuation">,</span> permission_classes
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAuthenticated
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@permission_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;request was permitted&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 当你通过类属性或装饰器设置新的权限类时，你要通知视图忽略__settings.py__文件中设置的默认列表。</p><hr><h1 id="api-参考" tabindex="-1"><a class="header-anchor" href="#api-参考" aria-hidden="true">#</a> API 参考</h1><h2 id="allowany" tabindex="-1"><a class="header-anchor" href="#allowany" aria-hidden="true">#</a> AllowAny</h2><p><code>AllowAny</code>权限类将允许不受限制的访问，而<strong>不管该请求是否已通过身份验证或未经身份验证</strong>。<br> 此权限不是严格要求的，因为你可以通过使用空列表或元组进行权限设置来获得相同的结果，但你可能会发现指定此类很有用，因为它使意图更明确。</p><h2 id="isauthenticated" tabindex="-1"><a class="header-anchor" href="#isauthenticated" aria-hidden="true">#</a> IsAuthenticated</h2><p><code>IsAuthenticated</code> 权限类将拒绝任何未经身份验证的用户的权限，并允许其他权限。 如果你希望你的API仅供注册用户访问，则此权限适用。<br> 如果你希望你的API允许匿名用户读取权限，并且只允许对已通过身份验证的用户进行写入权限，则此权限是适合的。</p><h2 id="isadminuser" tabindex="-1"><a class="header-anchor" href="#isadminuser" aria-hidden="true">#</a> IsAdminUser</h2><p>除非<code>user.is_staff</code>为<code>True</code>，否则<code>IsAdminUser</code>权限类将拒绝任何用户的权限，在这种情况下将允许权限。<br> 如果你希望你的API只能被部分受信任的管理员访问，则此权限是适合的。</p><h2 id="isauthenticatedorreadonly" tabindex="-1"><a class="header-anchor" href="#isauthenticatedorreadonly" aria-hidden="true">#</a> IsAuthenticatedOrReadOnly</h2><p><code>IsAuthenticatedOrReadOnly</code> 将允许经过身份验证的用户执行任何请求。只有当请求方法是“安全”方法（<code>GET</code>, <code>HEAD</code> 或 <code>OPTIONS</code>）之一时，才允许未经授权的用户请求。<br> 如果你希望你的API允许匿名用户读取权限，并且只允许对已通过身份验证的用户进行写入权限，则此权限是适合的。</p><h2 id="djangomodelpermissions" tabindex="-1"><a class="header-anchor" href="#djangomodelpermissions" aria-hidden="true">#</a> DjangoModelPermissions</h2>`,21),q=n("code",null,"django.contrib.auth",-1),x={href:"https://docs.djangoproject.com/en/stable/topics/auth/customizing/#custom-permissions",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,".queryset",-1),D=o(`<ul><li><code>POST</code> 请求要求用户对模型具有<code>添加</code>权限。</li><li><code>PUT</code> 和 <code>PATCH</code> 请求要求用户对模型具有<code>更改</code>权限。</li><li><code>DELETE</code> 请求想要求用户对模型具有<code>删除</code>权限。</li></ul><p>默认行为也可以被重写以支持自定义模型权限。例如，你可能希望为<code>GET</code>请求包含一个<code>查看</code>模型的权限。<br> 要使用自定义模型权限，请覆盖<code>DjangoModelPermissions</code>并设置<code>.perms_map</code>属性。有关详细信息，请参阅源代码。</p><h4 id="使用不包含queryset属性的视图。" tabindex="-1"><a class="header-anchor" href="#使用不包含queryset属性的视图。" aria-hidden="true">#</a> 使用不包含<code>queryset</code>属性的视图。</h4><p>如果你在重写了<code>get_queryset()</code>方法的视图中使用此权限，这个视图上可能没有<code>queryset</code>属性。在这种情况下，我们建议还使用保护性的查询集来标记视图，以便此类可以确定所需的权限。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>none<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># DjangoModelPermissions需要一个queryset</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="djangomodelpermissionsoranonreadonly" tabindex="-1"><a class="header-anchor" href="#djangomodelpermissionsoranonreadonly" aria-hidden="true">#</a> DjangoModelPermissionsOrAnonReadOnly</h2><p>与<code>DjangoModelPermissions</code>类似，但也允许未经身份验证的用户具有对API的只读访问权限。</p><h2 id="djangoobjectpermissions" tabindex="-1"><a class="header-anchor" href="#djangoobjectpermissions" aria-hidden="true">#</a> DjangoObjectPermissions</h2>`,8),T={href:"https://docs.djangoproject.com/en/stable/topics/auth/customizing/#handling-object-permissions",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/lukaszb/django-guardian",target:"_blank",rel:"noopener noreferrer"},R=n("br",null,null,-1),O=n("code",null,"DjangoModelPermissions",-1),F=n("code",null,".queryset",-1),M=n("code",null,".get_queryset()",-1),N=o(`<ul><li><code>POST</code> 请求要求用户对模型实例具有<code>添加</code>权限。</li><li><code>PUT</code> 和<code>PATCH</code> 请求要求用户对模型示例具有<code>更改</code>权限。</li><li><code>DELETE</code> 请求要求用户对模型示例具有<code>删除</code>权限。</li></ul><p>请注意，<code>DjangoObjectPermissions</code> <strong>不需要</strong> <code>django-guardian</code>软件包，并且应当同样支持其他对象级别的后端。<br> 与<code>DjangoModelPermissions</code>一样，你可以通过重写<code>DjangoObjectPermissions</code>并设置<code>.perms_map</code>属性来使用自定义模型权限。有关详细信息，请参阅源代码。</p><hr><p><strong>注意</strong>：如果你需要<code>GET</code>,<code>HEAD</code>和<code>OPTIONS</code>请求的对象级<code>视图</code>权限，那么你还需要考虑添加<code>DjangoObjectPermissionsFilter</code>类，以确保相应API只返回包含用户具有适当视图权限的对象的结果。</p><hr><hr><h1 id="自定义权限" tabindex="-1"><a class="header-anchor" href="#自定义权限" aria-hidden="true">#</a> 自定义权限</h1><p>要实现自定义权限，请重写<code>BasePermission</code>并实现以下方法中的一个或两个</p><ul><li><code>.has_permission(self, request, view)</code></li><li><code>.has_object_permission(self, request, view, obj)</code></li></ul><p>如果请求被授予访问权限，方法应该返回<code>True</code>，否则返回<code>False</code>。<br> 如果你需要测试请求是读取操作还是写入操作，则应该根据常量<code>SAFE_METHODS</code>检查请求方法，<code>SAFE_METHODS</code>是包含<code>&#39;GET&#39;</code>, <code>&#39;OPTIONS&#39;</code>和<code>&#39;HEAD&#39;</code>的元组。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token keyword">in</span> permissions<span class="token punctuation">.</span>SAFE_METHODS<span class="token punctuation">:</span>
    <span class="token comment"># 检查只读请求的权限</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 检查读取请求的权限</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>注意</strong>: 仅当视图级<code>has_permission</code>检查已通过时，才会调用实例级<code>has_object_permission</code>方法。另请注意，为了运行实例级别检查，视图代码应显式调用<code>.check_object_permissions(request, obj)</code>。如果你使用的是通用视图，那么默认会为你处理。</p><hr><p>如果校验失败，自定义权限将引发<code>PermissionDenied</code>异常。要更改与异常关联的错误消息，请直接在自定义权限上实现消息属性。否则将使用<code>PermissionDenied</code>的<code>default_detail</code>属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> permissions
<span class="token keyword">class</span> <span class="token class-name">CustomerAccessPermission</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>
    message <span class="token operator">=</span> <span class="token string">&#39;Adding customers not allowed.&#39;</span>
    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>以下是根据黑名单检查传入请求的IP地址的权限类的示例，如果IP已被列入黑名单，则拒绝该请求。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> permissions
<span class="token keyword">class</span> <span class="token class-name">BlacklistPermission</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    对列入黑名单的IP进行全局权限检查。
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">has_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ip_addr <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">[</span><span class="token string">&#39;REMOTE_ADDR&#39;</span><span class="token punctuation">]</span>
        blacklisted <span class="token operator">=</span> Blacklist<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>ip_addr<span class="token operator">=</span>ip_addr<span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> blacklisted
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了针对所有传入请求运行的全局权限外，还可以创建对象级权限，这些权限仅针对影响特定对象实例的操作运行。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">IsOwnerOrReadOnly</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>BasePermission<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    对象级权限仅允许对象的所有者对其进行编辑
    假设模型实例具有\`owner\`属性。
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">has_object_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 任何请求都允许读取权限，</span>
        <span class="token comment"># 所以我们总是允许GET，HEAD或OPTIONS 请求.</span>
        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token keyword">in</span> permissions<span class="token punctuation">.</span>SAFE_METHODS<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token comment"># 示例必须要有一个名为\`owner\`的属性</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>owner <span class="token operator">==</span> request<span class="token punctuation">.</span>user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),C=n("code",null,"self.check_object_permission(request，obj)",-1),H=n("code",null,"APIException",-1),z=n("br",null,null,-1),L={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/filtering_zh/",target:"_blank",rel:"noopener noreferrer"},W=n("hr",null,null,-1),B=n("h1",{id:"第三方包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第三方包","aria-hidden":"true"},"#"),s(" 第三方包")],-1),U=n("p",null,"以下第三方包都可以使用。",-1),V=n("h2",{id:"composed-permissions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#composed-permissions","aria-hidden":"true"},"#"),s(" Composed Permissions")],-1),G={href:"https://github.com/niwibe/djangorestframework-composed-permissions",target:"_blank",rel:"noopener noreferrer"},K=n("h2",{id:"rest-condition",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rest-condition","aria-hidden":"true"},"#"),s(" REST Condition")],-1),Y={href:"https://github.com/caxap/rest_condition",target:"_blank",rel:"noopener noreferrer"},J=n("h2",{id:"dry-rest-permissions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dry-rest-permissions","aria-hidden":"true"},"#"),s(" DRY Rest Permissions")],-1),Q={href:"https://github.com/Helioscene/dry-rest-permissions",target:"_blank",rel:"noopener noreferrer"},X=n("h2",{id:"django-rest-framework-roles",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#django-rest-framework-roles","aria-hidden":"true"},"#"),s(" Django Rest Framework Roles")],-1),Z={href:"https://github.com/computer-lab/django-rest-framework-roles",target:"_blank",rel:"noopener noreferrer"},$=n("h2",{id:"django-rest-framework-api-key",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#django-rest-framework-api-key","aria-hidden":"true"},"#"),s(" Django Rest Framework API Key")],-1),nn={href:"https://github.com/manosim/django-rest-framework-api-key",target:"_blank",rel:"noopener noreferrer"};function sn(en,an){const e=i("ExternalLinkIcon");return c(),p("div",null,[d,n("blockquote",null,[n("p",null,[s("身份验证或身份识别本身通常不足以获取信息或代码的访问权限。因此，请求访问的实体必须具有授权。"),l,s(" — "),n("a",u,[s("Apple Developer Documentation"),a(e)])])]),n("p",null,[s("连同"),n("a",k,[s("认证"),a(e)]),s("和"),n("a",h,[s("限制"),a(e)]),s("，权限决定是否应该接收请求或拒绝访问。"),m,s(" 权限检查始终在视图的开始处运行，在允许继续执行任何其他代码之前运行。 权限检查通常会使用"),_,s("和"),b,s("属性中的身份验证信息来确定是否允许传入请求。"),v,s(" 权限用于授予或拒绝将不同类别的用户访问到API的不同部分。"),g,s(" 最简单的权限是允许访问任何经过身份验证的用户，并拒绝访问任何未经身份验证的用户。这对应于REST框架中的"),f,s("类。"),y,s(" 稍微严格的权限控制风格是对经过身份验证的用户的允许完全访问，但对未经身份验证的用户的允许只读访问。这对应于REST框架中的"),w,s("类。")]),j,n("p",null,[s("出于性能原因，通用视图在返回对象列表时不会自动将对象级权限应用于查询集中的每个实例。"),A,s(" 通常，当你使用对象级权限时，你还需要适当地"),n("a",P,[s("过滤查询集"),a(e)]),s("过滤查询集，以确保用户只能看到他们被允许查看的实例。")]),E,n("p",null,[s("此权限类与Django的标准"),q,n("a",x,[s("model权限"),a(e)]),s("相关联。此权限只能应用于具有"),I,s("属性集的视图。只有在用户_通过身份验证_并分配了_相关模型权限_的情况下，才会被授予权限。")]),D,n("p",null,[s("此权限类与Django的标准"),n("a",T,[s("对象权限框架"),a(e)]),s("相关联，该框架允许模型上的每个对象的权限。为了使用此权限类，你还需要添加支持对象级权限的权限后端，例如"),n("a",S,[s("django-guardian"),a(e)]),s("。"),R,s(" 与"),O,s("一样，此权限只能应用于具有"),F,s("属性或"),M,s("方法的视图。只有在用户通过身份验证并且具有_相关的每个对象权限_和相关的_模型权限_后，才会被授予权限。")]),N,n("p",null,[s("请注意，通用视图将检查适当的对象级权限，但如果你正在编写自己的自定义视图，则需要确保检查自己的对象级权限检查。你可以通过在获得对象实例后从视图中调用"),C,s("来执行此操作.如果任何对象级权限检查失败，此调用将引发适当的"),H,s("，否则将简单地返回。"),z,s(" 另请注意，通用视图仅检查检索单个模型实例的视图的对象级权限。如果你需要列表视图的对象级过滤，则需要单独过滤查询集。有关详细信息，请参阅"),n("a",L,[s("filtering文档"),a(e)]),s("过滤文档。")]),W,B,U,V,n("p",null,[n("a",G,[s("Composed Permissions"),a(e)]),s("提供了一种简单的方法，使用小的可重用组件来定义复杂和多深度（使用逻辑运算符）权限对象。")]),K,n("p",null,[n("a",Y,[s("REST Condition"),a(e)]),s("包是用于以简单方便的方式构建复杂权限的另一个扩展。该扩展允许你将权限与逻辑运算符组合在一起。")]),J,n("p",null,[n("a",Q,[s("DRY Rest Permissions"),a(e)]),s("包提供了为单个默认和自定义操作定义不同权限的功能。此包适用于具有从应用程序数据模型中定义的关系派生的权限的应用程序。它还支持通过API的序列化程序返回到客户端应用程序的权限检查。此外，它还支持向默认和自定义列表操作添加权限，以限制他们为每个用户检索的数据。")]),X,n("p",null,[n("a",Z,[s("Django Rest Framework Roles"),a(e)]),s("包使你可以更轻松地通过多种类型的用户对API进行参数化。")]),$,n("p",null,[n("a",nn,[s("Django Rest Framework API Key"),a(e)]),s("包允许你确保向服务器发出的每个请求都需要一个API密钥标头。您可以从django管理界面生成一个。")])])}const cn=t(r,[["render",sn],["__file","14.Permissions（权限）.html.vue"]]);export{cn as default};
