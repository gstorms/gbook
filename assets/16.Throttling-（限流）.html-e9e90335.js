import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a as n,b as s,d as e,f as t}from"./app-207e7d61.js";const l={},r=n("h1",{id:"throttling-限流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#throttling-限流","aria-hidden":"true"},"#"),s(" Throttling （限流）")],-1),d=n("br",null,null,-1),u={href:"https://dev.twitter.com/docs/error-codes-responses",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>类似于[权限]，限流器决定是否应当授权请求。限流器指示临时状态，并被用于控制客户端能够向API发出请求的频率。<br> 与权限一样，多个限流器可能会被应用。您的API或许会对未经认证的请求进行限制，而对于已经认证的请求进行相对更少的限制。<br> 另一个您可能会想要使用多个限流器的情况是由于某些服务特别耗费资源，因此您需要对API的不同部分施加不同的限制。<br> 如果需要同时应用突发限制流量和持续限制流量，也可以使用多个限流器。例如，您可能希望将用户限制为每分钟最多60个请求，每天最多1000个请求。<br> 限流器不一定仅指限制请求的频次。例如，存储服务可能还需要限制带宽，而付费数据服务则可能需要限制被访问的记录的特定数量。</p><h2 id="how-throttling-is-determined-如何决定限流" tabindex="-1"><a class="header-anchor" href="#how-throttling-is-determined-如何决定限流" aria-hidden="true">#</a> How throttling is determined （如何决定限流）</h2><p>与权限和身份验证一样，REST框架中的限制总是被定义为一系列的类。<br> 在运行视图主体之前，列表中的每一个限流器会被检查。如果任何限流器检查异常，则将抛出<code>exceptions.Throttled</code>，并且视图主体将不会运行。</p><h2 id="setting-the-throttling-policy-设定限流策略" tabindex="-1"><a class="header-anchor" href="#setting-the-throttling-policy-设定限流策略" aria-hidden="true">#</a> Setting the throttling policy （设定限流策略）</h2><p>通过使用 <code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code> 默认限流策略将被全局设定,例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.throttling.AnonRateThrottle&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.throttling.UserRateThrottle&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_RATES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;anon&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;100/day&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1000/day&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被用于 <code>DEFAULT_THROTTLE_RATES</code> 中的流量描述可能包括 <code>second</code>, <code>minute</code>, <code>hour</code> or <code>day</code> 作为限流周期<br> 对于基于 <code>APIView</code> 类的视图，您可以以每个视图或每个视图集为基础设置限流策略</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_classes <span class="token operator">=</span> <span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;request was permitted&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果您使用带有 <code>@api_view</code> 装饰器的基于函数的视图</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@throttle_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>UserRateThrottle<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;request was permitted&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-clients-are-identified-如何识别客户端" tabindex="-1"><a class="header-anchor" href="#how-clients-are-identified-如何识别客户端" aria-hidden="true">#</a> How clients are identified （如何识别客户端)</h2>`,11),h=n("code",null,"X-Forwarded-For HTTP",-1),v=n("code",null,"REMOTE_ADDR WSGI",-1),m=n("code",null,"X-Forwarded-For",-1),_=n("code",null,"REMOTE_ADDR",-1),b=n("br",null,null,-1),g=n("code",null,"NUM_proxies",-1),T=n("code",null,"·X-Forwarded-For·",-1),w=n("code",null,"Remote-Addr",-1),R=n("br",null,null,-1),f=n("code",null,"NUM_PROXIES",-1),y={href:"http://en.wikipedia.org/wiki/Network_address_translation",target:"_blank",rel:"noopener noreferrer"},E=n("br",null,null,-1),A=n("code",null,"X-Forwarded-For",-1),S={href:"http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly#Multiple_Proxies_in_front_of_the_cluster",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"setting-up-the-cache-设置缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#setting-up-the-cache-设置缓存","aria-hidden":"true"},"#"),s(" Setting up the cache (设置缓存)")],-1),L={href:"https://docs.djangoproject.com/en/stable/ref/settings/#caches",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"LocMemCache",-1),P={href:"https://docs.djangoproject.com/en/stable/topics/cache/#setting-up-the-cache",target:"_blank",rel:"noopener noreferrer"},U=n("br",null,null,-1),F=n("code",null,"'default'",-1),D=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomAnonRateThrottle</span><span class="token punctuation">(</span>AnonRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cache <span class="token operator">=</span> get_cache<span class="token punctuation">(</span><span class="token string">&#39;alternate&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>您需要记住，还需要在 <code>&#39;DEFAULT_THROTTLE_CLASSES&#39;</code> 设置键中设置您的自定义限流器，或使用 <code>throttle_classes</code> 视图属性。</p><hr><h1 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h1><h2 id="anonratethrottle" tabindex="-1"><a class="header-anchor" href="#anonratethrottle" aria-hidden="true">#</a> AnonRateThrottle</h2><p><code>AnonRateThrottle</code> 会限制未经身份验证的用户。传入请求的IP地址用于生成唯一的密钥以进行限制。<br> 允许的请求频次由以下之一确定（按优先顺序）。</p><ul><li>类的 <code>rate</code> 属性，可以通过重写 <code>AnonRateThrottle</code> 并设置该属性来提供。</li><li><code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 设置。</li></ul><p>如果要限制来自未知源的请求速率，则<code>AnonRateThrottle</code> 是合适的。</p><h2 id="userratethrottle" tabindex="-1"><a class="header-anchor" href="#userratethrottle" aria-hidden="true">#</a> UserRateThrottle</h2><p><code>UserRateThrottle</code> 将通过API将用户限制为给定的请求速率。用户ID用于生成唯一的密钥以进行限制。未经身份验证的请求将退回到使用传入请求的IP地址来生成唯一密钥以进行限制。<br> 允许的请求速率由以下之一确定（按优先顺序）。</p><ul><li>类的 <code>rate</code> 属性，可以通过重写 <code>UserRateThrottle</code> 并设置该属性来提供。</li><li><code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 设置。</li></ul><p>一个API可能同时具有多个 <code>UserRateThrottles</code>。为此，请重写 <code>UserRateThrottle</code> 并为每个类设置一个唯一的“作用域”。<br> 例如，可以通过使用以下类来实现多个用户节流率...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BurstRateThrottle</span><span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    scope <span class="token operator">=</span> <span class="token string">&#39;burst&#39;</span>
<span class="token keyword">class</span> <span class="token class-name">SustainedRateThrottle</span><span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    scope <span class="token operator">=</span> <span class="token string">&#39;sustained&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...和以下设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;example.throttles.BurstRateThrottle&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;example.throttles.SustainedRateThrottle&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_RATES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;burst&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;60/min&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;sustained&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1000/day&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UserRateThrottle</code> is suitable if you want simple global rate restrictions per-user.</p><h2 id="scopedratethrottle" tabindex="-1"><a class="header-anchor" href="#scopedratethrottle" aria-hidden="true">#</a> ScopedRateThrottle</h2><p><code>ScopedRateThrottle</code> 类可用于限制对API特定部分的访问。仅当所访问的视图包含. <code>throttle_scope</code> 属性时，才会应用此限流器。然后，通过将请求的“范围”与唯一的用户ID或IP地址串联起来，即可形成唯一的限制键。<br> 允许的请求速率由 <code>DEFAULT_THROTTLE_RATES</code>设置使用请求“scope”中的键确定。<br> 例如，给定以下视图...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ContactListView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_scope <span class="token operator">=</span> <span class="token string">&#39;contacts&#39;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">class</span> <span class="token class-name">ContactDetailView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_scope <span class="token operator">=</span> <span class="token string">&#39;contacts&#39;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">class</span> <span class="token class-name">UploadView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    throttle_scope <span class="token operator">=</span> <span class="token string">&#39;uploads&#39;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...和以下设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.throttling.ScopedRateThrottle&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_THROTTLE_RATES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;contacts&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1000/day&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;uploads&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20/day&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户对 <code>ContactListView</code> 或 <code>ContactDetailView</code> 的请求将被限制为每天共计1000个请求。用户对 <code>UploadView</code> 的请求将被限制为每天共计20个请求。</p><hr><h1 id="custom-throttles-自定义限流" tabindex="-1"><a class="header-anchor" href="#custom-throttles-自定义限流" aria-hidden="true">#</a> Custom throttles （自定义限流）</h1><p>若要创建自定义限流器，请重写 <code>BaseThrottle</code> 并使用 <code>.allow_request(self, request, view)</code>。如果允许请求，则该方法应返回 <code>True</code> ，否则返回 <code>False</code>。<br> 你也可以选择性地重写 <code>.wait()</code>方法。如果被使用，<code>.wait()</code> 应返回尝试下一个请求前建议的等待秒数，或者 <code>None</code>。只有在 <code>.allow_request()</code> 先前已返回 <code>False</code> 时才会调用 <code>.wait()</code>方法。<br> 如果使用了 <code>.wait()</code> 方法并限制了请求，则响应中将包含 <code>Retry-After</code> 头。</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>下面是一个限流的例子，它将在每10个请求中随机地限制1个。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">class</span> <span class="token class-name">RandomRateThrottle</span><span class="token punctuation">(</span>throttling<span class="token punctuation">.</span>BaseThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">allow_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function O(H,V){const a=p("ExternalLinkIcon");return c(),i("div",null,[r,n("blockquote",null,[n("p",null,[s("HTTP/1.1 420 Enhance Your Calm"),d,n("a",u,[s("Twitter API rate limiting response"),e(a)])])]),k,n("p",null,[h,s(" 请求头和 "),v,s(" 变量用于唯一地标识用户的IP地址。如果存在 "),m,s(" 请求头，则将使用它，否则将使用WSGI环境中 "),_,s(" 变量的值。"),b,s(" 如果需要严格标识唯一的客户端IP地址，则需要首先通过设置 "),g,s(" 设置来配置API后运行的应用程序代理的数量。此设置应为零或更大的整数。如果设置为非零，那么一旦第一次排除任何应用程序代理IP地址，客户端IP将被标识为 "),T,s(" 标头中的最后一个IP地址。如果设置为零，则 "),w,s(" 头将始终用于标识IP地址。"),R,s(" 重要的是要了解，如果配置 "),f,s(" 设置，那么一个唯一的"),n("a",y,[s("NAT'd"),e(a)]),s("网关后面的所有客户端都将被视为单个客户端。"),E,s(" 关于 "),A,s(" 请求头如何工作以及标识远程客户端IP的更多上下文可以在"),n("a",S,[s("这里"),e(a)]),s("找到。")]),x,n("p",null,[s("REST框架提供的节流类使用Django的缓存后端。您应该确保已设置适当的"),n("a",L,[s("缓存设置"),e(a)]),s("。对于简单设置，后端的默认值 "),I,s(" 即可。有关更多详细信息，请参见Django的"),n("a",P,[s("缓存文档"),e(a)]),s("。"),U,s(" 如果您需要使用 "),F,s(" 以外的缓存，则可以通过创建自定义的节流类并设置缓存属性来实现。 例如：")]),D])}const q=o(l,[["render",O],["__file","16.Throttling-（限流）.html.vue"]]);export{q as default};
