import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as e,f as t}from"./app-d0fb0332.js";const l={},r=t(`<h1 id="filtering-过滤" tabindex="-1"><a class="header-anchor" href="#filtering-过滤" aria-hidden="true">#</a> Filtering（过滤）</h1><blockquote><p>“ 由Django Manager提供的根QuerySet描述了数据库表中的所有对象。可是通常你需要的只是选择完整对象中的一个子集而已。<br> —— Django文档 ”</p></blockquote><p>REST framework列表视图的默认行为是返回一个model的全部queryset。通常你却想要你的API来限制queryset返回的数据。<br> 最简单的过滤任意<code>GenericAPIView</code>子视图queryset的方法就是重写它的<code>.get_queryset()</code>方法。<br> 重写这个方法允许你使用很多不同的方式来定制视图返回的queryset。</p><h2 id="filtering-against-the-current-user-根据当前用户进行过滤" tabindex="-1"><a class="header-anchor" href="#filtering-against-the-current-user-根据当前用户进行过滤" aria-hidden="true">#</a> Filtering against the current user（根据当前用户进行过滤）</h2><p>您可能想要过滤queryset，以确保只返回与发出请求的当前已验证用户相关的结果。<br> 你可以通过基于request.user的值进行过滤来实现。<br> 比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>models <span class="token keyword">import</span> Purchase
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> PurchaseSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics
<span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer
    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        This view should return a list of all the purchases
        for the currently authenticated user.
        &quot;&quot;&quot;</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user
        <span class="token keyword">return</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filtering-against-the-url-根据url进行过滤" tabindex="-1"><a class="header-anchor" href="#filtering-against-the-url-根据url进行过滤" aria-hidden="true">#</a> Filtering against the URL（根据URL进行过滤）</h2><p>另一种过滤方式可能包括基于URL的某些部分来限制queryset。<br> 例如，如果你的URL配置包含一个参数如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url<span class="token punctuation">(</span><span class="token string">&#39;^purchases/(?P&lt;username&gt;.+)/$&#39;</span><span class="token punctuation">,</span> PurchaseList<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你就可以写一个view，返回基于URL中的username参数进行过滤的结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer
    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        This view should return a list of all the purchases for
        the user as determined by the username portion of the URL.
        &quot;&quot;&quot;</span>
        username <span class="token operator">=</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser__username<span class="token operator">=</span>username<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filtering-against-query-parameters-根据查询参数进行过滤" tabindex="-1"><a class="header-anchor" href="#filtering-against-query-parameters-根据查询参数进行过滤" aria-hidden="true">#</a> Filtering against query parameters（根据查询参数进行过滤）</h2><p>过滤初始查询集的最后一个示例是基于url中的查询参数确定初始查询集。<br> 我们可以通过重写<code>.get_queryset()</code>方法来处理像<code>[http://example.com/api/purchases?username=denvercoder9](http://example.com/api/purchases?username=denvercoder9)</code>这样的网址，并且只有在URL中包含<code>username</code>参数时，才过滤queryset：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer
    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Optionally restricts the returned purchases to a given user,
        by filtering against a \`username\` query parameter in the URL.
        &quot;&quot;&quot;</span>
        queryset <span class="token operator">=</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        username <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> username <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            queryset <span class="token operator">=</span> queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser__username<span class="token operator">=</span>username<span class="token punctuation">)</span>
        <span class="token keyword">return</span> queryset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="generic-filtering-通用过滤" tabindex="-1"><a class="header-anchor" href="#generic-filtering-通用过滤" aria-hidden="true">#</a> Generic Filtering（通用过滤）</h1><p>除了能够重写默认的queryset，REST框架还包括对通用过滤后端的支持，允许你轻松构建复杂的检索器和过滤器。<br> 通用过滤器也可以在browsable API和admin API中显示为HTML控件。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1622687993388-2c1be047-7c71-456d-be10-1243afe7fa64.png#align=left&amp;display=inline&amp;height=496&amp;margin=[object Object]&amp;originHeight=496&amp;originWidth=779&amp;size=0&amp;status=done&amp;style=none&amp;width=779" alt="" loading="lazy"></p><h2 id="setting-filter-backends-设置通用过滤后端" tabindex="-1"><a class="header-anchor" href="#setting-filter-backends-设置通用过滤后端" aria-hidden="true">#</a> Setting filter backends（设置通用过滤后端）</h2><p>默认过滤器后端可以在全局设置中使用<code>DEFAULT_FILTER_BACKENDS</code>来配置。例如。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_FILTER_BACKENDS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&#39;django_filters.rest_framework.DjangoFilterBackend&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用基于<code>GenericAPIView</code>类的视图在每个view或每个viewset基础上设置过滤器后端。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> django_filters<span class="token punctuation">.</span>rest_framework
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics
<span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>django_filters<span class="token punctuation">.</span>rest_framework<span class="token punctuation">.</span>DjangoFilterBackend<span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filtering-and-object-lookups-过滤和对象查找" tabindex="-1"><a class="header-anchor" href="#filtering-and-object-lookups-过滤和对象查找" aria-hidden="true">#</a> Filtering and object lookups（过滤和对象查找）</h2><p>请注意，如果为view配置过滤器后端，并且用于过滤list views，则它也将用于过滤用于返回单个对象的queryset。<br> 例如，给定前面的示例以及一个ID为<code>4675</code>的产品，以下URL将返回相应的对象或者返回404，具体取决于给定的产品实例是否满足筛选条件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/products/4675/?category=clothing&amp;max_price=10.00
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="overriding-the-initial-queryset-覆盖初始queryset" tabindex="-1"><a class="header-anchor" href="#overriding-the-initial-queryset-覆盖初始queryset" aria-hidden="true">#</a> Overriding the initial queryset（覆盖初始queryset）</h2><p>请注意，你可以同时重写<code>.get_queryset()</code>方法或使用通用过滤，并且一切都会按照预期生效。 例如，如果<code>Product</code>与<code>User</code>（名为<code>purchase</code>）具有多对多关系，则可能需要编写如下所示的view：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchasedProductsList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Return a list of all the products that the authenticated
    user has ever purchased, with optional filtering.
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> Product
    serializer_class <span class="token operator">=</span> ProductSerializer
    filter_class <span class="token operator">=</span> ProductFilter
    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user
        <span class="token keyword">return</span> user<span class="token punctuation">.</span>purchase_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="api-guide" tabindex="-1"><a class="header-anchor" href="#api-guide" aria-hidden="true">#</a> API Guide</h1><h2 id="djangofilterbackend-django过滤后端" tabindex="-1"><a class="header-anchor" href="#djangofilterbackend-django过滤后端" aria-hidden="true">#</a> DjangoFilterBackend（Django过滤后端）</h2><p><code>django-filter</code>库包含一个为REST framework提供高度可定制字段过滤的<code>DjangoFilterBackend</code>类。<br> 要使用<code>DjangoFilterBackend</code>，首先要先安装<code>django-filter</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install django-filter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，你需要将filter backend 添加到你django project的settings中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;DEFAULT_FILTER_BACKENDS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;django_filters.rest_framework.DjangoFilterBackend&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者你也可以将filter backend添加到一个单独的view或viewSet中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django_filters<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> DjangoFilterBackend
    <span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>DjangoFilterBackend<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只需要简单的根据是否相等的过滤，则可以在视图或视图集上设置<code>filterset_fields</code>属性，列出要过滤的字段集合。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ProductList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> ProductSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>DjangoFilterBackend<span class="token punctuation">]</span>
    filterset_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in_stock&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将自动为给定的字段创建一个<code>FilterSet</code>类，并允许你发出如下请求：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/products?category=clothing&amp;in_stock=True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,41),u=n("code",null,"FilterSet",-1),d={href:"https://django-filter.readthedocs.io/en/latest/index.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="specifying-filter-fields-指定筛选字段" tabindex="-1"><a class="header-anchor" href="#specifying-filter-fields-指定筛选字段" aria-hidden="true">#</a> Specifying filter fields（指定筛选字段）</h2><p>如果你的需求都是些简单相等类型的筛选，那么你可以在你的view或viewSet里面设置一个<code>filter_fields</code>属性，列出所有你想依靠筛选的字段集合。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ProductList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> ProductSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>DjangoFilterBackend<span class="token punctuation">,</span><span class="token punctuation">)</span>
    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in_stock&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将为你列出来的字段自动创建一个filterSet，允许你想下面这样请求筛选结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/products?category=clothing&amp;in_stock=True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="specifying-a-filterset-指定filterset" tabindex="-1"><a class="header-anchor" href="#specifying-a-filterset-指定filterset" aria-hidden="true">#</a> Specifying a FilterSet（指定FilterSet）</h2><p>对于更高级的过滤要求，你可以指定在view中应该使用的<code>FilterSet</code>类。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> django_filters
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>models <span class="token keyword">import</span> Product
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ProductSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics
<span class="token keyword">class</span> <span class="token class-name">ProductFilter</span><span class="token punctuation">(</span>django_filters<span class="token punctuation">.</span>rest_framework<span class="token punctuation">.</span>FilterSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    min_price <span class="token operator">=</span> django_filters<span class="token punctuation">.</span>NumberFilter<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">,</span> lookup_expr<span class="token operator">=</span><span class="token string">&#39;gte&#39;</span><span class="token punctuation">)</span>
    max_price <span class="token operator">=</span> django_filters<span class="token punctuation">.</span>NumberFilter<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">,</span> lookup_expr<span class="token operator">=</span><span class="token string">&#39;lte&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Product
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in_stock&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;min_price&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max_price&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">ProductList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> ProductSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>django_filters<span class="token punctuation">.</span>rest_framework<span class="token punctuation">.</span>DjangoFilterBackend<span class="token punctuation">,</span><span class="token punctuation">)</span>
    filter_class <span class="token operator">=</span> ProductFilter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将允许你向下面一样发出请求，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/products?category=clothing&amp;max_price=10.00
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以使用<code>django-filter</code>跨越关系，让我们假设每个产品都有<code>Manufacturer</code>模型的外键，所以我们创建过滤器使用<code>Manufacturer</code>名称过滤。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> django_filters
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>models <span class="token keyword">import</span> Product
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ProductSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics
<span class="token keyword">class</span> <span class="token class-name">ProductFilter</span><span class="token punctuation">(</span>django_filters<span class="token punctuation">.</span>rest_framework<span class="token punctuation">.</span>FilterSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Product
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in_stock&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;manufacturer__name&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使我们能够进行如下查询：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/products?manufacturer__name=foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这很好，但它将Django的双下划线约定作为API的一部分暴露出来。如果你想显式地命名过滤器参数，你可以显式地将它包含在<code>FilterSet</code>类中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> django_filters
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>models <span class="token keyword">import</span> Product
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> ProductSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics
<span class="token keyword">class</span> <span class="token class-name">ProductFilter</span><span class="token punctuation">(</span>django_filters<span class="token punctuation">.</span>rest_framework<span class="token punctuation">.</span>FilterSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    manufacturer <span class="token operator">=</span> django_filters<span class="token punctuation">.</span>CharFilter<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;manufacturer__name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Product
        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in_stock&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;manufacturer&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可以下面这样执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/products?manufacturer=foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18),v={href:"https://django-filter.readthedocs.io/en/latest/index.html",target:"_blank",rel:"noopener noreferrer"},g=n("hr",null,null,-1),h=n("h3",{id:"hints-tips-提示",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hints-tips-提示","aria-hidden":"true"},"#"),s(" Hints & Tips（提示）")],-1),b=n("li",null,[n("p",null,[s("默认情况下未启用过滤。如果你想使用"),n("code",null,"DjangoFilterBackend"),s("记得确保它是通过使用"),n("code",null,"DEFAULT_FILTER_BACKENDS"),s("设置安装的。")])],-1),f=n("code",null,"True",-1),_=n("code",null,"False",-1),y=n("code",null,"0",-1),w=n("code",null,"1",-1),x=n("code",null,"true",-1),j=n("code",null,"false",-1),q={href:"https://github.com/django/django/blob/master/django/forms/widgets.py",target:"_blank",rel:"noopener noreferrer"},P=n("li",null,[n("p",null,[n("code",null,"django-filter"),s("支持使用Django的双下划线语法对关系进行过滤。")])],-1),F=n("hr",null,null,-1),S=n("h2",{id:"searchfilter-搜索过滤",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#searchfilter-搜索过滤","aria-hidden":"true"},"#"),s(" SearchFilter（搜索过滤）")],-1),L=n("code",null,"SearchFilter",-1),z={href:"https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields",target:"_blank",rel:"noopener noreferrer"},A=n("br",null,null,-1),D=n("code",null,"SearchFilter",-1),I=n("img",{src:"https://cdn.nlark.com/yuque/0/2021/png/12492743/1622687993369-b53fed70-f097-4665-bb20-31379b13bba1.png#align=left&display=inline&height=108&margin=[object Object]&originHeight=108&originWidth=591&size=0&status=done&style=none&width=591",alt:"",loading:"lazy"},null,-1),R=n("br",null,null,-1),U=n("code",null,"search_fields",-1),V=n("code",null,"SearchFilter",-1),E=n("code",null,"search_fields",-1),B=n("code",null,"CharField",-1),T=n("code",null,"TextField",-1),M=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将允许客户端通过进行以下查询来过滤列表中的项目：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/users?search=russell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你还可以在查找API中使用双下划线符号对ForeignKey或ManyToManyField执行相关查找：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;profile__profession&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，搜索将使用不区分大小写的部分匹配。 搜索参数可以包含多个搜索项，其应该是空格和/或逗号分隔。 如果使用多个搜索术语，则仅当所有提供的术语都匹配时才在列表中返回对象。<br> 可以通过在<code>search_fields</code>前面添加各种字符来限制搜索行为。</p><ul><li><p>&#39;^&#39; 以指定内容开始.</p></li><li><p>&#39;=&#39; 完全匹配</p></li><li><p>&#39;@&#39; 全文搜索（目前只支持Django的MySQL后端）</p></li><li><p>&#39;$&#39; 正则搜索</p></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;=username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=email&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),N=n("code",null,"'search'",-1),O=n("code",null,"SEARCH_PARAM",-1),C=n("br",null,null,-1),K={href:"https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields",target:"_blank",rel:"noopener noreferrer"},H=t(`<hr><h2 id="orderingfilter-排序筛选" tabindex="-1"><a class="header-anchor" href="#orderingfilter-排序筛选" aria-hidden="true">#</a> OrderingFilter（排序筛选）</h2><p><code>OrderingFilter</code>类支持简单的查询参数控制结果排序。<img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1622687993367-fab84682-994f-4694-aa74-242f5c3b629f.png#align=left&amp;display=inline&amp;height=240&amp;margin=[object Object]&amp;originHeight=240&amp;originWidth=592&amp;size=0&amp;status=done&amp;style=none&amp;width=592" alt="" loading="lazy"><br> 默认情况下，查询参数名为<code>&#39;ordering&#39;</code>，但这可以通过使用<code>ORDERING_PARAM</code>设置覆盖。<br> 例如，按用户名排序用户：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/users?ordering=username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>客户端还可以通过为字段名称加上&#39;-&#39;来指定反向排序，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/users?ordering=-username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以指定多个排序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://example.com/api/users?ordering=account,username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="specifying-which-fields-may-be-ordered-against-指定支持排序的字段" tabindex="-1"><a class="header-anchor" href="#specifying-which-fields-may-be-ordered-against-指定支持排序的字段" aria-hidden="true">#</a> Specifying which fields may be ordered against（指定支持排序的字段）</h2><p>建议你明确指定API应在ordering filter中允许哪些字段。您可以通过在view中设置<code>ordering_fields</code>属性来实现这一点，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这有助于防止意外的数据泄漏，例如允许用户针对密码哈希字段或其他敏感数据进行排序。<br> 如果不在视图上指定<code>ordering_fields</code>属性，过滤器类将默认允许用户对<code>serializer_class</code>属性指定的serializer上的任何可读字段进行过滤。<br> 如果你确信视图正在使用的queryset不包含任何敏感数据，则还可以通过使用特殊值<code>&#39;__all__&#39;</code>来明确指定view应允许对任何model字段或queryset进行排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BookingsListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Booking<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> BookingSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    ordering_fields <span class="token operator">=</span> <span class="token string">&#39;__all__&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="specifying-a-default-ordering-指定默认排序" tabindex="-1"><a class="header-anchor" href="#specifying-a-default-ordering-指定默认排序" aria-hidden="true">#</a> Specifying a default ordering（指定默认排序）</h2><p>如果在view中设置了<code>ordering</code>属性，则将把它用作默认排序。<br> 通常，你可以通过在初始queryset上设置<code>order_by</code>来控制此操作，但是使用view中的<code>ordering</code>参数允许你以某种方式指定排序，然后可以将其作为上下文自动传递到呈现的模板。如果它们用于排序结果的话就能使自动渲染不同的列标题成为可能。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
    ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ordering</code>属性可以是字符串或字符串的列表/元组。</p><hr><h1 id="djangoobjectpermissionsfilte-django对象权限过滤" tabindex="-1"><a class="header-anchor" href="#djangoobjectpermissionsfilte-django对象权限过滤" aria-hidden="true">#</a> DjangoObjectPermissionsFilte（Django对象权限过滤）</h1>`,19);function G(W,Q){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("对于更高级的过滤要求，你可以指定视图应使用的"),u,s("类。你可以在"),n("a",d,[s("django-filter"),e(a)]),s("文档中阅读有关FilterSets的更多信息。还建议你阅读有关"),n("a",k,[s("DRF集成"),e(a)]),s("的部分。")]),m,n("p",null,[s("有关使用过滤器集的更多详细信息，请参阅"),n("a",v,[s("django-filter文档"),e(a)]),s("。")]),g,h,n("ul",null,[b,n("li",null,[n("p",null,[s("使用布尔字段时，您应该在网址查询参数中使用"),f,s("和"),_,s("值，而不是"),y,s("，"),w,s("，"),x,s("或"),j,s("。 （允许的布尔值目前硬连线在Django的"),n("a",q,[s("NullBooleanSelect实现中"),e(a)]),s("。）")])]),P]),F,S,n("p",null,[L,s("类支持基于简单单查询参数的搜索，并且基于"),n("a",z,[s("Django admin的搜索功能"),e(a)]),s("。"),A,s(" 在使用时， browsable API将包括一个"),D,s("控件："),I,R,s(" 仅当view中设置了"),U,s("属性时，才应用"),V,s("类。"),E,s("属性应该是model中文本类型字段的名称列表，例如"),B,s("或"),T,s("。")]),M,n("p",null,[s("默认情况下，搜索参数名为"),N,s("，但这可以通过使用"),O,s("设置覆盖。"),C,s(" 有关更多详细信息，请参阅"),n("a",K,[s("Django文档"),e(a)]),s("。")]),H])}const X=i(l,[["render",G],["__file","17.Filtering（过滤）.html.vue"]]);export{X as default};
