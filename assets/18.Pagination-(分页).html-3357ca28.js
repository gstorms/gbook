import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as p,a as n,b as a,d as s,f as t}from"./app-cfbf85c1.js";const l={},d=n("h1",{id:"pagination-分页",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pagination-分页","aria-hidden":"true"},"#"),a(" Pagination (分页)")],-1),r=n("br",null,null,-1),u={href:"https://docs.djangoproject.com/en/stable/topics/pagination/",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>REST框架包括对可定制的分页样式的支持。 这使您可以调整使大型结果集被拆分为单独的数据页面。<br> 分页API可以支持以下两者之一：</p><ul><li>作为响应内容的一部分提供的分页链接。</li><li>包含在响应标头中的分页链接，例如 <code>Content-Range</code> 或 <code>Link</code>。</li></ul><p>当前内置样式都使用作为响应内容一部分的链接。当使用可浏览的API时，这种样式更容易访问。<br> 只有在使用常规视图或视图集时才自动执行分页。如果使用的是常规的 <code>APIView</code> ，则需要自行调用分页API以确保返回分页的响应。请参见 <code>mixins.ListModelMixin</code> 以及 <code>generics.GenericAPIView</code> 类作为示例。<br> Pagination can be turned off by setting the pagination class to <code>None</code>. 可以通过将Pagination类设置为 <code>None</code> 来关闭分页。</p><h2 id="setting-the-pagination-style-设置分页样式" tabindex="-1"><a class="header-anchor" href="#setting-the-pagination-style-设置分页样式" aria-hidden="true">#</a> Setting the pagination style (设置分页样式)</h2><p>可以使用 <code>DEFAULT_PAGINATION_CLASS</code> 和 <code>PAGE_SIZE</code> 设置键全局设置分页样式。例如，为了使用内置的限制/偏移分页，可以执行以下操作</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.pagination.LimitOffsetPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，您需要同时设置分页类和应该使用的页面大小。默认情况下， <code>DEFAULT_PAGINATION_CLASS</code> 和 <code>PAGE_SIZE</code> 均为 <code>None</code> 。<br> 也可以使用 <code>pagination_class</code> 属性在单个视图上设置分页类。通常，您希望在整个API中使用相同的分页样式，尽管您可能希望根据每个视图改变分页的各个方面，例如默认或最大页面大小。</p><h2 id="modifying-the-pagination-style-调整分页样式" tabindex="-1"><a class="header-anchor" href="#modifying-the-pagination-style-调整分页样式" aria-hidden="true">#</a> Modifying the pagination style (调整分页样式)</h2><p>如果要修改分页样式的特定方面，则需要重写其中一个分页类，并设置要更改的属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LargeResultsSetPagination</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page_size <span class="token operator">=</span> <span class="token number">1000</span>
    page_size_query_param <span class="token operator">=</span> <span class="token string">&#39;page_size&#39;</span>
    max_page_size <span class="token operator">=</span> <span class="token number">10000</span>
<span class="token keyword">class</span> <span class="token class-name">StandardResultsSetPagination</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page_size <span class="token operator">=</span> <span class="token number">100</span>
    page_size_query_param <span class="token operator">=</span> <span class="token string">&#39;page_size&#39;</span>
    max_page_size <span class="token operator">=</span> <span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，可以使用 <code>.pagination_class</code> 属性将新样式应用于视图：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BillingRecordsView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Billing<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> BillingRecordsSerializer
    pagination_class <span class="token operator">=</span> LargeResultsSetPagination
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用默认的 <code>DEFAULT_PAGINATION_CLASS</code> 设置键全局应用样式。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;apps.core.pagination.StandardResultsSetPagination&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h1><h2 id="pagenumberpagination" tabindex="-1"><a class="header-anchor" href="#pagenumberpagination" aria-hidden="true">#</a> PageNumberPagination</h2><p>此分页样式接受请求查询参数中的单个数字页码。<br><strong>Request</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET https://api.example.org/accounts/?page=4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Response</strong>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>HTTP <span class="token number">200</span> OK
<span class="token punctuation">{</span>
    <span class="token string">&quot;count&quot;</span><span class="token punctuation">:</span> <span class="token number">1023</span>
    <span class="token string">&quot;next&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?page=5&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;previous&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?page=3&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;results&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
       …
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setup-设置" tabindex="-1"><a class="header-anchor" href="#setup-设置" aria-hidden="true">#</a> Setup (设置)</h4><p>为了全局启用 <code>PageNumberPagination</code> 样式，请使用以下配置，并根据需要设置 <code>PAGE_SIZE</code> ：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.pagination.PageNumberPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>GenericAPIView</code> 子类中，还可以设置 <code>pagination_class</code> 属性，以在每个视图的基础上选择 <code>PageNumberPagination</code>。</p><h4 id="configuration-配置" tabindex="-1"><a class="header-anchor" href="#configuration-配置" aria-hidden="true">#</a> Configuration (配置)</h4><p><code>PageNumberPagination</code> 类包含许多属性，通过重写其中的一些属性可以修改分页属性<br> 为了设置这些属性，应当重写 <code>PageNumberPagination</code> 类，然后如上所述启用自定义分页类。</p><ul><li><code>django_paginator_class</code> —— 要使用的django paginator类。默认为 <code>django.core.paginator.Paginator</code> ，适用于大多数情况。</li><li><code>page_size</code> —— 表示页面大小的数值。如果设置，则覆盖 <code>PAGE_SIZE</code> 设置。其默认值与 <code>PAGE_SIZE</code> 设置键相同。</li><li><code>page_query_param</code> —— 一个字符串值，指示用于分页控件的查询参数的名称。</li><li><code>page_size_query_param</code> —— 如果设置，这是一个字符串值，指示允许客户端根据每个请求设置页面大小的查询参数的名称。默认值为 <code>None</code>，表示客户端可能无法控制请求的页面大小。</li><li><code>max_page_size</code> —— 如果设置，这是一个数字值，指示允许的最大请求页面大小。此属性仅在设置了 <code>page_size_query_param</code> 时有效。</li><li><code>last_page_strings</code> —— 一个字符串值的列表或元组，指示可与<code>page_query_param</code> 一起使用的值，以请求集合中的最后一页。默认为 <code>(&#39;last&#39;,)</code>。</li><li><code>template</code> —— 在可浏览API中呈现分页控件时要使用的模板名称。可以重写以修改呈现样式，或设置为 <code>None</code> 以完全禁用HTML分页控件。默认为 <code>&quot;rest_framework/pagination/numbers.html&quot;</code>。</li></ul><hr><h2 id="limitoffsetpagination" tabindex="-1"><a class="header-anchor" href="#limitoffsetpagination" aria-hidden="true">#</a> LimitOffsetPagination</h2><p>这种分页样式反映了查找多个数据库记录时使用的语法。客户端包括“limit”和“offset”查询参数。limit指示要返回的项目的最大数目，这相当于其他样式中的 <code>page_size</code>。offset指示查询相对于完整的未分页项的起始位置。<br><strong>Request</strong>:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET https://api.example.org/accounts/?limit=100&amp;offset=400
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Response</strong>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>HTTP <span class="token number">200</span> OK
<span class="token punctuation">{</span>
    <span class="token string">&quot;count&quot;</span><span class="token punctuation">:</span> <span class="token number">1023</span>
    <span class="token string">&quot;next&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?limit=100&amp;offset=500&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;previous&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?limit=100&amp;offset=300&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;results&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
       …
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setup-设置-1" tabindex="-1"><a class="header-anchor" href="#setup-设置-1" aria-hidden="true">#</a> Setup (设置)</h4><p>为了全局启用 <code>LimitOffsetPagination</code>样式，请使用以下配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.pagination.LimitOffsetPagination&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选地，您也可以设置 <code>PAGE_SIZE</code> 键。如果还使用了 <code>PAGE_SIZE</code> 参数，那么 <code>limit</code> query参数将是可选的，并且可以被客户端忽略。<br> 在 <code>GenericAPIView</code> 子类中，您还可以设置 <code>pagination_class</code> 属性，以便在每个视图的基础上选择 <code>LimitOffsetPagination</code>。</p><h4 id="configuration-配置-1" tabindex="-1"><a class="header-anchor" href="#configuration-配置-1" aria-hidden="true">#</a> Configuration (配置)</h4><p><code>LimitOffsetPagination</code> 类包含许多可以重写以修改分页样式的属性。<br> 为了设置这些属性，需要重写 <code>LimitOffsetPagination</code> 类，然后如上所述启用自定义分页类。</p><ul><li><code>default_limit</code> —— 数值，指示在客户端未在查询参数中提供限制时使用的限制。默认为与 <code>PAGE_SIZE</code> 设置键相同的值。</li><li><code>limit_query_param</code> —— 字符串值，指示“limit”查询参数的名称。默认为 <code>&#39;limit&#39;</code>。</li><li><code>offset_query_param</code> —— 字符串值，指示“offset”查询参数的名称。默认为 <code>&#39;offset&#39;</code>。</li><li><code>max_limit</code> —— 如果设置，这是一个数值，指示客户端可能请求的最大允许限制。默认为 <code>None</code>。</li><li><code>template</code> —— 在可浏览API中呈现分页控件时要使用的模板名称。可以重写以修改呈现样式，或设置为 <code>None</code> 以完全禁用HTML分页控件。默认为 <code>&quot;rest_framework/pagination/numbers.html&quot;</code>。</li></ul><hr><h2 id="cursorpagination" tabindex="-1"><a class="header-anchor" href="#cursorpagination" aria-hidden="true">#</a> CursorPagination</h2><p>基于cursor的分页提供了一个不透明的“游标”指示器，客户端可以使用它对结果集进行分页。这种分页样式只显示正向和反向控件，而不允许客户端导航到任意位置。<br> 基于cursor的分页要求结果集中的项具有唯一的、不变的顺序。此顺序通常可能是记录上的创建时间戳，因为它提为分页供了一致的顺序。<br> 基于cursor的分页比其他方案更复杂。它还要求结果集呈现固定的顺序，并且不允许客户端任意索引结果集。但是，它确实提供了以下好处：</p><ul><li>提供一致的分页视图。当恰当地使用时，<code>CursorPagination</code> 可以确保客户端在翻阅记录时永远不会看到同一个项目两次，即使在分页过程中其他客户端正在插入新的项目时亦是如此。</li><li>支持使用非常大的数据集。对于极其庞大的数据集，使用基于offset的分页样式进行分页可能会变得效率低下或无法使用。基于cursor的分页方案具有固定时间的属性，并且不会随着数据集大小的增加而减慢。</li></ul><h4 id="details-and-limitations" tabindex="-1"><a class="header-anchor" href="#details-and-limitations" aria-hidden="true">#</a> Details and limitations</h4><p>正确使用基于cursor的分页需要注意一些细节。你需要考虑你希望该方案适用于什么样的顺序。默认值是按 <code>&quot;-created&quot;</code> 排序。这假设模型实例上<strong>必须有一个“created”时间戳字段</strong>，并且将呈现一个“timeline”样式的，最新添加的项在前面的分页视图。<br> 可以通过重写分页类中的 <code>&#39;ordering&#39;</code> 属性，或将 <code>OrderingFilter</code> 筛选器类与 <code>CursorPagination</code> 一起使用来修改排序。当与 <code>OrderingFilter</code> 一起使用时，您应该考虑严格限制用户可以按其排序的字段。<br> 正确使用cursor分页应使用有满足以下条件的排序字段：</p>`,47),h=n("li",null,"应当是一个不变的值，例如时间戳、slug或其他在创建时只设置一次的字段。",-1),m=n("li",null,'应当是独一无二的，或者几乎是独一无二的。毫秒精度的时间戳就是一个很好的例子。cursor分页的这种实现使用了一种智能的"position plus offset" 样式，允许它正确地支持不严格唯一的值作为排序。',-1),k=n("li",null,"应当为可强制转化为字符串的不可为null的值。",-1),v={href:"https://gist.github.com/keturn/8bc88525a183fd41c73ffb729b8865be#file-fpcursorpagination-py",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"CursorPagination",-1),b=n("li",null,"字段应具有数据库索引。",-1),f=n("br",null,null,-1),P={href:"http://cramer.io/2011/03/08/building-cursors-for-the-disqus-api",target:"_blank",rel:"noopener noreferrer"},y=t(`<h4 id="setup-设置-2" tabindex="-1"><a class="header-anchor" href="#setup-设置-2" aria-hidden="true">#</a> Setup （设置）</h4><p>为了全局启用 <code>CursorPagination</code> 样式，请使用以下配置，根据需要修改 <code>PAGE_SIZE</code> ：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.pagination.CursorPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>GenericAPIView</code> 子类中，还可以设置 <code>pagination_class</code> 属性，以在每个视图的基础上选择 <code>CursorPagination</code>。</p><h4 id="configuration-配置-2" tabindex="-1"><a class="header-anchor" href="#configuration-配置-2" aria-hidden="true">#</a> Configuration (配置)</h4><p><code>CursorPagination</code> 类包含许多可以重写以修改分页样式的属性，。<br> 为了设置这些属性，需要重写 <code>CursorPagination</code> 类，然后如上所述启用自定义分页类。</p><ul><li><code>page_size</code> = 表示 <code>PAGE_SIZE</code> 的数值。如果设置，则覆盖页面大小设置。默认为与 <code>PAGE_SIZE</code> 设置键相同的值。</li><li><code>cursor_query_param</code> = 字符串值，指示“cursor”查询参数的名称。默认为 <code>&#39;cursor&#39;</code>。</li><li><code>ordering</code> = 这应当是一个字符串或字符串列表，指示将对其应用基于cursor的分页的字段。例如： <code>ordering=&#39;slug&#39;</code>。默认为 <code>-created</code>。也可以通过在视图上使用 <code>OrderingFilter</code> 覆盖此值。</li><li><code>template</code> = 在可浏览API中呈现分页控件时要使用的模板的名称。可以重写以修改呈现样式，或设置为“无”以完全禁用HTML分页控件。默认为 <code>&quot;rest_framework/pagination/previous_and_next.html&quot;</code>。</li></ul><hr><h1 id="custom-pagination-styles-自定义分页样式" tabindex="-1"><a class="header-anchor" href="#custom-pagination-styles-自定义分页样式" aria-hidden="true">#</a> Custom pagination styles (自定义分页样式)</h1><p>为了创建自定义分页序列化程序类，应将 <code>pagination.BasePagination</code> 子类化，并重写 <code>paginate_queryset(self, queryset, request, view=None)</code> 和 <code>get_paginated_response(self, data)</code> 方法：</p><ul><li><code>paginate_queryset</code> 方法被传递给初始的queryset，它应该返回一个iterable对象，该对象只包含请求页中的数据。</li><li>The <code>get_paginated_response</code> m方法传递序列化的页数据，并应返回一个 <code>Response</code> 。</li></ul><p>注意，<code>paginate_queryset</code> 方法可能会在分页实例上设置state，该state （？）稍后可能会由<code>get_paginated_response</code> 方法使用。</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>假设我们想用一个修改过的格式替换默认的分页输出样式，该格式在嵌套的“links”键中包含下一页和上一页的链接。我们可以规定一个自定义分页类，如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomPagination</span><span class="token punctuation">(</span>pagination<span class="token punctuation">.</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_paginated_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&#39;links&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
               <span class="token string">&#39;next&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>get_next_link<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token string">&#39;previous&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>get_previous_link<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token string">&#39;count&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>page<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
            <span class="token string">&#39;results&#39;</span><span class="token punctuation">:</span> data
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们需要在配置中设置自定义类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;my_project.apps.core.pagination.CustomPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果您关心在可浏览API中如何在响应中显示键的顺序，那么在构造分页响应主体时，您可能会选择使用 <code>OrderedDict</code>，但这是可选的。</p><h2 id="using-your-custom-pagination-class-使用自定义分页类" tabindex="-1"><a class="header-anchor" href="#using-your-custom-pagination-class-使用自定义分页类" aria-hidden="true">#</a> Using your custom pagination class （使用自定义分页类）</h2><p>为了在默认情况下使用自定义分页类，请使用 <code>DEFAULT_PAGINATION_CLASS</code> 设置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;my_project.apps.core.pagination.LinkHeaderPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表终端的API响应现在将包括一个 <code>Link</code> 头，而不是将分页链接作为响应正文的一部分，例如：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1622688243468-ace85c6c-dff7-49e1-b243-ea1f1313b914.png#align=left&amp;display=inline&amp;height=254&amp;margin=[object Object]&amp;originHeight=254&amp;originWidth=665&amp;size=0&amp;status=done&amp;style=none&amp;width=665" alt="" loading="lazy"><br><em>A custom pagination style, using the &#39;Link&#39; header&#39;</em></p><hr><h2 id="pagination-schemas-分页和模式" tabindex="-1"><a class="header-anchor" href="#pagination-schemas-分页和模式" aria-hidden="true">#</a> Pagination &amp; schemas （分页和模式）</h2><p>还可以通过应用 <code>get_schema_fields()</code> 方法，使分页控件可用于REST框架提供的模式自动生成。此方法应当有以下签名：<br><code>get_schema_fields(self, view)</code><br> 此方法应当返回一个coreapi.Field实例的列表。</p><hr><h1 id="html-pagination-controls-html分页控件" tabindex="-1"><a class="header-anchor" href="#html-pagination-controls-html分页控件" aria-hidden="true">#</a> HTML pagination controls （HTML分页控件）</h1><p>默认情况下，使用分页类将导致HTML分页控件在可浏览的API中显示。有两种内置的显示样式。 <code>PageNumberPagination</code> 和 <code>LimitOffsetPagination</code> 类显示带有上一页和下一页控件的页码列表。 <code>CursorPagination</code> 类显示的样式更简单，仅显示上一页和下一页控件。</p><h2 id="customizing-the-controls-自定义控件" tabindex="-1"><a class="header-anchor" href="#customizing-the-controls-自定义控件" aria-hidden="true">#</a> Customizing the controls （自定义控件)</h2><p>您可以重写呈现HTML分页控件的模板。两种内置样式是：</p><ul><li><code>rest_framework/pagination/numbers.html</code></li><li><code>rest_framework/pagination/previous_and_next.html</code></li></ul><p>在全局模板目录中提供具有这些路径之一的模板将覆盖相关分页类的默认渲染。<br> 或者，可以通过以下方式完全禁用HTML分页控件：将现有类的子类化，将 <code>template = None</code> 设置为该类的属性。然后，您需要配置 <code>DEFAULT_PAGINATION_CLASS</code> 设置键，以将自定义类作为默认的分页样式使用。</p><h4 id="low-level-api" tabindex="-1"><a class="header-anchor" href="#low-level-api" aria-hidden="true">#</a> Low-level API</h4><p>当 <code>display_page_controls</code> 属性在分页实例中时，决定分页类是否显示控件的低级API被暴露出来。如果自定义分页类要求显示HTML分页控件，则应在 <code>paginate_queryset</code> 方法中将其设置为 <code>True</code>。<br><code>.to_html()</code> 和 <code>.get_html_context()</code> 方法也可以在自定义分页类中重写，以便进一步自定义控件的渲染方式。</p><hr><h1 id="third-party-packages" tabindex="-1"><a class="header-anchor" href="#third-party-packages" aria-hidden="true">#</a> Third party packages</h1><p>The following third party packages are also available.</p><h2 id="drf-extensions" tabindex="-1"><a class="header-anchor" href="#drf-extensions" aria-hidden="true">#</a> DRF-extensions</h2>`,38),A={href:"http://chibisov.github.io/drf-extensions/docs/",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"DRF-extensions",-1),E={href:"http://chibisov.github.io/drf-extensions/docs/#paginatebymaxmixin",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"PaginateByMaxMixin",-1),S=n("code",null,"?page_size=max",-1),q=n("h2",{id:"drf-proxy-pagination",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#drf-proxy-pagination","aria-hidden":"true"},"#"),a(" drf-proxy-pagination")],-1),T={href:"https://github.com/tuffnatty/drf-proxy-pagination",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"drf-proxy-pagination",-1),N=n("code",null,"ProxyPagination",-1);function R(w,G){const e=o("ExternalLinkIcon");return c(),p("div",null,[d,n("blockquote",null,[n("p",null,[a("Django provides a few classes that help you manage paginated data – that is, data that’s split across several pages, with “Previous/Next” links."),r,a(" — "),n("a",u,[a("Django 文档"),s(e)])])]),g,n("ul",null,[h,m,k,n("li",null,[a("不应当是浮点数。精度误差容易导致不正确的结果。提示：改用小数。（如果已经有一个浮点数字段，并且必须根据它进行分页，那么"),n("a",v,[a("这里提供了一个使用小数限制精度的 "),_,a(" 子类示例。"),s(e)]),a("）")]),b]),n("p",null,[a("使用不满足这些约束的排序字段通常仍然有效，但是您将失去游标分页的一些好处。"),f,a(" 关于我们用于游标分页的实现的更多技术细节，"),n("a",P,[a('"Building cursors for the Disqus API"'),s(e)]),a(" 博客文章对基本方法进行了很好的概述。")]),y,n("p",null,[a("The "),n("a",A,[x,a(" package"),s(e)]),a(" includes a "),n("a",E,[I,a(" mixin class"),s(e)]),a(" that allows your API clients to specify "),S,a(" to obtain the maximum allowed page size.")]),q,n("p",null,[a("The "),n("a",T,[L,a(" package"),s(e)]),a(" includes a "),N,a(" class which allows to choose pagination class with a query parameter.")])])}const F=i(l,[["render",R],["__file","18.Pagination-(分页).html.vue"]]);export{F as default};
