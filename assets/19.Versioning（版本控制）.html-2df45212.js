import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c,a as s,b as n,d as e,f as o}from"./app-cfbf85c1.js";const r={},l=s("h1",{id:"versioning-版本控制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#versioning-版本控制","aria-hidden":"true"},"#"),n(" Versioning（版本控制）")],-1),d=s("br",null,null,-1),u={href:"http://www.slideshare.net/evolve_conference/201308-fielding-evolve/31",target:"_blank",rel:"noopener noreferrer"},v=s("br",null,null,-1),k=s("br",null,null,-1),m={href:"http://www.infoq.com/articles/roy-fielding-on-versioning",target:"_blank",rel:"noopener noreferrer"},h=o(`<h2 id="使用rest框架进行版本控制" tabindex="-1"><a class="header-anchor" href="#使用rest框架进行版本控制" aria-hidden="true">#</a> 使用REST框架进行版本控制</h2><p>当启用API版本控制，<code>request.version</code> 属性将包含与传入客户端请求中请求的版本相对应的字符串。<br> 默认情况下，版本控制没有启用，<code>request.version</code> 将总是返回 <code>None</code>。</p><h4 id="根据版本改变行为" tabindex="-1"><a class="header-anchor" href="#根据版本改变行为" aria-hidden="true">#</a> 根据版本改变行为</h4><p>如何改变API的行为取决于你自己，但是一个你通常想要的例子是在新版本中切换到不同的序列化样式。例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>version <span class="token operator">==</span> <span class="token string">&#39;v1&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> AccountSerializerVersion1
    <span class="token keyword">return</span> AccountSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反向解析版本化api的url" tabindex="-1"><a class="header-anchor" href="#反向解析版本化api的url" aria-hidden="true">#</a> 反向解析版本化API的URL</h4><p>REST framework 包含的 <code>reverse</code> 函数与版本控制方案相关联。你需要确保将当前 <code>request</code> 作为关键字参数传递进去，如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse
reverse<span class="token punctuation">(</span><span class="token string">&#39;bookings-list&#39;</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述函数将应用任何适用于请求版本的URL转换。例如:</p><ul><li>如果使用<code>NamespacedVersioning</code>，并且API的版本是&#39;v1&#39;，那么将会查找 <code>&#39;v1:bookings-list&#39;</code>，可能反向解析为类似<code>http://example.org/v1/bookings/</code> 这个URL。</li><li>如果使用<code>QueryParameterVersioning</code> 并且API的版本是<code>1.0</code>，那么返回的URL可能就像这样<code>http://example.org/bookings/?version=1.0</code>。</li></ul><h4 id="版本化-api-和超链接序列化器" tabindex="-1"><a class="header-anchor" href="#版本化-api-和超链接序列化器" aria-hidden="true">#</a> 版本化 API 和超链接序列化器</h4><p>当将超链接序列化样式与基于URL的版本控制方案一起使用时，请确保将请求作为上下文包含在序列化程序中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Booking<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer <span class="token operator">=</span> BookingsSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;all_bookings&#39;</span><span class="token punctuation">:</span> serializer<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做将会在任何返回的URL中包含适当的版本控制。</p><h2 id="配置版本控制方案" tabindex="-1"><a class="header-anchor" href="#配置版本控制方案" aria-hidden="true">#</a> 配置版本控制方案</h2><p>版本控制方案由settings中的<code>DEFAULT_VERSIONING_CLASS</code>为key来配置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_VERSIONING_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.versioning.NamespaceVersioning&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除非显式设置，否则<code>DEFAULT_VERSIONING_CLASS</code>将会是<code>None</code>。在这种情况下<code>request.version</code>属性将总是返回<code>None</code>。<br> 还可以在单个视图上设置版本控制方案。通常不需要这样做，因为全局使用单一版本控制方案更有意义。如果确实需要这样做，请在视图类中使用<code>versioning_class</code>属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ProfileList</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    versioning_class <span class="token operator">=</span> versioning<span class="token punctuation">.</span>QueryParameterVersioning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他版本控制设置" tabindex="-1"><a class="header-anchor" href="#其他版本控制设置" aria-hidden="true">#</a> 其他版本控制设置</h4><p>以下设置的key也用于控制版本控制:</p><ul><li><code>DEFAULT_VERSION</code>. 当版本控制信息不存在时用于设置<code>request.version</code>的默认值，默认设置为<code>None</code>。</li><li><code>ALLOWED_VERSIONS</code>. 如果设置了此值将限制版本控制方案可能返回的版本集，如果客户端请求提供的版本不在此集中，则会引发错误。请注意，用于<code>DEFAULT_VERSION</code>的值应该总是在<code>ALLOWED_VERSIONS</code>设置的集合中（除非是<code>None</code>）。该配置默认是 <code>None</code>。</li><li><code>VERSION_PARAM</code>. 一个应当用于任何版本控制系统参数的字符串，例如媒体类型或URL查询参数。默认值是<code>&#39;version&#39;</code>。</li></ul><p>你还可以通过自定义版本控制方案并使用<code>default_version</code>，<code>allowed_versions</code>和<code>version_param</code>类变量，在每个视图或每个视图集的基础上设置版本类加上这三个值。例如，如果你想使用<code>URLPathVersioning</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>versioning <span class="token keyword">import</span> URLPathVersioning
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">ExampleVersioning</span><span class="token punctuation">(</span>URLPathVersioning<span class="token punctuation">)</span><span class="token punctuation">:</span>
    default_version <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    allowed_versions <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    version_param <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIVIew<span class="token punctuation">)</span><span class="token punctuation">:</span>
    versioning_class <span class="token operator">=</span> ExampleVersioning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="api参考" tabindex="-1"><a class="header-anchor" href="#api参考" aria-hidden="true">#</a> API参考</h1><h2 id="acceptheaderversioning" tabindex="-1"><a class="header-anchor" href="#acceptheaderversioning" aria-hidden="true">#</a> AcceptHeaderVersioning</h2><p>此方案要求客户端在<code>Accept</code> header 中将版本指定为媒体类型的一部分。该版本作为媒体类型参数包含在内，它补充了主要媒体类型。<br> 下面是一个使用accept header版本化样式的HTTP请求示例。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /bookings/ HTTP/1.1
Host: example.com
Accept: application/json; version=1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),g=s("code",null,"request.version",-1),b=s("code",null,"'1.0'",-1),_={href:"http://blog.steveklabnik.com/posts/2011-07-03-nobody-understands-rest-or-http#i_want_my_api_to_be_versioned",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/interagent/http-api-design/blob/master/en/foundations/require-versioning-in-the-accepts-header.md",target:"_blank",rel:"noopener noreferrer"},f=s("h4",{id:"using-accept-headers-with-vendor-media-types",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#using-accept-headers-with-vendor-media-types","aria-hidden":"true"},"#"),n(" Using accept headers with vendor media types")],-1),x=s("code",null,"json",-1),w={href:"http://tools.ietf.org/html/rfc4627#section-6",target:"_blank",rel:"noopener noreferrer"},V={href:"http://en.wikipedia.org/wiki/Internet_media_type#Vendor_tree",target:"_blank",rel:"noopener noreferrer"},R=o(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BookingsAPIRenderer</span><span class="token punctuation">(</span>JSONRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;application/vnd.megacorp.bookings+json&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你的客户端请求现在会是这样的:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /bookings/ HTTP/1.1
Host: example.com
Accept: application/vnd.megacorp.bookings+json; version=1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="urlpathversioning" tabindex="-1"><a class="header-anchor" href="#urlpathversioning" aria-hidden="true">#</a> URLPathVersioning</h2><p>此方案要求客户端将版本指定为URL路径的一部分。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /v1/bookings/ HTTP/1.1
Host: example.com
Accept: application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你的URL conf中必须包含一个使用<code>&#39;version&#39;</code>关键字参数的匹配模式，，以便版本控制方案可以使用此版本信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span>
        <span class="token string">r&#39;^(?P&lt;version&gt;(v1|v2))/bookings/$&#39;</span><span class="token punctuation">,</span>
        bookings_list<span class="token punctuation">,</span>
        name<span class="token operator">=</span><span class="token string">&#39;bookings-list&#39;</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span>
        <span class="token string">r&#39;^(?P&lt;version&gt;(v1|v2))/bookings/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="token punctuation">,</span>
        bookings_detail<span class="token punctuation">,</span>
        name<span class="token operator">=</span><span class="token string">&#39;bookings-detail&#39;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="namespaceversioning" tabindex="-1"><a class="header-anchor" href="#namespaceversioning" aria-hidden="true">#</a> NamespaceVersioning</h2><p>对于客户端，此方案与<code>URLPathVersioning</code>相同。唯一的区别是，它是如何在 Django 应用程序中配置的，因为它使用URL conf中的命名空间而不是URL conf中的关键字参数。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /v1/something/ HTTP/1.1
Host: example.com
Accept: application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用此方案，<code>request.version</code> 属性是根据与传入请求的路径匹配的 <code>namespace</code> 确定的。<br> 在下面的示例中，我们给一组视图提供了两个可能出现的不同URL前缀，每个前缀在不同的命名空间下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># bookings/urls.py</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^$&#39;</span><span class="token punctuation">,</span> bookings_list<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;bookings-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="token punctuation">,</span> bookings_detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;bookings-detail&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span class="token comment"># urls.py</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^v1/bookings/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;bookings.urls&#39;</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">&#39;v1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^v2/bookings/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;bookings.urls&#39;</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">&#39;v2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你只需要一个简单的版本控制方案<code>URLPathVersioning</code>和<code>NamespaceVersioning</code>都是合适的。<code>URLPathVersioning</code> 这种方法可能更适合小型项目，对于更大的项目来说<code>NamespaceVersioning</code>可能更容易管理。</p><h2 id="hostnameversioning" tabindex="-1"><a class="header-anchor" href="#hostnameversioning" aria-hidden="true">#</a> HostNameVersioning</h2><p>主机名版本控制方案要求客户端将请求的版本指定为URL中主机名的一部分。 例如，以下是对<code>[http://v1.example.com/bookings/](http://v1.example.com/bookings/)</code>的HTTP请求：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /bookings/ HTTP/1.1
Host: v1.example.com
Accept: application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，此实现期望主机名与以下简单正则表达式匹配:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>\\<span class="token punctuation">.</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span>Z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),A=s("br",null,null,-1),P=s("code",null,"HostNameVersioning",-1),L=s("code",null,"127.0.0.1",-1),T={href:"https://reinteractive.net/posts/199-developing-and-testing-rails-applications-with-subdomains",target:"_blank",rel:"noopener noreferrer"},E=s("br",null,null,-1),I=o(`<h2 id="queryparameterversioning" tabindex="-1"><a class="header-anchor" href="#queryparameterversioning" aria-hidden="true">#</a> QueryParameterVersioning</h2><p>此方案是一种在 URL 中包含版本信息作为查询参数的简单方案。例如： This scheme is a simple style that includes the version as a query parameter in the URL. For example:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /something/?version=0.1 HTTP/1.1
Host: example.com
Accept: application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="custom-versioning-schemes" tabindex="-1"><a class="header-anchor" href="#custom-versioning-schemes" aria-hidden="true">#</a> Custom versioning schemes</h1><p>要实现自定义版本控制方案，请继承 <code>BaseVersioning</code> 并重写 <code>.determine_version</code> 方法。</p><h2 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子" aria-hidden="true">#</a> 举个例子</h2><p>下面的例子中使用一个自定义的 <code>X-API-Version</code> header来确定所请求的版本。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">XAPIVersionScheme</span><span class="token punctuation">(</span>versioning<span class="token punctuation">.</span>BaseVersioning<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">determine_version</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;HTTP_X_API_VERSION&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的版本化方案基于请求URL，你还需要改变版本化URL的确定方式。为此，你还应该重写类中的<code>.reverse()</code>方法。有关示例，请参见源代码。</p>`,10);function N(U,S){const a=i("ExternalLinkIcon");return p(),c("div",null,[l,s("blockquote",null,[s("p",null,[n("对接口进行版本控制只是一种杀死已部署客户端的“礼貌”方式。"),d,n(" — "),s("a",u,[n("Roy Fielding"),e(a)]),n(".")])]),s("p",null,[n("API 版本控制允许你在不同的客户端之间更改行为. REST framework 提供了许多不同的版本控制方案。"),v,n(" 版本控制由传入的客户端请求决定，可以基于请求的URL，也可以基于请求头。"),k,n(" 有许多有效的方法可以进行版本控制。"),s("a",m,[n("无版本控制的系统也可能是合适的"),e(a)]),n("，特别是如果你正在为一个长期系统进行工程设计，而这个系统有多个超出你控制范围的客户端。")]),h,s("p",null,[n("在上面的示例请求中"),g,n("属性将返回字符串"),b,n("。 基于 accept headers 的版本控制"),s("a",_,[n("通常被认为"),e(a)]),n("是"),s("a",y,[n("最佳实践"),e(a)]),n("，尽管其他版本控制方式可能适合你的客户端需求。")]),f,s("p",null,[n("严格地说"),x,n("媒体类型未指定为"),s("a",w,[n("包含其他参数"),e(a)]),n("。如果要构建明确指定的公共API，则可以考虑使用"),s("a",V,[n("vendor media type"),e(a)]),n("。为此，请将渲染器配置为使用自定义媒体类型的基于JSON的渲染器：")]),R,s("p",null,[n("注意，第一组用括号括起来，表示这是主机名的匹配部分。"),A,P,n("这种方案在调试模式下使用方案可能会很尴尬，因为你通常会访问原始IP地址，例如"),L,n("。有各种在线教程，介绍"),s("a",T,[n("使用自定义子域名访问本地主机"),e(a)]),n("，这种情况下你可能会发现这很有帮助。"),E,n(" 如果你有基于版本将传入请求路由到不同服务器的需求，那么基于主机名的版本控制会特别有用，因为你可以为不同的 API 版本配置不同的 DNS 记录。")]),I])}const O=t(r,[["render",N],["__file","19.Versioning（版本控制）.html.vue"]]);export{O as default};
