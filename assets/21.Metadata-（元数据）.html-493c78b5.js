import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as l,a as n,b as s,d as e,f as t}from"./app-3f278ba4.js";const c={},r=n("h1",{id:"metadata-元数据",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#metadata-元数据","aria-hidden":"true"},"#"),s(" Metadata （元数据）")],-1),u=n("code",null,"OPTIONS",-1),d=n("br",null,null,-1),m={href:"http://tools.ietf.org/html/rfc7231#section-4.3.7",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>REST框架包含一个可配置的机制，用于确定API应该如何响应 <code>OPTIONS</code> 请求。这允许您返回API模式或其他资源信息。<br> 对于HTTP <code>OPTIONS</code> 请求究竟应该返回什么样的响应样式，目前还没有广泛采用的约定，因此我们提供了一种返回一些有用信息的点对点样式。<br> 下面是一个示例响应，它演示了默认情况下返回的信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HTTP <span class="token number">200</span> OK
Allow: GET, POST, HEAD, OPTIONS
Content-Type: application/json
<span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;To Do List&quot;</span>,
    <span class="token string">&quot;description&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;List existing &#39;To Do&#39; items, or create a new item.&quot;</span>,
    <span class="token string">&quot;renders&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;application/json&quot;</span>,
        <span class="token string">&quot;text/html&quot;</span>
    <span class="token punctuation">]</span>,
    <span class="token string">&quot;parses&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;application/json&quot;</span>,
        <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span>,
        <span class="token string">&quot;multipart/form-data&quot;</span>
    <span class="token punctuation">]</span>,
    <span class="token string">&quot;actions&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;POST&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;note&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;string&quot;</span>,
                <span class="token string">&quot;required&quot;</span><span class="token builtin class-name">:</span> false,
                <span class="token string">&quot;read_only&quot;</span><span class="token builtin class-name">:</span> false,
                <span class="token string">&quot;label&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;title&quot;</span>,
                <span class="token string">&quot;max_length&quot;</span><span class="token builtin class-name">:</span> <span class="token number">100</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setting-the-metadata-scheme-设置元数据模式" tabindex="-1"><a class="header-anchor" href="#setting-the-metadata-scheme-设置元数据模式" aria-hidden="true">#</a> Setting the metadata scheme （设置元数据模式）</h2><p>您可以使用 <code>&#39;DEFAULT_METADATA_CLASS&#39;</code> 设置键全局设置元数据类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_METADATA_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.metadata.SimpleMetadata&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以为视图单独设置元数据类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">APIRoot</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    metadata_class <span class="token operator">=</span> APIRootMetadata
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>REST框架包只包含一个名为 <code>SimpleMetadata</code> 的元数据类实现方式。如果要使用其他样式，则需要实现自定义元数据类。</p><h2 id="creating-schema-endpoints-创建模式终端" tabindex="-1"><a class="header-anchor" href="#creating-schema-endpoints-创建模式终端" aria-hidden="true">#</a> Creating schema endpoints （创建模式终端）</h2><p>如果对使用常规 <code>GET</code> 请求访问的模式终端的创建有特定的要求，则可以考虑重新使用元数据API来执行此操作。<br> 例如，可以在视图集上使用以下附加路由来提供可链接的模式终端。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@list_route</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">schema</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    meta <span class="token operator">=</span> self<span class="token punctuation">.</span>metadata_class<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> meta<span class="token punctuation">.</span>determine_metadata<span class="token punctuation">(</span>request<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),v=n("code",null,"OPTIONS",-1),h={href:"https://www.mnot.net/blog/2012/10/29/NO_OPTIONS",target:"_blank",rel:"noopener noreferrer"},b=n("hr",null,null,-1),_=n("h1",{id:"custom-metadata-classes-自定义元数据类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#custom-metadata-classes-自定义元数据类","aria-hidden":"true"},"#"),s(" Custom metadata classes （自定义元数据类）")],-1),g=n("code",null,"BaseMetadata",-1),f=n("code",null,"determine_metadata(self, request, view)",-1),q=n("br",null,null,-1),T={href:"http://json-schema.org/",target:"_blank",rel:"noopener noreferrer"},y=t(`<h2 id="example-举个例子" tabindex="-1"><a class="header-anchor" href="#example-举个例子" aria-hidden="true">#</a> Example （举个例子）</h2><p>以下的类可被用于限制返回给 <code>OPTIONS</code> 的信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MinimalMetadata</span><span class="token punctuation">(</span>BaseMetadata<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Don&#39;t include field and other information for \`OPTIONS\` requests.
    Just return the name and description.
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">determine_metadata</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> view<span class="token punctuation">.</span>get_view_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&#39;description&#39;</span><span class="token punctuation">:</span> view<span class="token punctuation">.</span>get_view_description<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后配置设置以使用此自定义类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_METADATA_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;myproject.apps.core.MinimalMetadata&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="third-party-packages" tabindex="-1"><a class="header-anchor" href="#third-party-packages" aria-hidden="true">#</a> Third party packages</h1><p>The following third party packages provide additional metadata implementations.</p><h2 id="drf-schema-adapter" tabindex="-1"><a class="header-anchor" href="#drf-schema-adapter" aria-hidden="true">#</a> DRF-schema-adapter</h2>`,8),w={href:"https://github.com/drf-forms/drf-schema-adapter",target:"_blank",rel:"noopener noreferrer"},x={href:"http://json-schema.org/",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1);function A(O,E){const a=i("ExternalLinkIcon");return p(),l("div",null,[r,n("blockquote",null,[n("p",null,[s("[The "),u,s("]方法允许客户端确定与资源或服务器功能相关的选项和/或需求，而无需暗示资源操作或启动资源检索。"),d,s(" — "),n("a",m,[s("RFC7231, Section 4.3.7."),e(a)])])]),k,n("p",null,[s("有许多可能会选择采用这种方法的理由，其中包括 "),v,s(" 响应"),n("a",h,[s("不可缓存"),e(a)]),s("。")]),b,_,n("p",null,[s("如果要提供自定义元数据类，则应重写 "),g,s(" 并应用 "),f,s(" 方法。"),q,s(" 你可能希望做的有用的事情包括返回模式信息、使用"),n("a",T,[s("JSON schema （JSON 模式）"),e(a)]),s("之类的格式，或者将调试信息返回给管理员用户。")]),y,n("p",null,[n("a",w,[s("drf-schema-adapter"),e(a)]),s(" is a set of tools that makes it easier to provide schema information to frontend frameworks and libraries. It provides a metadata mixin as well as 2 metadata classes and several adapters suitable to generate "),n("a",x,[s("json-schema"),e(a)]),s(" as well as schema information readable by various libraries."),S,s(" You can also write your own adapter to work with your specific frontend. If you wish to do so, it also provides an exporter that can export those schema information to json files.")])])}const M=o(c,[["render",A],["__file","21.Metadata-（元数据）.html.vue"]]);export{M as default};
