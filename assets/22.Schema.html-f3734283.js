import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,a as e,b as n,d as s,f as t}from"./app-731a6e06.js";const r={},l=e("h1",{id:"schema",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#schema","aria-hidden":"true"},"#"),n(" Schema")],-1),d=e("blockquote",null,[e("p",null,[n("A machine-readable [schema] describes what resources are available via the API, what their URLs are, how they are represented and what operations they support."),e("br"),n(" — Heroku, [JSON Schema for the Heroku Platform API][cite]")])],-1),u=e("br",null,null,-1),m={href:"https://github.com/OAI/OpenAPI-Specification",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="generating-an-openapi-schema" tabindex="-1"><a class="header-anchor" href="#generating-an-openapi-schema" aria-hidden="true">#</a> Generating an OpenAPI Schema</h2><h3 id="install-dependencies" tabindex="-1"><a class="header-anchor" href="#install-dependencies" aria-hidden="true">#</a> Install dependencies</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install pyyaml uritemplate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>pyyaml</code> is used to generate schema into YAML-based OpenAPI format.</li><li><code>uritemplate</code> is used internally to get parameters in path.</li></ul><h3 id="generating-a-static-schema-with-the-generateschema-management-command" tabindex="-1"><a class="header-anchor" href="#generating-a-static-schema-with-the-generateschema-management-command" aria-hidden="true">#</a> Generating a static schema with the <code>generateschema</code> management command</h3><p>If your schema is static, you can use the <code>generateschema</code> management command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./manage.py generateschema --file openapi-schema.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Once you&#39;ve generated a schema in this way you can annotate it with any additional information that cannot be automatically inferred by the schema generator.<br> You might want to check your API schema into version control and update it with each new release, or serve the API schema from your site&#39;s static media.</p><h3 id="generating-a-dynamic-schema-with-schemaview" tabindex="-1"><a class="header-anchor" href="#generating-a-dynamic-schema-with-schemaview" aria-hidden="true">#</a> Generating a dynamic schema with <code>SchemaView</code></h3><p>If you require a dynamic schema, because foreign key choices depend on database values, for example, you can route a <code>SchemaView</code> that will generate and serve your schema on demand.<br> To route a <code>SchemaView</code>, use the <code>get_schema_view()</code> helper.<br> In <code>urls.py</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas <span class="token keyword">import</span> get_schema_view
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># ...</span>
    <span class="token comment"># Use the \`get_schema_view()\` helper to add a \`SchemaView\` to project URLs.</span>
    <span class="token comment">#   * \`title\` and \`description\` parameters are passed to \`SchemaGenerator\`.</span>
    <span class="token comment">#   * Provide view name for use with \`reverse()\`.</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;openapi&#39;</span><span class="token punctuation">,</span> get_schema_view<span class="token punctuation">(</span>
        title<span class="token operator">=</span><span class="token string">&quot;Your Project&quot;</span><span class="token punctuation">,</span>
        description<span class="token operator">=</span><span class="token string">&quot;API for all things …&quot;</span><span class="token punctuation">,</span>
        version<span class="token operator">=</span><span class="token string">&quot;1.0.0&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;openapi-schema&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment"># ...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-schema-view" tabindex="-1"><a class="header-anchor" href="#get-schema-view" aria-hidden="true">#</a> <code>get_schema_view()</code></h4><p>The <code>get_schema_view()</code> helper takes the following keyword arguments:</p><ul><li><code>title</code>: May be used to provide a descriptive title for the schema definition.</li><li><code>description</code>: Longer descriptive text.</li><li><code>version</code>: The version of the API.</li><li><code>url</code>: May be used to pass a canonical base URL for the schema.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Server Monitoring API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://www.example.org/api/&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>urlconf</code>: A string representing the import path to the URL conf that you want to generate an API schema for. This defaults to the value of Django&#39;s <code>ROOT_URLCONF</code> setting.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Server Monitoring API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://www.example.org/api/&#39;</span><span class="token punctuation">,</span>
    urlconf<span class="token operator">=</span><span class="token string">&#39;myproject.urls&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>patterns</code>: List of url patterns to limit the schema introspection to. If you only want the <code>myproject.api</code> urls to be exposed in the schema:</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>schema_url_patterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;myproject.api.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Server Monitoring API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://www.example.org/api/&#39;</span><span class="token punctuation">,</span>
    patterns<span class="token operator">=</span>schema_url_patterns<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>generator_class</code>: May be used to specify a <code>SchemaGenerator</code> subclass to be passed to the <code>SchemaView</code>.</p></li><li><p><code>authentication_classes</code>: May be used to specify the list of authentication classes that will apply to the schema endpoint. Defaults to <code>settings.DEFAULT_AUTHENTICATION_CLASSES</code></p></li><li><p><code>permission_classes</code>: May be used to specify the list of permission classes that will apply to the schema endpoint. Defaults to <code>settings.DEFAULT_PERMISSION_CLASSES</code>.</p></li><li><p><code>renderer_classes</code>: May be used to pass the set of renderer classes that can be used to render the API root endpoint.</p></li></ul><h2 id="customizing-schema-generation" tabindex="-1"><a class="header-anchor" href="#customizing-schema-generation" aria-hidden="true">#</a> Customizing Schema Generation</h2><p>You may customize schema generation at the level of the schema as a whole, or on a per-view basis.</p><h3 id="schema-level-customization" tabindex="-1"><a class="header-anchor" href="#schema-level-customization" aria-hidden="true">#</a> Schema Level Customization</h3><p>In order to customize the top-level schema subclass <code>rest_framework.schemas.openapi.SchemaGenerator</code> and provide it as an argument to the <code>generateschema</code> command or <code>get_schema_view()</code> helper function.</p><h4 id="schemagenerator" tabindex="-1"><a class="header-anchor" href="#schemagenerator" aria-hidden="true">#</a> SchemaGenerator</h4><p>A class that walks a list of routed URL patterns, requests the schema for each view and collates the resulting OpenAPI schema.<br> Typically you&#39;ll instantiate <code>SchemaGenerator</code> with a <code>title</code> argument, like so:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>generator <span class="token operator">=</span> SchemaGenerator<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;Stock Prices API&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Arguments:</p><ul><li><code>title</code> <strong>required</strong>: The name of the API.</li><li><code>description</code>: Longer descriptive text.</li><li><code>version</code>: The version of the API. Defaults to <code>0.1.0</code>.</li><li><code>url</code>: The root URL of the API schema. This option is not required unless the schema is included under path prefix.</li><li><code>patterns</code>: A list of URLs to inspect when generating the schema. Defaults to the project&#39;s URL conf.</li><li><code>urlconf</code>: A URL conf module name to use when generating the schema. Defaults to <code>settings.ROOT_URLCONF</code>.</li></ul><h5 id="get-schema-self-request" tabindex="-1"><a class="header-anchor" href="#get-schema-self-request" aria-hidden="true">#</a> get_schema(self, request)</h5><p>Returns a dictionary that represents the OpenAPI schema:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>generator <span class="token operator">=</span> SchemaGenerator<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;Stock Prices API&#39;</span><span class="token punctuation">)</span>
schema <span class="token operator">=</span> generator<span class="token punctuation">.</span>get_schema<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,32),k=e("code",null,"request",-1),v=e("br",null,null,-1),g={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#specification-extensions",target:"_blank",rel:"noopener noreferrer"},b=e("h3",{id:"per-view-customization",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#per-view-customization","aria-hidden":"true"},"#"),n(" Per-View Customization")],-1),w=e("code",null,"AutoSchema",-1),f=e("code",null,"schema",-1),y=e("code",null,"APIView",-1),_={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#operationObject",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>auto_schema <span class="token operator">=</span> view<span class="token punctuation">.</span>schema
operation <span class="token operator">=</span> auto_schema<span class="token punctuation">.</span>get_operation<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In compiling the schema, <code>SchemaGenerator</code> calls <code>view.schema.get_operation()</code> for each view, allowed method, and path.</p><hr><p><strong>Note</strong>: For basic <code>APIView</code> subclasses, default introspection is essentially limited to the URL kwarg path parameters. For <code>GenericAPIView</code> subclasses, which includes all the provided class based views, <code>AutoSchema</code> will attempt to introspect serializer, pagination and filter fields, as well as provide richer path field descriptions. (The key hooks here are the relevant <code>GenericAPIView</code> attributes and methods: <code>get_serializer</code>, <code>pagination_class</code>, <code>filter_backends</code> and so on.)</p><hr><p>In order to customize the operation generation, you should provide an <code>AutoSchema</code> subclass, overriding <code>get_operation()</code> as you need:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
    <span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>openapi <span class="token keyword">import</span> AutoSchema
    <span class="token keyword">class</span> <span class="token class-name">CustomSchema</span><span class="token punctuation">(</span>AutoSchema<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">get_operation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># Implement custom introspection here (or in other sub-methods)</span>
    <span class="token keyword">class</span> <span class="token class-name">CustomView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;APIView subclass with custom schema introspection.&quot;&quot;&quot;</span>
        schema <span class="token operator">=</span> CustomSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This provides complete control over view introspection.<br> You may disable schema generation for a view by setting <code>schema</code> to <code>None</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    schema <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># Will not appear in schema</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This also applies to extra actions for <code>ViewSet</code>s:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@action</span><span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> schema<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">extra_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you wish to provide a base <code>AutoSchema</code> subclass to be used throughout your project you may adjust <code>settings.DEFAULT_SCHEMA_CLASS</code> appropriately.</p><h3 id="grouping-operations-with-tags" tabindex="-1"><a class="header-anchor" href="#grouping-operations-with-tags" aria-hidden="true">#</a> Grouping Operations With Tags</h3><p>Tags can be used to group logical operations. Each tag name in the list MUST be unique.</p><hr><h4 id="django-rest-framework-generates-tags-automatically-with-the-following-logic" tabindex="-1"><a class="header-anchor" href="#django-rest-framework-generates-tags-automatically-with-the-following-logic" aria-hidden="true">#</a> Django REST Framework generates tags automatically with the following logic:</h4><p>Tag name will be first element from the path. Also, any <code>_</code> in path name will be replaced by a <code>-</code>. Consider below examples.<br> Example 1: Consider a user management system. The following table will illustrate the tag generation logic. Here first element from the paths is: <code>users</code>. Hence tag wil be <code>users</code></p><table><thead><tr><th>Http Method</th><th>Path</th><th>Tags</th></tr></thead><tbody><tr><td>PUT, PATCH, GET(Retrieve), DELETE</td><td>/users/{id}/</td><td>[&#39;users&#39;]</td></tr><tr><td>POST, GET(List)</td><td>/users/</td><td>[&#39;users&#39;]</td></tr></tbody></table><p>Example 2: Consider a restaurant management system. The System has restaurants. Each restaurant has branches. Consider REST APIs to deal with a branch of a particular restaurant. Here first element from the paths is: <code>restaurants</code>. Hence tag wil be <code>restaurants</code>.</p>`,19),S=e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Http Method"),e("th",null,"Path"),e("th",null,"Tags")])]),e("tbody",null,[e("tr",null,[e("td",null,"PUT, PATCH, GET(Retrieve), DELETE:"),e("td",{branch_id:""},"/restaurants/{restaurant_id}/branches/"),e("td",null,"['restaurants']")]),e("tr",null,[e("td",null,"POST, GET(List):"),e("td",null,"/restaurants/{restaurant_id}/branches/"),e("td",null,"['restaurants']")])])],-1),I=t(`<p>Example 3: Consider Order items for an e commerce company.</p><table><thead><tr><th>Http Method</th><th>Path</th><th>Tags</th></tr></thead><tbody><tr><td>PUT, PATCH, GET(Retrieve), DELETE</td><td>/order_items/{id}/</td><td>[&#39;order-items&#39;]</td></tr><tr><td>POST, GET(List)</td><td>/order_items/</td><td>[&#39;order-items&#39;]</td></tr></tbody></table><hr><h4 id="overriding-auto-generated-tags" tabindex="-1"><a class="header-anchor" href="#overriding-auto-generated-tags" aria-hidden="true">#</a> Overriding auto generated tags:</h4><p>You can override auto-generated tags by passing <code>tags</code> argument to the constructor of <code>AutoSchema</code>. <code>tags</code> argument must be a list or tuple of string.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>openapi <span class="token keyword">import</span> AutoSchema
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    schema <span class="token operator">=</span> AutoSchema<span class="token punctuation">(</span>tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;tag1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tag2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need more customization, you can override the <code>get_tags</code> method of <code>AutoSchema</code> class. Consider the following example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>openapi <span class="token keyword">import</span> AutoSchema
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">class</span> <span class="token class-name">MySchema</span><span class="token punctuation">(</span>AutoSchema<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">def</span> <span class="token function">get_tags</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span>
            tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tag1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tag2&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span>
            tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tag2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tag3&#39;</span><span class="token punctuation">]</span> 
        <span class="token keyword">elif</span> path <span class="token operator">==</span> <span class="token string">&#39;/example/path/&#39;</span><span class="token punctuation">:</span>
            tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tag3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tag4&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            tags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tag5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tag6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tag7&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> tags
<span class="token keyword">class</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    schema <span class="token operator">=</span> MySchema<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operationid" tabindex="-1"><a class="header-anchor" href="#operationid" aria-hidden="true">#</a> OperationId</h3>`,9),x={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#fixed-fields-17",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"operationId",-1),P=e("code",null,"operationId",-1),T=e("br",null,null,-1),O=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>openapi <span class="token keyword">import</span> AutoSchema
<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;APIView subclass with custom schema introspection.&quot;&quot;&quot;</span>
    schema <span class="token operator">=</span> AutoSchema<span class="token punctuation">(</span>operation_id_base<span class="token operator">=</span><span class="token string">&quot;Custom&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The previous example will generate the following operationId: &quot;listCustoms&quot;, &quot;retrieveCustom&quot;, &quot;updateCustom&quot;, &quot;partialUpdateCustom&quot;, &quot;destroyCustom&quot;. You need to provide the singular form of he operation name. For the list operation, a &quot;s&quot; will be appended at the end of the operation.<br> If you need more configuration over the <code>operationId</code> field, you can override the <code>get_operation_id_base</code> and <code>get_operation_id</code> methods from the <code>AutoSchema</code> class:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomSchema</span><span class="token punctuation">(</span>AutoSchema<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_operation_id_base</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> method<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">def</span> <span class="token function">get_operation_id</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
   schema <span class="token operator">=</span> AutoSchema<span class="token punctuation">(</span>component_name<span class="token operator">=</span><span class="token string">&quot;Ulysses&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="components" tabindex="-1"><a class="header-anchor" href="#components" aria-hidden="true">#</a> Components</h3>`,4),C={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#componentsObject",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#referenceObject",target:"_blank",rel:"noopener noreferrer"},E=e("br",null,null,-1),L=e("li",null,"The schema is more readable and lightweight.",-1),z={href:"https://github.com/OpenAPITools/openapi-generator",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/swagger-api/swagger-codegen",target:"_blank",rel:"noopener noreferrer"},M=t(`<h3 id="handling-component-s-schema-errors" tabindex="-1"><a class="header-anchor" href="#handling-component-s-schema-errors" aria-hidden="true">#</a> Handling component&#39;s schema errors</h3><p>You may get the following error while generating the schema:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Serializer&quot; is an invalid class name for schema generation.
Serializer&#39;s class name should be unique and explicit. e.g. &quot;ItemSerializer&quot;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This error occurs when the Serializer name is &quot;Serializer&quot;. You should choose a component&#39;s name unique across your schema and different than &quot;Serializer&quot;.<br> You may also get the following warning:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema component &quot;ComponentName&quot; has been overriden with a different value.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This warning occurs when different components have the same name in one schema. Your component name should be unique across your project. This is likely an error that may lead to an invalid schema.<br> You have two ways to solve the previous issues:</p><ul><li>You can rename your serializer with a unique name and another name than &quot;Serializer&quot;.</li><li>You can set the <code>component_name</code> kwarg parameter of the AutoSchema constructor (see below).</li><li>You can override the <code>get_component_name</code> method of the AutoSchema class (see below).</li></ul><h4 id="set-a-custom-component-s-name-for-your-view" tabindex="-1"><a class="header-anchor" href="#set-a-custom-component-s-name-for-your-view" aria-hidden="true">#</a> Set a custom component&#39;s name for your view</h4><p>To override the component&#39;s name in your view, you can use the <code>component_name</code> parameter of the AutoSchema constructor:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>openapi <span class="token keyword">import</span> AutoSchema
<span class="token keyword">class</span> <span class="token class-name">MyView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
   schema <span class="token operator">=</span> AutoSchema<span class="token punctuation">(</span>component_name<span class="token operator">=</span><span class="token string">&quot;Ulysses&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="override-the-default-implementation" tabindex="-1"><a class="header-anchor" href="#override-the-default-implementation" aria-hidden="true">#</a> Override the default implementation</h4><p>If you want to have more control and customization about how the schema&#39;s components are generated, you can override the <code>get_component_name</code> and <code>get_components</code> method from the AutoSchema class.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>openapi <span class="token keyword">import</span> AutoSchema
<span class="token keyword">class</span> <span class="token class-name">CustomSchema</span><span class="token punctuation">(</span>AutoSchema<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_components</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Implement your custom implementation</span>
    <span class="token keyword">def</span> <span class="token function">get_component_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Implement your custom implementation</span>
<span class="token keyword">class</span> <span class="token class-name">CustomView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;APIView subclass with custom schema introspection.&quot;&quot;&quot;</span>
    schema <span class="token operator">=</span> CustomSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function R(G,j){const a=i("ExternalLinkIcon");return c(),p("div",null,[l,d,e("p",null,[n("API schemas are a useful tool that allow for a range of use cases, including generating reference documentation, or driving dynamic client libraries that can interact with your API."),u,n(" Django REST Framework provides support for automatic generation of "),e("a",m,[n("OpenAPI"),s(a)]),n(" schemas.")]),h,e("p",null,[n("The "),k,n(" argument is optional, and may be used if you want to apply per-user permissions to the resulting schema generation."),v,n(" This is a good point to override if you want to customize the generated dictionary, for example to add custom "),e("a",g,[n("specification extensions"),s(a)]),n(".")]),b,e("p",null,[n("By default, view introspection is performed by an "),w,n(" instance accessible via the "),f,n(" attribute on "),y,n(". This provides the appropriate "),e("a",_,[n("Open API operation object"),s(a)]),n(" for the view, request method and path:")]),A,S,I,e("p",null,[n("The schema generator generates an "),e("a",x,[n("operationid"),s(a)]),n(" for each operation. This "),q,n(' is deduced from the model name, serializer name or view name. The operationId may looks like "listItems", "retrieveItem", "updateItem", etc.. The '),P,n(" is camelCase by convention."),T,n(" If you have several views with the same model, the generator may generate duplicate operationId. In order to work around this, you can override the second part of the operationId: operation name.")]),O,e("p",null,[n("Since DRF 3.12, Schema uses the "),e("a",C,[n("OpenAPI Components"),s(a)]),n(". This method defines components in the schema and "),e("a",V,[n("references them"),s(a)]),n(" inside request and response objects. By default, the component's name is deduced from the Serializer's name."),E,n(" Using OpenAPI's components provides the following advantages:")]),e("ul",null,[L,e("li",null,[n("If you use the schema to generate an SDK (using "),e("a",z,[n("openapi-generator"),s(a)]),n(" or "),e("a",U,[n("swagger-codegen"),s(a)]),n("). The generator can name your SDK's models.")])]),M])}const H=o(r,[["render",R],["__file","22.Schema.html.vue"]]);export{H as default};
