import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as l,a as e,b as s,d as a,f as t}from"./app-d0fb0332.js";const c={},p=e("h1",{id:"returning-urls",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returning-urls","aria-hidden":"true"},"#"),s(" Returning URLs")],-1),u=e("br",null,null,-1),d={href:"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_5",target:"_blank",rel:"noopener noreferrer"},h=t('<p>As a rule, it&#39;s probably better practice to return absolute URIs from your Web APIs, such as <code>[http://example.com/foobar](http://example.com/foobar)</code>, rather than returning relative URIs, such as <code>/foobar</code>.<br> The advantages of doing so are:</p><ul><li>It&#39;s more explicit.</li><li>It leaves less work for your API clients.</li><li>There&#39;s no ambiguity about the meaning of the string when it&#39;s found in representations such as JSON that do not have a native URI type.</li><li>It makes it easy to do things like markup HTML representations with hyperlinks.</li></ul><p>REST framework provides two utility functions to make it more simple to return absolute URIs from your Web API.<br> There&#39;s no requirement for you to use them, but if you do then the self-describing API will be able to automatically hyperlink its output for you, which makes browsing the API much easier.</p><h2 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse" aria-hidden="true">#</a> reverse</h2>',4),k=e("strong",null,"Signature:",-1),m=e("code",null,"reverse(viewname, *args, **kwargs)",-1),_=e("br",null,null,-1),v={href:"https://docs.djangoproject.com/en/stable/topics/http/urls/#reverse",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"django.urls.reverse",-1),b=e("br",null,null,-1),g=e("strong",null,"include the request as a keyword argument",-1),y=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>timezone <span class="token keyword">import</span> now
<span class="token keyword">class</span> <span class="token class-name">APIRootView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        year <span class="token operator">=</span> now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year
        data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token string">&#39;year-summary-url&#39;</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;year-summary&#39;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>year<span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reverse-lazy" tabindex="-1"><a class="header-anchor" href="#reverse-lazy" aria-hidden="true">#</a> reverse_lazy</h2>`,2),w=e("strong",null,"Signature:",-1),x=e("code",null,"reverse_lazy(viewname, *args, **kwargs)",-1),I=e("br",null,null,-1),R={href:"https://docs.djangoproject.com/en/stable/topics/http/urls/#reverse-lazy",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"django.urls.reverse_lazy",-1),A=e("br",null,null,-1),U=e("code",null,"reverse",-1),z=e("strong",null,"include the request as a keyword argument",-1),L=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>api_root <span class="token operator">=</span> reverse_lazy<span class="token punctuation">(</span><span class="token string">&#39;api-root&#39;</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1);function P(S,T){const n=r("ExternalLinkIcon");return i(),l("div",null,[p,e("blockquote",null,[e("p",null,[s("The central feature that distinguishes the REST architectural style from other network-based styles is its emphasis on a uniform interface between components."),u,s(" â€” Roy Fielding, "),e("a",d,[s("Architectural Styles and the Design of Network-based Software Architectures"),a(n)])])]),h,e("p",null,[k,s(),m,_,s(" Has the same behavior as "),e("a",v,[f,a(n)]),s(", except that it returns a fully qualified URL, using the request to determine the host and port."),b,s(" You should "),g,s(" to the function, for example:")]),y,e("p",null,[w,s(),x,I,s(" Has the same behavior as "),e("a",R,[q,a(n)]),s(", except that it returns a fully qualified URL, using the request to determine the host and port."),A,s(" As with the "),U,s(" function, you should "),z,s(" to the function, for example:")]),L])}const N=o(c,[["render",P],["__file","24.Returning-URLs.html.vue"]]);export{N as default};
