import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,a as n,b as e,d as a,f as t}from"./app-d0fb0332.js";const r={},d=n("h1",{id:"exceptions-异常",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#exceptions-异常","aria-hidden":"true"},"#"),e(" Exceptions（异常）")],-1),l=n("br",null,null,-1),u={href:"https://doughellmann.com/blog/2009/06/19/python-exception-handling-techniques/",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="在rest-framework-views中的异常处理" tabindex="-1"><a class="header-anchor" href="#在rest-framework-views中的异常处理" aria-hidden="true">#</a> 在REST framework views中的异常处理</h2><p>REST framework的视图能处理各种各样的异常，能处理并返回合适的错误响应。<br> 以下异常会被处理：</p><ul><li>在REST framework内部产生的<code>APIException</code> 的子类异常。</li><li>原生Django的<code>Http404</code> 异常.</li><li>原生Django的<code>PermissionDenied</code> 异常.</li></ul><p>在上述各类情况中，REST framework会返回一个带有合适状态码与content-type的响应。响应正文(Response body)会包含有关报错的任何额外信息。<br> 大多数报错响应都会在响应正文里包含一个<code>detail</code>。<br> 例如，下面的请求：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DELETE http://api.example.com/foo/bar HTTP/1.1
Accept: application/json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就可能会收到一个报错响应，表示<code>DELETE</code>方法在该资源上不可使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HTTP/1.1 <span class="token number">405</span> Method Not Allowed
Content-Type: application/json
Content-Length: <span class="token number">42</span>
<span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Method &#39;DELETE&#39; not allowed.&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证类的报错在处理上略有不同，他们会把字段名作为keys包含在响应正文中。验证类的报错如果并不是针对特定的字段，则会使用&quot;non_field_error&quot;或者是setting中<code>NON_FIELD_ERRORS_KEY</code>的值作为keys返回。<br> 一个验证类错误大概是这个样子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HTTP/1.1 <span class="token number">400</span> Bad Request
Content-Type: application/json
Content-Length: <span class="token number">94</span>
<span class="token punctuation">{</span><span class="token string">&quot;amount&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A valid integer is required.&quot;</span><span class="token punctuation">]</span>, <span class="token string">&quot;description&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&quot;This field may not be blank.&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),k={id:"自定义异常处理",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#自定义异常处理","aria-hidden":"true"},"#",-1),m={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/exceptions_zh/#_1",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>当然你也可以自己实现自定义异常处理，只需要创建一个异常处理函数即可，它要能够将你API views里引发的异常转换成响应对象。这样你就可以自己控制你API的报错响应的样式了。<br> 这个函数必须接受一对参数，第一个是需要处理的异常，第二个则是一个字典类型，这个字典需要包含一切额外相关信息，比如当前正在处理的view等。异常处理函数要么返回一个<code>Response</code>对象要么就直接返回<code>None</code>(比如异常无法正常处理的情况下)。如果处理函数返回了<code>None</code>，那么这个异常会继续向上报错，并由Django返回一个标准的HTTP 500的&#39;server error&#39;响应。<br> 举个例子，你可能想确保你所有的响应正文里都会包含该次请求的HTTP状态码，就像这样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HTTP/1.1 <span class="token number">405</span> Method Not Allowed
Content-Type: application/json
Content-Length: <span class="token number">62</span>
<span class="token punctuation">{</span><span class="token string">&quot;status_code&quot;</span><span class="token builtin class-name">:</span> <span class="token number">405</span>, <span class="token string">&quot;detail&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Method &#39;DELETE&#39; not allowed.&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要变成这样的响应，你可以写一个像下面这样的异常处理函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> exception_handler
<span class="token keyword">def</span> <span class="token function">custom_exception_handler</span><span class="token punctuation">(</span>exc<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 首先调用REST framework默认的异常处理，</span>
    <span class="token comment"># 以获得标准的错误响应。</span>
    response <span class="token operator">=</span> exception_handler<span class="token punctuation">(</span>exc<span class="token punctuation">,</span> context<span class="token punctuation">)</span>
    <span class="token comment"># 接下来将HTTP状态码加到响应中。</span>
    <span class="token keyword">if</span> response <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        response<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">&#39;status_code&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>status_code
    <span class="token keyword">return</span> response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里默认的处理函数并没有用到参数context，但如果异常处理函数需要更多额外的信息就可以用到。比如需要当前处理异常的view的信息，就可以用<code>context[&#39;view&#39;]</code>来获取。<br> 异常处理函数还必须通过settings来配置，设置中的key是<code>EXCEPTION_HANDLER</code>，就像下面这样：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;EXCEPTION_HANDLER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;my_project.my_app.utils.custom_exception_handler&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有特别指出，<code>&#39;EXCEPTION_HANDLER&#39;</code>设置默认使用REST framework提供的标准异常处理：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;EXCEPTION_HANDLER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.views.exception_handler&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是异常处理只会由产生异常的响应调用。它无法处理view直接返回的响应，比如generic views在serializer验证出错时返回的响应<code>HTTP_400_BAD_REQUEST</code>。</p><hr><h1 id="api-参考" tabindex="-1"><a class="header-anchor" href="#api-参考" aria-hidden="true">#</a> API 参考</h1><h2 id="apiexception" tabindex="-1"><a class="header-anchor" href="#apiexception" aria-hidden="true">#</a> APIException</h2><p><strong>签名:</strong> <code>APIException()</code><br> 是所有<code>APIView</code>或者<code>@api_view</code>中产生的异常的<strong>基类</strong>。<br> 如果想自定义一个异常类，首先要继承<code>APIException</code>，然后在该异常类中设置<code>.status_code</code>, <code>.default_detail</code>以及<code>default_code</code>属性。<br> 举例，如果你的API依赖某个时不时会掉线的第三方服务，你可能想要自己实现一个异常&quot;503 Service Unavailable&quot;的HTTP响应码，你可以这么干：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> APIException
<span class="token keyword">class</span> <span class="token class-name">ServiceUnavailable</span><span class="token punctuation">(</span>APIException<span class="token punctuation">)</span><span class="token punctuation">:</span>
    status_code <span class="token operator">=</span> <span class="token number">503</span>
    default_detail <span class="token operator">=</span> <span class="token string">&#39;Service temporarily unavailable, try again later.&#39;</span>
    default_code <span class="token operator">=</span> <span class="token string">&#39;service_unavailable&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检查-api-异常" tabindex="-1"><a class="header-anchor" href="#检查-api-异常" aria-hidden="true">#</a> 检查 API 异常</h4><p>有很多属性可以用来检查一个API异常的状态，你可以用这些属性来构建专属你项目的自定义异常。<br> 可用的属性和方法有：</p><ul><li><code>.detail</code> - 以文字形式返回报错的细节描述。</li><li><code>.get_codes()</code> - 返回报错的标识码。</li><li><code>.get_full_details()</code> - 返回报错的细节描述以及报错的标识码。</li></ul><p>大多数情况下，报错的细节的返回结果很简单：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>
You do <span class="token keyword">not</span> have permission to perform this action<span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_codes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
permission_denied
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_full_details<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;You do not have permission to perform this action.&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;permission_denied&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是验证类报错，那报错细节就会是一个列表或者字典：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;This field is required.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;A valid integer is required.&quot;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_codes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Zh
<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;invalid&quot;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_full_details<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;This field is required.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;A valid integer is required.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;invalid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parseerror" tabindex="-1"><a class="header-anchor" href="#parseerror" aria-hidden="true">#</a> ParseError</h2><p><strong>签名:</strong> <code>ParseError(detail=None, code=None)</code><br> 在访问<code>request.data</code>时，如果请求中包含格式不正确的数据，则该异常会被抛出。<br> 默认情况下该异常会返回HTTP状态码为&quot;400 Bad Request&quot;的响应。</p><h2 id="authenticationfailed" tabindex="-1"><a class="header-anchor" href="#authenticationfailed" aria-hidden="true">#</a> AuthenticationFailed</h2>`,24),g=n("strong",null,"签名:",-1),_=n("code",null,"AuthenticationFailed(detail=None, code=None)",-1),q=n("br",null,null,-1),x=n("br",null,null,-1),f={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/authentication_zh/",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"notauthenticated",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#notauthenticated","aria-hidden":"true"},"#"),e(" NotAuthenticated")],-1),w=n("strong",null,"签名:",-1),E=n("code",null,"NotAuthenticated(detail=None, code=None)",-1),y=n("br",null,null,-1),N=n("br",null,null,-1),P={href:"https://q1mi.github.io/Django-REST-framework-documentation/api-guide/authentication_zh/",target:"_blank",rel:"noopener noreferrer"},A=t(`<h2 id="permissiondenied" tabindex="-1"><a class="header-anchor" href="#permissiondenied" aria-hidden="true">#</a> PermissionDenied</h2><p><strong>签名:</strong> <code>PermissionDenied(detail=None, code=None)</code><br> Raised when an authenticated request fails the permission checks.<br> 当一个带认证信息的请求检查权限出错时抛出。<br> 默认情况下该异常会返回HTTP状态码为&quot;403 Forbidden&quot;的响应。</p><h2 id="notfound" tabindex="-1"><a class="header-anchor" href="#notfound" aria-hidden="true">#</a> NotFound</h2><p><strong>签名:</strong> <code>NotFound(detail=None, code=None)</code><br> 当给定URL的资源不存在的时候抛出。这个异常和Django标准的<code>Http404</code>异常等同。<br> 默认情况下该异常会返回HTTP状态码为&quot;404 Not Found&quot;的响应。</p><h2 id="methodnotallowed" tabindex="-1"><a class="header-anchor" href="#methodnotallowed" aria-hidden="true">#</a> MethodNotAllowed</h2><p><strong>签名:</strong> <code>MethodNotAllowed(method, detail=None, code=None)</code><br> 当一个请求产生且没有view映射了该请求需要的对应方法来处理时抛出。<br> 默认情况下该异常会返回HTTP状态码为&quot;405 Method Not Allowed&quot;的响应。</p><h2 id="notacceptable" tabindex="-1"><a class="header-anchor" href="#notacceptable" aria-hidden="true">#</a> NotAcceptable</h2><p><strong>签名:</strong> <code>NotAcceptable(detail=None, code=None)</code><br> 当一个带有<code>Accept</code>头的请求无法被任何当前可用的renderer满足时抛出。<br> 默认情况下该异常会返回HTTP状态码为&quot;406 Not Acceptable&quot;的响应。</p><h2 id="unsupportedmediatype" tabindex="-1"><a class="header-anchor" href="#unsupportedmediatype" aria-hidden="true">#</a> UnsupportedMediaType</h2><p><strong>签名:</strong> <code>UnsupportedMediaType(media_type, detail=None, code=None)</code><br> 当没有解析器能够在访问<code>request.data</code>时处理其content type时抛出。<br> 默认情况下该异常会返回HTTP状态码为&quot;415 Unsupported Media Type&quot;的响应。</p><h2 id="throttled" tabindex="-1"><a class="header-anchor" href="#throttled" aria-hidden="true">#</a> Throttled</h2><p><strong>签名:</strong> <code>Throttled(wait=None, detail=None, code=None)</code><br> 当访问的请求无法通过throttling检查时抛出。<br> 默认情况下该异常会返回HTTP状态码为&quot;429 Too Many Requests&quot;的响应。</p><h2 id="validationerror" tabindex="-1"><a class="header-anchor" href="#validationerror" aria-hidden="true">#</a> ValidationError</h2><p><strong>签名:</strong> <code>ValidationError(detail, code=None)</code><br> 验证错误的异常要和其他<code>APIException</code>的类有所不同。</p><ul><li><code>detail</code>参数是必须的，而不是可选的。</li><li><code>detail</code>参数可以用列表或者字典来存放错误信息，也可以使用嵌套的数据结构。</li><li>依据习惯，为了区分它与Django内置的验证错误，你应当引入 serializers 模块并且用一个完全合格的<code>ValidationError</code> 。比如<code>raise serializers.ValidationError(&#39;This field must be an integer value.&#39;)</code>。</li></ul><p><code>ValidationError</code>类应当被serialzier, field validation和validator类使用。它可以在调用<code>serializer.is_valid</code>时抛出，当然前提是要附带有<code>raise_exception</code>关键字参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>REST framework的generic views使用的是<code>raise_exception=True</code>标志，这意味着你可以在你的API里全局覆盖验证类错误响应的样式。要这么做，你需要像上文所述去自定义一个异常处理函数。<br> 默认情况下该异常会返回HTTP状态码为&quot;400 Bad Request&quot;的响应。</p><hr><h1 id="generic-error-views" tabindex="-1"><a class="header-anchor" href="#generic-error-views" aria-hidden="true">#</a> Generic Error Views</h1>`,20),R=n("code",null,"500",-1),H=n("code",null,"400",-1),D=n("br",null,null,-1),I={href:"https://docs.djangoproject.com/en/dev/topics/http/views/#customizing-error-views",target:"_blank",rel:"noopener noreferrer"},S=t(`<h2 id="rest-framework-exceptions-server-error" tabindex="-1"><a class="header-anchor" href="#rest-framework-exceptions-server-error" aria-hidden="true">#</a> <code>rest_framework.exceptions.server_error</code></h2><p>返回一个带有HTTP状态码<code>500</code>且content-type为<code>application/json</code>的响应。<br> 设置<code>handler500</code>如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>handler500 = &#39;rest_framework.exceptions.server_error&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="rest-framework-exceptions-bad-request" tabindex="-1"><a class="header-anchor" href="#rest-framework-exceptions-bad-request" aria-hidden="true">#</a> <code>rest_framework.exceptions.bad_request</code></h2><p>返回一个带有HTTP状态码<code>400</code>且content-type为<code>application/json</code>的响应。<br> 设置<code>handler400</code>如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>handler400 = &#39;rest_framework.exceptions.bad_request&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6);function j(L,M){const s=i("ExternalLinkIcon");return c(),p("div",null,[d,n("blockquote",null,[n("p",null,[e("异常... 让错误处理清晰地位于程序架构的中心位置或高层位置。"),l,e(" — Doug Hellmann, "),n("a",u,[e("Python 异常处理方法"),a(s)])])]),h,n("h2",k,[v,e(),n("a",m,[e("自定义异常处理"),a(s)])]),b,n("p",null,[g,e(),_,q,e(" 当请求包含错误的认证信息时抛出。"),x,e(' 默认情况下该异常会返回HTTP状态码为"401 Unauthenticated"的响应，但也有可能返回状态码为"403 Forbidden"的响应，这个主要取决于当前使用的认证模式。查看'),n("a",f,[e("authentication 文档"),a(s)]),e("以了解更多细节。")]),T,n("p",null,[w,e(),E,y,e(" 当未带认证信息的请求检查权限出错时抛出。"),N,e(' 默认情况下该异常会返回HTTP状态码为"401 Unauthenticated"的响应，但也有可能返回状态码为"403 Forbidden"的响应，这个主要取决于当前使用的认证模式。查看'),n("a",P,[e("authentication 文档"),a(s)]),e("以了解更多细节。")]),A,n("p",null,[e("Django REST Framework提供两种合适的方法来生成通用的JSON格式的"),R,e(" Server Error和"),H,e(" Bad Request responses. (Django默认的报错views提供的是HTML格式的响应，一般来说不太适用于API-only的web后端。)"),D,e(" 请参考"),n("a",I,[e("Django自定义错误view文档"),a(s)]),e("来分别使用这两种方法。")]),S])}const V=o(r,[["render",j],["__file","25.Exceptions（异常）.html.vue"]]);export{V as default};
