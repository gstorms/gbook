import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-731a6e06.js";const t={},p=e(`<h1 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h1><h2 id="apirequesfactory" tabindex="-1"><a class="header-anchor" href="#apirequesfactory" aria-hidden="true">#</a> APIRequesFactory</h2><p>延申django本身存在的<code>RequestFactory</code>类</p><h3 id="创建测试请求" tabindex="-1"><a class="header-anchor" href="#创建测试请求" aria-hidden="true">#</a> 创建测试请求</h3><p>这个<code>APIRequestFactory</code>类支持与Django标准<code>RequestFactory</code>类几乎相同的API。这意味着类似<code>.get()</code>，<code>.post()</code>，<code>.put()</code>，<code>.patch()</code>，<code>delete()</code>，<code>.head()</code>和<code>.options()</code>等标准方法全部支持。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>from rest_framework.test import APIRequestFactory
# 使用标准的RequestFactory API去创建从POST来的请求
factory = APIRequestFactory()
request = factory.post(&#39;/notes/&#39;, {&#39;title&#39;: &#39;new idea&#39;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用format参数" tabindex="-1"><a class="header-anchor" href="#使用format参数" aria-hidden="true">#</a> 使用<code>format</code>参数</h4><p>创建请求主体的方法，例如<code>post</code>，<code>put</code>和<code>patch</code>，包含<code>format</code>，这使得使用多部分表单数据以外的内容类型轻松生成请求。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个JSON POST请求</span>
factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/notes/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;new idea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，可用格式为<code>multipart</code>和<code>json</code>。为了与Django现有的<code>RequestFactory</code>，默认格式为<code>multipart</code>。 要支持更多的请求格式集，或更改默认格式，请参见配置部分。</p><h4 id="明确编码请求主体" tabindex="-1"><a class="header-anchor" href="#明确编码请求主体" aria-hidden="true">#</a> 明确编码请求主体</h4><p>如果需要明确编码请求主体，可以通过设置<code>content_type</code>标志，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>request <span class="token operator">=</span> factory<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/notes/&#39;</span>， json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;new idea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用表格数据进行put和patch" tabindex="-1"><a class="header-anchor" href="#使用表格数据进行put和patch" aria-hidden="true">#</a> 使用表格数据进行PUT和PATCH</h4><p>值得注意的是Django的<code>RequestFactory</code>和REST framework的<code>APIRequestFactory</code>之间的区别是，将为除<code>.post()</code>之外的方法编码多部份表单数据。 例如，使用<code>APIRequestFactory</code>，可以像这样发送表单PUT请求：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;/notes/547/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;remember to email dave&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Django的<code>RequestFactory</code>，需要自己对数据进行显式编码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>test<span class="token punctuation">.</span>client <span class="token keyword">import</span> encode_multipart<span class="token punctuation">,</span> RequestFactory
factory <span class="token operator">=</span> RequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;remember to email dave&#39;</span><span class="token punctuation">}</span>
content <span class="token operator">=</span> encode_multipart<span class="token punctuation">(</span><span class="token string">&#39;BoUnDaRyStRiNg&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
content_type <span class="token operator">=</span> <span class="token string">&#39;multipart/form-data; boundary=BoUnDaRyStRiNg&#39;</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;/notes/547/&#39;</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> content_type<span class="token operator">=</span>content_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="强制验证" tabindex="-1"><a class="header-anchor" href="#强制验证" aria-hidden="true">#</a> 强制验证</h3><p>当测试视图直接使用请求工厂时，通常能够方便的直接对请求进行身份验证，而不必构造正确的身份验证凭据。<br> 要强制验证请求，请使用<code>force_authenticate()</code>方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> force_authenticate
factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;olivia&#39;</span><span class="token punctuation">)</span>
view <span class="token operator">=</span> AccountDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 让一个验证请求到view中。。。</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/accounts/django-superstars/&#39;</span><span class="token punctuation">)</span>
force_authenticate<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">)</span>
response <span class="token operator">=</span> view<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法为<code>force_authenticate(request, user=None, token=None)</code>。当调用时，可以设置user和token其中一个。<br> 例如，当使用token强制进行身份验证时，你可以执行以下操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;olivia&#39;</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/accounts/django-superstars/&#39;</span><span class="token punctuation">)</span>
force_authenticate<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> token<span class="token operator">=</span>user<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>Note</strong>：使用<code>APIRequestFactory</code>时，返回的对象是Django标准的<code>HttpRequest</code>，而不是REST framework的<code>Request</code>对象，后者仅在调用view后才生成。 这意味着直接在请求对象上设置属性可能并不总是具有预期的效果。 例如，直接设置<code>.token</code>将无效，而直接设置<code>.user</code>仅在使用会话身份验证时才有效。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 只有在使用SessionAuthentication时，请求才会进行身份验证。</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/accounts/django-superstars/&#39;</span><span class="token punctuation">)</span>
request<span class="token punctuation">.</span>user <span class="token operator">=</span> user
response <span class="token operator">=</span> view<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="强制csrf验证" tabindex="-1"><a class="header-anchor" href="#强制csrf验证" aria-hidden="true">#</a> 强制CSRF验证</h3><p>默认情况下，使用<code>APIRequestFactory</code>创建的请求在传递到REST framework视图时不会应用CSRF验证。如果需要显式打开CSRF验证，则可以通过在实例化工厂时设置force_csrf_checks标志来实现。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span>enforce_csrf_checks<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>Note</strong>：值得注意的是，Django的标准<code>RequestFactory</code>不需要包含此选项，因为在使用常规Django时，CSRF验证在中间件中进行，而中间件在直接测试视图时不会运行。 使用REST framework时，CSRF验证在视图内部进行，因此请求工厂需要禁用视图级CSRF检查。</p><hr><h2 id="apiclient" tabindex="-1"><a class="header-anchor" href="#apiclient" aria-hidden="true">#</a> APIClient</h2><p>扩展Django现有的Client类。</p><h3 id="创建请求" tabindex="-1"><a class="header-anchor" href="#创建请求" aria-hidden="true">#</a> 创建请求</h3><p><code>APIClient</code>类支持与Django的标准<code>Client</code>类相同的请求接口。 这意味着标准的<code>.get()</code>、<code>.post()</code>、<code>.put()</code>、<code>.patch()</code>、<code>.delete()</code>、<code>.head()</code>和<code>.options()</code>方法都可用。 例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> APIClient
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/notes/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;new idea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要支持更多的请求格式集，或更改默认格式，请参见配置部分。</p><h3 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h3><h4 id="login-kwargs" tabindex="-1"><a class="header-anchor" href="#login-kwargs" aria-hidden="true">#</a> .login(**kwargs)</h4><p><code>login</code>方法的功能与Django常规<code>Client</code>类的功能完全相同。 这使您可以针对任何包含<code>SessionAuthentication</code>的视图对请求进行身份验证。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 在已登录会话的上下文中发出所有请求。</span>
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>login<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;lauren&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;secret&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注销，请照常调用注销方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 注销</span>
client<span class="token punctuation">.</span>logout<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>login</code>方法适用于测试使用会话身份验证的API，例如包含与API进行AJAX交互的网站。</p><h4 id="credentials-kwargs" tabindex="-1"><a class="header-anchor" href="#credentials-kwargs" aria-hidden="true">#</a> .credentials(**kwargs)</h4><p><code>credentials</code>方法可用于设置请求头，然后测试客户端会将其包含在所有后续请求中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> APIClient
<span class="token comment"># 在所有请求上都包含适当的Authorization头。</span>
token <span class="token operator">=</span> Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user__username<span class="token operator">=</span><span class="token string">&#39;lauren&#39;</span><span class="token punctuation">)</span>
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>credentials<span class="token punctuation">(</span>HTTP_AUTHORIZATION<span class="token operator">=</span><span class="token string">&#39;Token &#39;</span> <span class="token operator">+</span> token<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，第二次调用<code>credentials</code>将覆盖所有现有credentials。 您可以通过不带任何参数的方法来取消设置任何现有的credentials。</p><h4 id="force-authenticate-user-none-token-none" tabindex="-1"><a class="header-anchor" href="#force-authenticate-user-none-token-none" aria-hidden="true">#</a> .force_authenticate(user=None, token=None)</h4><p>有时您可能想绕过身份验证，并简单地强制将测试客户端的所有请求自动视为已身份验证。 如果您正在测试API但又不想构造有效的身份验证凭据来发出测试请求，则这可能是一个有用的快捷方式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;lauren&#39;</span><span class="token punctuation">)</span>
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>force_authenticate<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要取消对后续请求的身份验证，请调用<code>force_authenticate</code>将用户和/或令牌设置为<code>None</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client<span class="token punctuation">.</span>force_authenticate<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="csrf验证" tabindex="-1"><a class="header-anchor" href="#csrf验证" aria-hidden="true">#</a> CSRF验证</h3><p>默认情况下，使用<code>APIClient</code>时不应用CSRF验证。 如果需要显式启用CSRF验证，则可以通过在实例化客户端时设置<code>force_csrf_checks</code>来实现。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span>enforce_csrf_checks<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与往常一样，CSRF验证仅适用于任何经过会话身份验证的视图。 这意味着仅当通过调用<code>login()</code>登录客户端后，CSRF验证才会发生。</p><h2 id="requestsclient" tabindex="-1"><a class="header-anchor" href="#requestsclient" aria-hidden="true">#</a> RequestsClient</h2><p>REST framework还包括一个客户端，用于使用流行的Python库<code>requests</code>与应用程序进行交互。这在以下情况下可能有用： - 您期望主要通过另一个Python服务与API交互，并希望在与客户端看到的相同的级别上测试该服务。 - 您希望以这样的方式编写测试，使其也可以在临时环境或实时环境中运行。 （请参见下面的“实时测试”。） 这将显示与您直接使用请求会话完全相同的界面。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client <span class="token operator">=</span> RequestsClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://testserver/users/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，请求客户端要求您传递完全限定的URL。</p><h3 id="requestsclient和使用数据库" tabindex="-1"><a class="header-anchor" href="#requestsclient和使用数据库" aria-hidden="true">#</a> <code>RequestsClient</code>和使用数据库</h3><p>如果您要编写仅与服务接口交互的测试，则<code>RequestsClient</code>类很有用。 这比使用标准Django测试客户端要严格一些，因为这意味着所有交互都应通过API进行。 如果使用的是<code>RequestsClient</code>，则需要确保测试设置和结果断言是作为常规API调用执行的，而不是直接与数据库模型进行交互。 例如，您不必列出<code>Customer.objects.count（）== 3</code>，而是列出客户端点，并确保它包含三个记录。</p><h3 id="请求头-认证" tabindex="-1"><a class="header-anchor" href="#请求头-认证" aria-hidden="true">#</a> 请求头&amp;认证</h3><p>可以使用与使用标准<code>request.Session</code>实例相同的方式来提供自定义请求头和身份验证凭据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth
client<span class="token punctuation">.</span>auth <span class="token operator">=</span> HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;x-test&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> CSRF</h3><p>如果您使用的是<code>SessionAuthentication</code>，则需要为所有<code>POST</code>，<code>PUT</code>，<code>PATCH</code>或<code>DELETE</code>请求包括一个CSRF令牌。 您可以按照基于JavaScript的客户端将使用的相同流程进行操作。 首先发出<code>GET</code>请求以获得CRSF令牌，然后在随后的请求中显示该令牌。 例如...</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client <span class="token operator">=</span> RequestsClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 获取CSRF token.</span>
response <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/homepage/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>
csrftoken <span class="token operator">=</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">&#39;csrftoken&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># 与API交互</span>
response <span class="token operator">=</span> client<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/organisations/&#39;</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MegaCorp&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;X-CSRFToken&#39;</span><span class="token punctuation">:</span> csrftoken<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="现场测试" tabindex="-1"><a class="header-anchor" href="#现场测试" aria-hidden="true">#</a> 现场测试</h3><p>通过谨慎使用<code>RequestsClient</code>和<code>CoreAPIClient</code>都可以编写可以在开发中运行或直接在登台服务器或生产环境中运行的测试用例。 使用这种样式创建一些核心功能的基本测试是验证实时服务的有效方法。 这样做可能需要仔细注意设置和卸载，以确保测试以不直接影响客户数据的方式运行。</p><h2 id="coreapiclient" tabindex="-1"><a class="header-anchor" href="#coreapiclient" aria-hidden="true">#</a> CoreAPIClient</h2><p>CoreAPIClient允许您使用Python <code>coreapi</code> 客户端库与API进行交互。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 提取API模式</span>
client <span class="token operator">=</span> CoreAPIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
schema <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://testserver/schema/&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 创建一个新的organisation</span>
params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MegaCorp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">}</span>
client<span class="token punctuation">.</span>action<span class="token punctuation">(</span>schema<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;organisations&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;create&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>
<span class="token comment"># 确保列表中存在该组织</span>
data <span class="token operator">=</span> client<span class="token punctuation">.</span>action<span class="token punctuation">(</span>schema<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;organisations&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MegaCorp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求头-认证-1" tabindex="-1"><a class="header-anchor" href="#请求头-认证-1" aria-hidden="true">#</a> 请求头&amp;认证</h3><p>自定义请求头和身份验证可用于跟<code>RequestsClient</code>相似的<code>CoreAPIClient</code>一起使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth
client <span class="token operator">=</span> CoreAPIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>session<span class="token punctuation">.</span>auth <span class="token operator">=</span> HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;x-test&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试样例" tabindex="-1"><a class="header-anchor" href="#测试样例" aria-hidden="true">#</a> 测试样例</h2><p>REST framework包括以下测试用例类，它们反映了现有的Django测试用例类，但是使用<code>APIClient</code>而不是Django的默认<code>Client</code>。 - APISimpleTestCase - APITransactionTestCase - APITestCase - APILiveServerTestCase</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><p>您可以像使用常规Django测试用例类那样使用任何REST framework的用例类。<code>self.client</code>属性将是一个<code>APIClient</code>实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> APITestCase
<span class="token keyword">from</span> myproject<span class="token punctuation">.</span>apps<span class="token punctuation">.</span>core<span class="token punctuation">.</span>models <span class="token keyword">import</span> Account
<span class="token keyword">class</span> <span class="token class-name">AccountTests</span><span class="token punctuation">(</span>APITestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_create_account</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        确保我们可以创建一个新的帐户对象。
        &quot;&quot;&quot;</span>
        url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;account-list&#39;</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;DabApps&#39;</span><span class="token punctuation">}</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>Account<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>Account<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;DabApps&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试响应" tabindex="-1"><a class="header-anchor" href="#测试响应" aria-hidden="true">#</a> 测试响应</h2><h3 id="检查响应数据" tabindex="-1"><a class="header-anchor" href="#检查响应数据" aria-hidden="true">#</a> 检查响应数据</h3><p>在检查测试响应的有效性时，通常更方便的方法是检查创建响应的数据，而不是检查完全呈现的响应。 例如，检查<code>response.data</code>更容易：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/users/4/&#39;</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lauren&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而不是检查<code>response.content</code>的解析结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/users/4/&#39;</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lauren&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染响应" tabindex="-1"><a class="header-anchor" href="#渲染响应" aria-hidden="true">#</a> 渲染响应</h3><p>如果您直接使用<code>APIRequestFactory</code>测试视图，则返回的响应将不会渲染，因为模板响应的渲染是由Django的内部请求-响应周期执行的。 为了访问<code>response.content</code>，您首先需要渲染响应。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>view <span class="token operator">=</span> UserDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/users/4&#39;</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> view<span class="token punctuation">(</span>request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">)</span>
response<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Cannot access \`response.content\` without this.</span>
self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">&#39;{&quot;username&quot;: &quot;lauren&quot;, &quot;id&quot;: 4}&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><h3 id="设置默认格式" tabindex="-1"><a class="header-anchor" href="#设置默认格式" aria-hidden="true">#</a> 设置默认格式</h3><p>可以使用<code>TEST_REQUEST_DEFAULT_FORMAT</code>设置项来设置用于发出测试请求的默认格式。 例如，要在默认情况下始终将JSON用于测试请求而不是标准的多部分表单请求，请在<code>settings.py</code>文件中设置以下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;TEST_REQUEST_DEFAULT_FORMAT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;json&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置可用格式" tabindex="-1"><a class="header-anchor" href="#设置可用格式" aria-hidden="true">#</a> 设置可用格式</h3><p>如果您需要使用multipart或json请求之外的其他测试请求，则可以通过设置<code>TEST_REQUEST_RENDERER_CLASSES</code>设置来进行。 例如，要增加对在测试请求中使用<code>format =&#39;html&#39;</code>的支持，您的<code>settings.py</code>文件中可能会有类似的内容。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;TEST_REQUEST_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.renderers.MultiPartRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.JSONRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.TemplateHTMLRenderer&#39;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,100),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","27.Testing（测试）.html.vue"]]);export{d as default};
