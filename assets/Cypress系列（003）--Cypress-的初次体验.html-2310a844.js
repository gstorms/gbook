import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as t,c as o,a as e,b as a,d as n,f as r}from"./app-d0fb0332.js";const d={},c=r(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>这里的栗子项目是 Cypress 提供的，在 github 上，所以要 clone 到本地的话<strong>需要装 Git</strong> 哦！</p><h2 id="下载被测应用" tabindex="-1"><a class="header-anchor" href="#下载被测应用" aria-hidden="true">#</a> 下载被测应用</h2><p>进入要安装该应用的目录，cmd 敲</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>git clone git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>cypress<span class="token operator">-</span>io<span class="token operator">/</span>cypress<span class="token operator">-</span>example<span class="token operator">-</span>recipes<span class="token punctuation">.</span>git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入项目目录下，安装项目所需依赖包，敲</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装成功后，项目的文件结构如下图；所有被测应用栗子都在 examples 文件夹中<br><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531134045342-1419681241.png" alt="" loading="lazy"></p><h2 id="启动被测应用" tabindex="-1"><a class="header-anchor" href="#启动被测应用" aria-hidden="true">#</a> 启动被测应用</h2><p>启动测试应用时，可以进入不同子项目文件夹来启动不同的应用；<br> 假如，我们要测试表单类型的登录，可以打开以下被测应用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cd examples\\logging<span class="token operator">-</span>in__html<span class="token operator">-</span>web<span class="token operator">-</span>forms<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动本地server</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),p=e("br",null,null,-1),h=e("img",{src:"https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531134112456-898585859.png",alt:"",loading:"lazy"},null,-1),g=e("br",null,null,-1),u=e("br",null,null,-1),b={href:"http://localhost:7077",target:"_blank",rel:"noopener noreferrer"},m=e("br",null,null,-1),_=e("img",{src:"https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531134302962-1853578239.png",alt:"",loading:"lazy"},null,-1),f=e("h2",{id:"快速测试登录页面",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#快速测试登录页面","aria-hidden":"true"},"#"),a(" 快速测试登录页面")],-1),y=e("h4",{id:"首先-设计测试用例步骤",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#首先-设计测试用例步骤","aria-hidden":"true"},"#"),a(" 首先，设计测试用例步骤")],-1),x={href:"http://localhost:7077",target:"_blank",rel:"noopener noreferrer"},v=e("li",null,"输入用户名、密码，点击登录",-1),k=e("li",null,"如果用户名和密码正确，则登录成功，否则登录失败",-1),C=r('<p><strong>接下来，我们来看看实现测试用例的步骤</strong></p><h3 id="创建测试" tabindex="-1"><a class="header-anchor" href="#创建测试" aria-hidden="true">#</a> 创建测试</h3><p>在此目录下 cypress安装路径\\cypress\\integration ，创建一个 js 文件，比如：testLogin.js</p><h4 id="integration文件夹" tabindex="-1"><a class="header-anchor" href="#integration文件夹" aria-hidden="true">#</a> integration文件夹</h4><ul><li>Cypress 安装完毕后自动生成的文件夹</li><li>也是 Cypress 默认存放测试用例的<strong>根目录</strong>，任何创建在此目录下的文件<strong>都将被当作测试用例</strong></li></ul><p></p><h3 id="编写测试用例" tabindex="-1"><a class="header-anchor" href="#编写测试用例" aria-hidden="true">#</a> 编写测试用例</h3><p>首先，要在网页上定位到用户名、密码输入框，此案例中使用标签+属性名来定位；最终测试代码如下<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200617103436532-65522875.png" alt="" loading="lazy"><br> 咱们在后面再讲解代码的意思哦</p><h3 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试" aria-hidden="true">#</a> 运行测试</h3><p>进入 Cypress 安装文件夹，cmd执行命令</p><p>yarn cypress:open<br>  <br><strong>单击 testLogin.js</strong>，Cypress 会启动 Test  Runner 运行测试，运行成功后，将看到运行结果页面；运行时长是真的快....<br><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531142236753-380664174.png" alt="" loading="lazy"></p><h2 id="调试测试用例" tabindex="-1"><a class="header-anchor" href="#调试测试用例" aria-hidden="true">#</a> 调试测试用例</h2><h4 id="前言-1" tabindex="-1"><a class="header-anchor" href="#前言-1" aria-hidden="true">#</a> 前言</h4><ul><li>测试用例运行时，难免会发生各种情况导致运行失败；快速定位发生错误的位置，了解错误信息，一直是自动化测试的痛点</li><li>而 Cypress 提供了多种 debug 能力，可以在测试运行错误时直达错误位置，<strong>并支持回放错误发生时的上下文信息</strong>，可直接看到测试失败的原因</li></ul><p></p><h2 id="cypress-debug-能力介绍" tabindex="-1"><a class="header-anchor" href="#cypress-debug-能力介绍" aria-hidden="true">#</a> Cypress Debug 能力介绍</h2><h3 id="每个命令均有快照且支持回放" tabindex="-1"><a class="header-anchor" href="#每个命令均有快照且支持回放" aria-hidden="true">#</a> 每个命令均有快照且支持回放</h3><p>像下图，左侧就是测试步骤，右侧是测试页面</p><ul><li>鼠标 <strong>hover</strong> 测试步骤，在右侧可以看到执行该命令时的页面效果</li><li>鼠标<strong>点击</strong>测试步骤，可以锁定该步骤，然后查看上下文信息</li></ul><figure><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531143607103-1991093188.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="支持查看测试运行时发生的特殊页面事件" tabindex="-1"><a class="header-anchor" href="#支持查看测试运行时发生的特殊页面事件" aria-hidden="true">#</a> 支持查看测试运行时发生的特殊页面事件</h3><p><strong>包括：</strong></p><ul><li>网络 XHR 请求</li><li>URL 哈希更改</li><li>页面加载</li><li>表单提交</li></ul><p>例如，上面测试用例中，点击【submit】后产生的就是提交表单的请求，看下图<br> 可以看到一个 submit 操作，分成了三步走</p><ol><li>form sub：提交表单</li><li>page load：页面加载</li><li>new url：访问新的页面</li></ol><figure><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531144852235-1589707632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="console-输出每个命令的详细信息" tabindex="-1"><a class="header-anchor" href="#console-输出每个命令的详细信息" aria-hidden="true">#</a> Console 输出每个命令的详细信息</h3><p>浏览器F12即可见到熟悉的开发者工具页面了<br> 以上图为栗子，一个 submitting form 表单提交的请求，在 Console 中打印了详细的信息，可以快速了解<strong>在运行时的详细状态信息</strong></p><h3 id="暂停测试并逐步运行、恢复执行" tabindex="-1"><a class="header-anchor" href="#暂停测试并逐步运行、恢复执行" aria-hidden="true">#</a> 暂停测试并逐步运行、恢复执行</h3><p>在调试测试代码时，Cypress 提供了两个命令来暂停测试运行</p><ol><li>cy.pause()</li><li>cy.debug()</li></ol><p></p><h4 id="cy-pause-的栗子" tabindex="-1"><a class="header-anchor" href="#cy-pause-的栗子" aria-hidden="true">#</a> cy.pause() 的栗子</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531163304244-1533529514.png" alt="" loading="lazy"><br> 在表单提交之前暂停测试，我们来看看运行结果<br><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531163417868-830026134.png" alt="" loading="lazy"><br> 左上角有两个按钮，从左往右分别是</p><ul><li><strong>Resume</strong>：继续执行测试用例并运行到结束</li><li><strong>Next:get</strong>：测试会变成逐步运行，点一下执行下一个命令</li></ul><p></p><h4 id="cy-debug-的栗子" tabindex="-1"><a class="header-anchor" href="#cy-debug-的栗子" aria-hidden="true">#</a> cy.debug() 的栗子</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531164820886-46866884.png" alt="" loading="lazy"><br> 运行测试看看下图结果<br><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531165305191-1730329844.png" alt="" loading="lazy"><br> 测试运行在找到表单的时候，暂停运行并等待用户操作</p><h5 id="顶部的paused-in-debugger-右边两个按钮分别是" tabindex="-1"><a class="header-anchor" href="#顶部的paused-in-debugger-右边两个按钮分别是" aria-hidden="true">#</a> 顶部的Paused in debugger，右边两个按钮分别是</h5><ul><li><strong>Resume Script Execution（F8）</strong>：继续执行测试用例并运行到结束</li><li><strong>Step Over next function call（F10）</strong>：跳转到下一个调用debug()函数的地方</li></ul><p></p><h3 id="当找到隐藏或多个元素时-可视化结果" tabindex="-1"><a class="header-anchor" href="#当找到隐藏或多个元素时-可视化结果" aria-hidden="true">#</a> 当找到隐藏或多个元素时，可视化结果</h3><p>更改 username 输入框的定位器，使他匹配到不止一个元素<br><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531165843882-299216354.png" alt="" loading="lazy"><br> 运行测试看看下面结果<br><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531170004303-389299960.png" alt="" loading="lazy"><br> 因为定位表达式匹配到不止一个元素，所以执行 type() 方法时以失败告终</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这一节咱们以测试一个登录界面为需求，写了一个简单的测试用例来做栗子，后面将详细讲解 Cypress 的各部分内容哦</p>',45),j={href:"https://www.cnblogs.com/poloyy/p/12992659.html",target:"_blank",rel:"noopener noreferrer"};function z(w,L){const s=l("ExternalLinkIcon");return t(),o("div",null,[c,e("p",null,[a("启动成功后，cmd窗口将显示服务器的地址和端口"),p,h,g,a("  "),u,a(" 打开浏览器访问："),e("a",b,[a("localhost:7077"),n(s)]),a("，即可看到登录页面"),m,_]),f,y,e("ol",null,[e("li",null,[a("访问"),e("a",x,[a("localhost:7077"),n(s)]),a("/")]),v,k]),C,e("blockquote",null,[e("p",null,[e("a",j,[a("https://www.cnblogs.com/poloyy/p/12992659.html"),n(s)])])])])}const E=i(d,[["render",z],["__file","Cypress系列（003）--Cypress-的初次体验.html.vue"]]);export{E as default};
