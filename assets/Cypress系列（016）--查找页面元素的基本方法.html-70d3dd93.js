import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c,a,b as n,d as s,f as l}from"./app-cfbf85c1.js";const r={},d=l(`<h2 id="前端页面代码" tabindex="-1"><a class="header-anchor" href="#前端页面代码" aria-hidden="true">#</a> 前端页面代码</h2><p>后面写的 Cypress 代码，都会基于这个 html 页面来定位元素哦，文件位置随意放，代码需要手动自己敲一遍<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608171251363-1265580230.png" alt="" loading="lazy"></p><h2 id="get-selector" tabindex="-1"><a class="header-anchor" href="#get-selector" aria-hidden="true">#</a> .get(selector)</h2><p>该用法用来在 DOM 树中查找 selector 对应的 DOM 元素</p><h4 id="两种语法格式" tabindex="-1"><a class="header-anchor" href="#两种语法格式" aria-hidden="true">#</a> 两种语法格式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以选择器定位</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
<span class="token comment">// 以别名定位，后续会讲到</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="简单的栗子" tabindex="-1"><a class="header-anchor" href="#简单的栗子" aria-hidden="true">#</a> 简单的栗子</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608181955809-659961592.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608182004690-667461826.png" alt="" loading="lazy"><br> 如果可以匹配多个元素，则返回多个元素</p><h2 id="find-selector" tabindex="-1"><a class="header-anchor" href="#find-selector" aria-hidden="true">#</a> .find(selector)</h2><p>该定位方法用来在 DOM 树中搜索<strong>已被定位到的元素的后代</strong>，并将匹配到的元素<strong>返回为一个新的 jQuery 对象【注意，不是返回元素对象】</strong></p><h4 id="实际栗子-测试文件代码" tabindex="-1"><a class="header-anchor" href="#实际栗子-测试文件代码" aria-hidden="true">#</a> 实际栗子-测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608173756092-2002681261.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608173810474-1412207891.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="解析错误信息-重点-懂了这个就不会再犯同样的错误了" tabindex="-1"><a class="header-anchor" href="#解析错误信息-重点-懂了这个就不会再犯同样的错误了" aria-hidden="true">#</a> 解析错误信息（重点，懂了这个就不会再犯同样的错误了）</h4><ul><li>**英文：**A child command must be chained after a parent because it operates on a previous subject</li><li>**中文：**子命令需要链接到父命令之后，因为他需要作用于上一个对象</li><li><strong>通俗理解：<strong>需要找到元素才能对元素执行某些命令</strong>【针对元素的操作】</strong></li><li>**重点：**很多命令都需要通过元素去调用的，所以需要先定位到元素，才能调用那些命令，否则元素都没有，怎么操作元素呢</li></ul><p></p><h2 id="contains" tabindex="-1"><a class="header-anchor" href="#contains" aria-hidden="true">#</a> .contains()</h2><p>该方法可用来获取包含指定文本的 DOM 元素</p><h4 id="两种语法格式-1" tabindex="-1"><a class="header-anchor" href="#两种语法格式-1" aria-hidden="true">#</a> 两种语法格式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="实际栗子-测试文件代码-1" tabindex="-1"><a class="header-anchor" href="#实际栗子-测试文件代码-1" aria-hidden="true">#</a> 实际栗子-测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200618164439302-1921802285.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h4>`,28),p=a("img",{src:"https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608183624800-507269515.png",alt:"",loading:"lazy"},null,-1),h=a("br",null,null,-1),u=a("br",null,null,-1),g=a("br",null,null,-1),b=a("strong",null,"结尾",-1),m=a("br",null,null,-1),_=a("br",null,null,-1),f={href:"https://www.cnblogs.com/poloyy/p/13052972.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/poloyy/p/13065990.html",target:"_blank",rel:"noopener noreferrer"};function k(x,y){const e=i("ExternalLinkIcon");return o(),c("div",null,[d,a("p",null,[p,h,n(" **重点：**只会返回第一个匹配到的元素"),u,n("  "),g,b,m,n(" 本文是博主基于对蔡超老师的《Cypress 从入门到精通》阅读理解完后输出的博文，并附上了自己的理解"),_,n(" 对书籍感兴趣的，大家可以参考本篇博客："),a("a",f,[n("https://www.cnblogs.com/poloyy/p/13052972.html"),s(e)]),n("，考虑自身需求进行购买")]),a("blockquote",null,[a("p",null,[a("a",v,[n("https://www.cnblogs.com/poloyy/p/13065990.html"),s(e)])])])])}const z=t(r,[["render",k],["__file","Cypress系列（016）--查找页面元素的基本方法.html.vue"]]);export{z as default};
