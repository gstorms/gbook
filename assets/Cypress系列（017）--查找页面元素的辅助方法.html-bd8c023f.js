import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as s,c as l,a,b as e,d as n,f as h}from"./app-cfbf85c1.js";const o={},d=h(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>单一的基础定位元素方法并不一定能满足复杂的场景，所以 Cypress 还提供了一些<strong>辅助方法，可以提高找到元素的准确性</strong></p><h2 id="前端页面代码" tabindex="-1"><a class="header-anchor" href="#前端页面代码" aria-hidden="true">#</a> 前端页面代码</h2><p>后面写的 Cypress 代码，都会基于这个 html 页面来定位元素哦，文件位置随意放，代码需要手动自己敲一遍<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608192320585-54870070.png" alt="" loading="lazy"></p><h2 id="children" tabindex="-1"><a class="header-anchor" href="#children" aria-hidden="true">#</a> .children()</h2><p>用来获取 DOM 元素的子元素</p><h4 id="两种语法格式" tabindex="-1"><a class="header-anchor" href="#两种语法格式" aria-hidden="true">#</a> 两种语法格式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试文件代码" tabindex="-1"><a class="header-anchor" href="#测试文件代码" aria-hidden="true">#</a> 测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608192308155-447982964.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608192314666-1858030976.png" alt="" loading="lazy"><br> ul 标签的子元素有四个 li，所以返回了四个 DOM 元素</p><h2 id="parents" tabindex="-1"><a class="header-anchor" href="#parents" aria-hidden="true">#</a> .parents()</h2><p>用来获取 DOM 元素的所有父元素，包括了爷爷级别、祖父级别....</p><h4 id="测试文件代码-1" tabindex="-1"><a class="header-anchor" href="#测试文件代码-1" aria-hidden="true">#</a> 测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608192406393-1648146562.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608192413004-1861662089.png" alt="" loading="lazy"><br> li 的父元素（父亲、爷爷、祖父....）一共有四个：ul &gt; div &gt; body &gt; html</p><h2 id="parent" tabindex="-1"><a class="header-anchor" href="#parent" aria-hidden="true">#</a> .parent()</h2><p>用来获取 DOM 元素的第一层父元素</p><h4 id="测试文件代码-2" tabindex="-1"><a class="header-anchor" href="#测试文件代码-2" aria-hidden="true">#</a> 测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608192457210-1639553008.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果-2" tabindex="-1"><a class="header-anchor" href="#测试结果-2" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608192455431-1976469559.png" alt="" loading="lazy"><br> li 的第一层父亲是 ul，所以只返回它</p><h2 id="siblings" tabindex="-1"><a class="header-anchor" href="#siblings" aria-hidden="true">#</a> .siblings()</h2><p>用来获取 DOM 元素的所有同级元素</p><h4 id="测试文件代码-3" tabindex="-1"><a class="header-anchor" href="#测试文件代码-3" aria-hidden="true">#</a> 测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608193136803-298806182.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果-3" tabindex="-1"><a class="header-anchor" href="#测试结果-3" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608193139727-1403227071.png" alt="" loading="lazy"><br> li 的同级元素有其他三个 li 元素</p><h2 id="first" tabindex="-1"><a class="header-anchor" href="#first" aria-hidden="true">#</a> .first()</h2><ul><li>匹配给定的 DOM 元素列表中的<strong>第一个元素</strong></li><li>**重点：**如果是单个 DOM 元素调用此方法，则返回自己</li></ul><p></p><h4 id="测试文件代码-4" tabindex="-1"><a class="header-anchor" href="#测试文件代码-4" aria-hidden="true">#</a> 测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608220658926-98732417.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果-4" tabindex="-1"><a class="header-anchor" href="#测试结果-4" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608220704673-98810835.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="last" tabindex="-1"><a class="header-anchor" href="#last" aria-hidden="true">#</a> .last()</h2><ul><li>匹配给定的 DOM 元素列表中的<strong>最后一个元素</strong></li><li>**重点：**如果是单个 DOM 元素调用此方法，则返回自己</li></ul><p></p><h4 id="测试文件代码-5" tabindex="-1"><a class="header-anchor" href="#测试文件代码-5" aria-hidden="true">#</a> 测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608220638751-24881348.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果-5" tabindex="-1"><a class="header-anchor" href="#测试结果-5" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608220655640-1141924817.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="next家族" tabindex="-1"><a class="header-anchor" href="#next家族" aria-hidden="true">#</a> next家族</h2><h3 id="next" tabindex="-1"><a class="header-anchor" href="#next" aria-hidden="true">#</a> .next()</h3><p>获取给定的 DOM 元素<strong>后面</strong>紧跟的<strong>下一个</strong>同级元素</p><h3 id="nextall" tabindex="-1"><a class="header-anchor" href="#nextall" aria-hidden="true">#</a> .nextAll()</h3><p>获取给定的 DOM 元素<strong>后面</strong>紧跟的<strong>所有</strong>同级元素</p><h3 id="nextuntil-selector" tabindex="-1"><a class="header-anchor" href="#nextuntil-selector" aria-hidden="true">#</a> .nextUntil(selector)</h3><p>获取给定的 DOM 元素<strong>后面</strong>紧跟的<strong>所有</strong>同级元素**，直到遇到 Until 里定义的元素为止**</p><h3 id="测试文件代码-6" tabindex="-1"><a class="header-anchor" href="#测试文件代码-6" aria-hidden="true">#</a> 测试文件代码</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608230318389-1583203027.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="测试结果-6" tabindex="-1"><a class="header-anchor" href="#测试结果-6" aria-hidden="true">#</a> 测试结果</h3><h4 id="next-测试结果" tabindex="-1"><a class="header-anchor" href="#next-测试结果" aria-hidden="true">#</a> next() 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608230359402-233790557.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="nextall-测试结果" tabindex="-1"><a class="header-anchor" href="#nextall-测试结果" aria-hidden="true">#</a> nextAll() 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608230401803-502866353.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="nextuntil-测试结果" tabindex="-1"><a class="header-anchor" href="#nextuntil-测试结果" aria-hidden="true">#</a> nextUntil() 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608230405692-391765814.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="prev家族" tabindex="-1"><a class="header-anchor" href="#prev家族" aria-hidden="true">#</a> prev家族</h2><h3 id="prev" tabindex="-1"><a class="header-anchor" href="#prev" aria-hidden="true">#</a> .prev()</h3><p>获取给定的 DOM 元素<strong>前面</strong>紧跟的<strong>上一个</strong>同级元素</p><h3 id="prevall" tabindex="-1"><a class="header-anchor" href="#prevall" aria-hidden="true">#</a> .prevAll()</h3><p>获取给定的 DOM 元素<strong>前面</strong>紧跟的<strong>所有</strong>同级元素</p><h3 id="prevuntil" tabindex="-1"><a class="header-anchor" href="#prevuntil" aria-hidden="true">#</a> .prevUntil()</h3><p>获取给定的 DOM 元素<strong>前面</strong>紧跟的<strong>所有</strong>同级元素，<strong>直到遇到 Until 里定义的元素为止</strong></p><h3 id="测试文件代码-7" tabindex="-1"><a class="header-anchor" href="#测试文件代码-7" aria-hidden="true">#</a> 测试文件代码</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608231415696-1054331461.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="测试结果-7" tabindex="-1"><a class="header-anchor" href="#测试结果-7" aria-hidden="true">#</a> 测试结果</h3><h4 id="prev-测试结果" tabindex="-1"><a class="header-anchor" href="#prev-测试结果" aria-hidden="true">#</a> prev() 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608231437304-1967806446.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="prevall-测试结果" tabindex="-1"><a class="header-anchor" href="#prevall-测试结果" aria-hidden="true">#</a> prevAll() 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608231438582-548228762.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="prevuntil-测试结果" tabindex="-1"><a class="header-anchor" href="#prevuntil-测试结果" aria-hidden="true">#</a> prevUntil() 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608231440053-1610296418.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="each" tabindex="-1"><a class="header-anchor" href="#each" aria-hidden="true">#</a> .each()</h2><p>用来遍历数据或者及其类似的结构**（对象有 length 属性即可）**</p><h4 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h4 id="测试文件代码-8" tabindex="-1"><a class="header-anchor" href="#测试文件代码-8" aria-hidden="true">#</a> 测试文件代码</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608232637613-2144134707.png" alt="" loading="lazy"><br> **注意： $li **是一个变量名，每次循均代表一个 jQuery 对象</p><h4 id="测试结果-8" tabindex="-1"><a class="header-anchor" href="#测试结果-8" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200608232638282-868746608.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="eq" tabindex="-1"><a class="header-anchor" href="#eq" aria-hidden="true">#</a> .eq()</h2><ul><li>在元素或者数组中的特点索引处获取 DOM 元素</li><li>作用跟 :nth-child() 选择器一样，只不过下标从0开始</li></ul><p></p><h4 id="测试文件代码-9" tabindex="-1"><a class="header-anchor" href="#测试文件代码-9" aria-hidden="true">#</a> 测试文件代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200609094035799-1330782282.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="测试结果-9" tabindex="-1"><a class="header-anchor" href="#测试结果-9" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200609094051599-1322723486.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="closest" tabindex="-1"><a class="header-anchor" href="#closest" aria-hidden="true">#</a> .closest()</h2>`,94),c={href:"https://www.cnblogs.com/poloyy/p/14010281.html",target:"_blank",rel:"noopener noreferrer"},g=a("br",null,null,-1),p=a("br",null,null,-1),u=a("strong",null,"结尾",-1),b=a("br",null,null,-1),f=a("br",null,null,-1),m={href:"https://www.cnblogs.com/poloyy/p/13052972.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.cnblogs.com/poloyy/p/13065998.html",target:"_blank",rel:"noopener noreferrer"};function _(y,v){const i=t("ExternalLinkIcon");return s(),l("div",null,[d,a("p",null,[a("a",c,[e("https://www.cnblogs.com/poloyy/p/14010281.html"),n(i)]),g,e("  "),p,u,b,e(" 本文是博主基于对蔡超老师的《Cypress 从入门到精通》阅读理解完后输出的博文，并附上了自己的理解"),f,e(" 对书籍感兴趣的，大家可以参考本篇博客："),a("a",m,[e("https://www.cnblogs.com/poloyy/p/13052972.html"),n(i)]),e("，考虑自身需求进行购买")]),a("blockquote",null,[a("p",null,[a("a",x,[e("https://www.cnblogs.com/poloyy/p/13065998.html"),n(i)])])])])}const w=r(o,[["render",_],["__file","Cypress系列（017）--查找页面元素的辅助方法.html.vue"]]);export{w as default};
