import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r,o,c as i,a as s,b as a,d as e,f as p}from"./app-d0fb0332.js";const c={},l=p(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>Cypress 的测试报告模块脱胎于 Mocha 的测试报告，故任何 Mocha 支持的测试报告均可直接用于 Cypress</li><li>下面将利用 Cypress-example 提供的 web 应用程序作为例子，需要先启动本地服务</li></ul><p>进入被测应用 logging-in__html-web-forms 的目录</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">C</span><span class="token operator">:</span>\\Users\\user\\Desktop\\py\\cypress<span class="token operator">-</span>example<span class="token operator">-</span>recipes\\examples\\logging<span class="token operator">-</span>in__html<span class="token operator">-</span>web<span class="token operator">-</span>forms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动本地服务</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动成功后，cmd窗口将显示服务器的地址和端口<br><img src="https://img2020.cnblogs.com/blog/1896874/202005/1896874-20200531134112456-898585859.png" alt="" loading="lazy"></p><h2 id="内置的测试报告" tabindex="-1"><a class="header-anchor" href="#内置的测试报告" aria-hidden="true">#</a> 内置的测试报告</h2><p>内置的测试报告包括 Mocha 的内置测试报告和直接嵌入在 Cypress 中的测试报告，主要有以下几种</p><ol><li>spec 格式报告</li><li>json 格式报告</li><li>junit 格式报告</li></ol><h4 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> <strong>准备工作</strong></h4><p>确保  package.json  文件的 scripts 模块加入了如下键值对  &quot;cypress:run&quot;:&quot;cypress run&quot;</p><ul><li>cypress run  是以无头浏览器模式跑测试用例文件夹下的所有测试用例</li><li>cypress open  会打开测试用例集的界面，需要手动运行</li></ul><p></p><h3 id="spec-格式报告" tabindex="-1"><a class="header-anchor" href="#spec-格式报告" aria-hidden="true">#</a> spec 格式报告</h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h4><p>spec 格式是 Mocha 的内置报告，它的输出是一个<strong>嵌套的分级视图</strong></p><h4 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用</h4><p>在 Cypress 中使用 spec 格式的报告非常简单，在命令行运行时加上 --reporter=spec</p><h4 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试" aria-hidden="true">#</a> 运行测试</h4><p>进入 Cypress 安装的目录，cmd敲</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn cypress<span class="token operator">:</span>run <span class="token operator">--</span>reorter<span class="token operator">=</span>spec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行完成后，测试报告如下图<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602162308863-1238512329.png" alt="" loading="lazy"></p><h3 id="json-格式报告" tabindex="-1"><a class="header-anchor" href="#json-格式报告" aria-hidden="true">#</a> json 格式报告</h3><h4 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1" aria-hidden="true">#</a> 简介</h4><p>json 测试报告格式将输出一个大的 JSON 对象</p><h4 id="如何使用-1" tabindex="-1"><a class="header-anchor" href="#如何使用-1" aria-hidden="true">#</a> 如何使用</h4><p>在 Cypress 中使用 json 格式的报告非常简单，在命令行运行时加上  --reporter=json</p><h4 id="运行测试-1" tabindex="-1"><a class="header-anchor" href="#运行测试-1" aria-hidden="true">#</a> 运行测试</h4><p>进入 Cypress 安装的目录，cmd敲</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn cypress<span class="token operator">:</span>run <span class="token operator">--</span>reporter<span class="token operator">=</span>json <span class="token operator">--</span>reporter<span class="token operator">-</span>options <span class="token string">&quot;toConsole=true&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行完成后，测试报告如下图<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602162317216-464126208.png" alt="" loading="lazy"></p><h3 id="junit-格式报告" tabindex="-1"><a class="header-anchor" href="#junit-格式报告" aria-hidden="true">#</a> junit 格式报告</h3><h4 id="简介-2" tabindex="-1"><a class="header-anchor" href="#简介-2" aria-hidden="true">#</a> 简介</h4><p>junit 测试报告格式将输出一个 xml 文件</p><h4 id="如何使用-2" tabindex="-1"><a class="header-anchor" href="#如何使用-2" aria-hidden="true">#</a> 如何使用</h4><p>在 Cypress 中使用 xml 格式的报告非常简单，在命令行运行时加上   --reporter=junit</p><h4 id="运行测试-2" tabindex="-1"><a class="header-anchor" href="#运行测试-2" aria-hidden="true">#</a> 运行测试</h4><p>进入 Cypress 安装的目录，cmd敲</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn cypress<span class="token operator">:</span>run <span class="token operator">--</span>reporter junit <span class="token operator">--</span>reporter<span class="token operator">-</span>options <span class="token string">&quot;mochaFile=results/test_output.xml,toConsole=true&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行完成后，测试报告如下图<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602162402721-361734928.png" alt="" loading="lazy"></p><h2 id="自定义的测试报告" tabindex="-1"><a class="header-anchor" href="#自定义的测试报告" aria-hidden="true">#</a> 自定义的测试报告</h2><p>除了内置的测试报告，Cypress 也支持用户自动以报告格式</p><h4 id="mochawesome-报告介绍" tabindex="-1"><a class="header-anchor" href="#mochawesome-报告介绍" aria-hidden="true">#</a> Mochawesome 报告介绍</h4><ul><li>Mochawesome 是与 JavaScript 测试框架 Mocha 一起使用的自定义报告程序，它运行在 Node.js（≥8）上</li><li>并与 mochawesome-report-generatir 结合使用生成独立的 HTML/CSS 报告，以帮助可视化测试运行</li></ul><p></p><h3 id="在-cypress-中使用-mochawesome-报告的步骤" tabindex="-1"><a class="header-anchor" href="#在-cypress-中使用-mochawesome-报告的步骤" aria-hidden="true">#</a> 在 Cypress 中使用 Mochawesome 报告的步骤</h3><h4 id="第一步" tabindex="-1"><a class="header-anchor" href="#第一步" aria-hidden="true">#</a> 第一步</h4><ul><li>将 Mocha、Mochawesome 添加至项目中（看下面命令）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev mocha
npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev mochawesome
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意坑</strong></p><ul><li>先看看 node_modules 目录下<strong>是否有</strong> mocha 文件夹，如果有直接装 mochawesome</li><li>如果安装 mocha 失败，出现很古怪的错误，譬如 mkdirp 版本不行（如：  mkdirp@0.5.1: Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x.  ）</li><li>尝试先 update mkdirp 库，如果也报错，则 uninstall mkdirp 库，如果仍然报错；则把 Cypress 目录下的 node_modules <strong>整个文件夹删掉</strong>，重新执行 npm install ，大概率可以解决问题了</li></ul><p>（别问我怎么知道这些坑...）</p><h4 id="第二步" tabindex="-1"><a class="header-anchor" href="#第二步" aria-hidden="true">#</a> 第二步</h4><p>进入 Cypress 安装目录，cmd执行下面命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn cypress<span class="token operator">:</span>run <span class="token operator">--</span>reporter mochawesome
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行完成后，可以看到下图<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602173006289-1234991306.png" alt="" loading="lazy"><br>  <br> 测试报告文件夹 mochawesome-report 会生成在项目根目录下<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602173011292-1628670138.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602173042368-342334244.png" alt="" loading="lazy"><br>  <br> 点击 html 查看可视化报告<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602173106133-1659955324.png" alt="" loading="lazy"></p><h3 id="用户自定义报告的步骤" tabindex="-1"><a class="header-anchor" href="#用户自定义报告的步骤" aria-hidden="true">#</a> 用户自定义报告的步骤</h3><h4 id="第一步-配置-reporter-选项" tabindex="-1"><a class="header-anchor" href="#第一步-配置-reporter-选项" aria-hidden="true">#</a> 第一步：配置 reporter 选项</h4><ul><li>cypress.json  文件中配置  reporter 选项，指定 reporter 文件位置</li><li>在本栗子中，把 reporter 定义在 custom_reporter.js 文件中</li></ul><p></p><h4 id="第二步-编写自定义报告文件" tabindex="-1"><a class="header-anchor" href="#第二步-编写自定义报告文件" aria-hidden="true">#</a> 第二步：编写自定义报告文件</h4><ol><li>进入 Cypress 安装目录下的 cypress 目录下（本案例在： C:\\Users\\user\\Desktop\\py\\MyCypress\\cypress ）</li><li>创建 reporter 文件夹，然后创建一个 custom_reporter.js 文件</li><li>写以下代码（此自定义报告扩展了内置报告，仅更改了成功的显示样式）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mocha <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mocha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyReporter<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">MyReporter</span><span class="token punctuation">(</span><span class="token parameter">runner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mocha<span class="token punctuation">.</span>reporters<span class="token punctuation">.</span><span class="token function">Base</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> runner<span class="token punctuation">)</span>
    <span class="token keyword">var</span> passes <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">var</span> failures <span class="token operator">=</span> <span class="token number">0</span>
    runner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;pass&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        passes<span class="token operator">++</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pass:%s&#39;</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span><span class="token function">fullTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    runner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;fail&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">test<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        failures<span class="token operator">++</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fail:%s -- error:%s&#39;</span><span class="token punctuation">,</span> test<span class="token punctuation">.</span><span class="token function">fullTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    runner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;用户自定义报告：%d/%d&#39;</span><span class="token punctuation">,</span> passes<span class="token punctuation">,</span> passes <span class="token operator">+</span> failures<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="第三步-运行测试" tabindex="-1"><a class="header-anchor" href="#第三步-运行测试" aria-hidden="true">#</a> 第三步：运行测试</h4><p>进入 Cypress 安装目录，cmd敲下面命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn cypress<span class="token operator">:</span>run <span class="token operator">--</span>reporter <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>cypress<span class="token operator">/</span>reporters<span class="token operator">/</span>custom_reporter<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行完成后，测试报告如下图<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602210941236-1743756962.png" alt="" loading="lazy"></p><h2 id="生成混合测试报告" tabindex="-1"><a class="header-anchor" href="#生成混合测试报告" aria-hidden="true">#</a> 生成混合测试报告</h2><h3 id="前言-1" tabindex="-1"><a class="header-anchor" href="#前言-1" aria-hidden="true">#</a> 前言</h3>`,71),d=s("li",null,"Cypress 除了支持单个测试报告，还支持混合测试报告",-1),u=s("li",null,"老板或者管理者一般都喜欢看到多种不一样样式的报告，比如测试在 CI 中运行时，又想生成 junit 格式的报告，又想在运行时实时看到测试输出",-1),h={href:"https://github.com/stanleyhlng/mocha-multi-reporters",target:"_blank",rel:"noopener noreferrer"},m=p(`<p></p><h3 id="使用-mocha-multi-reporters-的测试步骤" tabindex="-1"><a class="header-anchor" href="#使用-mocha-multi-reporters-的测试步骤" aria-hidden="true">#</a> 使用 mocha-multi-reporters 的测试步骤</h3><h4 id="第一步-安装所需库" tabindex="-1"><a class="header-anchor" href="#第一步-安装所需库" aria-hidden="true">#</a> 第一步：安装所需库</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev mocha<span class="token operator">-</span>multi<span class="token operator">-</span>reporters mocha<span class="token operator">-</span>junit<span class="token operator">-</span>reporter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h4 id="第二步-创建-json-文件" tabindex="-1"><a class="header-anchor" href="#第二步-创建-json-文件" aria-hidden="true">#</a> 第二步：创建 json 文件</h4><p>在 cypress/reporters 文件夹下，创建一个 custom.json 文件，增加如下内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;reporterEnabled&quot;</span><span class="token operator">:</span> <span class="token string">&quot;spec,json, mocha-junit-reporter&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;reporterOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;mochaFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cypress/results/results-[hash].xml&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="第三步-运行测试-1" tabindex="-1"><a class="header-anchor" href="#第三步-运行测试-1" aria-hidden="true">#</a> 第三步：运行测试</h4><p>进入 Cypress 安装目录，cmd敲下面命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>yarn cypress run <span class="token operator">--</span>reporter mocha<span class="token operator">-</span>multi<span class="token operator">-</span>reporters  <span class="token operator">--</span>reporter<span class="token operator">-</span>options configFile<span class="token operator">=</span>cypress<span class="token operator">/</span>reporters<span class="token operator">/</span>custom<span class="token punctuation">.</span>json <span class="token operator">--</span>spec cypress<span class="token operator">/</span>integration<span class="token operator">/</span>testLogin<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行完成后，测试报告如下图<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602224559084-825877064.png" alt="" loading="lazy"><br>  <br> 测试报告文件夹 results 会生成在 Cypress安装路径/cypress  目录下<br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200602224830648-1058138810.png" alt="" loading="lazy"></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>当我们运行完一次测试（可能包含多个 spec），我们更希望看到<strong>一个完整的测试报告文件，而不是分开的独立文件</strong></li><li>特别对于 HTML 格式报告来说，整合到同一个 HTML 报告中是更加直观的</li><li>Cypress 为了解决此问题也提供了高阶的方法，将在后续的 Cypress 进阶部分进行详细介绍</li></ul>`,15),k={href:"https://www.cnblogs.com/poloyy/p/13030898.html",target:"_blank",rel:"noopener noreferrer"};function g(v,b){const n=r("ExternalLinkIcon");return o(),i("div",null,[l,s("ul",null,[d,u,s("li",null,[a("Cypress 官方推荐使用 mocha-multi-reporters 来生成混合测试报告（"),s("a",h,[a("https://github.com/stanleyhlng/mocha-multi-reporters"),e(n)]),a("）")])]),m,s("blockquote",null,[s("p",null,[s("a",k,[a("https://www.cnblogs.com/poloyy/p/13030898.html"),e(n)])])])])}const j=t(c,[["render",g],["__file","Cypress系列（041）--Cypress-的测试报告.html.vue"]]);export{j as default};
