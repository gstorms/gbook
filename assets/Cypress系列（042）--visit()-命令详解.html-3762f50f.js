import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as o,a,b as t,d as e,f as s}from"./app-d0fb0332.js";const l={},c=s(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>访问远程 URL</p><h2 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="参数讲解" tabindex="-1"><a class="header-anchor" href="#参数讲解" aria-hidden="true">#</a> 参数讲解</h2><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> url</h3><p>两种值</p>`,8),p={href:"https://www.cnblogs.com/poloyy/",target:"_blank",rel:"noopener noreferrer"},h=a("li",null,"html 文件的相对路径，路径是相对于 Cypress 的安装目录，不需要 file:// 前缀",-1),u=s(`<p></p><h4 id="cypress-关于-url-的最佳实践" tabindex="-1"><a class="header-anchor" href="#cypress-关于-url-的最佳实践" aria-hidden="true">#</a> Cypress 关于 url 的最佳实践</h4><ul><li>建议在使用 cy.visit() 时，在  cypress.json 里设置一个baseUrl</li><li>baseUrl 相当于一个全局共享的 host，在使用 visit() 和 request() 等命令时自动将 baseUrl 传递进去</li><li>**优势：**首次启动 Cypress 测试时，添加 baseUrl 还可以节省一些时间</li></ul><p></p><h4 id="不添加-baseurl-的影响" tabindex="-1"><a class="header-anchor" href="#不添加-baseurl-的影响" aria-hidden="true">#</a> 不添加 baseUrl 的影响</h4><p>一旦遇到 cy.visit() ，Cypress 便将主窗口的 URL 切换到访问指定的 URL，首次开始测试时，可能会导致<strong>刷新或重新加载</strong></p><h4 id="添加-baseurl-的优势" tabindex="-1"><a class="header-anchor" href="#添加-baseurl-的优势" aria-hidden="true">#</a> 添加 baseUrl 的优势</h4><ul><li>通过设置 baseUrl，可以完全避免重新加载</li><li>测试开始后，Cypress 会将主窗口加载到您指定的 baseUrl 中</li></ul><p></p><h4 id="添加-baseurl" tabindex="-1"><a class="header-anchor" href="#添加-baseurl" aria-hidden="true">#</a> 添加 baseUrl</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903113828310-450523201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="baseurl-未运行" tabindex="-1"><a class="header-anchor" href="#baseurl-未运行" aria-hidden="true">#</a> baseUrl 未运行</h4><p>如果在 cypress 打开期间，指定了 baseUrl ，但服务器未运行，则会看到错误<br><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903114730269-1652641955.png" alt="" loading="lazy"><br>  <br> 如果在 cypress 运行期间几次重试后，服务器未在指定的 baseUrl 上运行，也会显示错误 <br><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903115011027-1798290008.png" alt="" loading="lazy"></p><h3 id="其他参数-options" tabindex="-1"><a class="header-anchor" href="#其他参数-options" aria-hidden="true">#</a> 其他参数 options</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>默认</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>method</td><td>GET</td><td>请求方法，GET或POST</td></tr><tr><td>body</td><td>null</td><td>l 与POST请求一起发送的数据体</td></tr><tr><td>l 如果是字符串，则将其原封不动地传递</td><td></td><td></td></tr><tr><td>l 如果是一个对象，它将被URL编码为字符串，并加上Content-Type：application / x-www-urlencoded</td><td></td><td></td></tr><tr><td>headers</td><td>{}</td><td>请求头</td></tr><tr><td>qs</td><td>null</td><td>Url的请求参数</td></tr><tr><td>log</td><td>true</td><td>是否打印日志</td></tr><tr><td>auth</td><td>null</td><td>添加基本授权标头</td></tr><tr><td>failOnStatusCode</td><td>true</td><td>是否在2xx和3xx以外的响应代码上标识为失败</td></tr><tr><td>onBeforeLoad</td><td>function</td><td>在页面加载所有资源之前调用指定的方法</td></tr><tr><td>onLoad</td><td>function</td><td>页面触发加载事件后调用</td></tr><tr><td>retryOnStatusCodeFailure</td><td>false</td><td>当状态码是错误码时，Cypress是否自动重试，最多重试4次</td></tr><tr><td>retryOnNetworkFailure</td><td>true</td><td>当网络错误时，Cypress是否自动重试，最多重试4次</td></tr><tr><td>timeout</td><td>pageLoadTimeout</td><td>最长等待 .visit() 完成的时间</td></tr></tbody></table><p></p><h2 id="正确写法" tabindex="-1"><a class="header-anchor" href="#正确写法" aria-hidden="true">#</a> 正确写法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在新的窗口打开 URL</span>
cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">)</span>  
cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;./pages/hello.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="具体的栗子" tabindex="-1"><a class="header-anchor" href="#具体的栗子" aria-hidden="true">#</a> 具体的栗子</h2><h4 id="直接访问" tabindex="-1"><a class="header-anchor" href="#直接访问" aria-hidden="true">#</a> 直接访问</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903141727014-1570205068.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="加上-timeout-参数" tabindex="-1"><a class="header-anchor" href="#加上-timeout-参数" aria-hidden="true">#</a> 加上 timeout 参数</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903141742177-496116966.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="加上-auth" tabindex="-1"><a class="header-anchor" href="#加上-auth" aria-hidden="true">#</a> 加上 auth</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903141747877-2146472055.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="加上-onbeforeload" tabindex="-1"><a class="header-anchor" href="#加上-onbeforeload" aria-hidden="true">#</a> 加上 onBeforeLoad</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903141721132-2002317913.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="加上-onload" tabindex="-1"><a class="header-anchor" href="#加上-onload" aria-hidden="true">#</a> 加上 onLoad</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903153016576-986084680.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="加上-qs" tabindex="-1"><a class="header-anchor" href="#加上-qs" aria-hidden="true">#</a> 加上 qs</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903153020021-1798662880.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="加上-method-和-body" tabindex="-1"><a class="header-anchor" href="#加上-method-和-body" aria-hidden="true">#</a> 加上 method 和 body</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903175114016-528062452.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="使用-window-对象" tabindex="-1"><a class="header-anchor" href="#使用-window-对象" aria-hidden="true">#</a> 使用 window 对象</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200903175120949-101737375.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,36),g={href:"https://www.cnblogs.com/poloyy/p/13608977.html",target:"_blank",rel:"noopener noreferrer"};function b(f,m){const n=r("ExternalLinkIcon");return d(),o("div",null,[c,a("ol",null,[a("li",null,[t("需要直接访问的 URL，可以是一个完整的 URL，比如："),a("a",p,[t("https://www.cnblogs.com/poloyy/"),e(n)])]),h]),u,a("blockquote",null,[a("p",null,[a("a",g,[t("https://www.cnblogs.com/poloyy/p/13608977.html"),e(n)])])])])}const _=i(l,[["render",b],["__file","Cypress系列（042）--visit()-命令详解.html.vue"]]);export{_ as default};
