import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as e,a as n,b as i,d as c,f as o}from"./app-731a6e06.js";const l={},u=o(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><ul><li>起别名以供以后使用</li><li>可在 cy.get() 或 cy.wait() 命令中引用别名</li></ul><p></p><h2 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span>aliasName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="正确格式" tabindex="-1"><a class="header-anchor" href="#正确格式" aria-hidden="true">#</a> 正确格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 给第一个 li 元素起别名</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.main-nav&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;firstNav&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 给网络请求的响应起别名</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fx:user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;putUser&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="引用别名的方式" tabindex="-1"><a class="header-anchor" href="#引用别名的方式" aria-hidden="true">#</a> 引用别名的方式</h2><p>cy.get() 或 cy.wait() 命令中使用@前缀引用的别名的名称，如 @firstNav 、 @putUser</p><h2 id="简单的栗子" tabindex="-1"><a class="header-anchor" href="#简单的栗子" aria-hidden="true">#</a> 简单的栗子</h2><p>一般 .wrap()  和 as() 配对使用</p><h4 id="cypress-代码" tabindex="-1"><a class="header-anchor" href="#cypress-代码" aria-hidden="true">#</a> cypress 代码</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200925114111630-938442484.png" alt="" loading="lazy"><br> 两个测试用例</p><ol><li>获取元素，再进行判断</li><li>获取 wrap() 生成的对象，然后再对它进行操作</li></ol><p></p><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200925114358491-469867553.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="结合-fixture-的栗子" tabindex="-1"><a class="header-anchor" href="#结合-fixture-的栗子" aria-hidden="true">#</a> 结合 fixture() 的栗子</h2><h3 id="代码一" tabindex="-1"><a class="header-anchor" href="#代码一" aria-hidden="true">#</a> 代码一</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">变量name</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1" aria-hidden="true">#</a> 测试结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200925151951747-1028850025.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="为什么报错呢" tabindex="-1"><a class="header-anchor" href="#为什么报错呢" aria-hidden="true">#</a> 为什么报错呢</h4><ul><li>是因为 Cypress 的命令是异步的</li><li>因此，无法同步访问别名的任何内容（第二行）</li><li>必须使用其他异步命令（ 例如.then() ）来访问已别名的内容</li></ul><p></p><h3 id="代码二" tabindex="-1"><a class="header-anchor" href="#代码二" aria-hidden="true">#</a> 代码二</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">变量name</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用 this. 调用别名</p><h3 id="测试结果-2" tabindex="-1"><a class="header-anchor" href="#测试结果-2" aria-hidden="true">#</a> 测试结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200925152439927-1243399217.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="结合-get-的栗子" tabindex="-1"><a class="header-anchor" href="#结合-get-的栗子" aria-hidden="true">#</a> 结合 get() 的栗子</h2><h4 id="cypress-代码-1" tabindex="-1"><a class="header-anchor" href="#cypress-代码-1" aria-hidden="true">#</a> cypress 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;via get().&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">fixture</span><span class="token punctuation">(</span><span class="token string">&#39;users.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;admins&#39;</span><span class="token punctuation">)</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@admins&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">users</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">There are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>users<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> admins.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果-3" tabindex="-1"><a class="header-anchor" href="#测试结果-3" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200925160704669-1117173856.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,39),r={href:"https://www.cnblogs.com/poloyy/p/13730822.html",target:"_blank",rel:"noopener noreferrer"};function d(k,h){const a=t("ExternalLinkIcon");return p(),e("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[i("https://www.cnblogs.com/poloyy/p/13730822.html"),c(a)])])])])}const f=s(l,[["render",d],["__file","Cypress系列（053）--as()-命令详解.html.vue"]]);export{f as default};
