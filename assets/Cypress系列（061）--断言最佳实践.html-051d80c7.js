import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as a,d as t,f as e}from"./app-731a6e06.js";const l={},r=e(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><ul><li>Cypress 的断言库是基于 Chai 断言库的</li><li>并且增加了对 Sinon-Chai，Chai-jQuery 断言库的支持，带来了强大的断言功能</li><li>Cypress 支持 <strong>BDD</strong>（expect/should）和 <strong>TDD</strong>（assert）格式的断言</li></ul><p></p><h2 id="bdd、tdd-格式断言的简单栗子" tabindex="-1"><a class="header-anchor" href="#bdd、tdd-格式断言的简单栗子" aria-hidden="true">#</a> BDD、TDD 格式断言的简单栗子</h2><h4 id="bdd" tabindex="-1"><a class="header-anchor" href="#bdd" aria-hidden="true">#</a> BDD</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200928113101791-47376361.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="tdd" tabindex="-1"><a class="header-anchor" href="#tdd" aria-hidden="true">#</a> TDD</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200928113105013-1049047113.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="cypress-命令内置的断言" tabindex="-1"><a class="header-anchor" href="#cypress-命令内置的断言" aria-hidden="true">#</a> Cypress 命令内置的断言</h2><p>Cypress 命令通常具有内置的断言，这些断言将导致命令自动重试，以确保命令成功（或者超时后失败）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;cypress 命令自带断言&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;poloyy&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;deep.eq&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;poloyy&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="cypress-有哪些常见内置断言操作的命令" tabindex="-1"><a class="header-anchor" href="#cypress-有哪些常见内置断言操作的命令" aria-hidden="true">#</a> Cypress 有哪些常见内置断言操作的命令</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202009/1896874-20200930112336893-2111654388.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="cypress-提供两个方法来断言" tabindex="-1"><a class="header-anchor" href="#cypress-提供两个方法来断言" aria-hidden="true">#</a> Cypress 提供两个方法来断言</h2><h3 id="隐性断言-should-、and" tabindex="-1"><a class="header-anchor" href="#隐性断言-should-、and" aria-hidden="true">#</a> 隐性断言：should()、and()</h3>`,16),u=n("li",null,"should()、and() 是 Cypress 推崇的方式",-1),d={href:"https://www.cnblogs.com/poloyy/p/13678233.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy
<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;be.visible&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&#39;have.class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="显性断言-expect" tabindex="-1"><a class="header-anchor" href="#显性断言-expect" aria-hidden="true">#</a> 显性断言：expect</h3><p>expect 允许传入一个特定的对象并且对它进行断言</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="混合使用隐性断言和显性断言" tabindex="-1"><a class="header-anchor" href="#混合使用隐性断言和显性断言" aria-hidden="true">#</a> 混合使用隐性断言和显性断言</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.action-email&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;fake@email.com&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$el</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>$el<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&#39;fake@email.com&#39;</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>$el<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>visible
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="tdd、bdd-常见断言" tabindex="-1"><a class="header-anchor" href="#tdd、bdd-常见断言" aria-hidden="true">#</a> TDD、BDD 常见断言</h2><h3 id="bdd-形式的断言" tabindex="-1"><a class="header-anchor" href="#bdd-形式的断言" aria-hidden="true">#</a> BDD 形式的断言</h3><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201012110540376-670813682.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201012110549950-1588662590.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201012110558938-994786699.png" alt="" loading="lazy"></p><h3 id="tdd-形式的断言" tabindex="-1"><a class="header-anchor" href="#tdd-形式的断言" aria-hidden="true">#</a> TDD 形式的断言</h3><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201012142321310-379075955.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201012142327399-970646860.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201012142332992-2049319750.png" alt="" loading="lazy"></p>`,14),k={href:"https://www.cnblogs.com/poloyy/p/13744006.html",target:"_blank",rel:"noopener noreferrer"};function g(b,m){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,n("ul",null,[u,n("li",null,[a("and() 和 should() 其实使用方式和效果是完全一样的，具体可以看这篇文章："),n("a",d,[a("https://www.cnblogs.com/poloyy/p/13678233.html"),t(s)])])]),h,n("blockquote",null,[n("p",null,[n("a",k,[a("https://www.cnblogs.com/poloyy/p/13744006.html"),t(s)])])])])}const y=p(l,[["render",g],["__file","Cypress系列（061）--断言最佳实践.html.vue"]]);export{y as default};
