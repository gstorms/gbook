import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as e,a as n,b as o,d as c,f as i}from"./app-3f278ba4.js";const l={},u=i(`<h2 id="custom-commands-自定义命令介绍" tabindex="-1"><a class="header-anchor" href="#custom-commands-自定义命令介绍" aria-hidden="true">#</a> Custom Commands 自定义命令介绍</h2><ul><li>Custom Commands 被认为是替代 PageObject 的良好选择</li><li>使用 Custom Commands 可以创建自定义命令和替换现有命令</li><li>Custom Commands 默认存放在 cypress/support/commands.js 文件中，因为它是通过 supportFile（ 定义在 cypress/support/index.js ）中的 import 语句导入的，所以会在所有测试用例执行前加载</li></ul><p></p><h2 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> callbackFn<span class="token punctuation">)</span>
Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callbackFn<span class="token punctuation">)</span>
Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> callbackFn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h4><ul><li>**name：**要添加或覆盖的命令的名称</li><li>**callbackFn ：**自定义命令的回调函数，回调函数里自定义函数所需完成的操作步骤</li><li>**options：**允许自定义命令的隐性行为</li></ul><p></p><h4 id="options-可选参数列表" tabindex="-1"><a class="header-anchor" href="#options-可选参数列表" aria-hidden="true">#</a> options 可选参数列表</h4><table><thead><tr><th>参数</th><th>可接受的值类型</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>prevSubject</td><td>Boolean, String or Array</td><td>false</td><td>如何处理上一条命令产生的对象</td></tr></tbody></table><h4 id="prevsubject-可选值" tabindex="-1"><a class="header-anchor" href="#prevsubject-可选值" aria-hidden="true">#</a> prevSubject 可选值</h4><ul><li>**false：**忽略任何以前命令产生的对象（父命令）</li><li>**true：**接收上一个命令产生的对象（子命令）</li><li>**optional：**可以启动链，也可以使用现有链（双命令）</li></ul><p>除了控制命令的隐式行为，还可以对上一条命令产生的对象类型进行验证，例如：</p><ul><li>**element：**要求上一条命令产生的对象是DOM元素</li><li>**document：**要求上一条命令产生的对象为文档</li><li>**window：**要求上一条命令产生的对象是窗口</li></ul><p>Cypress 内置命令利用了上述可选值组合中的每一个<br>  <br> **注意：**仅在 Cypress.Commands.add()  中支持使用 options，而在 Cypress.Commands.overwrite() 中不支持使用options</p><h2 id="正确用法" tabindex="-1"><a class="header-anchor" href="#正确用法" aria-hidden="true">#</a> 正确用法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">email<span class="token punctuation">,</span> pw</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token string">&#39;visit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">orig<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="前期准备" tabindex="-1"><a class="header-anchor" href="#前期准备" aria-hidden="true">#</a> 前期准备</h2><h4 id="启动-cypress-提供的演示项目" tabindex="-1"><a class="header-anchor" href="#启动-cypress-提供的演示项目" aria-hidden="true">#</a> 启动 Cypress 提供的演示项目</h4><p>cmd 窗口进入下面的文件夹<br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201012144320306-1408993875.png" alt="" loading="lazy"><br>  <br> 执行下面的命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="custom-commands-的简单栗子" tabindex="-1"><a class="header-anchor" href="#custom-commands-的简单栗子" aria-hidden="true">#</a> Custom Commands 的简单栗子</h2><h3 id="command-js-的代码" tabindex="-1"><a class="header-anchor" href="#command-js-的代码" aria-hidden="true">#</a> command.js 的代码</h3><p>在 cypress/support/commands.js 中写如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> pwd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=username]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=password]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pwd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">{enter}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="testlogin-js-测试用例文件的代码" tabindex="-1"><a class="header-anchor" href="#testlogin-js-测试用例文件的代码" aria-hidden="true">#</a> testlogin.js 测试用例文件的代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;登录测试，PO 模式&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;jane.lane&#39;</span>
    <span class="token keyword">const</span> pwd <span class="token operator">=</span> <span class="token string">&#39;password123&#39;</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;登录成功&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 po 实例</span>
        <span class="token keyword">const</span> loginInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        loginInstance<span class="token punctuation">.</span><span class="token function">visitPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        loginInstance<span class="token punctuation">.</span><span class="token function">isTargetPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 调用 Custom Commands 的命令</span>
        cy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> manInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        manInstance<span class="token punctuation">.</span><span class="token function">isTargetPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        manInstance<span class="token punctuation">.</span>welComeText<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;contain&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jane.lane&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201013110128884-1644421452.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="customn-commands-的好处" tabindex="-1"><a class="header-anchor" href="#customn-commands-的好处" aria-hidden="true">#</a> Customn Commands 的好处</h2><ul><li>定义在 cypress/support/command.js 中的命令可以像 Cypress 内置命令那样直接使用，无须 import 对应的 page（实际上 PageObject 模式在 Cypress 看来无非是数据/操作函数的共享）</li><li>自定义命令可以比 PageObject 模式运行更快，Cypress 和应用程序运行在同一个浏览器中，意味着 Cypress 可以直接发送请求到应用程序并设置运行测试所需要的用户状态，而这一切通常无须通过页面操作，这使得使用了自定义命令的测试会更加稳定</li><li>自定义命令允许重写 Cypress 内置命令，意味着可以自定义测试框架并立刻全局应用</li></ul><p></p><h2 id="custom-commands-完全替换-pageobject-模式的栗子" tabindex="-1"><a class="header-anchor" href="#custom-commands-完全替换-pageobject-模式的栗子" aria-hidden="true">#</a> Custom Commands 完全替换 PageObject 模式的栗子</h2><h3 id="command-js-代码" tabindex="-1"><a class="header-anchor" href="#command-js-代码" aria-hidden="true">#</a> command.js 代码</h3><p>在 cypress/support/commands.js  中写如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span> pwd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    Cypress<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pwd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">form</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">username</span><span class="token operator">:</span> username<span class="token punctuation">,</span>
            <span class="token literal-property property">password</span><span class="token operator">:</span> pwd
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>.request() 命令在后面文章会继续介绍</p><h3 id="testlogin-js-测试用例文件代码" tabindex="-1"><a class="header-anchor" href="#testlogin-js-测试用例文件代码" aria-hidden="true">#</a> testLogin.js 测试用例文件代码</h3><p>无须 PageObject 模型，直接在 integration 文件夹下建立 testLogin.js 测试用例文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;登录测试，PO 模式&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;jane.lane&#39;</span>
    <span class="token keyword">const</span> pwd <span class="token operator">=</span> <span class="token string">&#39;password123&#39;</span>
    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;访问受保护页&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// cy.request() 登录成功后，cypress 会自动保存 session cookie</span>
        <span class="token comment">// 所以下面就可以访问登录后才能访问的页面</span>
        cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;eq&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://localhost:7077/dashboard&#39;</span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;contain&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jane.lane&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="overwrite-覆盖-visit-命令的栗子" tabindex="-1"><a class="header-anchor" href="#overwrite-覆盖-visit-命令的栗子" aria-hidden="true">#</a> overwrite 覆盖 visit 命令的栗子</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一个参数代表需要覆盖的命令</span>
Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token string">&#39;visit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">originalFn<span class="token punctuation">,</span> url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> domain <span class="token operator">=</span> Cypress<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token string">&#39;BASE_DOMAIN&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>domain <span class="token operator">===</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        url <span class="token operator">=</span> <span class="token string">&#39;...&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>something <span class="token operator">===</span> <span class="token string">&#39;else&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        url <span class="token operator">=</span> <span class="token string">&#39;...&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// originalFn 代表传入进来的原 visit 命令</span>
    <span class="token comment">//</span>
    <span class="token comment">// 记得需要在最后 return</span>
    <span class="token keyword">return</span> <span class="token function">originalFn</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="overwrite-覆盖-type-命令的栗子" tabindex="-1"><a class="header-anchor" href="#overwrite-覆盖-type-命令的栗子" aria-hidden="true">#</a> overwrite 覆盖 type 命令的栗子</h2><p>如果在密码字段中键入内容，密码输入将在应用程序中自动屏蔽。但是 .type() 会自动将所有键入的内容记录到测试运行程序的命令日志中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;username@email.com&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;#password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;superSecret123&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201013185919811-1645713146.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="实际情况" tabindex="-1"><a class="header-anchor" href="#实际情况" aria-hidden="true">#</a> 实际情况</h4><ol><li>可能需要屏蔽传递给 .type() 命令的某些值，以便<strong>敏感数据</strong>不会显示在测试运行的屏幕截图或视频中</li><li>下面的示例将覆盖 .type() 命令，以允许屏蔽测试运行程序的命令日志中的敏感数据</li></ol><p></p><h3 id="cypress-command-overwrite-代码" tabindex="-1"><a class="header-anchor" href="#cypress-command-overwrite-代码" aria-hidden="true">#</a> Cypress.Command.overwrite() 代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span>Commands<span class="token punctuation">.</span><span class="token function">overwrite</span><span class="token punctuation">(</span><span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">originalFn<span class="token punctuation">,</span> element<span class="token punctuation">,</span> text<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>sensitive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token comment">// 创建自定义命令的日志</span>
        Cypress<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">$el</span><span class="token operator">:</span> element<span class="token punctuation">,</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;type&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">originalFn</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> text<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="测试用例代码" tabindex="-1"><a class="header-anchor" href="#测试用例代码" aria-hidden="true">#</a> 测试用例代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=username]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;input[name=password]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>pwd<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">sensitive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1" aria-hidden="true">#</a> 测试结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201013195112726-346582330.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,64),r={href:"https://www.cnblogs.com/poloyy/p/13808675.html",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=t("ExternalLinkIcon");return p(),e("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[o("https://www.cnblogs.com/poloyy/p/13808675.html"),c(s)])])])])}const h=a(l,[["render",d],["__file","Cypress系列（063）--使用-Cypress.Commands-完成-Custom-Commands-自定义命令.html.vue"]]);export{h as default};
