import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,f as e}from"./app-3f278ba4.js";const l={},u=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>数据驱动是测试框架中最常用的设计模式了</li><li>使用数据驱动，可以在不增加代码量的前提下根据数据生成不同的测试策略</li></ul><p></p><h2 id="策略一-数据通过-js-的方式创建" tabindex="-1"><a class="header-anchor" href="#策略一-数据通过-js-的方式创建" aria-hidden="true">#</a> 策略一：数据通过 JS 的方式创建</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>describe<span class="token punctuation">(</span><span class="token string">&#39;测试数据放在前置条件里&#39;</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin class-name">let</span> testDatas <span class="token operator">=</span> testDatas <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;yy&#39;</span>, <span class="token string">&#39;password&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;helloqa&#39;</span><span class="token punctuation">}</span>,
        <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;age&#39;</span>, <span class="token string">&#39;password&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;helloqa2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
    // 循环生成测试用例
    <span class="token keyword">for</span> <span class="token punctuation">(</span>const data <span class="token keyword">in</span> testDatas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        it<span class="token punctuation">(</span><span class="token variable"><span class="token variable">\`</span>测试外部数据$<span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token variable">\`</span></span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cy.log<span class="token punctuation">(</span>testDatas<span class="token punctuation">[</span>data<span class="token punctuation">]</span>.name, testDatas<span class="token punctuation">[</span>data<span class="token punctuation">]</span>.password<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="策略二-使用-fixtures-推荐" tabindex="-1"><a class="header-anchor" href="#策略二-使用-fixtures-推荐" aria-hidden="true">#</a> 策略二：使用 fixtures（推荐）</h2>`,7),r={href:"https://www.yuque.com/gstorms/fo7n4g/odg4gg",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="策略三-数据保存在自定义文件中" tabindex="-1"><a class="header-anchor" href="#策略三-数据保存在自定义文件中" aria-hidden="true">#</a> 策略三：数据保存在自定义文件中</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 导入数据文件 example.json，并保存在 testData 变量中
<span class="token function">import</span> testData from <span class="token string">&#39;../../data/example.json&#39;</span>
describe<span class="token punctuation">(</span><span class="token string">&#39;数据驱动的栗子&#39;</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    describe<span class="token punctuation">(</span><span class="token string">&#39;数据保存在自定义文件中&#39;</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>const data <span class="token keyword">in</span> testData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            it<span class="token punctuation">(</span><span class="token variable"><span class="token variable">\`</span>测试外部数据$<span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token variable">\`</span></span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cy.log<span class="token punctuation">(</span>testData<span class="token punctuation">[</span>data<span class="token punctuation">]</span>.name, testData<span class="token punctuation">[</span>data<span class="token punctuation">]</span>.body<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201014142214668-497974209.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,5),k={href:"https://www.cnblogs.com/poloyy/p/13814787.html",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("直接看这篇文章就好了："),n("a",r,[s("https://www.yuque.com/gstorms/fo7n4g/odg4gg"),t(a)])]),d,n("blockquote",null,[n("p",null,[n("a",k,[s("https://www.cnblogs.com/poloyy/p/13814787.html"),t(a)])])])])}const f=p(l,[["render",m],["__file","Cypress系列（064）--数据驱动策略.html.vue"]]);export{f as default};
