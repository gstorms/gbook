import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as i,c as t,a as n,b as p,d as c,f as l}from"./app-d0fb0332.js";const o={},r=l(`<h2 id="重试的介绍" tabindex="-1"><a class="header-anchor" href="#重试的介绍" aria-hidden="true">#</a> 重试的介绍</h2><h4 id="学习前的三问" tabindex="-1"><a class="header-anchor" href="#学习前的三问" aria-hidden="true">#</a> 学习前的三问</h4><ol><li>什么是重试测试</li><li>为什么重试很重要</li><li>如何使用重试</li></ol><p></p><h4 id="为什么要重试" tabindex="-1"><a class="header-anchor" href="#为什么要重试" aria-hidden="true">#</a> 为什么要重试</h4><ul><li>使用 Cypress 进行自动化测试时，仍然会存在一些难以验证的行为，并使得测试变得不稳定（不可靠）</li><li>有时会由于不可以预测的情况（如，外部依赖项中断，随机网络错误等）而导致测试失败</li></ul><p></p><h4 id="其他导致不可靠测试的因素" tabindex="-1"><a class="header-anchor" href="#其他导致不可靠测试的因素" aria-hidden="true">#</a> 其他导致不可靠测试的因素</h4><ul><li>前端动画</li><li>API 调用</li><li>测试服务器/数据库的可用性</li><li>依赖资源的可用性</li><li>网络问题</li></ul><p></p><h4 id="重试的优势" tabindex="-1"><a class="header-anchor" href="#重试的优势" aria-hidden="true">#</a> 重试的优势</h4><ul><li>通过重试，Cypress 能够重试失败的测试用例，以帮助减少测试脆弱性和持续集成（CI）构建失败的情况</li><li>从而节省团队宝贵的时间和资源，使团队可以专注于最重要的事情</li></ul><p></p><h4 id="备注" tabindex="-1"><a class="header-anchor" href="#备注" aria-hidden="true">#</a> 备注</h4><ul><li>Cypress 5.0 之前需要通过插件 cypress-plugin-retries 来完成重试的作用</li><li>Cypress 5.0 开始就自带重试的配置项了</li></ul><p></p><h2 id="通过插件来完成重试" tabindex="-1"><a class="header-anchor" href="#通过插件来完成重试" aria-hidden="true">#</a> 通过插件来完成重试</h2><h4 id="安装-cypress-plugin-retries" tabindex="-1"><a class="header-anchor" href="#安装-cypress-plugin-retries" aria-hidden="true">#</a> 安装 cypress-plugin-retries</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> cypress-plugin-retries
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h4 id="在-cypress-support-index-js-下增加如下代码" tabindex="-1"><a class="header-anchor" href="#在-cypress-support-index-js-下增加如下代码" aria-hidden="true">#</a> 在 cypress/support/index.js 下增加如下代码</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>require<span class="token punctuation">(</span>&#39;cypress-plugin-retries’<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h4 id="在-package-json-的-scripts-代码块下增加如下代码" tabindex="-1"><a class="header-anchor" href="#在-package-json-的-scripts-代码块下增加如下代码" aria-hidden="true">#</a> 在 package.json 的 scripts 代码块下增加如下代码</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
   <span class="token string">&quot;scripts&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;retryCases&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;CYPRESS_RETRIES=2 cypress run&quot;</span>
   <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><p>在 Cypress 安装目录下运行下面命令，所有测试用例若失败都会自动重试 2 次</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> retryCases
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="cypress-自带的重试功能介绍" tabindex="-1"><a class="header-anchor" href="#cypress-自带的重试功能介绍" aria-hidden="true">#</a> Cypress 自带的重试功能介绍</h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><ul><li>默认情况下，测试将在失败时不重试，需要在<strong>配置中启用</strong>测试重试才能使用此功能</li><li>启用测试重试后，可以将测试配置为具有 X 次重试次数</li><li>例如，测试重试配置了2次重试，则 Cypress 将最多重试2次（共运行3次），然后再标记为失败测试</li></ul><p></p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><p>当再次运行每个测试时，以下 hook 函数也将重新运行</p><ol><li>beforeEach</li><li>afterEach</li></ol><p>但 before 和 after 不会触发</p><h3 id="重试的工作流程" tabindex="-1"><a class="header-anchor" href="#重试的工作流程" aria-hidden="true">#</a> 重试的工作流程</h3><p>假设 Cypress 设置了重试两次</p><ul><li>第一次运行时若成功，则继续往下运行其他的测试用例</li><li>第一次运行若失败  ，则会重试运行第一次</li><li>重试运行第一次若成功，则继续往下运行其他的测试用例</li><li>若重试运行第一次还失败，则重试运行第二次</li><li>若重试运行第二次仍然失败，则将此 测试用例标记为失败</li></ul><p><strong>注：<strong>能够在命令日志中</strong>查看尝试的次数</strong>，并根据需要扩展每次尝试以进行检查和调试</p><h2 id="配置重试功能" tabindex="-1"><a class="header-anchor" href="#配置重试功能" aria-hidden="true">#</a> 配置重试功能</h2><h3 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置" aria-hidden="true">#</a> 全局配置</h3><h4 id="前言-1" tabindex="-1"><a class="header-anchor" href="#前言-1" aria-hidden="true">#</a> 前言</h4><ul><li>通常需要为 cypress run 和 cypress open 分开定义不同的重试次数</li><li>默认在 cypress.json 中进行配置</li><li>**runMode：**定义运行 cypress run 时的重试次数</li><li>**openMode：**定义运行 cypress open 时的重试次数</li></ul><p></p><h4 id="cypress-json-分开定义" tabindex="-1"><a class="header-anchor" href="#cypress-json-分开定义" aria-hidden="true">#</a> cypress.json 分开定义</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201015142257265-1056428370.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="cypress-json-合并定义" tabindex="-1"><a class="header-anchor" href="#cypress-json-合并定义" aria-hidden="true">#</a> cypress.json 合并定义</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201015142420050-769488827.png" alt="" loading="lazy"><br> 这样无论是 cypress run 命令还是 cypress open 命令，重试次数都是 2</p><h3 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置" aria-hidden="true">#</a> 自定义配置</h3><h4 id="测试用例级别" tabindex="-1"><a class="header-anchor" href="#测试用例级别" aria-hidden="true">#</a> 测试用例级别</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>context<span class="token punctuation">(</span><span class="token string">&#39;测试用例级别&#39;</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    it<span class="token punctuation">(</span><span class="token string">&#39;栗子1&#39;</span>, <span class="token punctuation">{</span>
        // 无论是 runMode 还是 openMode 都重试 <span class="token number">2</span> 次
        retries: <span class="token number">2</span>,
        defaultCommandTimeout: <span class="token number">1000</span>
    <span class="token punctuation">}</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy.get<span class="token punctuation">(</span><span class="token string">&#39;#id&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    it<span class="token punctuation">(</span><span class="token string">&#39;栗子2&#39;</span>, <span class="token punctuation">{</span>
        // 分开指定重试次数
        retries: <span class="token punctuation">{</span>
            runMode: <span class="token number">2</span>,
            openMode: <span class="token number">1</span>
        <span class="token punctuation">}</span>,
        defaultCommandTimeout: <span class="token number">1000</span>
    <span class="token punctuation">}</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy.get<span class="token punctuation">(</span><span class="token string">&#39;#id&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201015155421626-1605923295.png" alt="" loading="lazy"><br> 栗子1 重试 2 次，栗子2 重试 1次，测试不通过就会打 ×，点击可以查看详细错误信息<br> （不得不说，这按钮 UI 真好看...）</p><h4 id="测试用例集级别" tabindex="-1"><a class="header-anchor" href="#测试用例集级别" aria-hidden="true">#</a> 测试用例集级别</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>context<span class="token punctuation">(</span><span class="token string">&#39;测试用例集级别&#39;</span>, <span class="token punctuation">{</span>
        // 此 context 下面的所有测试用例（it）重试次数都是 <span class="token number">1</span>
        retries: <span class="token number">1</span>,
        defaultCommandTimeout: <span class="token number">1000</span>
    <span class="token punctuation">}</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        it<span class="token punctuation">(</span><span class="token string">&#39;栗子1&#39;</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cy.get<span class="token punctuation">(</span><span class="token string">&#39;#id&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        it<span class="token punctuation">(</span><span class="token string">&#39;栗子2&#39;</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cy.get<span class="token punctuation">(</span><span class="token string">&#39;#id&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201015163037154-1591190252.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="重试功能-screenshot-的栗子" tabindex="-1"><a class="header-anchor" href="#重试功能-screenshot-的栗子" aria-hidden="true">#</a> 重试功能 + .screenshot() 的栗子</h2><h4 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>context<span class="token punctuation">(</span><span class="token string">&#39;截图的栗子&#39;</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    it<span class="token punctuation">(</span><span class="token string">&#39;栗子&#39;</span>, <span class="token punctuation">{</span>
        retries: <span class="token number">2</span>,
        defaultCommandTimeout: <span class="token number">1000</span>
    <span class="token punctuation">}</span>, <span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy.screenshot<span class="token punctuation">(</span><span class="token string">&#39;user-login-errors&#39;</span><span class="token punctuation">)</span>
        cy.get<span class="token punctuation">(</span><span class="token string">&#39;#id&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果-2" tabindex="-1"><a class="header-anchor" href="#测试结果-2" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201015172838626-1112095752.png" alt="" loading="lazy"><br> 重试是的截图图片名称会包含 attempt</p>`,68),u={href:"https://www.cnblogs.com/poloyy/p/13821860.html",target:"_blank",rel:"noopener noreferrer"};function d(h,b){const s=e("ExternalLinkIcon");return i(),t("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[p("https://www.cnblogs.com/poloyy/p/13821860.html"),c(s)])])])])}const v=a(o,[["render",d],["__file","Cypress系列（065）--测试运行失败自动重试.html.vue"]]);export{v as default};
