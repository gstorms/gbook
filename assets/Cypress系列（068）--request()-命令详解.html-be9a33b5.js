import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as e,a as n,b as c,d as i,f as o}from"./app-cfbf85c1.js";const l={},u=o(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>发起一个 HTTP 请求</p><h2 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> body<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> body<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h2><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> url</h3><p>请求 URL</p><h4 id="cy-request-在-cy-visit-后面" tabindex="-1"><a class="header-anchor" href="#cy-request-在-cy-visit-后面" aria-hidden="true">#</a> cy.request() 在 cy.visit() 后面</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 先访问某个 url</span>
cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:8080/app&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 请求 url 是 http://localhost:8080/users/1.json</span>
cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;users/1.json&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="设置了-baseurl-且-cy-request-在-cy-visit-前面" tabindex="-1"><a class="header-anchor" href="#设置了-baseurl-且-cy-request-在-cy-visit-前面" aria-hidden="true">#</a> 设置了 baseUrl，且 cy.request() 在 cy.visit() 前面</h4><p>cypress.json</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cypress.json</span>
<span class="token punctuation">{</span>
 <span class="token string-property property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:1234&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// url 是 http://localhost:1234/seed/admin</span>
cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;seed/admin&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="备注" tabindex="-1"><a class="header-anchor" href="#备注" aria-hidden="true">#</a> 备注</h4><p>如果 cypress 无法确定 host，它将抛出错误</p><h3 id="body" tabindex="-1"><a class="header-anchor" href="#body" aria-hidden="true">#</a> body</h3><ul><li>请求正文，不同接口内容，body 会有不同的形式</li><li>Cypress 设置了 Accepts 请求头，并通过 encoding 选项序列化响应体</li></ul><p></p><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> method</h3><p>请求方法，没啥好说的，默认是 GET</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201019182401401-2090158654.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="get-请求的栗子" tabindex="-1"><a class="header-anchor" href="#get-请求的栗子" aria-hidden="true">#</a> GET 请求的栗子</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;get请求&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;默认访问方式&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.helloqa.com&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;使用 options&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://www.helloqa.com&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// .request() 常常和别名 .as() 一起使用，用来进行接口返回值的断言</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;真实测试&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://www.helloqa.com&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;comments&#39;</span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;@comments&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201019194825747-6827657.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="request-返回值" tabindex="-1"><a class="header-anchor" href="#request-返回值" aria-hidden="true">#</a> .request() 返回值</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201019195303386-1140447905.png" alt="" loading="lazy"><br> 包含以下属性</p><ul><li>status</li><li>body</li><li>headers</li><li>duration</li></ul><p></p><h4 id="request-别名后通过-get-的返回值" tabindex="-1"><a class="header-anchor" href="#request-别名后通过-get-的返回值" aria-hidden="true">#</a> .request() 别名后通过 .get() 的返回值</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201019194829023-537226654.png" alt="" loading="lazy"><br>  包含以下属性</p><ul><li>status</li><li>body</li><li>headers</li><li>duration</li><li>statusText</li><li>allRequestResponses</li><li>requestHeaders</li><li>redirects</li><li>isOkStatusCode</li></ul><p></p><h2 id="使用-request-代替-visit-的栗子" tabindex="-1"><a class="header-anchor" href="#使用-request-代替-visit-的栗子" aria-hidden="true">#</a> 使用 .request() 代替 .visit() 的栗子</h2><h4 id="官方有那么一句话" tabindex="-1"><a class="header-anchor" href="#官方有那么一句话" aria-hidden="true">#</a> 官方有那么一句话</h4><p>有时候，cy.request() 测试页面的内容要比 cy.visit() 更快，然后等待整个页面加载所有资源</p><h3 id="通过-visit-测试需要登录才能访问的页面" tabindex="-1"><a class="header-anchor" href="#通过-visit-测试需要登录才能访问的页面" aria-hidden="true">#</a> 通过 .visit() 测试需要登录才能访问的页面</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;jane.lane&#39;</span>
<span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;password123&#39;</span>

<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;使用 visit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 相当于 UI 界面操作</span>
    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
　　<span class="token comment">// 登录操作</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;input[name=username]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;input[name=password]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 会跳转至需要登录才能访问的页面</span>
    cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&quot;contain&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jane.lane&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201020095501876-914666455.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="通过-request-测试需要登录才能访问的页面" tabindex="-1"><a class="header-anchor" href="#通过-request-测试需要登录才能访问的页面" aria-hidden="true">#</a> 通过 .request() 测试需要登录才能访问的页面</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;request代替visit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过接口层面去访问页面</span>
    <span class="token comment">// 请求页面</span>
    cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;p&gt;In this recipe we:&lt;/p&gt;&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 登录请求</span>
    cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 表单格式的请求</span>
        <span class="token literal-property property">form</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;jane.lane&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;password123&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 访问需要登录之后才能访问的页面</span>
    cy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/dashboard&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jane.lane&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果-2" tabindex="-1"><a class="header-anchor" href="#测试结果-2" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201020095513873-1496902307.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="官方重点" tabindex="-1"><a class="header-anchor" href="#官方重点" aria-hidden="true">#</a> 官方重点</h3><p>通常，一旦对登录进行了适当的e2e测试，就没有理由继续使用 cy.visit() 登录并等待整个页面加载所有关联的资源，然后再运行其他命令，这样做可能会减慢我们整个测试套件的速度</p><h2 id="轮询发出请求的栗子" tabindex="-1"><a class="header-anchor" href="#轮询发出请求的栗子" aria-hidden="true">#</a> 轮询发出请求的栗子</h2><h4 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h4><ul><li>当轮询服务器以获取可能需要一段时间才能完成的响应时，此功能很有用</li><li>**如何做：**创建一个递归函数</li></ul><p></p><h4 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cy
    <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span>
            <span class="token comment">// 请求成功则退出轮询</span>
            <span class="token keyword">return</span>
        <span class="token comment">// 递归</span>
        <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">context</span><span class="token punctuation">(</span><span class="token string">&#39;轮询request&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;默认访问方式&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:7077/&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 轮询前的操作</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 轮询请求</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="关于-request-的注意事项" tabindex="-1"><a class="header-anchor" href="#关于-request-的注意事项" aria-hidden="true">#</a> 关于 .request() 的注意事项</h2><h3 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h3><ul><li>通过 .request() 发出的请求不会出现在开发者工具（F12）网络一栏中</li><li>Cypress 实际上并未从浏览器发出XHR请求</li><li>实际上是从 Cypress Test Runner（在Node中）发出HTTP请求</li><li>因此，不会在开发人员工具中看到该请求</li></ul><p></p><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h3><ul><li>通过 .request()  发出的请求，Cypress 会自动发送和接收 Cookie</li><li>在发送 HTTP 请求之前，如果请求来自浏览器，Cypress 会自动附加本应附加的 Cookie</li><li>此外，如果响应具有 Set-Cookie 标头，则这些标头将自动在浏览器 Cookie 上重新设置</li><li>换句话说，cy.request() 透明地执行所有基础功能，就好像它来自浏览器一样</li></ul><p></p>`,68),r={href:"https://www.cnblogs.com/poloyy/p/13841964.html",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=t("ExternalLinkIcon");return p(),e("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[c("https://www.cnblogs.com/poloyy/p/13841964.html"),i(s)])])])])}const b=a(l,[["render",d],["__file","Cypress系列（068）--request()-命令详解.html.vue"]]);export{b as default};
