import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as p,a,b as c,d as i,f as o}from"./app-207e7d61.js";const l={},r=o(`<h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>遍历数组数据结构(具有 length 属性的数组或对象)</p><h3 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="callbackfn" tabindex="-1"><a class="header-anchor" href="#callbackfn" aria-hidden="true">#</a> callbackFn</h3><ul><li>回调函数</li><li>可以拥有三个参数：value、index、collection</li></ul><h3 id="正确用法" tabindex="-1"><a class="header-anchor" href="#正确用法" aria-hidden="true">#</a> 正确用法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 遍历每个 li 元素</span>
cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;ul&gt;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 遍历每个 cookie </span>
cy<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误用法" tabindex="-1"><a class="header-anchor" href="#错误用法" aria-hidden="true">#</a> 错误用法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不能直接通过 cy 调用</span>
cy<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   
<span class="token comment">// location() 返回的结果不是一个数组</span>
cy<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令返回结果" tabindex="-1"><a class="header-anchor" href="#命令返回结果" aria-hidden="true">#</a> 命令返回结果</h3><p>返回和上一条命令一样的结果</p><h3 id="实际栗子" tabindex="-1"><a class="header-anchor" href="#实际栗子" aria-hidden="true">#</a> 实际栗子</h3><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h4><figure><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1616402616891-0eb8cc66-5140-4963-9392-09d483743f18.png#align=left&amp;display=inline&amp;height=565&amp;margin=[object Object]&amp;originHeight=565&amp;originWidth=634&amp;size=0&amp;status=done&amp;style=none&amp;width=634" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="栗子一的结果" tabindex="-1"><a class="header-anchor" href="#栗子一的结果" aria-hidden="true">#</a> 栗子一的结果</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1616402635565-602d3b6d-dd64-4d2c-b125-23caad496af7.png#align=left&amp;display=inline&amp;height=254&amp;margin=[object Object]&amp;originHeight=254&amp;originWidth=1303&amp;size=0&amp;status=done&amp;style=none&amp;width=1303" alt="" loading="lazy"><br> 遍历三次，每次都可以获取 li 元素和索引值(从 0 开始)</p><h4 id="栗子二的结果" tabindex="-1"><a class="header-anchor" href="#栗子二的结果" aria-hidden="true">#</a> 栗子二的结果</h4><figure><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1616402677176-e484b983-f09f-4d8d-855a-69d45992dc57.png#align=left&amp;display=inline&amp;height=363&amp;margin=[object Object]&amp;originHeight=363&amp;originWidth=1718&amp;size=0&amp;status=done&amp;style=none&amp;width=1718" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>若想提前结束遍历，可以通过判断然后直接 return false</li><li>若想在 .each() 命令后继续操作原始数组(未遍历前)，可以直接在 .each() 命令后接 .then() 命令进行操作</li></ul>`,20),u={href:"https://www.cnblogs.com/poloyy/p/14006831.html",target:"_blank",rel:"noopener noreferrer"};function d(h,k){const n=e("ExternalLinkIcon");return t(),p("div",null,[r,a("blockquote",null,[a("p",null,[a("a",u,[c("https://www.cnblogs.com/poloyy/p/14006831.html"),i(n)])])])])}const b=s(l,[["render",d],["__file","Cypress系列（074）--each()-命令详解.html.vue"]]);export{b as default};
