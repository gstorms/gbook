import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as i,a,b as c,d as o,f as p}from"./app-731a6e06.js";const r={},l=p(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>执行系统命令</p><h2 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="command" tabindex="-1"><a class="header-anchor" href="#command" aria-hidden="true">#</a> command</h4><p>从项目根目录（包含默认 cypress.json 配置文件的目录）执行的系统命令</p><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h4><ul><li>**log：**是否将命令显示到命令日志中，默认 true</li><li>**timeout：**命令超时时间</li><li>**failOnNonZeroExit：**如果命令返回结果的 code 属性值非 0 则返回失败</li><li>**env：**在执行命令之前要设置的环境变量的对象（如： {USERNAME：&#39;yy&#39;} ），将与现有系统环境变量合并</li></ul><p></p><h2 id="正确用法" tabindex="-1"><a class="header-anchor" href="#正确用法" aria-hidden="true">#</a> 正确用法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;npm run build&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="命令返回结果" tabindex="-1"><a class="header-anchor" href="#命令返回结果" aria-hidden="true">#</a> 命令返回结果</h2><p>返回一个对象，包含以下属性</p><ul><li><p>**code：**0 代码成功，1 是失败</p></li><li><p>**stderr：**报错信息</p></li><li><p>**stdout：**执行命令的返回结果</p></li></ul><p></p><h2 id="简单的栗子" tabindex="-1"><a class="header-anchor" href="#简单的栗子" aria-hidden="true">#</a> 简单的栗子</h2><h4 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105237160-900705386.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105250203-493619050.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="命令返回结果-1" tabindex="-1"><a class="header-anchor" href="#命令返回结果-1" aria-hidden="true">#</a> 命令返回结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105253591-985354674.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="结合接口响应内容的栗子" tabindex="-1"><a class="header-anchor" href="#结合接口响应内容的栗子" aria-hidden="true">#</a> 结合接口响应内容的栗子</h2><h4 id="测试代码-1" tabindex="-1"><a class="header-anchor" href="#测试代码-1" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105552808-2041535635.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="运行结果-1" tabindex="-1"><a class="header-anchor" href="#运行结果-1" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105600823-193789608.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="命令返回结果-2" tabindex="-1"><a class="header-anchor" href="#命令返回结果-2" aria-hidden="true">#</a> 命令返回结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105616992-1698658200.png" alt="" loading="lazy"><br> 该系统命令没有返回结果所以为空</p><h2 id="设置环境变量的栗子" tabindex="-1"><a class="header-anchor" href="#设置环境变量的栗子" aria-hidden="true">#</a> 设置环境变量的栗子</h2><h4 id="测试代码-2" tabindex="-1"><a class="header-anchor" href="#测试代码-2" aria-hidden="true">#</a> 测试代码</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105635365-541610586.png" alt="" loading="lazy"><br> 如果是 window，打印环境变量记得是 set 环境变量名</p><h4 id="运行结果-2" tabindex="-1"><a class="header-anchor" href="#运行结果-2" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105641477-437257394.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="命令返回结果-3" tabindex="-1"><a class="header-anchor" href="#命令返回结果-3" aria-hidden="true">#</a> 命令返回结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201205105647421-1915203894.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><h4 id="第一" tabindex="-1"><a class="header-anchor" href="#第一" aria-hidden="true">#</a> 第一</h4><p>不要尝试从 cy.exec() 启动网络服务器</p><h4 id="命令必须能退出" tabindex="-1"><a class="header-anchor" href="#命令必须能退出" aria-hidden="true">#</a> 命令必须能退出</h4><ul><li>cy.exec() 不支持不退出的命令</li><li>命令必须在 execTimeout 内退出，否则 Cypress 将杀死该命令的进程并导致当前测试失败</li></ul><p></p><h4 id="可以自定义-exectimeout" tabindex="-1"><a class="header-anchor" href="#可以自定义-exectimeout" aria-hidden="true">#</a> 可以自定义 execTimeout</h4><p>可以修改 execTimeout 来延长系统命令的执行时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cypress<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&#39;execTimeout&#39;</span><span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span>
Cypress<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">&#39;execTimeout&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; 30000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置后，剩下的所有测试用例都会生效</p><h4 id="在测试用例集配置项中自定义-exectimeout" tabindex="-1"><a class="header-anchor" href="#在测试用例集配置项中自定义-exectimeout" aria-hidden="true">#</a> 在测试用例集配置项中自定义 execTimeout</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;has data available from database&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">execTimeout</span><span class="token operator">:</span> <span class="token number">90000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;rake db:seed&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// tests</span>
  <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;rake db:reset&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就只针对该 describe 测试用例集生效了</p>`,51),d={href:"https://www.cnblogs.com/poloyy/p/14088138.html",target:"_blank",rel:"noopener noreferrer"};function u(h,g){const n=e("ExternalLinkIcon");return t(),i("div",null,[l,a("blockquote",null,[a("p",null,[a("a",d,[c("https://www.cnblogs.com/poloyy/p/14088138.html"),o(n)])])])])}const f=s(r,[["render",u],["__file","Cypress系列（096）--exec()-命令详解.html.vue"]]);export{f as default};
