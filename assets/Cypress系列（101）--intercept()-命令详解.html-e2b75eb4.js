import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,d as t,f as s}from"./app-731a6e06.js";const r={},l=s('<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>使用该命令在网络层管理 HTTP 请求的行为</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> <strong>注意</strong></h4><p>仅在 Cypress@6.0 版本后才支持该方法</p><h4 id="包含以下功能" tabindex="-1"><a class="header-anchor" href="#包含以下功能" aria-hidden="true">#</a> 包含以下功能</h4><ul><li>对任何类型的 HTTP 请求进行 stub 或 spy</li><li>在 HTTP 请求发送到目标服务器前，可以修改 HTTP 请求 body、headers、URL（类似抓包工具对<strong>请求</strong>进行打断点然后修改）</li><li>动态或静态地对 HTTP 请求的响应进行 stub</li><li>接收 HTTP 响应后可对 HTTP 响应 body、headers、status、code 进行修改（类似抓包工具对<strong>响应</strong>进行打断点然后修改）</li><li>在所有阶段都可以完全访问所有 HTTP 请求</li></ul><p></p><h2 id="相较于-cy-route-的不同" tabindex="-1"><a class="header-anchor" href="#相较于-cy-route-的不同" aria-hidden="true">#</a> 相较于 cy.route() 的不同</h2>',8),d={href:"https://www.cnblogs.com/poloyy/p/13852941.html",target:"_blank",rel:"noopener noreferrer"},u=s(`<ul><li>可以拦截所有类型的网络请求，包括 Fetch API，页面加载，XMLHttpRequest，资源加载等</li><li>不需要在使用前调用 cy.server() ，实际上 cy.server() 根本不影响 cy.intercept()</li><li>默认情况下没有将请求方法设置为 GET</li></ul><p></p><h2 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> routeHandler<span class="token operator">?</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> routeHandler<span class="token operator">?</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>routeMatcher<span class="token punctuation">,</span> routeHandler<span class="token operator">?</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> url</h3><p>要匹配的请求 URL ，可以是字符串也可以是正则表达式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token string">&#39;http://example.com/widgets&#39;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token string">&#39;http://example.com/widgets&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fixture</span><span class="token operator">:</span> <span class="token string">&#39;widgets.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img2020.cnblogs.com/blog/1896874/202011/1896874-20201125173909090-167237483.png" alt="" loading="lazy"><br> 没有指定请求方法的话，可以匹配任意类型的请求方法</p><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> method</h3><p>请求方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://example.com/widgets&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;it worked!&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img2020.cnblogs.com/blog/1896874/202011/1896874-20201125173837584-1223389771.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="routematcher" tabindex="-1"><a class="header-anchor" href="#routematcher" aria-hidden="true">#</a> routeMatcher</h3><ul><li>它是一个对象</li><li>用于匹配此路由将处理哪些传入的 HTTP 请求</li><li>所有对象属性都是<strong>可选的</strong>，不是必填的</li><li>设置的所有属性必须与路由匹配才能处理请求</li><li>如果将字符串传递给任何属性，则将使用 minimatch 将与请求进行全局匹配</li></ul><h4 id="它有以下属性" tabindex="-1"><a class="header-anchor" href="#它有以下属性" aria-hidden="true">#</a> 它有以下属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 与 HTTP Basic身份验证中使用的用户名和密码匹配
   */</span>
  auth<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp<span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 与请求上的 HTTP Headers 匹配
   */</span>
  headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>name<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 与请求上的 hostname 匹配
   */</span>
  hostname<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp
  <span class="token doc-comment comment">/**
   * If &#39;true&#39;, 只有 https 的请求会被匹配
   * If &#39;false&#39;, 只有 http 的请求会被匹配
   */</span>
  https<span class="token operator">?</span><span class="token operator">:</span> boolean
  <span class="token doc-comment comment">/**
   * 与请求上的 method 请求方法匹配
   * 默认 &#39;*&#39;, 匹配全部类型的 method
   */</span>
  method<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp
  <span class="token doc-comment comment">/**
   * 主机名后的路径, 包括了 ？ 后面的查询参数
   * www.baidu.com/s?wd=2
   */</span>
  path<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp
  <span class="token doc-comment comment">/**
   * 和 path 一样, 不过不管 ? 后面的查询参数
   * www.baidu.com/s
   */</span>
  pathname<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp
  <span class="token doc-comment comment">/**
   * 与指定的端口匹配, 或者传递多个端口组成的数组, 其中一个匹配上就行了
   */</span>
  port<span class="token operator">?</span><span class="token operator">:</span> number <span class="token operator">|</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token doc-comment comment">/**
   * 与请求路径 ? 后面跟的查询参数匹配上
   * wd=2
   */</span>
  query<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 完整的请求 url
   * http://www.baidu.com/s?wd=2
   */</span>
  url<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> RegExp
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="routehandler" tabindex="-1"><a class="header-anchor" href="#routehandler" aria-hidden="true">#</a> routeHandler</h3><ul><li>routeHandler 定义了如果请求和 routeMatcher 匹配将对请求进行的指定的处理</li><li>可接受的数据类型：string、object、Function、StaticResponse</li></ul><p></p><h4 id="staticresponse" tabindex="-1"><a class="header-anchor" href="#staticresponse" aria-hidden="true">#</a> StaticResponse</h4><ul><li>相当于一个自定义响应体对象</li><li>可以自定义 Response headers、HTTP 状态码、Response body 等</li><li>详细栗子将在后面展开讲解</li></ul><p></p><h4 id="staticresponse-对象的属性" tabindex="-1"><a class="header-anchor" href="#staticresponse-对象的属性" aria-hidden="true">#</a> StaticResponse 对象的属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 将 fixture 文件作为响应主体, 以 cypress/fixtures 为根目录
   */</span>
  fixture<span class="token operator">?</span><span class="token operator">:</span> string
  <span class="token doc-comment comment">/**
   * 将字符串或 JSON 对象作为响应主体
   */</span>
  body<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> object <span class="token operator">|</span> object<span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token doc-comment comment">/**
   * 响应 headers
   * <span class="token keyword">@default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
   */</span>
  headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> string <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/**
   * 响应状态码
   * <span class="token keyword">@default</span> 200
   */</span>
  statusCode<span class="token operator">?</span><span class="token operator">:</span> number
  <span class="token doc-comment comment">/**
   * 如果 true, Cypress 将破坏网络连接, 并且不发送任何响应
   * 主要用于模拟无法访问的服务器
   * 请勿与其他选项结合使用
   */</span>
  forceNetworkError<span class="token operator">?</span><span class="token operator">:</span> boolean
  <span class="token doc-comment comment">/**
   * 发送响应前要延迟的毫秒数
   */</span>
  delayMs<span class="token operator">?</span><span class="token operator">:</span> number
  <span class="token doc-comment comment">/**
   * 以多少 kbps 发送响应体
   */</span>
  throttleKbps<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h4>`,28),h=n("ul",null,[n("li",null,"如果传递一个字符串，这个值相当于响应 body 的值"),n("li",{"body:":"",foo:""},"等价于 StaticResponse 对象")],-1),m=s('<p></p><h4 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h4><ul><li>如果传递了没有 StaticResponse 密钥的对象，则它将作为 JSON 响应 Body 发送</li><li>例如， {foo：&#39;bar&#39;} 等价于 StaticResponse 对象 {body：{foo：&#39;bar&#39;}}</li></ul><p></p><h4 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> function</h4><ul><li>如果传递了一个回调函数，当一个请求匹配上了该路由将会自动调用这个函数</li><li>函数第一个参数是请求对象</li><li>在回调函数内部，可以修改外发请求、发送响应、访问实际响应</li><li>详细栗子将在后面展开讲解</li></ul><p></p><h2 id="命令返回结果" tabindex="-1"><a class="header-anchor" href="#命令返回结果" aria-hidden="true">#</a> 命令返回结果</h2><ul><li>返回 null</li><li>可以链接 as() 进行别名，但不可链接其他命令</li><li>可以使用 cy.wait() 等待 cy.intercept() 路由匹配上请求，这将会产生一个对象，包含匹配上的请求/响应相关信息</li></ul><p></p><h2 id="实际栗子的前置准备" tabindex="-1"><a class="header-anchor" href="#实际栗子的前置准备" aria-hidden="true">#</a> 实际栗子的前置准备</h2>',11),k={href:"https://github.com/cypress-io/cypress-example-kitchensink",target:"_blank",rel:"noopener noreferrer"},b=s(`<h4 id="下载好后进入下图项目文件夹" tabindex="-1"><a class="header-anchor" href="#下载好后进入下图项目文件夹" aria-hidden="true">#</a> 下载好后进入下图项目文件夹</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201124509698-1068535606.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="启动项目" tabindex="-1"><a class="header-anchor" href="#启动项目" aria-hidden="true">#</a> 启动项目</h4><p>npm start<br><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201124718804-737083341.png" alt="" loading="lazy"></p><h2 id="通过-url-路由匹配请求的栗子" tabindex="-1"><a class="header-anchor" href="#通过-url-路由匹配请求的栗子" aria-hidden="true">#</a> 通过 URL 路由匹配请求的栗子</h2><h4 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201124759381-2095954952.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="等价于-route-的测试代码" tabindex="-1"><a class="header-anchor" href="#等价于-route-的测试代码" aria-hidden="true">#</a> 等价于 route() 的测试代码</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201124804754-1813089135.png" alt="" loading="lazy"><br><strong>注：</strong> route()  未来将会被弃用</p><h4 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果" aria-hidden="true">#</a> 运行结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201124846710-1025460445.png" alt="" loading="lazy"><br> 登录请求匹配上了路由</p><h4 id="console-查看-cy-wait-返回的对象" tabindex="-1"><a class="header-anchor" href="#console-查看-cy-wait-返回的对象" aria-hidden="true">#</a> Console 查看 cy.wait() 返回的对象</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201124927847-560473572.png" alt="" loading="lazy"><br> 最重要的当然是 request 和 response 两个属性</p><h2 id="通过-routematcher-路由匹配请求的栗子" tabindex="-1"><a class="header-anchor" href="#通过-routematcher-路由匹配请求的栗子" aria-hidden="true">#</a> 通过 RouteMatcher 路由匹配请求的栗子</h2><h4 id="测试代码-1" tabindex="-1"><a class="header-anchor" href="#测试代码-1" aria-hidden="true">#</a> 测试代码</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201140515012-782173477.png" alt="" loading="lazy"><br> 断言请求体和响应状态码</p><h4 id="运行结果-1" tabindex="-1"><a class="header-anchor" href="#运行结果-1" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201140652033-144077789.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="console-查看-cy-wait-返回的对象-1" tabindex="-1"><a class="header-anchor" href="#console-查看-cy-wait-返回的对象-1" aria-hidden="true">#</a> Console 查看 cy.wait() 返回的对象</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201140700962-646280126.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="另一种断言方式" tabindex="-1"><a class="header-anchor" href="#另一种断言方式" aria-hidden="true">#</a> 另一种断言方式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 断言匹配此路由的请求接收到包含【username】的请求 body</span>
cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;@login3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;request.body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.property&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 断言匹配此路由的请求接收到 HTTP 状态码为 500</span>
cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;@login3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;response.statusCode&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;eq&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
<span class="token comment">// 断言匹配此路由的请求接收到包含【redirect】的请求 body</span>
cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;@login3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;response.body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;have.property&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;redirect&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这样的话只能每次写一条不能同时三条都写，所以还是建议像代码图一样，先 .then() 再进行断言</p><h2 id="自定义不同类型的响应体的各种栗子" tabindex="-1"><a class="header-anchor" href="#自定义不同类型的响应体的各种栗子" aria-hidden="true">#</a> 自定义不同类型的响应体的各种栗子</h2><h3 id="自定义一个纯字符串的响应体" tabindex="-1"><a class="header-anchor" href="#自定义一个纯字符串的响应体" aria-hidden="true">#</a> 自定义一个纯字符串的响应体</h3><h4 id="测试代码-2" tabindex="-1"><a class="header-anchor" href="#测试代码-2" aria-hidden="true">#</a> 测试代码</h4><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201153544297-156469118.png" alt="" loading="lazy"></h4><p></p><h4 id="运行结果-2" tabindex="-1"><a class="header-anchor" href="#运行结果-2" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201153558794-1107531368.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="接口响应" tabindex="-1"><a class="header-anchor" href="#接口响应" aria-hidden="true">#</a> 接口响应</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201153606985-646891480.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="自定义一个-json-的响应体" tabindex="-1"><a class="header-anchor" href="#自定义一个-json-的响应体" aria-hidden="true">#</a> 自定义一个 JSON 的响应体</h3><h4 id="测试代码-3" tabindex="-1"><a class="header-anchor" href="#测试代码-3" aria-hidden="true">#</a> 测试代码</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201153613192-447983386.png" alt="" loading="lazy"><br> 会从cypress安装目录/fixtures 下读取对应的数据文件，它会变成响应 body 的数据</p><h4 id="test-json-数据文件" tabindex="-1"><a class="header-anchor" href="#test-json-数据文件" aria-hidden="true">#</a> test.json 数据文件</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201153700038-1666839801.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="运行结果-3" tabindex="-1"><a class="header-anchor" href="#运行结果-3" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201153619222-312729308.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="接口响应-1" tabindex="-1"><a class="header-anchor" href="#接口响应-1" aria-hidden="true">#</a> 接口响应</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201153628426-1314688626.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="自定义一个-staticresponse-的响应体" tabindex="-1"><a class="header-anchor" href="#自定义一个-staticresponse-的响应体" aria-hidden="true">#</a> 自定义一个 StaticResponse 的响应体</h3><h4 id="测试代码-4" tabindex="-1"><a class="header-anchor" href="#测试代码-4" aria-hidden="true">#</a> 测试代码</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201161419464-588602591.png" alt="" loading="lazy"><br> 自定义了响应body、statusCode，还有返回响应的延时时间</p><h4 id="运行结果-4" tabindex="-1"><a class="header-anchor" href="#运行结果-4" aria-hidden="true">#</a> 运行结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201160754906-1685793342.png" alt="" loading="lazy"><br> 延时生效了<br>  <br><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201201160839735-1930734267.png" alt="" loading="lazy"><br> body 和 statusCode 变成自定义的数据了</p><h2 id="拦截请求的栗子" tabindex="-1"><a class="header-anchor" href="#拦截请求的栗子" aria-hidden="true">#</a> 拦截请求的栗子</h2><h3 id="前置操作" tabindex="-1"><a class="header-anchor" href="#前置操作" aria-hidden="true">#</a> 前置操作</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:7079/login&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="断言请求的栗子" tabindex="-1"><a class="header-anchor" href="#断言请求的栗子" aria-hidden="true">#</a> 断言请求的栗子</h3><h4 id="测试代码-5" tabindex="-1"><a class="header-anchor" href="#测试代码-5" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202103857420-1841897777.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="运行结果-5" tabindex="-1"><a class="header-anchor" href="#运行结果-5" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202103902197-1730550545.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="console-查看打印结果" tabindex="-1"><a class="header-anchor" href="#console-查看打印结果" aria-hidden="true">#</a> Console 查看打印结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202103907965-826761301.png" alt="" loading="lazy"><br> 可以看到回调函数只有一个参数，就是 request 参数</p><h4 id="重点" tabindex="-1"><a class="header-anchor" href="#重点" aria-hidden="true">#</a> 重点</h4><p>回调函数内不能包含 cy.**() 的命令，如果包含会报错<br><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202104115670-1920491105.png" alt="" loading="lazy"><br> 简单来说就是<br> cy.type() 命令执行完后会返回一个 promise 对象，同时又会调用回调函数，而回调函数内又调用了 cy.get() 返回了一个 promise 对象，Cypress 会将这种情况当做测试失败处理</p><h3 id="将请求传递给下一个路由处理程序" tabindex="-1"><a class="header-anchor" href="#将请求传递给下一个路由处理程序" aria-hidden="true">#</a> 将请求传递给下一个路由处理程序</h3><h4 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h4><p>意思就是一个请求可以同时匹配上多个路由</p><h4 id="测试代码-6" tabindex="-1"><a class="header-anchor" href="#测试代码-6" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202112936442-597878541.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="运行结果-6" tabindex="-1"><a class="header-anchor" href="#运行结果-6" aria-hidden="true">#</a> 运行结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202112943309-1689424273.png" alt="" loading="lazy"><br> 一个登录请求匹配成功了两个路由，且回调函数会<strong>按匹配的顺序执行</strong></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>回调函数的参数就是一个请求对象，它其实可以调用以下方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 销毁该请求并返回网络错误的响应
   */</span>
  <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 控制请求的响应
   * 如果传入的是一个函数, 则它是回调函数, 当响应时会调用
   * 如果传入的是一个 StaticResponse 对象, 将不会发出请求, 而是直接将这个对象当做响应返回
   */</span>
  <span class="token function">reply</span><span class="token punctuation">(</span>interceptor<span class="token operator">?</span><span class="token operator">:</span> StaticResponse <span class="token operator">|</span> HttpResponseInterceptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 使用 response body(必填) 和 response header(可选) 响应请求
   */</span>
  <span class="token function">reply</span><span class="token punctuation">(</span>body<span class="token operator">:</span> string <span class="token operator">|</span> object<span class="token punctuation">,</span> headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 使用 HTTP 状态码(必填)、 response body(可选)、response header(可选) 响应请求
   */</span>
  <span class="token function">reply</span><span class="token punctuation">(</span>status<span class="token operator">:</span> number<span class="token punctuation">,</span> body<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> object<span class="token punctuation">,</span> headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token doc-comment comment">/**
   * 重定向到新的 location 来响应请求,
   * <span class="token keyword">@param</span> <span class="token parameter">statusCode</span> 用来重定向的 HTTP 状态代码, Default: 302
   */</span>
  <span class="token function">redirect</span><span class="token punctuation">(</span>location<span class="token operator">:</span> string<span class="token punctuation">,</span> statusCode<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="拦截响应的栗子" tabindex="-1"><a class="header-anchor" href="#拦截响应的栗子" aria-hidden="true">#</a> 拦截响应的栗子</h2><h3 id="req-reply-函数详解" tabindex="-1"><a class="header-anchor" href="#req-reply-函数详解" aria-hidden="true">#</a> req.reply() 函数详解</h3><h4 id="前言-1" tabindex="-1"><a class="header-anchor" href="#前言-1" aria-hidden="true">#</a> 前言</h4><p>可以使用 req.reply() 函数来动态控制对请求的响应</p><h4 id="使用讲解" tabindex="-1"><a class="header-anchor" href="#使用讲解" aria-hidden="true">#</a> 使用讲解</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// functions on &#39;req&#39; can be used to dynamically respond to a request here</span>
    <span class="token comment">// 将请求发送到目标服务器</span>
    req<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 将这个 JSON 对象响应请求</span>
    req<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">plan</span><span class="token operator">:</span> <span class="token string">&#39;starter&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 将请求发送到目标服务器, 并且拦截服务器返回的实际响应, 然后进行后续操作(类似抓包工具对响应打断点)</span>
    req<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// res 就是实际的响应对象</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="reply-直接修改响应的栗子" tabindex="-1"><a class="header-anchor" href="#reply-直接修改响应的栗子" aria-hidden="true">#</a> .reply() 直接修改响应的栗子</h3><h4 id="测试代码-7" tabindex="-1"><a class="header-anchor" href="#测试代码-7" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202144848823-1320183135.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="接口响应内容" tabindex="-1"><a class="header-anchor" href="#接口响应内容" aria-hidden="true">#</a> 接口响应内容</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202144855401-1072991384.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="拦截响应的小栗子" tabindex="-1"><a class="header-anchor" href="#拦截响应的小栗子" aria-hidden="true">#</a> 拦截响应的小栗子</h3><h4 id="测试代码-8" tabindex="-1"><a class="header-anchor" href="#测试代码-8" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202134448354-2066907730.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="运行结果-7" tabindex="-1"><a class="header-anchor" href="#运行结果-7" aria-hidden="true">#</a> 运行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202134445901-1347285337.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="console-查看打印结果-1" tabindex="-1"><a class="header-anchor" href="#console-查看打印结果-1" aria-hidden="true">#</a> Console 查看打印结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202134520448-392031368.png" alt="" loading="lazy"><br> 一个是 request 对象，一个是 response 对象</p><h3 id="自定义响应内容" tabindex="-1"><a class="header-anchor" href="#自定义响应内容" aria-hidden="true">#</a> 自定义响应内容</h3><h4 id="前言-2" tabindex="-1"><a class="header-anchor" href="#前言-2" aria-hidden="true">#</a> 前言</h4><ul><li>可以使用 resp.send() 函数动态控制传入的响应</li><li>另外，当响应发送到浏览器时，对 resp 的任何修改都将保留</li><li>如果尚未调用 resp.send() ，则它会在 req.reply() 回调函数完成后隐式调用</li></ul><p></p><h4 id="使用讲解-1" tabindex="-1"><a class="header-anchor" href="#使用讲解-1" aria-hidden="true">#</a> 使用讲解</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token string">&#39;/notification&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    req<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// Success 将作为 response body 返回到浏览器</span>
        resp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 将 success.json 里面的数据作为 response body 返回到浏览器</span>
        resp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">fixture</span><span class="token operator">:</span> <span class="token string">&#39;success.json&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">// 将响应延迟 1000ms</span>
        resp<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token comment">// 将响应限制为 64kbps</span>
        resp<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="传递字符串作为响应内容" tabindex="-1"><a class="header-anchor" href="#传递字符串作为响应内容" aria-hidden="true">#</a> 传递字符串作为响应内容</h3><h4 id="测试代码-9" tabindex="-1"><a class="header-anchor" href="#测试代码-9" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202143829580-1562904638.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="接口响应内容-1" tabindex="-1"><a class="header-anchor" href="#接口响应内容-1" aria-hidden="true">#</a> 接口响应内容</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202143837689-798883859.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="传递-json-对象作为响应内容" tabindex="-1"><a class="header-anchor" href="#传递-json-对象作为响应内容" aria-hidden="true">#</a> 传递 JSON 对象作为响应内容</h3><h4 id="测试代码-10" tabindex="-1"><a class="header-anchor" href="#测试代码-10" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202143841767-389858579.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="接口响应内容-2" tabindex="-1"><a class="header-anchor" href="#接口响应内容-2" aria-hidden="true">#</a> 接口响应内容</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202143907530-1812189441.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="传递-staticresponse-对象作为响应内容" tabindex="-1"><a class="header-anchor" href="#传递-staticresponse-对象作为响应内容" aria-hidden="true">#</a> 传递 StaticResponse 对象作为响应内容</h3><h4 id="测试代码-11" tabindex="-1"><a class="header-anchor" href="#测试代码-11" aria-hidden="true">#</a> 测试代码</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202143911814-541997266.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="接口响应内容-3" tabindex="-1"><a class="header-anchor" href="#接口响应内容-3" aria-hidden="true">#</a> 接口响应内容</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202012/1896874-20201202143948191-979637023.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="resp-可调用的函数总结" tabindex="-1"><a class="header-anchor" href="#resp-可调用的函数总结" aria-hidden="true">#</a> resp 可调用的函数总结</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
<span class="token doc-comment comment">/**
* 可以自定义 response statusCode、response body、response header
* 也可以直接传 StaticResponse 对象
*/</span>
<span class="token function">send</span><span class="token punctuation">(</span>status<span class="token operator">:</span> number<span class="token punctuation">,</span> body<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">|</span> object<span class="token punctuation">,</span> headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token function">send</span><span class="token punctuation">(</span>body<span class="token operator">:</span> string <span class="token operator">|</span> object<span class="token punctuation">,</span> headers<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token function">send</span><span class="token punctuation">(</span>staticResponse<span class="token operator">:</span> StaticResponse<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token doc-comment comment">/**
* 继续返回响应
*/</span>
<span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token doc-comment comment">/**
* 等待 delayMs 毫秒，然后再将响应发送给客户端
*/</span>
<span class="token function-variable function">delay</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">delayMs</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> IncomingHttpResponse
<span class="token doc-comment comment">/**
* 以多少 kbps 的速度发送响应
*/</span>
<span class="token function-variable function">throttle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">throttleKbps</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> IncomingHttpResponse
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>`,114),g={href:"https://www.cnblogs.com/poloyy/p/14037239.html",target:"_blank",rel:"noopener noreferrer"};function v(f,y){const e=p("ExternalLinkIcon");return o(),c("div",null,[l,n("p",null,[a("cy.route() 命令详解："),n("a",d,[a("https://www.cnblogs.com/poloyy/p/13852941.html"),t(e)])]),u,h,m,n("p",null,[a("Cypress 官方项目的下载地址："),n("a",k,[a("https://github.com/cypress-io/cypress-example-kitchensink"),t(e)])]),b,n("blockquote",null,[n("p",null,[n("a",g,[a("https://www.cnblogs.com/poloyy/p/14037239.html"),t(e)])])])])}const w=i(r,[["render",v],["__file","Cypress系列（101）--intercept()-命令详解.html.vue"]]);export{w as default};
