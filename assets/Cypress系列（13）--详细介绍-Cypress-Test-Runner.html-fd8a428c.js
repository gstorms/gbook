import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as s,c as t,a as e,b as i,d as o,f as l}from"./app-3f278ba4.js";const h={},d=l('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>Test Runner 也叫运行器，Cypress 因为它的存在，才在众多自动化测试框架中脱颖而出</li><li>Cypress 使测试在一个<strong>独特的交互式运行器</strong>中运行测试，不仅可以在执行命令时查看测试结果，同时还允许查看被测应用程序</li></ul><p></p><h4 id="test-runner-的简介" tabindex="-1"><a class="header-anchor" href="#test-runner-的简介" aria-hidden="true">#</a> Test Runner 的简介</h4><ul><li>Test Runner 是一个库或者工具，它用来挑选一个包含单元测试或者一系列其他设置的测试集合**【打包测试用例集】**</li><li>然后执行这个测试集合，并将测试结果写入控制台或日志文件**【运行测试用例集】**</li><li>Test Runner 使创建和执行测试套件更加方便和灵活</li><li>不同的语言，会有不同的 Test Runner</li></ul><p></p><h2 id="cypress-test-runner" tabindex="-1"><a class="header-anchor" href="#cypress-test-runner" aria-hidden="true">#</a> Cypress Test Runner</h2><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200604174054542-1340909991.png" alt="" loading="lazy"><br> Cypress 自带的交互式测试运行器功能强大，允许你在测试运行期间就查看测试命令的执行结果，并同时监控在命令执行时，被测程序所处的状态</p><h2 id="cypress-test-runner-的组成" tabindex="-1"><a class="header-anchor" href="#cypress-test-runner-的组成" aria-hidden="true">#</a> <strong>Cypress Test Runner 的组成</strong></h2><p><strong>讲解的顺序就是按上面图片1-6哦</strong></p><h3 id="测试状态目录-test-status-menu" tabindex="-1"><a class="header-anchor" href="#测试状态目录-test-status-menu" aria-hidden="true">#</a> 测试状态目录（Test Status Menu）</h3><p><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200604175512274-1356564086.png" alt="" loading="lazy"><br> 展示测试用例成功的数目<br>  <br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200604175524390-220931143.png" alt="" loading="lazy"><br> 展示测试用例失败的数目<br>  <br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200604175551484-179297259.png" alt="" loading="lazy"><br> 展示测试用例待定的数目<br>  <br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200604175830468-1192209040.png" alt="" loading="lazy"><br> 最后展示整个测试文件的运行总时间<br>  <br><img src="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200604175640517-1835273714.png" alt="" loading="lazy"><br> 右侧还可以手动再次运行一次当前测试文件的所有测试用例哦</p><h3 id="命令日志-command-log" tabindex="-1"><a class="header-anchor" href="#命令日志-command-log" aria-hidden="true">#</a> 命令日志（Command Log）</h3><h4 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h4><p>这里要说下命令的意思，其实就是调用的方法，只不过官方会将它说成命令；<strong>一个命令等于调用了一个方法</strong></p><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h4><ul><li>命令日志用于记录每个被执行的命令</li><li>点击命令，可以在 Console 中查看命令应用于哪个元素，以及执行的详细信息；同时应用程序预览（App Preview）会显示当前命令执行时<strong>被测应用程序的状态</strong></li></ul><p></p><h3 id="url-预览-url-preview" tabindex="-1"><a class="header-anchor" href="#url-预览-url-preview" aria-hidden="true">#</a> URL 预览（URL Preview）</h3><p>展示测试命令执行时，被测应用程序所处的 URL，它能够使你更方便地<strong>查看测试路由</strong></p><h3 id="应用程序预览-app-preview" tabindex="-1"><a class="header-anchor" href="#应用程序预览-app-preview" aria-hidden="true">#</a> 应用程序预览（App Preview）</h3><p>展示测试运行时，<strong>被测应用程序的实时状态（样式，动画之类的）</strong></p><h3 id="视窗大小-viewpoint-sizing" tabindex="-1"><a class="header-anchor" href="#视窗大小-viewpoint-sizing" aria-hidden="true">#</a> 视窗大小（ViewPoint Sizing）</h3><ul><li>可以通过设置视窗大小来测试页面<strong>响应式布局</strong></li><li>可以在 cypress.json 文件中通过设置 viewportWidth 和 viewportHeight 两个配置项来控制视窗大小</li></ul><p></p><h3 id="cypress-元素定位辅助器-selector-playground" tabindex="-1"><a class="header-anchor" href="#cypress-元素定位辅助器-selector-playground" aria-hidden="true">#</a> Cypress 元素定位辅助器（Selector Playground）</h3><p>可以帮助我们<strong>识别元素唯一的定位标识</strong><br> **</p>',27),p={href:"https://www.cnblogs.com/poloyy/p/13045410.html",target:"_blank",rel:"noopener noreferrer"};function c(g,u){const r=a("ExternalLinkIcon");return s(),t("div",null,[d,e("blockquote",null,[e("p",null,[e("a",p,[i("https://www.cnblogs.com/poloyy/p/13045410.html"),o(r)])])])])}const y=n(h,[["render",c],["__file","Cypress系列（13）--详细介绍-Cypress-Test-Runner.html.vue"]]);export{y as default};
