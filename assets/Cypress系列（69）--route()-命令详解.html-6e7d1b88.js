import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as e,a as n,b as o,d as c,f as i}from"./app-3f278ba4.js";const l={},u=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>Cypress 6.0.0 开始不推荐使用 cy.server() 和 cy.route()</li><li>在将来的版本中，对 cy.server() 和 cy.route() 的支持将移至插件</li><li>现在优先考虑使用 cy.intercept()</li></ul><p></p><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>管理控制整个网络请求</p><h2 id="重要注意事项" tabindex="-1"><a class="header-anchor" href="#重要注意事项" aria-hidden="true">#</a> 重要注意事项</h2><h4 id="cypress-目前仅支持拦截-xmlhttprequest-xhr" tabindex="-1"><a class="header-anchor" href="#cypress-目前仅支持拦截-xmlhttprequest-xhr" aria-hidden="true">#</a> Cypress 目前仅支持拦截 XMLHttpRequest（XHR）</h4><p>可在开发者工具（network 一栏）看到请求的 type 是 xhr，或者直接点击 xhr 进行筛选<br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021103118178-955654166.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021103119728-485105993.png" alt="" loading="lazy"><br> 同样是 login 请求，有些是 xhr，有些却是 document，对于 type=document 的请求， .route() 默认是不会拦截到的</p><h4 id="非-xhr-请求" tabindex="-1"><a class="header-anchor" href="#非-xhr-请求" aria-hidden="true">#</a> 非 XHR 请求</h4><p>使用 Fetch API 的请求以及其他类型的网络请求（例如页面加载和 <code>&lt;script&gt;</code> 标记）将不会在命令日志中被拦截或看到</p><h2 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式" aria-hidden="true">#</a> 语法格式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> response<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> response<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h3><h4 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> url</h4><p>需要监听的 URL，遵循 minimatch 模式</p><h4 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> response</h4><p>为匹配上的 URL 提供自定义响应体</p><h4 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> method</h4><p>待匹配监听 URL 的请求方法</p><h4 id="callbackfn" tabindex="-1"><a class="header-anchor" href="#callbackfn" aria-hidden="true">#</a> callbackFn</h4><p>回调函数</p><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021111903874-889853027.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="通俗理解的总结" tabindex="-1"><a class="header-anchor" href="#通俗理解的总结" aria-hidden="true">#</a> 通俗理解的总结</h4><ul><li>当发出请求的 url + method 匹配上路由的 url + method，就会被该路由监听到</li><li>**简单理解：**response 是自定义响应体，status 是自定义响应状态码，headers 是自定义响应头</li><li>如果设置了 response、status、headers 参数，则被监听到的请求会获取到这三个参数</li></ul><p></p><h3 id="命令执行结果" tabindex="-1"><a class="header-anchor" href="#命令执行结果" aria-hidden="true">#</a> 命令执行结果</h3><ul><li>执行结果是 null</li><li>且后续不能再链接其他命令</li></ul><p></p><h2 id="url-minimatch-的栗子" tabindex="-1"><a class="header-anchor" href="#url-minimatch-的栗子" aria-hidden="true">#</a> URL minimatch 的栗子</h2><h4 id="前言-1" tabindex="-1"><a class="header-anchor" href="#前言-1" aria-hidden="true">#</a> 前言</h4><p>可以通过 <em>、</em>* 来匹配动态的路由，咱们直接看栗子就好了</p><h3 id="栗子一" tabindex="-1"><a class="header-anchor" href="#栗子一" aria-hidden="true">#</a> 栗子一</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/users/*/comments&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// https://localhost:7777/users/123/comments     &lt;-- 匹配</span>
<span class="token comment">// https://localhost:7777/users/123/comments/465 &lt;-- 不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="栗子二" tabindex="-1"><a class="header-anchor" href="#栗子二" aria-hidden="true">#</a> 栗子二</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/posts/**&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// https://localhost:7777/posts/1            &lt;-- 匹配</span>
<span class="token comment">// https://localhost:7777/posts/foo/bar/baz  &lt;-- 匹配</span>
<span class="token comment">// https://localhost:7777/posts/quuz?a=b&amp;1=2 &lt;-- 匹配</span>
<span class="token comment">// https://localhost:7777/posts &lt;-- 不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="栗子三" tabindex="-1"><a class="header-anchor" href="#栗子三" aria-hidden="true">#</a> 栗子三</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/users/*&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 下面的都匹配</span>
<span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">1</span>
<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">2</span>
<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com<span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">3</span>
<span class="token comment">// 下面的都不匹配</span>
<span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">4</span><span class="token operator">/</span>foo
<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">/</span>users<span class="token operator">/</span><span class="token number">5</span><span class="token operator">/</span>foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="实际栗子" tabindex="-1"><a class="header-anchor" href="#实际栗子" aria-hidden="true">#</a> 实际栗子</h2><h4 id="进入演示项目目录下" tabindex="-1"><a class="header-anchor" href="#进入演示项目目录下" aria-hidden="true">#</a> 进入演示项目目录下</h4><p>**注：**演示项目是 cypress 提供的，如何下载可看 Cypress 系列文章的一开始几篇都有写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cd <span class="token constant">C</span><span class="token operator">:</span>\\Users\\user\\Desktop\\py\\cypress<span class="token operator">-</span>example<span class="token operator">-</span>recipes\\examples\\logging<span class="token operator">-</span>in__xhr<span class="token operator">-</span>web<span class="token operator">-</span>forms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h4 id="启动演示项目" tabindex="-1"><a class="header-anchor" href="#启动演示项目" aria-hidden="true">#</a> 启动演示项目</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h4 id="浏览器访问项目" tabindex="-1"><a class="header-anchor" href="#浏览器访问项目" aria-hidden="true">#</a> 浏览器访问项目</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">localhost:7079</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h4 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;jane.lane&#39;</span>
    <span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;password123&#39;</span>
    <span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:7079/&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;正常登录，修改登录请求的status、response&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cy<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;**/login&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">503</span><span class="token punctuation">,</span>
            <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
            <span class="token literal-property property">response</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;Not success&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;input[name=username]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;input[name=password]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">{enter}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;@login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            cy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">503</span><span class="token punctuation">)</span>
            <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>responseBody<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&#39;Not success&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果" aria-hidden="true">#</a> 测试结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021151531233-567640761.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="查看-route-路由的日志" tabindex="-1"><a class="header-anchor" href="#查看-route-路由的日志" aria-hidden="true">#</a> 查看 route 路由的日志</h4><ul><li>每当启动服务器（ cy.server() ）并添加路由（ cy.route() ）时，Cypress 都会显示一个名为 <strong>ROUTES(n)</strong> 的新模块日志</li><li>它将在日志中列出路由表，包括方法，URL，是否Stubbed，别名和成功匹配请求的数量</li></ul><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021155153053-1369670080.png" alt="" loading="lazy"><br> 可以看到成功匹配一个请求</p><h4 id="查看-xhr-命令日志" tabindex="-1"><a class="header-anchor" href="#查看-xhr-命令日志" aria-hidden="true">#</a> 查看 XHR 命令日志</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021155705467-574826547.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>当发出 XHR 请求后，Cypress 会记录此请求<strong>是否匹配到</strong>某个路由的别名</li><li>这里的 /login 请求就匹配到了 @login</li></ul><p></p><h4 id="console-查看响应结果" tabindex="-1"><a class="header-anchor" href="#console-查看响应结果" aria-hidden="true">#</a> console 查看响应结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021151534828-134904098.png" alt="" loading="lazy"><br> 如果要对响应体做断言，可以从这对象里面拿到对应的值</p><h4 id="重点一" tabindex="-1"><a class="header-anchor" href="#重点一" aria-hidden="true">#</a> 重点一</h4><p>Cypress 通过 cy.route().as() 和 cy.wait() ，可以自动等到接口返回以后再执行后续操作，增强了测试用例的健壮性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 简单的代码结构（仅演示）</span>
<span class="token comment">// 启动 Mock 服务器</span>
cy<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 添加 options...        </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 添加多个 route 路由</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 添加 options...       </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;route1&quot;</span><span class="token punctuation">)</span>
cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 添加 options...       </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;route2&quot;</span><span class="token punctuation">)</span>
<span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token comment">// UI 界面的操作...</span>
<span class="token comment">// 某些操作发出请求</span>
<span class="token comment">// 等待请求的完成</span>
cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;route1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    
    <span class="token comment">// 对接口的响应做后续操作或断言</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="重点二" tabindex="-1"><a class="header-anchor" href="#重点二" aria-hidden="true">#</a> 重点二</h4><p>指定了 status 参数之后，也必须指定 response 参数</p><h2 id="强制返回-404-的栗子" tabindex="-1"><a class="header-anchor" href="#强制返回-404-的栗子" aria-hidden="true">#</a> 强制返回 404 的栗子</h2><p>不匹配路由的请求，强制返回 404 状态和空 response</p><h4 id="测试代码-1" tabindex="-1"><a class="header-anchor" href="#测试代码-1" aria-hidden="true">#</a> 测试代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cy<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">force404</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;**/logins&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">503</span><span class="token punctuation">,</span>
            <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
            <span class="token literal-property property">response</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;Not success&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 伪代码</span>
<span class="token comment">// 发出 /login 请求的操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1" aria-hidden="true">#</a> 测试结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021154826395-1937445982.png" alt="" loading="lazy"><br> 当 /login 没有匹配到任意路由的时候，会返回 404</p><h4 id="查看-route-路由的日志-1" tabindex="-1"><a class="header-anchor" href="#查看-route-路由的日志-1" aria-hidden="true">#</a> 查看 route 路由的日志</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021155117322-68780638.png" alt="" loading="lazy"><br> 可以看到没有请求匹配成功此路由</p><h2 id="官方的栗子" tabindex="-1"><a class="header-anchor" href="#官方的栗子" aria-hidden="true">#</a> 官方的栗子</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;cy.route() - route responses to matching requests&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// https://on.cypress.io/route</span>
        <span class="token comment">// 访问</span>
        cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.cypress.io/commands/network-requests&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 预置变量</span>
        <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;whoa, this comment does not exist&#39;</span>
        <span class="token comment">// 启动 Mock 服务器</span>
        cy<span class="token punctuation">.</span><span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 路由1：监听 url 是 comments/* 且 请求方法是 GET 的请求</span>
        cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;comments/*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;getComment&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 点击按钮触发请求</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.network-btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 等待请求响应成功后获取 status 进行断言</span>
        cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;@getComment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">its</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;eq&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
        <span class="token comment">// 路由2：监听 url 是 /commets 且 请求方法是 POST 的请求</span>
        cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/comments&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;postComment&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 点击按钮触发请求</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.network-post&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 等待请求响应成功后进行断言</span>
        cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;@postComment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">expect</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
            <span class="token function">expect</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>requestHeaders<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span>
            <span class="token function">expect</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Using POST in cy.route()&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">/*
        路由3：监听 url 是 comments/* 且 请求方法是 POST 的请求
        自定义 status、response、delay 并返回给监听到的请求
         */</span>
        cy<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;comments/*&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">503</span><span class="token punctuation">,</span>
            <span class="token literal-property property">response</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">error</span><span class="token operator">:</span> message<span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&#39;putComment&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// // 等待请求响应成功后进行断言</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.network-put&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        cy<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&#39;@putComment&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 出现 404 之后断言文案</span>
        cy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.network-put-comment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">&#39;contain&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><h4 id="了解存根与常规xhr" tabindex="-1"><a class="header-anchor" href="#了解存根与常规xhr" aria-hidden="true">#</a> 了解存根与常规XHR</h4><p>Cypress 会在命令日志中显示 XHR 是发送给服务器还是 stub<br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021151944793-1962348023.png" alt="" loading="lazy"><br> 在命令日志中显示（XHR STUB）的XHR就是发送到 stub的，并且它们的 response，status，headers，delay 已由匹配的 cy.route() 控制<br>  <br><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021151940006-1714749868.png" alt="" loading="lazy"></p><ul><li>单击命令日志中的命令时，在开发者工具 Console 中 Cypress 还会显示 XHR是 否存根到控制台、匹配到的 URL</li><li>Initiator 是启动器，里面是发送 XHR 的堆栈跟踪</li></ul><p></p><h4 id="无法使用-cy-request-调试-cy-route" tabindex="-1"><a class="header-anchor" href="#无法使用-cy-request-调试-cy-route" aria-hidden="true">#</a> 无法使用  cy.request() 调试 cy.route()</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202010/1896874-20201021153727136-1250127961.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>cy.request() 会将请求直接发送到服务器，直接绕开 .route() 路由</li><li>cy.request() 目的是用于检查实际云心的服务器，而无须启动前端应用程序</li></ul>`,93),r={href:"https://www.cnblogs.com/poloyy/p/13852941.html",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=t("ExternalLinkIcon");return p(),e("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[o("https://www.cnblogs.com/poloyy/p/13852941.html"),c(s)])])])])}const b=a(l,[["render",d],["__file","Cypress系列（69）--route()-命令详解.html.vue"]]);export{b as default};
