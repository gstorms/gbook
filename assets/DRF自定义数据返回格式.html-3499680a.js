import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as e,f as t}from"./app-cfbf85c1.js";const l={},r=t(`<h1 id="【django】drf自定义数据返回格式" tabindex="-1"><a class="header-anchor" href="#【django】drf自定义数据返回格式" aria-hidden="true">#</a> 【Django】DRF自定义数据返回格式</h1><h2 id="基本说明" tabindex="-1"><a class="header-anchor" href="#基本说明" aria-hidden="true">#</a> 基本说明</h2><p>在采用djangorestframework之后，api返回的数据结构默认如下图所示：<br><img src="https://img2020.cnblogs.com/blog/2189696/202108/2189696-20210816090632616-1800916873.jpg" alt="" loading="lazy"><br> 但是通常resultful 的规范，后端返回 JSON 数据的格式有着不同的需求，那么我们必须能够根据需求自己定义返回数据的格式。列如如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>   
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token comment">//成功的状态码   </span>
    <span class="token property">&quot;msg&quot;</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token comment">//提示信息   </span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//返回数据       </span>
        <span class="token property">&quot;list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span>，<span class="token punctuation">{</span><span class="token punctuation">}</span>，<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//返回数组       </span>
		<span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token comment">//总条数（表格中用到，其它接口可以不返回）   </span>
	<span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>djangorestframwork可以通过自定义返回模板来重构返回数据的格式，我们查看restframework的默认设置可以看到,默认的模板是rest_framework.renderers.JSONRenderer和rest_framework.renderers.BrowsableAPIRenderer，其中第一个是用于前端接收数据时的数据格式模板，第二个是drf在api查看界面的数据显示模式。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&#39;DEFAULT_RENDERER_CLASSES&#39;<span class="token operator">:</span> <span class="token punctuation">[</span>     
  &#39;rest_framework.renderers.JSONRenderer&#39;<span class="token punctuation">,</span>     
  &#39;rest_framework.renderers.BrowsableAPIRenderer&#39;<span class="token punctuation">,</span> 
<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改模板" tabindex="-1"><a class="header-anchor" href="#修改模板" aria-hidden="true">#</a> 修改模板</h2>`,7),u={href:"http://settings.py",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>     
  <span class="token string">&#39;utils.custome_renderer.CustomRenderer&#39;</span><span class="token punctuation">,</span>     
	<span class="token string">&#39;rest_framework.renderers.BrowsableAPIRenderer&#39;</span><span class="token punctuation">,</span> 
<span class="token punctuation">)</span><span class="token punctuation">,</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一个注意点就是在开发时如果需要通过drf的api查看界面查看相应的api一定要将这个模板加上rest_framework.renderers.BrowsableAPIRenderer，否则的话无法看到相应的界面，生产时无需该界面，也可通过相关命令关闭显示。<br><code>utils.custome_renderer.CustomRenderer</code>其中<code>utils.custome_render</code>是自己的文件路径可根据自己的实际情况进行修改，<code>CustomRenderer</code>是自己定义的返回模板类的名称</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> JSONRenderer <span class="token comment"># 导入控制返回的JSON格式的类 </span>
<span class="token keyword">class</span> <span class="token class-name">CustomRenderer</span><span class="token punctuation">(</span>JSONRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>     
    <span class="token comment"># 重构render方法     </span>
    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> accepted_media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         
        <span class="token keyword">if</span> renderer_context<span class="token punctuation">:</span>             
            <span class="token comment"># 判断实例的类型，返回的数据可能是列表也可能是字典             </span>
            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 
                <span class="token comment"># 如果是字典的话应该是返回的数据，会包含msg,code,status等字段必须抽离出来                 </span>
                msg <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>                 
                code <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>                 
                <span class="token comment"># 重新构建返回的JSON字典                 </span>
                <span class="token keyword">if</span> <span class="token string">&#39;status&#39;</span> <span class="token keyword">in</span> data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     
                    <span class="token keyword">del</span> data<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span>                     
                    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span>                 
                <span class="token keyword">else</span><span class="token punctuation">:</span>                     
                    data <span class="token operator">=</span> data             
                    <span class="token comment"># 自定义返回数据格式             </span>
                    ret <span class="token operator">=</span> <span class="token punctuation">{</span>                 
                        <span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span> msg<span class="token punctuation">,</span>                 
                        <span class="token string">&#39;code&#39;</span><span class="token punctuation">:</span> code<span class="token punctuation">,</span>                 
                        <span class="token string">&#39;data&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                     
                            <span class="token string">&#39;list&#39;</span><span class="token punctuation">:</span> data<span class="token punctuation">,</span>                     
                            <span class="token string">&#39;total&#39;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>                 
                        <span class="token punctuation">}</span><span class="token punctuation">,</span>             
                    <span class="token punctuation">}</span>             
                    <span class="token comment"># 返回JSON数据             </span>
                    <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>ret<span class="token punctuation">,</span> accepted_media_type<span class="token punctuation">,</span> renderer_context<span class="token punctuation">)</span>         
                <span class="token keyword">else</span><span class="token punctuation">:</span>             
                    <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>data<span class="token punctuation">,</span> accepted_media_type<span class="token punctuation">,</span> renderer_context<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[</p>`,4),k={href:"https://github.com/esofar/cnblogs-theme-silence",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/henryhong/p/djangodrf-zi-ding-yi-shu-ju-fan-hui-ge-shi.html",target:"_blank",rel:"noopener noreferrer"};function v(b,g){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("如果我们想要修改返回给前端的数据格式，那么我们可以首先修改配置参数（"),n("a",u,[s("settings.py"),e(a)]),s("）中的DEFAULT_RENDERER_CLASSES，将rest_framework.renderers.JSONRenderer修改为自己定义的模板类：")]),d,n("p",null,[s("]("),n("a",k,[s("https://github.com/esofar/cnblogs-theme-silence"),e(a)]),s(")")]),n("blockquote",null,[n("p",null,[n("a",m,[s("https://www.cnblogs.com/henryhong/p/djangodrf-zi-ding-yi-shu-ju-fan-hui-ge-shi.html"),e(a)])])])])}const f=p(l,[["render",v],["__file","DRF自定义数据返回格式.html.vue"]]);export{f as default};
