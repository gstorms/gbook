import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as s,b as n,d as e,f as t}from"./app-cfbf85c1.js";const c={},u={id:"_1-创建模型-models-py",tabindex:"-1"},r=s("a",{class:"header-anchor",href:"#_1-创建模型-models-py","aria-hidden":"true"},"#",-1),d={href:"http://models.py",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models
<span class="token comment"># 高亮文本， 两种风格</span>
<span class="token keyword">from</span> pygments<span class="token punctuation">.</span>lexers <span class="token keyword">import</span> get_all_lexers
<span class="token keyword">from</span> pygments<span class="token punctuation">.</span>styles <span class="token keyword">import</span> get_all_styles

LEXERS <span class="token operator">=</span> <span class="token punctuation">[</span>item <span class="token keyword">for</span> item <span class="token keyword">in</span> get_all_lexers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
LANGUAGE_CHOICES <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> LEXERS<span class="token punctuation">]</span><span class="token punctuation">)</span>
STYLE_CHOICES <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> get_all_styles<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Snippet</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    code <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    linenos <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    language <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>choices<span class="token operator">=</span>LANGUAGE_CHOICES<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    style <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>choices<span class="token operator">=</span>STYLE_CHOICES<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;friendly&#39;</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;created&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m={id:"_2-创建自定义的serializer类-serializers-py",tabindex:"-1"},v=s("a",{class:"header-anchor",href:"#_2-创建自定义的serializer类-serializers-py","aria-hidden":"true"},"#",-1),b={href:"http://serializers.py",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">from</span> snippets<span class="token punctuation">.</span>models <span class="token keyword">import</span> Snippet<span class="token punctuation">,</span> LANGUAGE_CHOICES<span class="token punctuation">,</span> STYLE_CHOICES


<span class="token keyword">class</span> <span class="token class-name">SnippetSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># read_only 只读</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token comment"># required：必要， allow_blank:允许为空，</span>
    title <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> allow_blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token comment"># style: 设置显示样式，控制如何显示可浏览的API</span>
    code <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;base_template&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;textarea.html&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    linenos <span class="token operator">=</span> serializers<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    language <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>choices<span class="token operator">=</span>LANGUAGE_CHOICES<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">)</span>
    style <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>choices<span class="token operator">=</span>STYLE_CHOICES<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;friendly&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 一般是与model一一对应的，一般可以少，但不可以多，如果想增加需要另外进行处理！</span>
    <span class="token comment"># 字段设置是为了验证前端通过get等方法传递过来的数据</span>
    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        根据传入的数据创建一个实例
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> Snippet<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        更新一个实例，若没有传值，就使用原来的数据
        &quot;&quot;&quot;</span>
        instance<span class="token punctuation">.</span>title <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>code <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>linenos <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;linenos&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>linenos<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>language <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;language&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>language<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>style <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>style<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-序列化与反序列化" tabindex="-1"><a class="header-anchor" href="#_3-序列化与反序列化" aria-hidden="true">#</a> 3. 序列化与反序列化</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> JSONRenderer
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>parsers <span class="token keyword">import</span> JSONParser
<span class="token comment"># 序列化，将数据转化成json格式</span>
serializer <span class="token operator">=</span> SnippetSerializer<span class="token punctuation">(</span>snippet<span class="token punctuation">)</span>
content <span class="token operator">=</span> JSONRenderer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token comment"># 反序列化，转换成本机类型</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>six <span class="token keyword">import</span> BytesIO
stream <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
<span class="token comment"># 首先将数据转化成二进制流，然后再将其渲染成python中的字典</span>
data <span class="token operator">=</span> JSONParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parse<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-简便的modelserializer-要求不高的数据-不用自定义" tabindex="-1"><a class="header-anchor" href="#_4-简便的modelserializer-要求不高的数据-不用自定义" aria-hidden="true">#</a> 4. 简便的ModelSerializer，要求不高的数据，不用自定义</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SnippetSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Snippet
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;linenos&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;language&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 默认实现了create()和 update()方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),_={id:"_5-重点-编写我们的视图处理函数-views-py",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#_5-重点-编写我们的视图处理函数-views-py","aria-hidden":"true"},"#",-1),h={href:"http://views.py",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> JsonResponse
<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>csrf <span class="token keyword">import</span> csrf_exempt
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> JSONRenderer
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>parsers <span class="token keyword">import</span> JSONParser
<span class="token keyword">from</span> snippets<span class="token punctuation">.</span>models <span class="token keyword">import</span> Snippet
<span class="token keyword">from</span> snippets<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> SnippetSerializer

<span class="token comment"># 不用进行csrf验证</span>
<span class="token decorator annotation punctuation">@csrf_exempt</span>
<span class="token keyword">def</span> <span class="token function">snippet_list</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 删除多个对象的方法</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span>
        <span class="token comment"># 获取所有的对象</span>
        snippets <span class="token operator">=</span> Snippet<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 序列化所有的查询集，必须设置many=True，模型对象不用设置</span>
        serializer <span class="token operator">=</span> SnippetSerializer<span class="token punctuation">(</span>snippets<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> JSONParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parse<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        serializer <span class="token operator">=</span> SnippetSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token comment"># 验证我们的数据</span>
        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">201</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">)</span>

<span class="token comment"># 处理单个对象的方法（get, put, delete）</span>
<span class="token decorator annotation punctuation">@csrf_exempt</span>
<span class="token keyword">def</span> <span class="token function">snippet_detail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Retrieve, update or delete a code snippet.
    &quot;&quot;&quot;</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        snippet <span class="token operator">=</span> Snippet<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Snippet<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span>
        <span class="token comment"># 序列化数据</span>
        serializer <span class="token operator">=</span> SnippetSerializer<span class="token punctuation">(</span>snippet<span class="token punctuation">)</span>
        <span class="token comment"># 将数据转换成json格式，作为响应返回给客户端</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">:</span>
        <span class="token comment"># 将请求对象反序列化为python对象</span>
        data <span class="token operator">=</span> JSONParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parse<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        serializer <span class="token operator">=</span> SnippetSerializer<span class="token punctuation">(</span>snippet<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">)</span>

    <span class="token keyword">elif</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">:</span>
        snippet<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">204</span><span class="token punctuation">)</span>        

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-serializer支持的字段" tabindex="-1"><a class="header-anchor" href="#_6-serializer支持的字段" aria-hidden="true">#</a> 6. serializer支持的字段</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>models<span class="token punctuation">.</span>AutoField<span class="token punctuation">:</span> IntegerField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>BigIntegerField<span class="token punctuation">:</span> IntegerField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">:</span> BooleanField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>CharField<span class="token punctuation">:</span> CharField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>CommaSeparatedIntegerField<span class="token punctuation">:</span> CharField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>DateField<span class="token punctuation">:</span> DateField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">:</span> DateTimeField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>DecimalField<span class="token punctuation">:</span> DecimalField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>EmailField<span class="token punctuation">:</span> EmailField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>Field<span class="token punctuation">:</span> ModelField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>FileField<span class="token punctuation">:</span> FileField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>FloatField<span class="token punctuation">:</span> FloatField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>ImageField<span class="token punctuation">:</span> ImageField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">:</span> IntegerField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>NullBooleanField<span class="token punctuation">:</span> NullBooleanField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>PositiveIntegerField<span class="token punctuation">:</span> IntegerField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>PositiveSmallIntegerField<span class="token punctuation">:</span> IntegerField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>SlugField<span class="token punctuation">:</span> SlugField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>SmallIntegerField<span class="token punctuation">:</span> IntegerField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>TextField<span class="token punctuation">:</span> CharField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>TimeField<span class="token punctuation">:</span> TimeField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>URLField<span class="token punctuation">:</span> URLField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>GenericIPAddressField<span class="token punctuation">:</span> IPAddressField<span class="token punctuation">,</span>
models<span class="token punctuation">.</span>FilePathField<span class="token punctuation">:</span> FilePathField<span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-自定义字段-支持的参数" tabindex="-1"><a class="header-anchor" href="#_7-自定义字段-支持的参数" aria-hidden="true">#</a> 7. 自定义字段，支持的参数</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>LIST_SERIALIZER_KWARGS <span class="token operator">=</span> <span class="token punctuation">(</span>
<span class="token string">&#39;read_only&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;write_only&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;initial&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;source&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;help_text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;error_messages&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;allow_empty&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;instance&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;partial&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;context&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;allow_null&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),w=s("br",null,null,-1),F=s("br",null,null,-1),S={href:"https://blog.csdn.net/runnoob_1115/article/details/78479094",target:"_blank",rel:"noopener noreferrer"};function z(x,E){const a=o("ExternalLinkIcon");return i(),l("div",null,[s("h2",u,[r,n(" 1. 创建模型("),s("a",d,[n("models.py"),e(a)]),n(")")]),k,s("h2",m,[v,n(" 2. 创建自定义的Serializer类（"),s("a",b,[n("serializers.py"),e(a)]),n("）")]),g,s("h2",_,[y,n(" 5. 重点，编写我们的视图处理函数（"),s("a",h,[n("views.py"),e(a)]),n("）")]),f,s("p",null,[n("————————————————"),w,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),F,n(" 原文链接："),s("a",S,[n("https://blog.csdn.net/runnoob_1115/article/details/78479094"),e(a)])])])}const C=p(c,[["render",z],["__file","Django-restframework01-REST框架原始写法，与表单Form类似，实例.html.vue"]]);export{C as default};
