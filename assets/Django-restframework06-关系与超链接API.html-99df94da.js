import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as s,b as n,d as i,f as l}from"./app-cfbf85c1.js";const c={},u=l(`<h1 id="drf06-关系与超链接api" tabindex="-1"><a class="header-anchor" href="#drf06-关系与超链接api" aria-hidden="true">#</a> DRF06-关系与超链接API</h1><h2 id="_1-内容" tabindex="-1"><a class="header-anchor" href="#_1-内容" aria-hidden="true">#</a> 1. 内容</h2><ul><li>为API接口创建根节点</li><li>为对象的高亮显示文本创建端点</li><li>为每个API创建链接</li><li>确保每个url模式被命名，或者定义</li><li>添加分页</li><li>浏览接口</li></ul><p>之前使用主键，需要提升内聚性和可发现性</p><h2 id="_2-创建api根节点的断点" tabindex="-1"><a class="header-anchor" href="#_2-创建api根节点的断点" aria-hidden="true">#</a> 2. 创建api根节点的断点</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 之前我们有了snippets和users的端点，现在我们利用正则表达式和带@api_view基础视图函数创建初级的单一断点。</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse


<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">api_root</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">&#39;users&#39;</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;user-list&#39;</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token builtin">format</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;snippets&#39;</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;snippet-list&#39;</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token builtin">format</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-创建高亮文本的断点" tabindex="-1"><a class="header-anchor" href="#_3-创建高亮文本的断点" aria-hidden="true">#</a> 3. 创建高亮文本的断点</h2><blockquote><p>除了返回JSON数据，rest还提供了两种HTML渲染方式，</p><ul><li>一种利用模板templates渲染，另一种通过pre-rendered渲染</li><li>++注意++：创建高亮文本时，不存在创建好的通用的视图函数以供我们调用</li><li>另一个方面是我们不能返回一个对象实例，而是返回一个对象实例的某个属性</li><li>所以我们利用基础的视图函数来处理， 创建自己的‘get’方法</li></ul></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> renderers
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response

<span class="token keyword">class</span> <span class="token class-name">SnippetHighlight</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Snippet<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置我们的序列化格式，这里是序列化为HTML形式</span>
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>StaticHTMLRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        snippet <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>snippet<span class="token punctuation">.</span>highlighted<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加url路由</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这里我们还没有定义这一大类的根节点入口</span>
url<span class="token punctuation">(</span><span class="token string">r&#39;^$&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>api_root<span class="token punctuation">)</span><span class="token punctuation">,</span> 
<span class="token comment"># 获取高亮文本的接口</span>
url<span class="token punctuation">(</span><span class="token string">r&#39;^snippets/(?P&lt;pk&gt;[0-9]+)/highlight/$&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SnippetHighlight<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-超链接接口" tabindex="-1"><a class="header-anchor" href="#_4-超链接接口" aria-hidden="true">#</a> 4. 超链接接口</h2><p>处理存在实体之间的关系，有以下几种不同的方式：</p><ul><li>利用pk</li><li>在实体之间使用超链接， 那序列化就要继承HyperlinkedModelSerializer</li><li>利用唯一的标识字段链接相关的实体</li><li>使用相关实体的默认字符串表示形式</li><li>将相关实体嵌套在父类中</li><li>其他自定义表示<br> rest框架支持所有的这些样式，我们可以跨越前向或者利用反向关系获得，或者应用外键之类的</li></ul><p>HyperlinkedModelSerializer与ModelSerializer有以下区别：</p><ul><li>默认不包含id字段</li><li>它包含一个url字段，HyperlinkedIdentityField字段生成</li><li>关系通过HyperlinkedRelatedField字段建立，而不是PrimaryKeyRelatedField<br> 重写成超链接序列器，在snippets/serializers.py中：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SnippetSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>

    owner <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ReadOnlyField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;owner.username&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 视图函数名：views_name,后缀为html，而不是json，因为我们需要的就是高亮的文本</span>
    highlight <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">&#39;snippet-highlight&#39;</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Snippet
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;highlight&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;owner&#39;</span><span class="token punctuation">,</span>
                  <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;linenos&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;language&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    snippets <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedRelatedField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> view_name<span class="token operator">=</span><span class="token string">&#39;snippet-detail&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> User
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;snippets&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-url模式命名" tabindex="-1"><a class="header-anchor" href="#_5-url模式命名" aria-hidden="true">#</a> 5. URL模式命名</h2><ol><li>根节点，命名为 ‘user-list’ and ‘snippet-list’，模型名-list</li><li>自定义模型的字段 使用模型名-字段名</li><li>单个实例属性，使用模型名-detail<br> 将这些全部写入我们的路由管理器中为：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span> include
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>urlpatterns <span class="token keyword">import</span> format_suffix_patterns
<span class="token keyword">from</span> snippets <span class="token keyword">import</span> views

<span class="token comment"># API endpoints</span>
urlpatterns <span class="token operator">=</span> format_suffix_patterns<span class="token punctuation">(</span><span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^$&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>api_root<span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^snippets/$&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>SnippetList<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;snippet-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^snippets/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>SnippetDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;snippet-detail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^snippets/(?P&lt;pk&gt;[0-9]+)/highlight/$&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>SnippetHighlight<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    name<span class="token operator">=</span><span class="token string">&#39;snippet-highlight&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^users/$&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>UserList<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;user-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^users/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>UserDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">&#39;user-detail&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Login and logout views for the browsable API</span>
urlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api-auth/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;rest_framework.urls&#39;</span><span class="token punctuation">,</span>
                               namespace<span class="token operator">=</span><span class="token string">&#39;rest_framework&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),r=s("br",null,null,-1),k=s("br",null,null,-1),d={href:"https://blog.csdn.net/runnoob_1115/article/details/78479162",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("————————————————"),r,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),k,n(" 原文链接："),s("a",d,[n("https://blog.csdn.net/runnoob_1115/article/details/78479162"),i(a)])])])}const _=t(c,[["render",v],["__file","Django-restframework06-关系与超链接API.html.vue"]]);export{_ as default};
