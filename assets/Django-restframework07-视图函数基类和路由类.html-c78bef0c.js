import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as i,a as s,b as n,d as o,f as c}from"./app-207e7d61.js";const l={},u=c(`<h1 id="drf07-视图函数基类和路由类" tabindex="-1"><a class="header-anchor" href="#drf07-视图函数基类和路由类" aria-hidden="true">#</a> DRF07-视图函数基类和路由类</h1><h2 id="_1、内容" tabindex="-1"><a class="header-anchor" href="#_1、内容" aria-hidden="true">#</a> 1、内容</h2><ol><li>重构视图函数</li><li>将视图函数绑定url</li><li>利用路由类</li><li>view与viewsets之间的权衡</li></ol><p>rest框架提供了ViewSets基类，让开发者得以集中精力于对API的状态和交互进行建模;<br> ViewSets和views十分相似，除了提供如read,update等方法，而不是get或put;<br> ViewSet类使用Router类处理复杂的url.</p><h2 id="_2、利用viewsets进行重构" tabindex="-1"><a class="header-anchor" href="#_2、利用viewsets进行重构" aria-hidden="true">#</a> 2、利用ViewSets进行重构</h2><p>第一步：重构UserList 和 UserDetail，将其归为一个类UserViewSet</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets
<span class="token comment"># 只具有只读权限，不再需要写两个视图类，一个处理多个，一个处理单个对象</span>
<span class="token keyword">class</span> <span class="token class-name">UserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ReadOnlyModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    This viewset automatically provides \`list\` and \`detail\` actions.
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：重构SnippetList, SnippetDetail 和 SnippetHighlight类为SnippetViewSet类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> detail_route

<span class="token keyword">class</span> <span class="token class-name">SnippetViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    This viewset automatically provides \`list\`, \`create\`, \`retrieve\`,
    \`update\` and \`destroy\` actions.

    Additionally we also provide an extra \`highlight\` action.
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Snippet<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> SnippetSerializer
    <span class="token comment"># 设置权限</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAuthenticatedOrReadOnly<span class="token punctuation">,</span>
                          IsOwnerOrReadOnly<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token comment"># 自定义的方法，用来处理不是标准create/update/delete的请求，默认处理get请求，可以通过参数methods=POST来处理POST请求，或其他</span>
    <span class="token decorator annotation punctuation">@detail_route</span><span class="token punctuation">(</span>renderer_classes<span class="token operator">=</span><span class="token punctuation">[</span>renderers<span class="token punctuation">.</span>StaticHTMLRenderer<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">highlight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        snippet <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>snippet<span class="token punctuation">.</span>highlighted<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>owner<span class="token operator">=</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步： 绑定视图类到url</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> snippets<span class="token punctuation">.</span>views <span class="token keyword">import</span> SnippetViewSet<span class="token punctuation">,</span> UserViewSet<span class="token punctuation">,</span> api_root
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> renderers
<span class="token comment"># 前一个表示请求的方法，后一个表示处理的函数</span>
snippet_list <span class="token operator">=</span> SnippetViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;post&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;create&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
snippet_detail <span class="token operator">=</span> SnippetViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;retrieve&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;put&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;patch&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;partial_update&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;delete&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;destroy&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
snippet_highlight <span class="token operator">=</span> SnippetViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;highlight&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> renderer_classes<span class="token operator">=</span><span class="token punctuation">[</span>renderers<span class="token punctuation">.</span>StaticHTMLRenderer<span class="token punctuation">]</span><span class="token punctuation">)</span>
user_list <span class="token operator">=</span> UserViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
user_detail <span class="token operator">=</span> UserViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;retrieve&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


urlpatterns <span class="token operator">=</span> format_suffix_patterns<span class="token punctuation">(</span><span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^$&#39;</span><span class="token punctuation">,</span> api_root<span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^snippets/$&#39;</span><span class="token punctuation">,</span> snippet_list<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;snippet-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^snippets/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="token punctuation">,</span> snippet_detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;snippet-detail&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^snippets/(?P&lt;pk&gt;[0-9]+)/highlight/$&#39;</span><span class="token punctuation">,</span> snippet_highlight<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;snippet-highlight&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^users/$&#39;</span><span class="token punctuation">,</span> user_list<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;user-list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^users/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="token punctuation">,</span> user_detail<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;user-detail&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用路由器" tabindex="-1"><a class="header-anchor" href="#_3-使用路由器" aria-hidden="true">#</a> 3. 使用路由器</h2><p>因为我们使用ViewSet类，而不是View类，我们实际上不需要设计自己的URL<br> 利用路由器Router可以自动处理链接到资源的请求<br> 我们唯一需要做的就是利用路由注册视图函数，然后让他自动处理<br> 下面是改进版的url视图：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url<span class="token punctuation">,</span> include
<span class="token keyword">from</span> snippets <span class="token keyword">import</span> views
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter

<span class="token comment"># Create a router and register our viewsets with it.</span>
router <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 我们只需提供两个参数，一个是url前缀，一个是视图函数本身</span>
<span class="token comment"># DefaultRouter类会自动为我们创建the API root view，所以我们可以删除api_root</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;snippets&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>SnippetViewSet<span class="token punctuation">)</span>
router<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">r&#39;users&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>UserViewSet<span class="token punctuation">)</span>

<span class="token comment"># The API URLs are now determined automatically by the router.</span>
<span class="token comment"># Additionally, we include the login URLs for the browsable API.</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api-auth/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;rest_framework.urls&#39;</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">&#39;rest_framework&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),r=s("br",null,null,-1),d=s("br",null,null,-1),k={href:"https://blog.csdn.net/runnoob_1115/article/details/78479173",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=e("ExternalLinkIcon");return p(),i("div",null,[u,s("p",null,[n("————————————————"),r,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),d,n(" 原文链接："),s("a",k,[n("https://blog.csdn.net/runnoob_1115/article/details/78479173"),o(a)])])])}const _=t(l,[["render",v],["__file","Django-restframework07-视图函数基类和路由类.html.vue"]]);export{_ as default};
