import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as o,a as s,b as n,d as r,f as l}from"./app-d0fb0332.js";const i={},c=l(`<h1 id="drf08-模式和客户端库" tabindex="-1"><a class="header-anchor" href="#drf08-模式和客户端库" aria-hidden="true">#</a> DRF08-模式和客户端库</h1><h2 id="_1-内容" tabindex="-1"><a class="header-anchor" href="#_1-内容" aria-hidden="true">#</a> 1. 内容</h2><p>核心API<br> 添加一个模式<br> 利用命令行客户端<br> 客户端认证<br> 回顾我们之前的工作</p><h2 id="_2-核心api" tabindex="-1"><a class="header-anchor" href="#_2-核心api" aria-hidden="true">#</a> 2. 核心API</h2><p>提供架构支持，使用Core API<br> Core API简介</p><ol><li>用于表示Web API的与格式无关的文档对象模型。</li><li>可以用于表示模式或超媒体响应，并允许您在应用程序界面层而不是网络接口与API进行交互</li><li>Core API目前具有可用于Core JSON，Open API / Swagger， HAL和JSON Hyper-Schema的实现</li><li>Core API规范有三层：</li></ol><ul><li>文件层： 客户端与之交互的抽象对象接口，</li><li>编码层： 文档和字节串之间的映射</li><li>传输层： 如何将文档交互映射到网络请求<br> 任何一个Core API接口的顶级元素始终为Document,文档总有一个关联的url，还应该有一个标题。链接是页面提供的可用交互点，核心API具有就地转换的特点，标记为就地的链接就会对文档进行部分转换，“put”，“patch”和“delete”操作默认为就地。链接之后的错误为一组键值对，用于表示与失败转换相关联的任何错误信息。</li></ul><h2 id="_3-添加模式schema" tabindex="-1"><a class="header-anchor" href="#_3-添加模式schema" aria-hidden="true">#</a> 3. 添加模式schema</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 安装：pip install coreapi</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas <span class="token keyword">import</span> get_schema_view
<span class="token comment"># 一个自动生成的模式视图来为API添加模式</span>
schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;Pastebin API&#39;</span><span class="token punctuation">)</span>

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^schema/$&#39;</span><span class="token punctuation">,</span> schema_view<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">]</span>

命令行操作，指定所需类型：
$ http http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>schema<span class="token operator">/</span> Accept<span class="token punctuation">:</span>application<span class="token operator">/</span>coreapi<span class="token operator">+</span>json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用命令行模拟客户端" tabindex="-1"><a class="header-anchor" href="#_4-使用命令行模拟客户端" aria-hidden="true">#</a> 4. 使用命令行模拟客户端</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install coreapi<span class="token operator">-</span>cli
coreapi <span class="token comment"># 查看coreapi介绍</span>
<span class="token comment"># 使用命令行客户机加载API模式</span>
coreapi get http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>schema<span class="token operator">/</span>
<span class="token comment"># 列出所有片段</span>
coreapi action snippets <span class="token builtin">list</span>
<span class="token comment"># 某些api端点需要命名参数的，例如，要获取特定代码段的高亮度HTML，我们需要提供一个id。</span>
coreapi action snippets highlight <span class="token operator">-</span><span class="token operator">-</span>param <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># 认证我们的客户</span>
coreapi credentials add <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>password<span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token operator">-</span>auth basic
<span class="token comment"># 再次交互，就可以看到一整套可用的交互</span>
coreapi <span class="token builtin">reload</span>
<span class="token comment"># 再次与这些端点交互，传入的参数 前必须有 --param</span>
coreapi action snippets create <span class="token operator">-</span><span class="token operator">-</span>param title<span class="token operator">=</span><span class="token string">&quot;Example&quot;</span> <span class="token operator">-</span><span class="token operator">-</span>param code<span class="token operator">=</span><span class="token string">&quot;print(&#39;hello, world&#39;)&quot;</span>
<span class="token comment"># 删除片段</span>
coreapi action snippets delete <span class="token operator">-</span><span class="token operator">-</span>param <span class="token builtin">id</span><span class="token operator">=</span><span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),d=s("br",null,null,-1),u=s("br",null,null,-1),m={href:"https://blog.csdn.net/runnoob_1115/article/details/78486783",target:"_blank",rel:"noopener noreferrer"};function k(b,v){const a=p("ExternalLinkIcon");return t(),o("div",null,[c,s("p",null,[n("————————————————"),d,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),u,n(" 原文链接："),s("a",m,[n("https://blog.csdn.net/runnoob_1115/article/details/78486783"),r(a)])])])}const g=e(i,[["render",k],["__file","Django-restframework08-模式和客户端库.html.vue"]]);export{g as default};
