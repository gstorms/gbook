import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as n,c as i,a as t,b as e,d as l,f as o}from"./app-207e7d61.js";const u={},d=o(`<h1 id="drf09-request对象" tabindex="-1"><a class="header-anchor" href="#drf09-request对象" aria-hidden="true">#</a> DRF09-Request对象</h1><p>REST框架的Request类扩展了标准的HttpRequest,增加了对REST框架的灵活解析和请求认证</p><h2 id="_1-request方法" tabindex="-1"><a class="header-anchor" href="#_1-request方法" aria-hidden="true">#</a> 1. Request方法</h2><p>允许以与处理表单数据相同的方式处理JSON数据或其他媒体类型的请求</p><ul><li>.data(数据)<br> request.data返回请求正文的解析内容,类似标准对象中的request.POST and request.FILES，除了以下几点：</li></ul><ol><li>包括所有的解析内容，如文件输入和非文件输入</li><li>不仅仅支持支持POST提交的内容，还支持PUT和PATCH请求</li><li>灵活解析，不仅仅是支持表单数据，例如可以通过处理表单数据传入json数据</li></ol><ul><li>.query_params（查询参数）<br> request.query_params相比它的同义词request.GET，命名更加正确<br> request.query_params[‘id’]获取参数<br> /?id=12</li><li>.parsers<br> APIView或者@api_view装饰器会基于parser_classes或者DEFAULT_PARSER_CLASSES setting自动设置一个Parser解析类型对象</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>注意，如果客户端发送了一个错误的内容， 使用request<span class="token punctuation">.</span>data，将会出现ParseError，
通过APIView和@api_view装饰器能够自动catch异常，然后返回一个<span class="token number">400</span>
如果客户端提交了一个不支持的content<span class="token operator">-</span><span class="token builtin">type</span>，将会产生UnsupportedMediaType异常
然后服务器返回一个 <span class="token number">415</span> Unsupported Media Type响应
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-内容协商" tabindex="-1"><a class="header-anchor" href="#_2-内容协商" aria-hidden="true">#</a> 2. 内容协商</h2><p>.accepted_renderer： 选择渲染器<br> .accepted_media_type： 可接受的媒体类型字符串</p><h2 id="_3-用户认证" tabindex="-1"><a class="header-anchor" href="#_3-用户认证" aria-hidden="true">#</a> 3. 用户认证</h2><p>REST框架提供了一个流畅的， 在处理请求之前进行用户认证，提供了：</p><ul><li>给不同的接口设置不同认证策略</li><li>支持多个认证策略</li><li>提供请求和用户，令牌信息之间的信息</li></ul><p>属性：</p><ul><li>.user<br> 如果用户认证启用了的话，request.user返回一个django.contrib.auth.models.User<br> 如果没有通过验证，返回request.user的默认值，django.contrib.auth.models.AnonymousUser</li><li>.auth<br> request.auth返回附加的用户认证上下文，request.auth依靠于认证策略，但它通常是一个token实例。<br> 如果请求是未经过认证的，或者没有附加的请求上下文，它的默认值为None</li><li>.authenticators<br> APIView类和@api_view装饰器基于authentication_classes或者DEFAULT_AUTHENTICATORS默认设置，确保这个属性自动设置为Authentication实例</li></ul><h2 id="_4-浏览器增强" tabindex="-1"><a class="header-anchor" href="#_4-浏览器增强" aria-hidden="true">#</a> 4. 浏览器增强</h2><p>表单提交的方法PUT, PATCH and DELETE</p><ul><li>.method<br> 返回一个请求方法名全部大写的字符串，PUT, PATCH and DELETE</li><li>.content_type<br> 返回请求的媒体类型，如json，如果没有提供则是一个空字符串<br> 如果确实需要获取请求的媒体类型，优先使用content_type，而不是request.META.get(‘HTTP_CONTENT_TYPE’)</li><li>.stream<br> request.stream返回一个请求的正文，body</li></ul><h2 id="_5-标准的httprequest属性" tabindex="-1"><a class="header-anchor" href="#_5-标准的httprequest属性" aria-hidden="true">#</a> 5. 标准的HttpRequest属性</h2>`,19),c=t("br",null,null,-1),p=t("br",null,null,-1),h=t("br",null,null,-1),_=t("br",null,null,-1),b={href:"https://blog.csdn.net/runnoob_1115/article/details/78486800",target:"_blank",rel:"noopener noreferrer"};function q(m,T){const a=s("ExternalLinkIcon");return n(),i("div",null,[d,t("p",null,[e("REST框架的request 继承了django的HttpRequest，其他的标准属性和方法，request都是支持的，例如request.META和request.session字典"),c,e(" 实现方式，不是通过继承HttpRequest，而是通过组装的方式，并没有实现HttpRequest类"),p,e(" ————————————————"),h,e(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),_,e(" 原文链接："),t("a",b,[e("https://blog.csdn.net/runnoob_1115/article/details/78486800"),l(a)])])])}const R=r(u,[["render",q],["__file","Django-restframework09-Request对象.html.vue"]]);export{R as default};
