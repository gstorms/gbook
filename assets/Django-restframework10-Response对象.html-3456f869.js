import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as s,c as o,a as t,b as e,d as l,f as i}from"./app-731a6e06.js";const d={},p=i('<h1 id="drf10-response对象" tabindex="-1"><a class="header-anchor" href="#drf10-response对象" aria-hidden="true">#</a> DRF10-Response对象</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>和基本的HttpResponse objects不同，TemplateResponse objects会保存视图函数计算出来的响应上下文，最终输出的响应对象在需要时才会被计算<br> REST框架提供一个Response对象以支持HTTP内容协商，Response依据客户端各种request.content_type提供相应的媒体类型<br> 没有要求必须使用Response，也可以使用HttpResponse或者StreamingHttpResponse。利用Response对象提供了一个简洁的接口返回响应。<br> 除非你想深度个性化REST框架，否则你应该使用APIView或这@api_view装饰器</p><h2 id="_2-创建一个response对象" tabindex="-1"><a class="header-anchor" href="#_2-创建一个response对象" aria-hidden="true">#</a> 2. 创建一个Response对象</h2><h3 id="response" tabindex="-1"><a class="header-anchor" href="#response" aria-hidden="true">#</a> Response()</h3><blockquote><p>Response(data, status=None, template_name=None, headers=None, content_type=None)</p></blockquote><ol><li>不像普通的HttpResponse objects，不需要用渲染过的文本来实例化Response对象，你可以用任何未经渲染的数据，如存在的任何Python原始对象</li><li>渲染器本身不能处理复杂的数据形式，如数据库模型，所以在创建Response对象之前，需要序列化数据成原始的数据类型,利用REST框架的Serializer或者自定义的序列化器</li><li>参数： <ol><li>data: 序列化处理后的数据</li><li>status: res状态码，默认200</li><li>template_name： 模板名字，如果使用HTMLRenderer渲染成html数据</li><li>headers: 返回给用户的响应头</li><li>content_type: 返回数据的类型，一般是根据请求的内容协商结果自动设置</li></ol></li></ol><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><ol><li>data:未经序列化的请求对象</li><li>status_code: HTTP response的状态码</li><li>content： 必须先渲染render()之后才能调用.content</li><li>template_name: 如果应用了，那么只接受HTMLRenderer或者自定义的template renderer 渲染之后的数据</li><li>accepted_renderer: 设置用于渲染请求数据的渲染器</li><li>accepted_media_type：指定的媒体类型</li><li>renderer_context： 附加的字典信息，APIView和 @api_view会自动在马上就要返回给客户端的时候才会被渲染</li></ol><h3 id="标准的httpresponse对象" tabindex="-1"><a class="header-anchor" href="#标准的httpresponse对象" aria-hidden="true">#</a> 标准的HttpResponse对象</h3><ol><li>render()：渲染序列化之后的数据</li><li>.render(data, accepted_media_type, renderer_context) 渲染方式accepted_renderer的实例</li></ol>',11),c=t("br",null,null,-1),h=t("br",null,null,-1),_={href:"https://blog.csdn.net/runnoob_1115/article/details/78486828",target:"_blank",rel:"noopener noreferrer"};function R(m,u){const n=a("ExternalLinkIcon");return s(),o("div",null,[p,t("p",null,[e("————————————————"),c,e(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),h,e(" 原文链接："),t("a",_,[e("https://blog.csdn.net/runnoob_1115/article/details/78486828"),l(n)])])])}const x=r(d,[["render",R],["__file","Django-restframework10-Response对象.html.vue"]]);export{x as default};
