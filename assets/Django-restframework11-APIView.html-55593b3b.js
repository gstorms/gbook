import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as s,b as n,d as i,f as l}from"./app-731a6e06.js";const c={},r=l(`<h1 id="drf11-apiview" tabindex="-1"><a class="header-anchor" href="#drf11-apiview" aria-hidden="true">#</a> DRF11-APIView</h1><h2 id="_1-apiview与view的区别" tabindex="-1"><a class="header-anchor" href="#_1-apiview与view的区别" aria-hidden="true">#</a> 1. APIView与View的区别</h2><ol><li>APIView是View的子类</li><li>传递给请求处理程序的request实例是REST框架的请求实例，而不是Django的HttpRequest实例</li><li>处理程序返回的基于REST框架的Response，而不是Django的HttpResponse,视图函数将会管理内容协商，然后设置正确的渲染方式</li><li>任何APIException将会被捕捉，然后转换成合适的response对象</li><li>接收到的请求首先被认证，然后赋予相应的权限，然后通过节流器分发给相应的请求处理函数，类似.get()和.post()</li></ol><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> authentication<span class="token punctuation">,</span> permissions
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User

<span class="token keyword">class</span> <span class="token class-name">ListUsers</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    View to list all users in the system.

    * Requires token authentication.
    * Only admin users are able to access this view.
    &quot;&quot;&quot;</span>
    <span class="token comment"># 认证类，通过token认证</span>
    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>TokenAuthentication<span class="token punctuation">,</span><span class="token punctuation">)</span>
    <span class="token comment"># 权限赋予类，赋予管理员权限</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>IsAdminUser<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Return a list of all users.
        &quot;&quot;&quot;</span>
        <span class="token comment"># 返回用户名列表</span>
        usernames <span class="token operator">=</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>username <span class="token keyword">for</span> user <span class="token keyword">in</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>usernames<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-api策略属性-可插拔-设置" tabindex="-1"><a class="header-anchor" href="#_2-api策略属性-可插拔-设置" aria-hidden="true">#</a> 2. API策略属性（可插拔，设置）</h2><ol><li>renderer_classes： 渲染类</li><li>parser_classes： 解析类</li><li>authentication_classes： 认证类</li><li>throttle_classes： 节流类</li><li>permission_classes： 权限赋予类</li><li>content_negotiation_class： 内容协商类</li></ol><h2 id="_3-应用api策略的实例化方法-获取一个对象" tabindex="-1"><a class="header-anchor" href="#_3-应用api策略的实例化方法-获取一个对象" aria-hidden="true">#</a> 3. 应用API策略的实例化方法（获取一个对象）</h2><p>实现各种可插拔策略的实例化方法，一般不需要重写这些方法</p><ul><li>get_renderers(self)</li><li>get_parsers(self)</li><li>get_authenticators(self)</li><li>get_throttles(self)</li><li>get_permissions(self)</li><li>get_content_negotiator(self)</li><li>get_exception_handler(self)</li></ul><h2 id="_4-应用api政策的实施方法-调用方法-应用" tabindex="-1"><a class="header-anchor" href="#_4-应用api政策的实施方法-调用方法-应用" aria-hidden="true">#</a> 4. 应用API政策的实施方法（调用方法，应用）</h2><ul><li>.check_permissions(self, request)</li><li>.check_throttles(self, request)</li><li>.perform_content_negotiation(self, request, force=False)</li></ul><h2 id="_5-调度方法-将请求安排给相应的处理视图" tabindex="-1"><a class="header-anchor" href="#_5-调度方法-将请求安排给相应的处理视图" aria-hidden="true">#</a> 5. 调度方法（将请求安排给相应的处理视图）</h2><p>下面的方法都是由视图函数的dispatch()方法调用，做出的任何操作要么是在处理函数如.get(), .post(), put(), patch() and .delete()之前调用，要么是在之后。</p><ul><li>.initial(self, request, *args, **kwargs)<br> 初始化， 做出的任何操作都需要在视图处理函数之前调用，一般是用于赋予权限、限流和执行内容协议。</li><li>.handle_exception(self, exc)<br> 视图处理函数发生异常，将会被此函数捕捉到，然后抛出一个对象实例，或者再次向上抛出异常。默认处理的异常包含在rest_framework.exceptions.APIException中，也包括django的Http404 and PermissionDenied异常，然后返回一个合适的异常响应</li><li>.initialize_request(self, request, *args, **kwargs)<br> 将请求对象实例化为REST框架的Request对象，而不是Django HttpRequest</li><li>.finalize_response(self, request, response, *args, **kwargs)<br> 确保返回的任何Response已经按照文本协议渲染成正确的文本类型</li></ul><h2 id="_6-基于函数的视图" tabindex="-1"><a class="header-anchor" href="#_6-基于函数的视图" aria-hidden="true">#</a> 6. 基于函数的视图</h2><blockquote><p>基于类的视图通常是最优解是一个错误</p></blockquote><p>REST也提供一系列简单的装饰器，用来接受一个REST Request实例，然后返回一个REST Response实例，允许你配置这个请求是怎么被处理的。</p><h3 id="api-view-核心功能" tabindex="-1"><a class="header-anchor" href="#api-view-核心功能" aria-hidden="true">#</a> @api_view()核心功能</h3><p>@api_view(http_method_names=[‘GET’], exclude_from_schema=False)</p><ul><li>包含一系列需要处理的请求方法，例如一个返回数据的函数：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子用了在settings文件中设置的默认的renderers, parsers, authentication classes，默认只有GET方法被接受，其他方法将会返回”405 Method Not Allowed”. 为了接受更多的方法，我们可以在装饰器中传入接受的方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Got some data!&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以通过设置exclude_from_schema=True,除去任何自动添加的模式处理，返回原生的django对象？？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> exclude_from_schema<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">api_docs</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-api策略装饰器" tabindex="-1"><a class="header-anchor" href="#_7-api策略装饰器" aria-hidden="true">#</a> 7. API策略装饰器</h2><p>为了重写默认的配置，REST框架提供了一系列装饰器，但是必须注意他们的使用先后顺序，有的必须在@api_view之前，有的必须在其之后。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token punctuation">,</span> throttle_classes
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>throttling <span class="token keyword">import</span> UserRateThrottle

<span class="token keyword">class</span> <span class="token class-name">OncePerDayUserThrottle</span><span class="token punctuation">(</span>UserRateThrottle<span class="token punctuation">)</span><span class="token punctuation">:</span>
        rate <span class="token operator">=</span> <span class="token string">&#39;1/day&#39;</span>

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@throttle_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>OncePerDayUserThrottle<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello for today! See you tomorrow!&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可用的装饰器" tabindex="-1"><a class="header-anchor" href="#可用的装饰器" aria-hidden="true">#</a> 可用的装饰器：</h3><ul><li>@renderer_classes(…)</li><li>@parser_classes(…)</li><li>@authentication_classes(…)</li><li>@throttle_classes(…)</li><li>@permission_classes(…)<br> 每个装饰器都有一个单独的参数，必须是类列表或者类元组。</li></ul><blockquote><p>暂时（可能不准确）：<br> 先认证权限-限制然后分发处理函数-用户认证-解析数据-渲染序列化数据-返回数据</p></blockquote>`,32),u=s("br",null,null,-1),d=s("br",null,null,-1),k={href:"https://blog.csdn.net/runnoob_1115/article/details/78486842",target:"_blank",rel:"noopener noreferrer"};function v(m,h){const a=t("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[n("————————————————"),u,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),d,n(" 原文链接："),s("a",k,[n("https://blog.csdn.net/runnoob_1115/article/details/78486842"),i(a)])])])}const w=e(c,[["render",v],["__file","Django-restframework11-APIView.html.vue"]]);export{w as default};
