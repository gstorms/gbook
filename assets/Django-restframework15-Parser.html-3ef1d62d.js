import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,a as s,b as n,d as i,f as r}from"./app-cfbf85c1.js";const l={},c=r(`<h1 id="drf15-parser" tabindex="-1"><a class="header-anchor" href="#drf15-parser" aria-hidden="true">#</a> DRF15-Parser</h1><blockquote><p>机器与机器之间的网络交互倾向于使用更加复杂的结构化的数据，而不是简单的表单数据</p></blockquote><h2 id="_1-parser对象" tabindex="-1"><a class="header-anchor" href="#_1-parser对象" aria-hidden="true">#</a> 1.Parser对象</h2><blockquote><p>REST框架提供了一系列的内建Parser对象来对不同的媒体类型进行解析，也支持为API接口灵活的自定义Parser</p></blockquote><h3 id="如何选择合适的parser" tabindex="-1"><a class="header-anchor" href="#如何选择合适的parser" aria-hidden="true">#</a> 如何选择合适的Parser</h3><p>通常为一个viewset定义一个用于解析的Parser对象列表<br> 当接收到request.data时，REST框架首先检查请求头的Content-Type字段，然后决定使用哪种解析器来处理请求内容</p><p>注意：<br> 当你编写客户端应用程序时，发送HTTP请求时，一定要在请求头中设置Content-Type。<br> 如果你没有设置这个属性，大多数客户端默认使用’application/x-www-form-urlencoded’，但这有时并不是你想要的。<br> 例如当你用jQuery的ajax方法发送一个json编码的数据时，应该确保包含contentType: ‘application/json’设置。</p><h3 id="设置默认的解析器" tabindex="-1"><a class="header-anchor" href="#设置默认的解析器" aria-hidden="true">#</a> 设置默认的解析器</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.parsers.JSONParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以为基于APIView的单个视图类或者视图集合设置自己的Parser</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>parsers <span class="token keyword">import</span> JSONParser
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    一个能处理post提交的json数据的视图类
    &quot;&quot;&quot;</span>
    parser_classes <span class="token operator">=</span> <span class="token punctuation">(</span>JSONParser<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;received data&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用装饰器的视图函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> parser_classes

<span class="token comment"># 注意装饰器顺序</span>
<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@parser_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>JSONParser<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that can accept POST requests with JSON content.
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;received data&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-parser指南" tabindex="-1"><a class="header-anchor" href="#_2-parser指南" aria-hidden="true">#</a> 2.Parser指南</h2><h3 id="jsonparser" tabindex="-1"><a class="header-anchor" href="#jsonparser" aria-hidden="true">#</a> JSONParser</h3><p>.media_type: application/json</p><h3 id="formparser" tabindex="-1"><a class="header-anchor" href="#formparser" aria-hidden="true">#</a> FormParser</h3><p>用于解析HTML表单内容，请求数据会被QueryDict数据填充。一般需要同时使用FormParser和MultiPartParser。<br> .media_type: application/x-www-form-urlencoded</p><h3 id="multipartparser" tabindex="-1"><a class="header-anchor" href="#multipartparser" aria-hidden="true">#</a> MultiPartParser</h3><p>.media_type: multipart/form-data</p><h3 id="fileuploadparser" tabindex="-1"><a class="header-anchor" href="#fileuploadparser" aria-hidden="true">#</a> FileUploadParser</h3><p>用于解析上传的文件类容，request.data就是一个字典，{‘file’:content}<br> 如果调用FileUploadParser时，有传入filename参数，就使用其作为filename<br> 如果url中没有设置filename参数，那么客户端在请求头中就必须设置Content-Disposition，例如Content-Disposition: attachment; filename=upload.jpg<br> .media_type: /<br> 注意：</p><ul><li>FileUploadParser一般用于解析原生客户端上传未经加工的数据。基于web网络的上传，或者原生客户端想将文件分成多部分上传，应该使用MultiPartParser。</li><li>因为media_type能匹配其他的各种类型，所以FileUploadParser应该被设置在APIView内部</li><li>FileUploadParser尊重Django的FILE_UPLOAD_HANDLERS和request.upload_handlers设置<br> 使用示例</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">FileUploadView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser_classes <span class="token operator">=</span> <span class="token punctuation">(</span>FileUploadParser<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        file_obj <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">]</span>
        <span class="token comment"># ...</span>
        <span class="token comment"># do some stuff with uploaded file</span>
        <span class="token comment"># ...</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">204</span><span class="token punctuation">)</span>

<span class="token comment"># urls.py</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># ...</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^upload/(?P&lt;filename&gt;[^/]+)$&#39;</span><span class="token punctuation">,</span> FileUploadView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-个性化解析器" tabindex="-1"><a class="header-anchor" href="#_3-个性化解析器" aria-hidden="true">#</a> 3.个性化解析器</h2><p>为了实现个性化解析器，需要重写BaseParser，设置.media_type属性，然后实现.parse(self, stream, media_type, parser_context)方法，该方法用于填充request.data。</p><ul><li>stream<br> 类似流对象，用于代表请求正文</li><li>media_type<br> 可选项，用于表明请求内容的媒体类型（Content-Type:）</li><li>parser_context<br> 可选项，字典参数，包含请求附加的需要解析的内容。默认包含（view, request, args, kwargs）这几个键<br> 使用示例</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PlainTextParser</span><span class="token punctuation">(</span>BaseParser<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Plain text parser.
    &quot;&quot;&quot;</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>

    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> parser_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Simply return a string representing the body of the request.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> stream<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-第三方包" tabindex="-1"><a class="header-anchor" href="#_4-第三方包" aria-hidden="true">#</a> 4.第三方包</h2><h3 id="yaml-djangorestframework-yaml" tabindex="-1"><a class="header-anchor" href="#yaml-djangorestframework-yaml" aria-hidden="true">#</a> YAML（djangorestframework-yaml）</h3><p>以前是REST框架内置的包，现在是作为三方包存在，需要另外安装</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>设置默认的解析器和渲染器
REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_yaml.parsers.YAMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_yaml.renderers.YAMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xml-djangorestframework-xml" tabindex="-1"><a class="header-anchor" href="#xml-djangorestframework-xml" aria-hidden="true">#</a> XML（djangorestframework-xml）</h3><p>以前是REST框架内置的包，现在是作为三方包存在，需要另外安装</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PARSER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_xml.parsers.XMLParser&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework_xml.renderers.XMLRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="messagepack" tabindex="-1"><a class="header-anchor" href="#messagepack" aria-hidden="true">#</a> MessagePack</h3><p>MessagePack是一种高效的二进制序列化形式，提供render和parser</p><h3 id="camelcase-json" tabindex="-1"><a class="header-anchor" href="#camelcase-json" aria-hidden="true">#</a> CamelCase JSON</h3>`,38),u=s("br",null,null,-1),d=s("br",null,null,-1),k={href:"https://blog.csdn.net/runnoob_1115/article/details/78486972",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=t("ExternalLinkIcon");return p(),o("div",null,[c,s("p",null,[n("————————————————"),u,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),d,n(" 原文链接："),s("a",k,[n("https://blog.csdn.net/runnoob_1115/article/details/78486972"),i(a)])])])}const _=e(l,[["render",m],["__file","Django-restframework15-Parser.html.vue"]]);export{_ as default};
