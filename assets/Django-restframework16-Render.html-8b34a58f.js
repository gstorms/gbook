import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as s,d as e,f as t}from"./app-731a6e06.js";const r={},c=n("h1",{id:"drf16-render",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#drf16-render","aria-hidden":"true"},"#"),s(" DRF16-Render")],-1),u=n("blockquote",null,[n("p",null,"在模版响应返回给客户端之前，必须被渲染。渲染进程将模板和正文之间中间内容渲染成客户端能够接受的二进制流")],-1),d=n("h2",{id:"_1-如何决定使用什么渲染器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-如何决定使用什么渲染器","aria-hidden":"true"},"#"),s(" 1.如何决定使用什么渲染器")],-1),k=n("br",null,null,-1),m={href:"http://example.com/api/users_count.json",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="_2-设置渲染器" tabindex="-1"><a class="header-anchor" href="#_2-设置渲染器" aria-hidden="true">#</a> 2.设置渲染器</h2><p>通过settings文件设置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.renderers.JSONRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.BrowsableAPIRenderer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单一APIView</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> JSONRenderer
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">UserCountView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that returns the count of active users in JSON.
    &quot;&quot;&quot;</span>
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">(</span>JSONRenderer<span class="token punctuation">,</span> <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 返回当前在线用户数量</span>
        user_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;user_count&#39;</span><span class="token punctuation">:</span> user_count<span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用装饰器</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>JSONRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">user_count_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that returns the count of active users in JSON.
    &quot;&quot;&quot;</span>
    user_count <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;user_count&#39;</span><span class="token punctuation">:</span> user_count<span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-渲染器顺序" tabindex="-1"><a class="header-anchor" href="#_3-渲染器顺序" aria-hidden="true">#</a> 3.渲染器顺序</h2><p>请求中如果没有指定接受的渲染器类型（Accept），默认使用renderer_classes中的第一个渲染器进行解析<br> 如果你的接口包含的视图函数既能提供正常的网页访问，又能作为API接口返回响应对象，那么你应该考虑使用TemplateHTMLRenderer作为默认renderer.</p><h2 id="_4-渲染器指南" tabindex="-1"><a class="header-anchor" href="#_4-渲染器指南" aria-hidden="true">#</a> 4.渲染器指南</h2><h3 id="jsonrenderer" tabindex="-1"><a class="header-anchor" href="#jsonrenderer" aria-hidden="true">#</a> JSONRenderer</h3><p>以utf-8进行编码，返回JSON数据<br> 默认风格包含unicode字符， 返回的数据十分紧凑，没有不必要的空格。如果想要缩进，可以在请求的时候设置‘intent’参数，如Accept: application/json; indent=4，如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;unicode black star&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;★&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;value&quot;</span><span class="token punctuation">:</span> <span class="token number">999</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSON的编码方式可以通过修改UNICODE_JSON和COMPACT_JSON键值实现</p><ul><li>media_type: application/json</li><li>format: ‘.json’</li><li>charset: None</li></ul><h3 id="templatehtmlrenderer" tabindex="-1"><a class="header-anchor" href="#templatehtmlrenderer" aria-hidden="true">#</a> TemplateHTMLRenderer</h3><p>利用django的默认模版进行渲染，返回HTML数据。与其它渲染器的区别：</p><ul><li>返回的数据不要进行序列化</li><li>当你创建一个响应对象的时候，想包含一个template_name参数</li></ul><p>TemplateHTMLRenderer渲染器利用响应数据作为上下文字典，然后确定一个template_name用来渲染正文，template_name的优先顺序为：</p><ul><li>首先通过查看传递给response对象的参数中有没有template_name参数；</li><li>然后查看视图类中是否设置了template_name属性；</li><li>最后通过调用view.get_template_names()方法获取template_name。<br> 使用实例：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserDetail</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>RetrieveAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A view that returns a templated HTML representation of a given user.
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    renderer_classes <span class="token operator">=</span> <span class="token punctuation">(</span>TemplateHTMLRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">object</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 优先级最高的template_name</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">}</span><span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token string">&#39;user_detail.html&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过使用TemplateHTMLRenderer返回一个普通的HTML网页，也可以从一个路径返回网页和API 响应对象。<br> 如果在构建一个网站的时候，使用了TemplateHTMLRenderer和其他渲染器，你应该将TemplateHTMLRenderer放在renderer_classes的第一个，以处理用户请求头中并未确切指明ACCEPT:参数的情况。</p><ul><li><p>.media_type: text/html</p></li><li><p>.format: ‘.html’</p></li><li><p>.charset: utf-8</p></li></ul><h3 id="statichtmlrenderer" tabindex="-1"><a class="header-anchor" href="#statichtmlrenderer" aria-hidden="true">#</a> StaticHTMLRenderer</h3><p>以字符串的形式，返回一个事先编写好的HTML网页</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>StaticHTMLRenderer<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">simple_html_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token string">&#39;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>.media_type: text/html</li><li>.format: ‘.html’</li><li>.charset: utf-8</li></ul><h3 id="browsableapirenderer" tabindex="-1"><a class="header-anchor" href="#browsableapirenderer" aria-hidden="true">#</a> BrowsableAPIRenderer</h3><p>可浏览的API，将数据输出到网页上显示，在网页中可以确定到底哪一个渲染器的优先级最高，测试用</p><ul><li><p>.media_type: text/html</p></li><li><p>.format: ‘.api’</p></li><li><p>.charset: utf-8</p></li><li><p>.template: ‘rest_framework/api.html’</p></li></ul><h3 id="定制browsableapirenderer" tabindex="-1"><a class="header-anchor" href="#定制browsableapirenderer" aria-hidden="true">#</a> 定制BrowsableAPIRenderer</h3><p>默认为优先级最高的渲染器渲染，你可以重写get_default_renderer()方法，返回你需要显示的渲染器渲染结果</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomBrowsableAPIRenderer</span><span class="token punctuation">(</span>BrowsableAPIRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_default_renderer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> JSONRenderer<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adminrenderer" tabindex="-1"><a class="header-anchor" href="#adminrenderer" aria-hidden="true">#</a> AdminRenderer</h3><p>将数据呈现为管理员的显示格式，用于管理接口数据（CRUD-style）<br> AdminRenderer对于嵌套了或者说包含了序列化器的视图的输入支持并不友好，因为HTML表单不支持该数据类型。<br> 注意：<br> 当继承了HyperlinkedModelSerializer的serializer类中包含了url字段，AdminRenderer才会显示单个实例的详情页链接。<br> 对于其他的ModelSerializer或者普通Serializer类，需要确保包含url字段：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;get_absolute_url&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>.media_type: text/html</li><li>.format: ‘.admin’</li><li>.charset: utf-8</li><li>.template: ‘rest_framework/admin.html’</li></ul><h3 id="htmlformrenderer" tabindex="-1"><a class="header-anchor" href="#htmlformrenderer" aria-hidden="true">#</a> HTMLFormRenderer</h3><p>将序列化数据转化成HTML 表单数据， 输出不包含标签，csrf_token和任何submit按钮。一般我们不会单独使用，而是通过render_form标签在template中用于解析一个序列化实例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token operator">%</span> load rest_framework <span class="token operator">%</span><span class="token punctuation">}</span>

<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">&quot;/submit-report/&quot;</span> method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> csrf_token <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> render_form serializer <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;Save&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>.media_type: text/html</li><li>.format: ‘.form’</li><li>.charset: utf-8</li><li>.template: ‘rest_framework/horizontal/form.html’</li></ul><h3 id="multipartrenderer" tabindex="-1"><a class="header-anchor" href="#multipartrenderer" aria-hidden="true">#</a> MultiPartRenderer</h3><p>用于处理分段传输的表单数据（如文件等），不适合作为一个响应对象渲染器，通常用于创建测试请求。</p><ul><li><p>.media_type: multipart/form-data; boundary=BoUnDaRyStRiNg</p></li><li><p>.format: ‘.multipart’</p></li><li><p>.charset: utf-8</p></li></ul><h3 id="自定义renderers" tabindex="-1"><a class="header-anchor" href="#自定义renderers" aria-hidden="true">#</a> 自定义renderers</h3><ul><li>重写BaseRenderer</li><li>设置.media_type和.format属性</li><li>实现.render(self, data, media_type=None, renderer_context=None)方法</li></ul><p>data:请求数据，由Response对象设置<br> media_type=None，返回数据类型<br> renderer_context=None，视图函数提供的上下文信息字典，默认键有view, request, response, args, kwargs.<br> 示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>encoding <span class="token keyword">import</span> smart_unicode
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> renderers


<span class="token keyword">class</span> <span class="token class-name">PlainTextRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;txt&#39;</span>

    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>charset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置编码：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PlainTextRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;txt&#39;</span>
    charset <span class="token operator">=</span> <span class="token string">&#39;iso-8859-1&#39;</span>

    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>self<span class="token punctuation">.</span>charset<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<br> 如果渲染类返回了一个unicode编码的字符串，响应对象将其转换成bytestring形式，然后将render类的charset属性强制设置在response显示的对象上。<br> 如果渲染器返回了一个原生的二进制内容，应该将charset值设置为None,以确保返回的Content-Type响应头中， charset没有被设置值<br> 有时你想将render_style属性设置为’binary’，以确保显示窗口不会将其作为字符串显示了</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 图片渲染示例</span>
<span class="token keyword">class</span> <span class="token class-name">JPEGRenderer</span><span class="token punctuation">(</span>renderers<span class="token punctuation">.</span>BaseRenderer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    media_type <span class="token operator">=</span> <span class="token string">&#39;image/jpeg&#39;</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;jpg&#39;</span>
    charset <span class="token operator">=</span> <span class="token boolean">None</span>
    render_style <span class="token operator">=</span> <span class="token string">&#39;binary&#39;</span>

    <span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> renderer_context<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-高级渲染器使用" tabindex="-1"><a class="header-anchor" href="#_5-高级渲染器使用" aria-hidden="true">#</a> 5.高级渲染器使用</h2><p>灵活使用REST框架的渲染器：</p><ul><li>根据请求媒体类型，从同一端点嵌套显示或者扁平显示</li><li>同一端点显示正常的HTML或者JSON数据</li><li>为API客户端提供多种HTML显示形式</li><li>未提供明确类型的， 比如media_type = ‘image/*’，使用Accept请求头设置合适的编码方式</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TemplateHTMLRenderer<span class="token punctuation">,</span> JSONRenderer<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">list_users</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    能够返回json和html的视图
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Users<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>active<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> request<span class="token punctuation">.</span>accepted_renderer<span class="token punctuation">.</span><span class="token builtin">format</span> <span class="token operator">==</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">:</span>
        <span class="token comment"># TemplateHTMLRenderer takes a context dict,</span>
        <span class="token comment"># and additionally requires a &#39;template_name&#39;.</span>
        <span class="token comment"># It does not require serialization.</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">:</span> queryset<span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> template_name<span class="token operator">=</span><span class="token string">&#39;list_users.html&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># JSONRenderer requires serialized data as normal.</span>
    serializer <span class="token operator">=</span> UserSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>queryset<span class="token punctuation">)</span>
    data <span class="token operator">=</span> serializer<span class="token punctuation">.</span>data
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有时你想渲染一定范围的媒体类型，你可以使用通配形式，如image/<em>，或者</em>/*，那么响应对象就应该设置明确的content_type参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-设计自己的媒体类型" tabindex="-1"><a class="header-anchor" href="#_6-设计自己的媒体类型" aria-hidden="true">#</a> 6 设计自己的媒体类型</h2>`,59),b=n("br",null,null,-1),h={href:"https://developer.github.com/v3/media/",target:"_blank",rel:"noopener noreferrer"},_=t('<h2 id="_7-html错误响应视图函数" tabindex="-1"><a class="header-anchor" href="#_7-html错误响应视图函数" aria-hidden="true">#</a> 7 HTML错误响应视图函数</h2><p>通常来说，一个渲染器类始终保持一致的行为，不管是在处理正常的response还是异常的response对象（Http404，PermissionDenied等）<br> 当你在使用TemplateHTMLRenderer或者StaticHTMLRenderer时，对于异常处理可能有轻微的不同。HTML renderer依次尝试以下方法：</p><ol><li>载入，然后渲染template_name为{status_code}.html的网页</li><li>载入，渲染template_name为api_exception.html的网页</li><li>渲染状态码和文本，如“404 Not Found”<br> 如果设置中DEBUG=True，开启了测试模式，Django’s的标准异常处理页将会代替HTTP异常状态码和文本（最后一种！）</li></ol><h2 id="_8-第三方包" tabindex="-1"><a class="header-anchor" href="#_8-第三方包" aria-hidden="true">#</a> 8 第三方包</h2><ol><li>YAML</li><li>XML</li><li>JSONP（djangorestframework-jsonp）</li></ol><p>如果想要使用跨域请求，则应该使用CORS<br> jsonp方法本质上是一种浏览器攻击，只适合全局可读的API端点，在那里GET请求是未经身份验证的，不需要任何用户权限。</p><ol start="4"><li>MessagePack</li><li>CSV（使用逗号作为分隔符）</li><li>UltraJSON（使用C语言的更快的json实现）</li><li>CamelCase JSON</li><li>Pandas (CSV, Excel, PNG)</li><li>LaTeX（ PDF）</li></ol>',7),g=n("br",null,null,-1),f=n("br",null,null,-1),y={href:"https://blog.csdn.net/runnoob_1115/article/details/78497635",target:"_blank",rel:"noopener noreferrer"};function w(R,x){const a=o("ExternalLinkIcon");return l(),i("div",null,[c,u,d,n("p",null,[s("渲染器通常和解析器一样由一系列类列表组成"),k,s(" 一般检查请求头，另外就是路由后缀（ "),n("a",m,[s("http://example.com/api/users_count.json"),e(a)]),s("）")]),v,n("p",null,[s("REST API应该花费几乎所有的描述性工作来定义用于表示资源和应用程序状态的媒体类型(s)，或者为现有标准媒体类型定义扩展关系名称和/或超文本启用标记"),b,s(" 设计示例："),n("a",h,[s("https://developer.github.com/v3/media/"),e(a)])]),_,n("p",null,[s("————————————————"),g,s(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),f,s(" 原文链接："),n("a",y,[s("https://blog.csdn.net/runnoob_1115/article/details/78497635"),e(a)])])])}const N=p(r,[["render",w],["__file","Django-restframework16-Render.html.vue"]]);export{N as default};
