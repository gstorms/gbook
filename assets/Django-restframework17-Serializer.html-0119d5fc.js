import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as o,a as n,b as s,d as l,f as a}from"./app-d0fb0332.js";const c={},u=a(`<h1 id="drf17-serializer" tabindex="-1"><a class="header-anchor" href="#drf17-serializer" aria-hidden="true">#</a> DRF17-Serializer</h1><h2 id="_1-serializers" tabindex="-1"><a class="header-anchor" href="#_1-serializers" aria-hidden="true">#</a> 1 Serializers</h2><h3 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1 简介</h3><p>序列化器允许将诸如queryset和模型实例之类的复杂数据转换为原生的Python数据类型，这些数据类型可以很容易地转换为JSON、XML或其他内容类型。序列化器还提供反序列化，允许解析后的数据在第一次验证传入数据之后被转换回复杂类型。<br> REST框架中的序列化器与Django的表单和模型类的工作非常相似。框架提供了一个Serializer类，使用一种强大的、通用的方法来控制响应的输出，和一个ModelSerializer类，它为创建处理模型实例和queryset的序列化器提供了一个有用的快捷方式。</p><h3 id="_2-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-使用示例" aria-hidden="true">#</a> 2 使用示例</h3><h4 id="_1-创建一个对象" tabindex="-1"><a class="header-anchor" href="#_1-创建一个对象" aria-hidden="true">#</a> 1.创建一个对象</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime

<span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> email<span class="token punctuation">,</span> content<span class="token punctuation">,</span> created<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email
        self<span class="token punctuation">.</span>content <span class="token operator">=</span> content
        self<span class="token punctuation">.</span>created <span class="token operator">=</span> created <span class="token keyword">or</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>

comment <span class="token operator">=</span> Comment<span class="token punctuation">(</span>email<span class="token operator">=</span><span class="token string">&#39;leila@example.com&#39;</span><span class="token punctuation">,</span> content<span class="token operator">=</span><span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-声明一个serializer类-提供序列化和反序列化方法" tabindex="-1"><a class="header-anchor" href="#_2-声明一个serializer类-提供序列化和反序列化方法" aria-hidden="true">#</a> 2. 声明一个serializer类，提供序列化和反序列化方法</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers

<span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    email <span class="token operator">=</span> serializers<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-序列化对象-转化为python的原生数据类型-再转化为其他格式" tabindex="-1"><a class="header-anchor" href="#_3-序列化对象-转化为python的原生数据类型-再转化为其他格式" aria-hidden="true">#</a> 3. 序列化对象（转化为python的原生数据类型，再转化为其他格式）</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>comment<span class="token punctuation">)</span>
serializer<span class="token punctuation">.</span>data
<span class="token comment"># {&#39;email&#39;: &#39;leila@example.com&#39;, &#39;content&#39;: &#39;foo bar&#39;, &#39;created&#39;: &#39;2016-01-27T15:17:10.375877&#39;}</span>
<span class="token comment"># 装换成json数据类型</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> JSONRenderer

json <span class="token operator">=</span> JSONRenderer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
json
<span class="token comment"># b&#39;{&quot;email&quot;:&quot;leila@example.com&quot;,&quot;content&quot;:&quot;foo bar&quot;,&quot;created&quot;:&quot;2016-01-27T15:17:10.375877&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-反序列化对象-首先将数据流转化为python原生数据" tabindex="-1"><a class="header-anchor" href="#_4-反序列化对象-首先将数据流转化为python原生数据" aria-hidden="true">#</a> 4. 反序列化对象（首先将数据流转化为python原生数据）</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>six <span class="token keyword">import</span> BytesIO
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>parsers <span class="token keyword">import</span> JSONParser

<span class="token comment"># 转化成数据流</span>
stream <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>json<span class="token punctuation">)</span>
<span class="token comment"># 使用json解析器转化成python原生数据类型，从字符串中解析出json对象</span>
data <span class="token operator">=</span> JSONParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parse<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>
<span class="token comment"># 将这些原生数据恢复到验证字典中</span>
serializer <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># True</span>
serializer<span class="token punctuation">.</span>validated_data
<span class="token comment"># {&#39;content&#39;: &#39;foo bar&#39;, &#39;email&#39;: &#39;leila@example.com&#39;, &#39;created&#39;: datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-保存实例" tabindex="-1"><a class="header-anchor" href="#_5-保存实例" aria-hidden="true">#</a> 5. 保存实例</h4><p>如果我们想返回一个完整的对爱实例，那么我们必须基于validated data实现一个.create()或update()方法，或者两个都实现</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    email <span class="token operator">=</span> serializers<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Comment<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        instance<span class="token punctuation">.</span>email <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>email<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>content <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>created <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;created&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>created<span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对象与数据模型一致，也想保存对象到数据库模型中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用数据库模型对象进行创建</span>
    <span class="token keyword">return</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    instance<span class="token punctuation">.</span>email <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>email<span class="token punctuation">)</span>
    instance<span class="token punctuation">.</span>content <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
    instance<span class="token punctuation">.</span>created <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;created&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>created<span class="token punctuation">)</span>
    instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> instance
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们对通过验证的对象进行保存</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>comment <span class="token operator">=</span> serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>.save()方法到底是更新还是创建，取决于我们是否传入一个已经存在的序列化实例，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># .save()将会创建一个新的实例</span>
serializer <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>

<span class="token comment"># .save()将会更新已经存在的comment实例</span>
serializer <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>comment<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存时添加附加属性<br> 有时，您希望您的视图代码能够在保存实例的时候注入额外的数据。这些额外的数据可能包括当前用户、当前时间或其他不属于请求数据的信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>owner<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加的附加信息也会被包含在validated_data中，然后传入到.create()或update（）函数中去<br> 重写保存方法<br> 有时created（）和update（）方法名字命名不能传达出实际意义，就需要重写，如下， 你应该重写方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ContactForm</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    email <span class="token operator">=</span> serializers<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    message <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        email <span class="token operator">=</span> self<span class="token punctuation">.</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span>
        message <span class="token operator">=</span> self<span class="token punctuation">.</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">]</span>
        send_email<span class="token punctuation">(</span><span class="token keyword">from</span><span class="token operator">=</span>email<span class="token punctuation">,</span> message<span class="token operator">=</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-验证" tabindex="-1"><a class="header-anchor" href="#_6-验证" aria-hidden="true">#</a> 6.验证</h4><p>在反序列化数据时，在获取validated_data或保存实例前需要调用is_valid()方法，如果验证时发生了错误，serializer.errors将会包含发生的错误信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># False</span>
serializer<span class="token punctuation">.</span>errors
<span class="token comment"># {&#39;email&#39;: [u&#39;Enter a valid e-mail address.&#39;], &#39;created&#39;: [u&#39;This field is required.&#39;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误字典中的每一个键都应该是字段名，non_field_errors也会列出具体的字段信息，可以通过<br> 框架设置NON_FIELD_ERRORS_KEY来设置non_field_errors的字段名。<br> 对于验证不合法的数据也可以抛出异常，设置raise_exception=True.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Return a 400 response if the data was invalid.</span>
serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单个字段验证</strong><br> 添加.validate_方法（类似.clean_方法），如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers

<span class="token comment"># 博客提交时的标题必须含有‘django’</span>
<span class="token keyword">class</span> <span class="token class-name">BlogPostSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    title <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">validate_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Check that the blog post is about Django.
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token string">&#39;django&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> value<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">&quot;Blog post is not about Django&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果字段设置了required=False，而且提交的时候没有包含这个字段，那么就不会被验证<br> 如果需要对多个字段的值进行比较验证，应该重写.validate()方法，返回validated values或抛出ValidationError。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers

<span class="token keyword">class</span> <span class="token class-name">EventSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    description <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    start <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    finish <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Check that the start is before the stop.
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> data<span class="token punctuation">[</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> data<span class="token punctuation">[</span><span class="token string">&#39;finish&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">&quot;finish must occur after start&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化上的每个字段都可以包含验证器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">multiple_of_ten</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> value <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">&#39;Not a multiple of ten&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">GameRecord</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    score <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>multiple_of_ten<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可重用的验证类，在元类中声明：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">EventSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    room_number <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    date <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        <span class="token comment"># 每天每间房只能干一件事</span>
        validators <span class="token operator">=</span> UniqueTogetherValidator<span class="token punctuation">(</span>
            queryset<span class="token operator">=</span>Event<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            fields<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;room_number&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-访问初始数据和实例" tabindex="-1"><a class="header-anchor" href="#_7-访问初始数据和实例" aria-hidden="true">#</a> 7. 访问初始数据和实例</h4><p>当将初始对象或queryset传递给序列化器实例时，对象将被作为.instance调用。如果没有初始对象被传递，那么.instance的值将为None。<br> 当将数据传递给序列化器实例时，未修改的数据将被作为.initial_data提供。如果没有传递，那么initial_data属性将不存在。</p><h4 id="_8-部分更新" tabindex="-1"><a class="header-anchor" href="#_8-部分更新" aria-hidden="true">#</a> 8. 部分更新</h4><p>默认需要传入全部字段，否则会产生错误，可以利用partial参数，只传入需要更新的字段</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Update \`comment\` with partial data</span>
serializer <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>comment<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">u&#39;foo bar&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> partial<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-处理嵌套对象" tabindex="-1"><a class="header-anchor" href="#_9-处理嵌套对象" aria-hidden="true">#</a> 9. 处理嵌套对象</h4><p>serializer本身也是一个字段类型field，可以作为其他序列化类中的字段类型，如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    email <span class="token operator">=</span> serializers<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    username <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用了其他序列化器，来形成嵌套，如果允许为空，接受None值，应该设置required=False</span>
    <span class="token comment">#  user = UserSerializer(required=False) 即允许匿名对象评论</span>
    user <span class="token operator">=</span> UserSerializer<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 如果传入的序列化器是一系列对象，应该设置many=True</span>
    edits <span class="token operator">=</span> EditItemSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer <span class="token operator">=</span> CommentSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;doe&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 嵌套对象也会被验证</span>
serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># False</span>
serializer<span class="token punctuation">.</span>errors
<span class="token comment"># {&#39;user&#39;: {&#39;email&#39;: [u&#39;Enter a valid e-mail address.&#39;]}, &#39;created&#39;: [u&#39;This field is required.&#39;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写一个create（）方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    profile <span class="token operator">=</span> ProfileSerializer<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> User
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;profile&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># pop方法使用最后传入的数据</span>
        profile_data <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;profile&#39;</span><span class="token punctuation">)</span>
        user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>
        Profile<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">,</span> <span class="token operator">**</span>profile_data<span class="token punctuation">)</span>
        <span class="token keyword">return</span> user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写一个update方法,需要对所有类进行更新，首先获取原对象，然后根据是否传入新的数据更新对象。如果相关数据为None或者没有提供，如何进行处理：</p><ul><li>设置相关对象值为Null</li><li>删除相关实例</li><li>无视数据，保持原数据</li><li>抛出一个错误</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        profile_data <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;profile&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 除非应用强制此字段必须被设置，接下来可能会抛出需要处理\`DoesNotExist’的异常</span>
        <span class="token comment"># 获取原来的profile实例</span>
        profile <span class="token operator">=</span> instance<span class="token punctuation">.</span>profile

        <span class="token comment"># 获取新的信息，如果不存在就使用以前的信息</span>
        instance<span class="token punctuation">.</span>username <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>username<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>email <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>email<span class="token punctuation">)</span>
        instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment"># profile是否是优质成员，profile属性</span>
        profile<span class="token punctuation">.</span>is_premium_member <span class="token operator">=</span> profile_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
            <span class="token string">&#39;is_premium_member&#39;</span><span class="token punctuation">,</span>
            profile<span class="token punctuation">.</span>is_premium_member
        <span class="token punctuation">)</span>
        <span class="token comment"># profile是否支持协议，profile属性</span>
        profile<span class="token punctuation">.</span>has_support_contract <span class="token operator">=</span> profile_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
            <span class="token string">&#39;has_support_contract&#39;</span><span class="token punctuation">,</span>
            profile<span class="token punctuation">.</span>has_support_contract
         <span class="token punctuation">)</span>
        profile<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> instance
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于嵌套的对象的更新和创建有着复杂的依赖关系，所以REST3要求用户自己编写嵌套列表的更新和创建操作，默认不再包含。<br> 也有第三方包提供自动创建一些自动更新和创建嵌套对象的操作<br> 在模型管理器中处理保存操作<br> 在序列化类中处理多个相关实例的方法是编写个性化的模型管理类来处理创建操作，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserManager</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Manager<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment"># 确保了user实例和profiles实例是同时创建的</span>
    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> is_premium_member<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> has_support_contract<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> email<span class="token operator">=</span>email<span class="token punctuation">)</span>
        user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
        profile <span class="token operator">=</span> Profile<span class="token punctuation">(</span>
            user<span class="token operator">=</span>user<span class="token punctuation">,</span>
            is_premium_member<span class="token operator">=</span>is_premium_member<span class="token punctuation">,</span>
            has_support_contract<span class="token operator">=</span>has_support_contract
        <span class="token punctuation">)</span>
        profile<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> user
<span class="token comment"># 然后序列化类中的创建方法也可以重写为</span>
<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>
        username<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        email<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span>
        is_premium_member<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;profile&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;is_premium_member&#39;</span><span class="token punctuation">]</span>
        has_support_contract<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;profile&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;has_support_contract&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-处理多个对象" tabindex="-1"><a class="header-anchor" href="#_10-处理多个对象" aria-hidden="true">#</a> 10. 处理多个对象</h4><p>Serializer也可以处理多个对象</p><ul><li>序列化多个对象<br> 设置many=True就可以</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>queryset <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
serializer <span class="token operator">=</span> BookSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
serializer<span class="token punctuation">.</span>data
<span class="token comment"># [</span>
<span class="token comment">#     {&#39;id&#39;: 0, &#39;title&#39;: &#39;The electric kool-aid acid test&#39;, &#39;author&#39;: &#39;Tom Wolfe&#39;},</span>
<span class="token comment">#     {&#39;id&#39;: 1, &#39;title&#39;: &#39;If this is a man&#39;, &#39;author&#39;: &#39;Primo Levi&#39;},</span>
<span class="token comment">#     {&#39;id&#39;: 2, &#39;title&#39;: &#39;The wind-up bird chronicle&#39;, &#39;author&#39;: &#39;Haruki Murakami&#39;}</span>
<span class="token comment"># ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-反序列化多个对象<br> 默认支持多个对象创建，但不支持多个对象同时更新。若需要支持多个对象同时更新，需要自定义</p><h4 id="_11-包含额外的上下文" tabindex="-1"><a class="header-anchor" href="#_11-包含额外的上下文" aria-hidden="true">#</a> 11. 包含额外的上下文</h4><p>有时你需要提供额外的上下文使对象能够被正确的序列化。比如你准备序列化一个包含一个超链接事务，你需要序列化类能够使用目前的request对象来生成合格的url.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer <span class="token operator">=</span> AccountSerializer<span class="token punctuation">(</span>account<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>
serializer<span class="token punctuation">.</span>data
<span class="token comment"># {&#39;id&#39;: 6, &#39;owner&#39;: u&#39;denvercoder9&#39;, &#39;created&#39;: datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), &#39;details&#39;: &#39;http://example.com/accounts/6/details&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上下文字典可以使用在任何序列化字段中，例如可以自定义一个.to_representation()方法，查看self.context属性</p><h2 id="_3-modelserializer" tabindex="-1"><a class="header-anchor" href="#_3-modelserializer" aria-hidden="true">#</a> 3 ModelSerializer</h2><p>你通常会想定义一个与数据库模型密切相关的序列化类。 ModelSerializer类提供了一个快捷方式，使你能够自动创建一个字段与模型一致的序列化类。<br> ModelSerializer与Serializer的区别：</p><ul><li>自动基于数据库模型生成一系列字段</li><li>自动为序列化类生成验证函数，例如唯一性验证</li><li>包含简单的.create()和.update()，嵌套的需要自己编写</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，类中所有字段都与模型一致，模型中的foreignkey，在序列化类中将会变成PrimaryKeyRelatedField。反向关系在默认情况下是不包含的，除非你在 serializer关系文档中明确声明了。<br> 检查ModelSerializer<br> 可以查看ModelSerializers到底为你创建了哪些字段以及详细内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> AccountSerializer
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer <span class="token operator">=</span> AccountSerializer<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">)</span>
AccountSerializer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> CharField<span class="token punctuation">(</span>allow_blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    owner <span class="token operator">=</span> PrimaryKeyRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1指定包含的字段" tabindex="-1"><a class="header-anchor" href="#_1指定包含的字段" aria-hidden="true">#</a> 1指定包含的字段</h3><p>使用modelSerializer时，如果想仅包含部分字段，可以通过设置fields或者exclude属性。强烈建议显示的设置需要显示的所有字段，这样模型改变时，就不会无意间暴露数据。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以将fields属性设置为’<strong>all</strong>‘，不过不推荐。exclude：不显示谁。</p><h3 id="_2指定显示嵌套对象的显示深度" tabindex="-1"><a class="header-anchor" href="#_2指定显示嵌套对象的显示深度" aria-hidden="true">#</a> 2指定显示嵌套对象的显示深度</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
        depth <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3明确的指出字段" tabindex="-1"><a class="header-anchor" href="#_3明确的指出字段" aria-hidden="true">#</a> 3明确的指出字段</h3><p>可以添加额外的字段，或者重写默认的字段，额外的字段应该与模型字段一致，或者能够在模型中调用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>source<span class="token operator">=</span><span class="token string">&#39;get_absolute_url&#39;</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    groups <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4指定只读字段" tabindex="-1"><a class="header-anchor" href="#_4指定只读字段" aria-hidden="true">#</a> 4指定只读字段</h3><p>你可能想将多个字段同时指定为只读属性，而不是一个个添加read_only=True属性，你可以使用meta中的可选项：read_only_fields.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
        read_only_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模型字段中如果设置为AutoField和editable=False，将被自动设置为只读<br> 有一个特殊的具有只读属性的例子是unique_together，它要求序列化类对其进行验证，但又不能被用户编辑。正确处理方式，是给字段设置属性read_only=True和default=…，例如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> default<span class="token operator">=</span>serializers<span class="token punctuation">.</span>CurrentUserDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-附加的关键字参数" tabindex="-1"><a class="header-anchor" href="#_5-附加的关键字参数" aria-hidden="true">#</a> 5. 附加的关键字参数</h3><p>extra_kwargs参数能够为一个字段快捷的提供多个附加参数，这样就不用在fields字段中声明</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CreateUserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> User
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span>
        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;write_only&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> User<span class="token punctuation">(</span>
            email<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            username<span class="token operator">=</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>validated_data<span class="token punctuation">[</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-相关字段" tabindex="-1"><a class="header-anchor" href="#_6-相关字段" aria-hidden="true">#</a> 6. 相关字段</h3><p>在序列化模型实例时，有多种方式用来表现关系，ModelSerializer默认采用主键来关联相关对象。<br> 另外一种方式是利用超链接序列化，嵌套序列化和其他自定义的序列化方式。</p><h3 id="_7-自定义字段映射" tabindex="-1"><a class="header-anchor" href="#_7-自定义字段映射" aria-hidden="true">#</a> 7. 自定义字段映射</h3><p>ModelSerializer类也暴露了一个API用于重写，以查看序列化类是怎么自动创建字段的<br> 如果ModelSerializer没有默认创建你说期望的字段，你可以在类中显示的声明它们，或者创建一个基类，用于定义序列化类如何根据模型创建自动创建字段。</p><ul><li>.serializer_field_mapping</li><li>.serializer_related_field（表示关系字段）<br> ModelSerializer默认为PrimaryKeyRelatedField<br> HyperlinkedModelSerializer默认为serializers.HyperlinkedRelatedField</li><li>serializer_url_field（url）</li><li>serializer_choice_field(choice)</li></ul><h4 id="字段类和字段参数" tabindex="-1"><a class="header-anchor" href="#字段类和字段参数" aria-hidden="true">#</a> 字段类和字段参数</h4><ul><li>.build_standard_field(self, field_name, model_field)</li><li>.build_relational_field(self, field_name, relation_info)</li><li>relation_info为一元组，包含model_field, related_model, to_many和 has_through_model</li><li>.build_nested_field(self, field_name, relation_info, nested_depth)</li></ul><p>匹配模型中的关系型字段</p><ul><li>.build_property_field(self, field_name, model_class)</li><li>.build_url_field(self, field_name, model_class)</li><li>.build_unknown_field(self, field_name, model_class)</li></ul><h2 id="_4-hyperlinkedmodelserializer" tabindex="-1"><a class="header-anchor" href="#_4-hyperlinkedmodelserializer" aria-hidden="true">#</a> 4 HyperlinkedModelSerializer</h2><p>HyperlinkedModelSerializer与ModelSerializer是十分类似的，除了用hyperlinks来代替PK呈现关系。该类默认包含一个url字段用来代替pk字段。url属于HyperlinkedIdentityField字段，该模型中的所有关系都会由HyperlinkedIdentityField链接，你也可以显示的包含此字段</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-绝对和相对url" tabindex="-1"><a class="header-anchor" href="#_1-绝对和相对url" aria-hidden="true">#</a> 1. 绝对和相对url</h3><p>当初始化HyperlinkedModelSerializer时，必须请求上下文中包含当前request使生成的url包含主机名，为绝对路径，而不是相对路径</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer <span class="token operator">=</span> AccountSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>
absolute<span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token operator">//</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>accounts<span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span>
relative<span class="token punctuation">:</span><span class="token operator">/</span>accounts<span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,103),r=n("p",{"‘request’:":"",None:""},"如果想获得相对路径时，需要将contex设置为",-1),d=a(`<h3 id="_2-如何决定合适的hyperlinked函数" tabindex="-1"><a class="header-anchor" href="#_2-如何决定合适的hyperlinked函数" aria-hidden="true">#</a> 2. 如何决定合适的hyperlinked函数</h3><p>默认的超链接应该与’{model_name}-detail’模式一致，然后通过pk查询，也可以通过extra_kwargs设置view_name和lookup_field，重写url的字段名和查询参数名：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;account_url&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
        extra_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;view_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lookup_field&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token string">&#39;users&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;lookup_field&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以在serializer类中明确的设置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>
        view_name<span class="token operator">=</span><span class="token string">&#39;accounts&#39;</span><span class="token punctuation">,</span>
        lookup_field<span class="token operator">=</span><span class="token string">&#39;slug&#39;</span>
    <span class="token punctuation">)</span>
    users <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedRelatedField<span class="token punctuation">(</span>
        view_name<span class="token operator">=</span><span class="token string">&#39;user-detail&#39;</span><span class="token punctuation">,</span>
        lookup_field<span class="token operator">=</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span>
        many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        read_only<span class="token operator">=</span><span class="token boolean">True</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过打印repr(HyperlinkedModelSerializer)实例能够明确显示view_name和lookup_field</p><h3 id="_3-改变url字段名" tabindex="-1"><a class="header-anchor" href="#_3-改变url字段名" aria-hidden="true">#</a> 3. 改变url字段名</h3><p>默认为‘url’, 也可以全局设置URL_FIELD_NAME</p><h2 id="_5-listserializer" tabindex="-1"><a class="header-anchor" href="#_5-listserializer" aria-hidden="true">#</a> 5. ListSerializer</h2><p>ListSerializer能够同时查询或序列化多个对象。不过一般都不直接使用ListSerializer，而是通过设置<br> many=True参数。<br> 当你为序列化器设置many=True时， 就创建了一个 ListSerializer。<br> ListSerializer当设置allow_empty为True则允许空值作为合法返回值，False则不允许</p><h3 id="_1-定制listserializer行为" tabindex="-1"><a class="header-anchor" href="#_1-定制listserializer行为" aria-hidden="true">#</a> 1. 定制ListSerializer行为</h3><ol><li>有时候你想使用特殊的验证，例如检查列表中一个元素是否与另外的元素存在冲突</li><li>为多个对象定制创建和更新方法</li></ol><p>可以在serializers.Serializer中使用many=True，另外Meta中设置 list_serializer_class选项</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ListSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">class</span> <span class="token class-name">CustomSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        list_serializer_class <span class="token operator">=</span> CustomListSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-定制多个对象创建方法" tabindex="-1"><a class="header-anchor" href="#_2-定制多个对象创建方法" aria-hidden="true">#</a> 2. 定制多个对象创建方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BookListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ListSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        books <span class="token operator">=</span> <span class="token punctuation">[</span>Book<span class="token punctuation">(</span><span class="token operator">**</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> validated_data<span class="token punctuation">]</span>
        <span class="token comment"># 多个创建需要在数据库模型中自定义</span>
        <span class="token keyword">return</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>bulk_create<span class="token punctuation">(</span>books<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">BookSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        list_serializer_class <span class="token operator">=</span> BookListSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-定制多个对象更新方法" tabindex="-1"><a class="header-anchor" href="#_3-定制多个对象更新方法" aria-hidden="true">#</a> 3. 定制多个对象更新方法</h3><p>ListSerializer默认不支持多个对象同时更新。因为这个行为到底是应该进行插入还是删除是模糊不清的。<br> 为了支持多对象更新，你应该写的十分明确</p><ul><li>怎样确定数据列表中的哪几个应该被更新？</li><li>插入操作怎么处理，插入数据是否合法？还是创建一个新的对象？</li><li>移除操作怎么处理是移除对象还是移除关系？它们应该被忽略还是不合法？</li><li>排序操作怎么处理？改变两个元素的位置还是忽略它们？<br> 你需要显示的添加id字段到显示中去，默认创建的id字段是只读的，这将导致其无法更新。一旦你显示声明了，那他就会被update操作所更新。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 处理多个对象的方法</span>
<span class="token keyword">class</span> <span class="token class-name">BookListSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ListSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 利用id将原数据book对象和需要更新的数据对象链接起来</span>
        <span class="token comment"># 获取原来数据的id，生成了一个字典对象id-instance</span>
        book_mapping <span class="token operator">=</span> <span class="token punctuation">{</span>book<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">:</span> book <span class="token keyword">for</span> book <span class="token keyword">in</span> instance<span class="token punctuation">}</span>
        <span class="token comment"># 获取更新对象的id</span>
        data_mapping <span class="token operator">=</span> <span class="token punctuation">{</span>item<span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span> item <span class="token keyword">for</span> item <span class="token keyword">in</span> validated_data<span class="token punctuation">}</span>

        <span class="token comment"># 重写创建和更新方法</span>
        ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment"># 获取更新对象的id和实际对象</span>
        <span class="token keyword">for</span> book_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> data_mapping<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 在原有数据中查找是否存在该id为book_id的对象</span>
            book <span class="token operator">=</span> book_mapping<span class="token punctuation">.</span>get<span class="token punctuation">(</span>book_id<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token comment"># 如果没有就创建</span>
            <span class="token keyword">if</span> book <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>child<span class="token punctuation">.</span>create<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># 存在就更新</span>
                ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>child<span class="token punctuation">.</span>update<span class="token punctuation">(</span>book<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># 重写删除方法，如果原来的数据没有在新传进来的数据中，那就将原来的删除</span>
        <span class="token keyword">for</span> book_id<span class="token punctuation">,</span> book <span class="token keyword">in</span> book_mapping<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> book_id <span class="token keyword">not</span> <span class="token keyword">in</span> data_mapping<span class="token punctuation">:</span>
                book<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 所以ret为更新后的对象和新建的对象（book）</span>
        <span class="token keyword">return</span> ret

<span class="token keyword">class</span> <span class="token class-name">BookSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 我们需要利用主键鉴别这个元素，所以我们需要显示的指定可读写的id,而不是使用默认只读的id.</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token builtin">id</span> <span class="token operator">=</span> serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        <span class="token comment"># 更新多个对象的时候就会调用这个类</span>
        list_serializer_class <span class="token operator">=</span> BookListSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.1版本的REST框架自动创建了多对象同时更新的方法，类似于REST 2中提供的allow_add_remove行为</p><h3 id="_4-定制listserializer初始化内容" tabindex="-1"><a class="header-anchor" href="#_4-定制listserializer初始化内容" aria-hidden="true">#</a> 4. 定制ListSerializer初始化内容</h3><p>当serializer设置many=True时，子类Serializer和父类ListSerializer的init()方法都应该确认接收哪些参数和关键字参数。<br> 默认将所有的参数传递给两个类，除了validators和任何自定义的关键字参数，这两个参数是默认由子类处理的。<br> 当many= True时，如果你需要定义这两个类是如何进行初始化的，你可以利用many_init这个类方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@classmethod</span>
<span class="token keyword">def</span> <span class="token function">many_init</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 初始化子类序列器</span>
    kwargs<span class="token punctuation">[</span><span class="token string">&#39;child&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 初始化父类list序列器</span>
    <span class="token keyword">return</span> CustomListSerializer<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-baseserializer" tabindex="-1"><a class="header-anchor" href="#_5-baseserializer" aria-hidden="true">#</a> 5 BaseSerializer</h2><h3 id="_1-基本介绍" tabindex="-1"><a class="header-anchor" href="#_1-基本介绍" aria-hidden="true">#</a> 1.基本介绍</h3><p>BaseSerializer轻松支持可选的序列化样式和反序列化样式<br> BaseSerializer和Serializer一样实现简单的API</p><ul><li>data:返回输出的原始表示</li><li>is_valid()：反序列化并验证数据是否合法</li><li>validated_data：验证成功后返回的数据</li><li>errors： 验证失败后产生的错误</li><li>save()：保存数据到对象实例中</li><li>.to_representation()：重写此方法以支持序列化，用于进行读操作</li><li>.to_internal_value()：重写此方法以支持反序列化，进行写操作</li><li>.create()和.update()：重写这两个方法，以支持保存实例<br> 因为BaseSerializer提供了和Serializer一样的接口，所以你可以像使用Serializer或者ModelSerializer一样使用存在的基本的类视图函数<br> 唯一的不同之处就是BaseSerializer不会产生可供浏览器使用的API，这是因为他不会返回全部字段信息，允许每一个字段都以合适的方式进行渲染<br> 利用BaseSerializer实现一个只读的序列化类，只需要重写.to_representation()方法就行</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个数据库模型</span>
<span class="token keyword">class</span> <span class="token class-name">HighScore</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    created <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    player_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
    score <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 通过将HighScore转换成简单的原始数据类型。</span>
<span class="token keyword">class</span> <span class="token class-name">HighScoreSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>BaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
            <span class="token string">&#39;player_name&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>player_name
        <span class="token punctuation">}</span>

<span class="token comment"># 现在我们就可以使用HighScoreSerializer序列化单个或多个HighScore实例了</span>
<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">high_score</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>
    instance <span class="token operator">=</span> HighScore<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>pk<span class="token punctuation">)</span>
    serializer <span class="token operator">=</span> HighScoreSerializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">all_high_scores</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> HighScore<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;-score&#39;</span><span class="token punctuation">)</span>
    serializer <span class="token operator">=</span> HighScoreSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建一个读写的序列化类" tabindex="-1"><a class="header-anchor" href="#_2-创建一个读写的序列化类" aria-hidden="true">#</a> 2. 创建一个读写的序列化类</h3><ul><li>首先，我们需要实现to_internal_value()方法，该方法返回验证后的数据用来构成对象实例，如果数据格式不对会抛出ValidationError。</li><li>一旦实现了to_internal_value()方法，基础的验证接口就可以使用了，如 .is_valid(), .validated_data和.errors</li><li>如果需要支持.save()方法，需要实现.create()和.update()中至少一种。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">HighScoreSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>BaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 读写操作基础</span>
    <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        score <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">)</span>
        player_name <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;player_name&#39;</span><span class="token punctuation">)</span>

        <span class="token comment"># 数据验证</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> score<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;This field is required.&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> player_name<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token string">&#39;player_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;This field is required.&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>player_name<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token string">&#39;player_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;May not be more than 10 characters.&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment"># 返回验证后的数据，.validated_data就可以使用了</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">&#39;player_name&#39;</span><span class="token punctuation">:</span> player_name
        <span class="token punctuation">}</span>

    <span class="token comment"># 实现只读</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
            <span class="token string">&#39;player_name&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>player_name
        <span class="token punctuation">}</span>

    <span class="token comment"># 创建一个对象</span>
    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> HighScore<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-创建一个新的基础类-baseserializer" tabindex="-1"><a class="header-anchor" href="#_3-创建一个新的基础类-baseserializer" aria-hidden="true">#</a> 3. 创建一个新的基础类（BaseSerializer）</h3><p>应用场景：实现一个通用的类用来处理特殊的序列化风格，或者集成可插拔的后端</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将任何对象转化成原始数据</span>
<span class="token keyword">class</span> <span class="token class-name">ObjectSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>BaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    将复杂对象转化成简单的只读原始数据
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 列出对象的所有属性和方法</span>
        <span class="token keyword">for</span> attribute_name <span class="token keyword">in</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            attribute <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attribute_name<span class="token punctuation">)</span>

            <span class="token keyword">if</span> attribute_name<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 属性名中含有_的为私有属性，无视</span>
                <span class="token keyword">pass</span>
            <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span> <span class="token string">&#39;__call__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 无视方法和可以当函数调用的</span>
                <span class="token keyword">pass</span>
            <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 输出数据类型为原始数据类型的</span>
                output<span class="token punctuation">[</span>attribute_name<span class="token punctuation">]</span> <span class="token operator">=</span> attribute
            <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 递归处理列表中的所有数据</span>
                output<span class="token punctuation">[</span>attribute_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
                    self<span class="token punctuation">.</span>to_representation<span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> attribute
                <span class="token punctuation">]</span>
            <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># 递归处理字典中的所有元素，字典生成表达式</span>
                output<span class="token punctuation">[</span>attribute_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>to_representation<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> attribute<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment"># 其他的任何对象都装换成字符串</span>
                output<span class="token punctuation">[</span>attribute_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-序列化类的高级用法" tabindex="-1"><a class="header-anchor" href="#_6-序列化类的高级用法" aria-hidden="true">#</a> 6 序列化类的高级用法</h2><h3 id="_1-重写序列化方法和反序列化方法" tabindex="-1"><a class="header-anchor" href="#_1-重写序列化方法和反序列化方法" aria-hidden="true">#</a> 1. 重写序列化方法和反序列化方法</h3><p>如果你需要修改序列化、反序列化或验证数据的方法，你可以重写.to_representation()或者 .to_internal_value()<br> 应用场景：</p><ul><li>为基础类添加一个新的方法</li><li>轻微修改存在类的方法</li><li>提高需要频繁访问返回大量数据的接口的序列化性能<br> 特征方法：</li><li>.to_representation(self, obj)：一般返回python内置的数据类型结构，具体类型通过render_classes指定</li><li>.to_internal_value(self, data)：数据验证返回validated_data，如果序列化类中调用了save方法，那么validated_data就会被.create()或.update()所接收，验证错误就会抛出ValidationError(errors)。接收的data一般为request.data的值，所以接收的数据类型为通过API指定的Parser类型</li></ul><h3 id="_2-继承序列化器" tabindex="-1"><a class="header-anchor" href="#_2-继承序列化器" aria-hidden="true">#</a> 2. 继承序列化器</h3><p>和django中的表单类似，你可以通过继承，重用序列化类。意味着可以在一个父类中声明常用的字段和方法，然后给多个类使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyBaseSerializer</span><span class="token punctuation">(</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    my_field <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 验证单个字段的方法 （validate_{fieldname}）</span>
    <span class="token keyword">def</span> <span class="token function">validate_my_field</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">class</span> <span class="token class-name">MySerializer</span><span class="token punctuation">(</span>MyBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和django的Model，ModelForm类似，序列化器内部Meta类并不会隐式的继承父类的Meta,如果需要继承父类的Meta类，应该显示指明</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>MyBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">(</span>MyBaseSerializer<span class="token punctuation">.</span>Meta<span class="token punctuation">)</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般我们不推荐使用元类继承，而是在元类中明确的声明它们，另外在使用序列化类继承时有以下几点需要注意：</p><ul><li>如果多个基类中声明了同一个Meta类，那么只有第一个会被使用，如果没有，那么就是第一个父类的Meta.</li><li>子类可以将父类中的字段设置为None来达到删除父类字段的目的，还有另外一种方法</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyBaseSerializer</span><span class="token punctuation">(</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    my_field <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">MySerializer</span><span class="token punctuation">(</span>MyBaseSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    my_field <span class="token operator">=</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-动态的修改字段" tabindex="-1"><a class="header-anchor" href="#_3-动态的修改字段" aria-hidden="true">#</a> 3. 动态的修改字段</h3><p>当序列化器完成初始化之后，字段（fields）字典就可以使用.fields属性直接访问。这就使你可以动态的修改fields属性<br> 这样就可以在程序运行时修改字段而不需要在序列化器中声明</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DynamicFieldsModelSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    传入了fields属性，就可以动态的指定显示字段
    &quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 不给父类传递任何字段</span>
        fields <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;fields&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>

        <span class="token comment"># 正常的初始化父类</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>DynamicFieldsModelSerializer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

        <span class="token comment"># 如果没有在参数中指定fields，就返回院本指定的全部字段</span>
        <span class="token keyword">if</span> fields <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token comment"># 删除没有在初始化时传入fields参数中声明的参数</span>
            <span class="token comment"># 允许的，指定的fields参数</span>
            allowed <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span>
            <span class="token comment"># 存在的参数</span>
            existing <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment"># 列表减法</span>
            <span class="token keyword">for</span> field_name <span class="token keyword">in</span> existing <span class="token operator">-</span> allowed<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>field_name<span class="token punctuation">)</span>

<span class="token comment"># 使用实例</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>DynamicFieldsModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         model <span class="token operator">=</span> User
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> UserSerializer<span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;jonwatts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;jon@example.com&#39;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> UserSerializer<span class="token punctuation">(</span>user<span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;jon@example.com&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-自定义默认字段" tabindex="-1"><a class="header-anchor" href="#_4-自定义默认字段" aria-hidden="true">#</a> 4 自定义默认字段</h3><p>REST2中提供了一个接口允许开发者重写ModelSerializer自动生成默认字段的过程。<br> 接口包括.get_field(), .get_pk_field()和其他方法<br> REST3中已经移除了这个接口，就不要想太多。如果实在要修改，就需要引用源码。</p><h2 id="_7-第三方模块" tabindex="-1"><a class="header-anchor" href="#_7-第三方模块" aria-hidden="true">#</a> 7 第三方模块</h2><ol><li>Django REST marshmallow</li></ol><p>django-rest-marshmallow,使用marshmallow，可以替代serializer，简易替换器</p><ol start="2"><li>Serpy</li></ol><p>serpy ,用于提升序列化速度的，将复杂数据类型序列化为简单的原生类型。</p><ol start="3"><li>MongoengineModelSerializer</li></ol><p>django-rest-framework-mongoengine,提供了一个MongoEngineModelSerializer，支持使用MongoDB作为存储层</p><ol start="4"><li>GeoFeatureModelSerializer</li></ol><p>django-rest-framework-gis, 支持对GeoJSON的读写操作</p><ol start="5"><li>HStoreSerializer</li></ol><p>django-rest-framework-hstore ，提供HStoreSerializer，支持django-hstore的DictionaryField模型字段和schema-mode特性。</p><ol start="6"><li>Dynamic REST</li></ol><p>dynamic-rest，继承了ModelSerializer和ModelViewSet接口，添加了API查询参数，用于 filtering, sorting, including / excluding和关系</p><ol start="7"><li>DRF FlexFields</li></ol><p>rf-dynamic-fields包提供了一个mixin，可以动态地将每个序列化器的字段限制为一个URL参数指定的子集。</p><ol start="8"><li>Serializer Extensions</li></ol><p>drf-flex-fields包扩展了ModelSerializer和ModelViewSet，提供了用于动态设置字段和将原始字段扩展到嵌套模型的常用功能，从URL参数和序列化器类中定义。</p><ol start="9"><li>HTML JSON Forms</li></ol><p>html-json-forms包</p><ol start="10"><li>DRF-Base64</li></ol><p>drf-base64提供一组字段和模型序列化器，用于处理base64编码文件的上传</p><ol start="11"><li>QueryFields</li></ol><p>djangorestframework-queryfields允许API客户端通过 inclusion/exclusion查询参数指定将在响应中发送哪些字段。</p><ol start="11"><li>DRF Writable Nested</li></ol><p>drf-writable-nested包提供可写的嵌套模型序列化器，它允许使用嵌套相关数据create/update模型。</p>`,77),k=n("br",null,null,-1),v=n("br",null,null,-1),m={href:"https://blog.csdn.net/runnoob_1115/article/details/78497655",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const e=p("ExternalLinkIcon");return i(),o("div",null,[u,r,d,n("p",null,[s("————————————————"),k,s(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),v,s(" 原文链接："),n("a",m,[s("https://blog.csdn.net/runnoob_1115/article/details/78497655"),l(e)])])])}const f=t(c,[["render",b],["__file","Django-restframework17-Serializer.html.vue"]]);export{f as default};
