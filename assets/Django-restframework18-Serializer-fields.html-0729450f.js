import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as l,a,b as n,d as o,f as i}from"./app-731a6e06.js";const c={},r=i(`<h1 id="drf18-serializer-fields" tabindex="-1"><a class="header-anchor" href="#drf18-serializer-fields" aria-hidden="true">#</a> DRF18-Serializer-fields</h1><p>序列化器的字段处理不仅会验证值（validate），也会将接收值转化为相应类型(clean)</p><h2 id="_1-核心参数" tabindex="-1"><a class="header-anchor" href="#_1-核心参数" aria-hidden="true">#</a> 1 核心参数</h2><h3 id="_1-read-only" tabindex="-1"><a class="header-anchor" href="#_1-read-only" aria-hidden="true">#</a> 1. read_only</h3><p>只应该包含在输出中，任何输入字段（创建和更新）中包含该属性都会被忽略，默认为False</p><h3 id="_2-write-only" tabindex="-1"><a class="header-anchor" href="#_2-write-only" aria-hidden="true">#</a> 2. write_only</h3><p>只会在update/create时使用，外界也无法读取该值，默认为False</p><h3 id="_3-required" tabindex="-1"><a class="header-anchor" href="#_3-required" aria-hidden="true">#</a> 3. required</h3><p>正常情况下在反序列化时字段没有提供值，将会报错，设置为False，就可以为空，默认为True</p><h3 id="_4-allow-null" tabindex="-1"><a class="header-anchor" href="#_4-allow-null" aria-hidden="true">#</a> 4. allow_null</h3><p>验证数据时允许为空，默认为False，不允许</p><h3 id="_5-default" tabindex="-1"><a class="header-anchor" href="#_5-default" aria-hidden="true">#</a> 5. default</h3><p>如果没有提供时，就返回默认值。可以将其设置为一个函数或其他可调用的函数，在这种情况下，每次使用该值时都将对其进行评估。当被调用时，它将不会收到任何参数。如果可调用对象有一个set_context方法，那么每次调用字段实例的值作为参数时都将调用该方法。这与验证器的工作方式相同。<br> 同时包含default 和 required参数的将会报错</p><h3 id="_6-source" tabindex="-1"><a class="header-anchor" href="#_6-source" aria-hidden="true">#</a> 6. source</h3><p>用于填充该字段，可以是一个方法，只接受一个self参数，如URLField(source=’get_absolute_url’)，也可以通过‘.’快捷方式调用对象属性，如EmailField(source=’user.email’)<br> source=’*’有着特殊的意义，表示将整个对象都会传递进去，在创建嵌套结构和或者需要完整对象来确定输出的时候特别有用。默认为字段名。</p><h3 id="_7-validators" tabindex="-1"><a class="header-anchor" href="#_7-validators" aria-hidden="true">#</a> 7. validators</h3><p>用于验证字段值的函数列表，失败抛出serializers.ValidationError</p><h3 id="_8-error-messages" tabindex="-1"><a class="header-anchor" href="#_8-error-messages" aria-hidden="true">#</a> 8. error_messages</h3><p>表示错误代码的错误信息</p><h3 id="_9-label" tabindex="-1"><a class="header-anchor" href="#_9-label" aria-hidden="true">#</a> 9. label</h3><p>可以作为HTML表单字段中的name使用，或者其他描述性文本</p><h3 id="_10-help-text" tabindex="-1"><a class="header-anchor" href="#_10-help-text" aria-hidden="true">#</a> 10. help_text</h3><p>用于在HTML表单中描述该字段</p><h3 id="_11-initial" tabindex="-1"><a class="header-anchor" href="#_11-initial" aria-hidden="true">#</a> 11. initial</h3><p>用于预填充HTML表单字段，可以是一个可调用对象，如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">class</span> <span class="token class-name">ExampleSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    day <span class="token operator">=</span> serializers<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>initial<span class="token operator">=</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-style" tabindex="-1"><a class="header-anchor" href="#_12-style" aria-hidden="true">#</a> 12. style</h3><p>用于控制render怎么渲染的字典参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Use &lt;input type=&quot;password&quot;&gt; for the input.</span>
password <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;input_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment"># Use a radio input instead of a select input.</span>
color_channel <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ChoiceField<span class="token punctuation">(</span>
    choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;base_template&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;radio.html&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-常用字段" tabindex="-1"><a class="header-anchor" href="#_2-常用字段" aria-hidden="true">#</a> 2. 常用字段</h2><h3 id="_1-boolean-fields" tabindex="-1"><a class="header-anchor" href="#_1-boolean-fields" aria-hidden="true">#</a> 1. Boolean fields</h3><p>BooleanField<br> 当使用表单时，如果忽略一个值，那么他将始终被视为False,即使它的默认值设为True<br> NullBooleanField<br> 接受None作为一个验证值</p><h3 id="_2-字符串字段" tabindex="-1"><a class="header-anchor" href="#_2-字符串字段" aria-hidden="true">#</a> 2. 字符串字段</h3><ol><li>CharField</li></ol><p>参数：CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) trim_whitespace是否清除末尾空格</p><ol start="2"><li>EmailField</li></ol><p>EmailField(max_length=None, min_length=None, allow_blank=False)</p><ol start="3"><li>RegexField</li></ol><p>RegexField(regex, max_length=None, min_length=None, allow_blank=False)<br> regex参数要么是一个正则编译过的正则表达式对象，要么是一个字符串</p><ol start="4"><li>SlugField</li></ol><p>RegexField字段翻版， regex参数为[a-zA-Z0-9_-]+<br> SlugField(max_length=50, min_length=None, allow_blank=False)</p><ol start="5"><li>URLField</li></ol><p>RegexField，regex = http:///<br> URLField(max_length=200, min_length=None, allow_blank=False)</p><ol start="6"><li>UUIDField</li></ol><p>确保输入的是一个合法的 UUID字符串，to_internal_value方法返回一个uuid.UUID对象， 输出时返回一个规范书写的字符串</p><blockquote><p>”de305d54-75b4-431b-adb2-eb6b9e546013”</p></blockquote><p>UUIDField(format=’hex_verbose’),format（表现形式，并不影响原本值）值有以下几种：</p><ul><li>‘hex_verbose’：”5ce0e9a5-5ffa-654b-cee0-1238041fb31a”，规范的16进制写法</li><li>‘hex’：”5ce0e9a55ffa654bcee01238041fb31a”</li><li>‘int’：”123456789012312313134124512351145145114”</li><li>‘urn’：RFC 4122 URN ，”urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a”</li></ul><ol start="7"><li>FilePathField</li></ol><p>限制文件在一个确定的文件目录中<br> FilePathField(path, match=None, recursive=False, allow_files=True, allow_folders=False, required=None, **kwargs)<br> 参数解读：</p><ul><li>path：文件的绝对系统路径，就是文件选择最大的目录，其他都是在这个路径之下的</li><li>match：正则表达式字符串，用于过滤文件名</li><li>recursive： 递归查询，明确是否包含系统路径下的子目录，默认不包含（false）</li><li>allow_files：是否包含指定路径下的文件，默认包含（True）</li><li>allow_folders：是否包含文件夹，默认不包含，与allow_files必须设置一个为True</li></ul><ol start="8"><li>IPAddressField</li></ol><p>确保输入的是一个 IPv4或IPv6字符串<br> IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</p><ul><li>protocol：’both’ (default), ‘IPv4’ or ‘IPv6’.</li><li>unpack_ipv4： Unpacks IPv4（ ::ffff:192.0.2.1），开启后解压为192.0.2.1，只有protocol=both时才可以使用</li></ul><h3 id="_3-数字字段" tabindex="-1"><a class="header-anchor" href="#_3-数字字段" aria-hidden="true">#</a> 3. 数字字段</h3><ol><li>IntegerField</li></ol><p>IntegerField(max_value=None, min_value=None)</p><ol start="2"><li>FloatField</li></ol><p>FloatField(max_value=None, min_value=None)</p><ol start="3"><li>DecimalField</li></ol><p>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)</p><ul><li>max_digits： 要么为None,要么大于等于decimal_places</li><li>decimal_places：存储的十进制位数</li><li>coerce_to_string：True:返回字符串对象，默认与COERCE_DECIMAL_TO_STRING设置一致，一般为True,如果DECIMAL对象由序列化器返回，那就取决于renderer，localize为True将会强制将这个值设置为True.</li><li>localize:本地化输入输出,默认False.如果设置了USE_L10N=True，那么你就可以使用数据格式化</li></ul><h3 id="_4-日期字段" tabindex="-1"><a class="header-anchor" href="#_4-日期字段" aria-hidden="true">#</a> 4. 日期字段</h3><ol><li>DateTimeField</li></ol><p>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</p><ul><li>format如果没有指定，默认按照DATETIME_FORMAT设置输出，’iso-8601’。设置为字符串类型，意味着to_representation返回的值强制转换为字符串。设置为None意味着可以反悔一个Python的datetime对象。</li><li>input_forms:输入的格式，解析时使用，没有指定的，默认使用DATETIME_INPUT_FORMATS的默认值[‘iso-8601’]。</li><li>使用auto_now=True和auto_now_add=True默认为只读属性。</li></ul><ol start="2"><li>DateField</li></ol><p>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</p><ol start="3"><li>TimeField</li></ol><p>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</p><ol start="4"><li>DurationField（Django versions &gt;= 1.8）</li></ol><p>验证时默认包含一个datetime.timedelta实例，返回的格式为’[DD] [HH:[MM:]]ss[.uuuuuu]’</p><h3 id="_5-选择字段" tabindex="-1"><a class="header-anchor" href="#_5-选择字段" aria-hidden="true">#</a> 5. 选择字段</h3><ol><li>ChoiceField</li></ol><p>如果模型字段中含有choices=…参数，ModelSerializer会自动生成为ChoiceField。<br> ChoiceField(choices)</p><ul><li>choices： 合法的可选值列表，也可以使用(key, display_name)元组列表</li><li>allow_blank：默认为False，一般为文本选项设置此属性</li><li>allow_null：一般为数字或者非文本设置此属性</li><li>html_cutoff:默认为None,可以选择的最大数量</li><li>html_cutoff_text：设置一个文本切割器，默认为”More than {count} items…”</li></ul><ol start="2"><li>MultipleChoiceField</li></ol><p>参数与用法和ChoiceField 一致</p><h3 id="_6-文件上传字段" tabindex="-1"><a class="header-anchor" href="#_6-文件上传字段" aria-hidden="true">#</a> 6. 文件上传字段</h3><p>FileField和ImageField类紧适用于MultiPartParser或FileUploadParser，设置FILE_UPLOAD_HANDLERS 用于处理上传文件</p><ol><li>FileField</li></ol><p>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</p><ul><li>max_length：文件名最大长度</li><li>allow_empty_file：文件能否为空</li><li>use_url：True，使用url作为表现形式，默认为（UPLOADED_FILES_USE_URL=True）,false则使用文件名作为表现形式。</li></ul><ol start="2"><li>ImageField</li></ol><p>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)<br> 要求安装Pillow package or PIL package</p><h3 id="_7-复合字段" tabindex="-1"><a class="header-anchor" href="#_7-复合字段" aria-hidden="true">#</a> 7. 复合字段</h3><ol><li>ListField</li></ol><p>ListField(child=, min_length=None, max_length=None)<br> child：用于验证列表中的对象实例，如果没有的话就不进行验证</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 验证列表中是否为数字类型</span>
scores <span class="token operator">=</span> serializers<span class="token punctuation">.</span>ListField<span class="token punctuation">(</span>
   child<span class="token operator">=</span>serializers<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>min_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max_value<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token comment"># 字符类型</span>
<span class="token keyword">class</span> <span class="token class-name">StringListField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ListField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    child <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>DictField<br> DictField(child=)<br> key始终为字符串<br> child验证字典中的value</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>document <span class="token operator">=</span> DictField<span class="token punctuation">(</span>child<span class="token operator">=</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>JSONField<br> JSONField(binary),如果binary设置为True，则返回字符串，而不是原生的数据结构</li></ol><h3 id="_8-其他字段" tabindex="-1"><a class="header-anchor" href="#_8-其他字段" aria-hidden="true">#</a> 8. 其他字段</h3><ol><li>ReadOnlyField<br> 返回不能修改的值，一般用于ModelSerializer，字段名是一个属性值而不是字段</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AccountSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Account
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;account_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;has_expired&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>HiddenField</li></ol><p>一个字段值不是基于用户输入，而是由默认值或者可调用对象的值</p><blockquote><p>modified = serializers.HiddenField(default=timezone.now)</p></blockquote><p>因为一些验证需要预先提供一个值，而你又不想将这些字段暴露给客户端</p><ol><li>ModelField</li></ol><p>一个普通字段可以是任何模型字段。ModelField能被用于为自定义模型字段创建序列化字段，而不需要创建一个新的自定义序列化字段。<br> 一般用于ModelSerializer中<br> ModelField(model_field=)</p><blockquote><p>ModelField(model_field=MyModel()._meta.get_field(‘custom_field’))</p></blockquote><ol start="2"><li>SerializerMethodField</li></ol><p>只读字段，通过调用本序列化器的方法，可以用来对显示的顺序进行排序<br> SerializerMethodField(method_name=None)<br> method_name：序列化类中需要调用的方法名如果没有包含这个参数名，默认为get_ method_name指定的方法只接受一个参数（除了self外），返回想要在序列化类中显示的东西</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>timezone <span class="token keyword">import</span> now
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers

<span class="token keyword">class</span> <span class="token class-name">UserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    days_since_joined <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> User

    <span class="token keyword">def</span> <span class="token function">get_days_since_joined</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> obj<span class="token punctuation">.</span>date_joined<span class="token punctuation">)</span><span class="token punctuation">.</span>days
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>自定义字段</li></ol><p>如果你需要自定义一个字段，你需要继承Field类，至少重写.to_representation()和.to_internal_value()方法中的一种。<br> 这两种方法是用来转换数据类型， initial datatype，primitive，serializable datatype<br> 原生数据类型（ Primitive datatypes）：number, string, boolean, date/time/datetime or None，也可以是任何列表或者字典对象（只包含原生数据），如果需要支持其他类型，你需要使用render.<br> .to_representation(): initial datatype装换成primitive后，再转换成serializable datatype<br> to_internal_value()：将primitive数据类型转换成python内部类型，数据不合法时，抛出serializers.ValidationError异常。<br> WritableField类在2.x版本以后，你应该继承Field类，然后重写to_internal_value()方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
   RGB颜色对象
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>red <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> green <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> blue <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span><span class="token punctuation">(</span>red <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token keyword">and</span> green <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token keyword">and</span> blue <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>red<span class="token punctuation">,</span> self<span class="token punctuation">.</span>green<span class="token punctuation">,</span> self<span class="token punctuation">.</span>blue <span class="token operator">=</span> red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue

<span class="token keyword">class</span> <span class="token class-name">ColorField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    颜色对象序列化成rgb(#, #, #)&#39;写法
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;rgb(%d, %d, %d)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>red<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>green<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>blue<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
        red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token comment"># 返回一个python原生对象</span>
        <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认字段值映射了一个对象，如果需要自定义这个值是怎么被接收的，你需要重写.get_attribute()方法和.get_value()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ClassNameField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_attribute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 传递对象实例到to_representation方法中去，而不仅仅是传递一个字段属性</span>
        <span class="token keyword">return</span> obj

    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        将对象序列化为类名
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据不合法时，抛出验证错误</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 检验数据类型</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> six<span class="token punctuation">.</span>text_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
        msg <span class="token operator">=</span> <span class="token string">&#39;Incorrect type. Expected a string, but got %s&#39;</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span>msg <span class="token operator">%</span> <span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>

    <span class="token comment"># 利用正则表达式匹配字符串格式</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;Incorrect format. Expected \`rgb(#,#,#)\`.&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 移除左边的&#39;rgb(&#39;，移除右边的&#39;)&#39;</span>
    data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 将字符串按‘，’切割</span>
    red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token comment"># 检验数据值0-255</span>
    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>col <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">or</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">&#39;Value out of range. Must be between 0 and 255.&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 返回一个颜色对象</span>
    <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>.fail方法创建了一个处理ValidationError的快捷方式，携带着从error_messages中获取的消息字符串，这种风格使您的错误消息更干净，并且与您的代码更分离，并且应该首选。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>default_error_messages <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;incorrect_type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Incorrect type. Expected a string, but got {input_type}&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;incorrect_format&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Incorrect format. Expected \`rgb(#,#,#)\`.&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;out_of_range&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Value out of range. Must be between 0 and 255.&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">to_internal_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> six<span class="token punctuation">.</span>text_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 传入了错误类型，以及输入数据的类型</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;incorrect_type&#39;</span><span class="token punctuation">,</span> input_type<span class="token operator">=</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;incorrect_format&#39;</span><span class="token punctuation">)</span>

    data <span class="token operator">=</span> data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;rgb(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>
    red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>col <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">or</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&#39;out_of_range&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> Color<span class="token punctuation">(</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>三方包</p></li><li><p>DRF Compound Fields</p></li></ol><p>drf-compound-fields包提供了”compound”序列化字段。例如一个简单值组成的列表，序列化时不用设置many=True选项。也提供了序列化字典和值的字段，这个值可以是具         体的类型，或者是一系列类型组成的列表</p><ol start="2"><li>DRF Extra Fields</li></ol><p>drf-extra-fields包提供Base64ImageField and PointField</p><ol start="3"><li>djangrestframework-recursive</li></ol><p>djangorestframework-recursive包提供了RecursiveField用于序列化递归结构</p><ol start="4"><li>django-rest-framework-gis</li></ol><p>django-rest-framework-gis提供了GeometryFiel地理位置字段，和GeoJSON serializer。</p><ol start="5"><li>django-rest-framework-hstore</li></ol><p>django-rest-framework-hstore提供了HStoreField来支持 django-hstore包的DictionaryField字段</p>`,124),u=a("br",null,null,-1),d=a("br",null,null,-1),k={href:"https://blog.csdn.net/runnoob_1115/article/details/78497674",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const s=t("ExternalLinkIcon");return p(),l("div",null,[r,a("p",null,[n("————————————————"),u,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),d,n(" 原文链接："),a("a",k,[n("https://blog.csdn.net/runnoob_1115/article/details/78497674"),o(s)])])])}const g=e(c,[["render",m],["__file","Django-restframework18-Serializer-fields.html.vue"]]);export{g as default};
