import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as p,c as o,a as s,b as n,d as l,f as c}from"./app-207e7d61.js";const i={},u=c(`<h1 id="drf19-serializer关系型字段" tabindex="-1"><a class="header-anchor" href="#drf19-serializer关系型字段" aria-hidden="true">#</a> DRF19-Serializer关系型字段</h1><blockquote><p>坏程序员担心代码，好程序员担心数据结构和它们之间的关系。</p></blockquote><ol><li><p>简介<br> 关系字段被用来表示模型之间的关系，能够用在ForeignKey, ManyToManyField and OneToOneField中，也可以颠倒这个关系，也可以自定义关系，如GenericForeignKey<br> 在使用ModelSerializer，最好利用print repr(serializer)检查自动生成的字段内容</p></li><li><p>关系型序列化字段使用指南<br> 1 使用示例<br> 一张音乐专辑和专辑里的所有歌曲详情</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 专辑类</span>
<span class="token keyword">class</span> <span class="token class-name">Album</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    album_name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    artist <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment"># 歌曲详情</span>
<span class="token keyword">class</span> <span class="token class-name">Track</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 专辑通过外键链接，专辑删除，包含的歌曲就会被删除</span>
    album <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Album<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    <span class="token comment"># 歌曲编号</span>
    order <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 歌曲标题</span>
    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token comment"># 歌曲时长</span>
    duration <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        <span class="token comment"># 将&#39;album&#39;, &#39;order&#39;设为主键</span>
        unique_together <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;order&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 设置序列化输出时的排序字段</span>
        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;%d: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>order<span class="token punctuation">,</span> self<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-stringrelatedfield" tabindex="-1"><a class="header-anchor" href="#_2-stringrelatedfield" aria-hidden="true">#</a> 2 StringRelatedField</h3><p>调用<strong>unicode</strong> 方法来呈现对象。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 外界只显示歌曲编号和歌曲名字，many为多个对象执行</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>StringRelatedField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Things We Lost In The Fire&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;1: Sunflower&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;2: Whitetail&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;3: Dinosaur Act&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3 PrimaryKeyRelatedField<br> 使用主键来表示关联的目标，默认情况下该字段是可以读写的，可以利用read_only将其设置为只读</p><ul><li>queryset:设置用于查找的查询集对象，如果没有设置，就需要设置read_only=True</li><li>many：如果对应多个关系对象时</li><li>allow_null：如果设置为True，则允许接收空字符串和None</li><li>pk_field:设置主键的值</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Undun&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Roots&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token number">89</span><span class="token punctuation">,</span>
        <span class="token number">90</span><span class="token punctuation">,</span>
        <span class="token number">91</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4 HyperlinkedRelatedField<br> 默认通过主键查询，关系对象显示为一个url<br> url接受单独的URL关键字参数，利用lookup_field和lookup_url_kwarg设置<br> url中包含一个单独的主键或者标签参数<br> 如果需要使用更复杂的超链接字段，需要自己自定义</p><ul><li>view_name：被用来表示对象的视图函数名。如果使用标准路由类，那就是-detail。required。</li><li>queryset：用于字段查找和验证的对象查找集。与read_only=True参数二选一</li><li>many：如果对应多个对象时，设置为True</li><li>allow_null：设置为True,则接受字段输入None或者空值</li><li>lookup_field：查询字段名 ，应该与 view_name中的参数一致，默认为’pk’</li><li>lookup_url_kwarg:定义在url中的查询参数的名字，默认使用与lookup_field一样的值</li><li>format：url后缀</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedRelatedField<span class="token punctuation">(</span>
        many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        view_name<span class="token operator">=</span><span class="token string">&#39;track-detail&#39;</span>
    <span class="token punctuation">)</span>
<span class="token comment"># view_name=&#39;track-detail&#39;查询函数，默认使用主键    </span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 接口的显示内容</span>
<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Graceland&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Paul Simon&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;http://www.example.com/api/tracks/45/&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;http://www.example.com/api/tracks/46/&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;http://www.example.com/api/tracks/47/&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-slugrelatedfield" tabindex="-1"><a class="header-anchor" href="#_5-slugrelatedfield" aria-hidden="true">#</a> 5 SlugRelatedField</h3><p>slug_field使用对象中的某个字段表示对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>
        many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        slug_field<span class="token operator">=</span><span class="token string">&#39;title&#39;</span>
     <span class="token punctuation">)</span>
    <span class="token comment"># 使用歌曲名字代表歌曲对象</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Dear John&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Loney Dear&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;Airport Surroundings&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Everything Turns to You&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;I Was Only Going Out&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-hyperlinkedidentityfield" tabindex="-1"><a class="header-anchor" href="#_6-hyperlinkedidentityfield" aria-hidden="true">#</a> 6 HyperlinkedIdentityField</h3><p>自定义超链接字段名，默认为‘url’,始终为只读<br> 参数有:view_name,lookup_field,lookup_url_kwarg,format</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    track_listing <span class="token operator">=</span> serializers<span class="token punctuation">.</span>HyperlinkedIdentityField<span class="token punctuation">(</span>view_name<span class="token operator">=</span><span class="token string">&#39;track-list&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;track_listing&#39;</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Eraser&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Thom Yorke&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;track_listing&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://www.example.com/api/track_list/12/&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-嵌套关系" tabindex="-1"><a class="header-anchor" href="#_3-嵌套关系" aria-hidden="true">#</a> 3 嵌套关系</h2><h3 id="_1-创建一个具有读写操作的序列化类" tabindex="-1"><a class="header-anchor" href="#_1-创建一个具有读写操作的序列化类" aria-hidden="true">#</a> 1. 创建一个具有读写操作的序列化类</h3><p>如果一个字段对应多个关连对象，设置many=True</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TrackSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Track
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> TrackSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 需要分别创建专辑和歌曲对象     </span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> album <span class="token operator">=</span> Album<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album_name<span class="token operator">=</span><span class="token string">&quot;The Grey Album&quot;</span><span class="token punctuation">,</span> artist<span class="token operator">=</span><span class="token string">&#39;Danger Mouse&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&#39;Public Service Announcement&#39;</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">245</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Track<span class="token punctuation">:</span> Track <span class="token builtin">object</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&#39;What More Can I Say&#39;</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">264</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Track<span class="token punctuation">:</span> Track <span class="token builtin">object</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">&#39;Encore&#39;</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">159</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Track<span class="token punctuation">:</span> Track <span class="token builtin">object</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer <span class="token operator">=</span> AlbumSerializer<span class="token punctuation">(</span>instance<span class="token operator">=</span>album<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer<span class="token punctuation">.</span>data
<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Grey Album&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Danger Mouse&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Public Service Announcement&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">245</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;What More Can I Say&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">264</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Encore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">159</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可写的嵌套序列化器<br> 如果需要支持可写操作，那么就必须在序列化类中重写create() and/or update()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TrackSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Track
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> TrackSerializer<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        tracks_data <span class="token operator">=</span> validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 一对多，首先创建一，再创建多</span>
        album <span class="token operator">=</span> Album<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>
        <span class="token keyword">for</span> track_data <span class="token keyword">in</span> tracks_data<span class="token punctuation">:</span>
            Track<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>album<span class="token operator">=</span>album<span class="token punctuation">,</span> <span class="token operator">**</span>track_data<span class="token punctuation">)</span>
        <span class="token keyword">return</span> album


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;The Grey Album&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Danger Mouse&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Public Service Announcement&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">245</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;What More Can I Say&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">264</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;order&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Encore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;duration&#39;</span><span class="token punctuation">:</span> <span class="token number">159</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer <span class="token operator">=</span> AlbumSerializer<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Album<span class="token punctuation">:</span> Album <span class="token builtin">object</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2 自定义关系型字段<br> 当不存在字段能够瞒住需要的关系的模型时，就需要自定义一个字段。</p><ul><li>首先需要继承重写RelatedField</li><li>实现.to_representation(self, value)方法，该参数接受一个值value,该值为一个字段，通常是模型实例，返回需要进行序列化的目标</li><li>如果想实现读写操作，还必须实现.to_internal_value(self, data)方法</li><li>如果基于context实现动态的查询集（queryset）,需要重写.get_queryset(self)，而不是使用.queryset属性</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time


<span class="token comment"># 重写的字段</span>
<span class="token keyword">class</span> <span class="token class-name">TrackListingField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>RelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        duration <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%M:%S&#39;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span>value<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># 返回歌曲的编号+名字+时长</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Track %d: %s (%s)&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>order<span class="token punctuation">,</span> value<span class="token punctuation">.</span>name<span class="token punctuation">,</span> duration<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tracks <span class="token operator">=</span> TrackListingField<span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Album
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;album_name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;artist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 接口显示结果        </span>
<span class="token punctuation">{</span>
    <span class="token string">&#39;album_name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Sometimes I Wish We Were an Eagle&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;artist&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Bill Callahan&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;tracks&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;Track 1: Jim Cain (04:39)&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Track 2: Eid Ma Clack Shaw (04:19)&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Track 3: The Wind and the Dove (04:34)&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3 自定义超链接字段<br> 有时你需要自定义一个超链接字段来返回多个查询参数，可以通过继承重写HyperlinkedRelatedField字段，有两个方法可能需要重写：</p><ul><li>get_url(self, obj, view_name, request, format)<br> 用来匹配对象实例到它的url上<br> 如果view_name和lookup_field属性没有指向正确的匹配网址，可能会抛出NoReverseMatch</li><li>get_object(self, queryset, view_name, view_args, view_kwargs)<br> 如果你需要支持可写的超链接字段，就要重写此方法以返回网址所映射的对象。对于只读的超链接字段不需要重写此方法。<br> 此方法返回的对象应该与网址参数（view_args）匹配的一致<br> 可能会抛出ObjectDoesNotExist异常。<br> 比如说我们有一个网址含有两个关键参数，</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">/</span>api<span class="token operator">/</span><span class="token operator">&lt;</span>organization_slug<span class="token operator">&gt;</span><span class="token operator">/</span>customers<span class="token operator">/</span><span class="token operator">&lt;</span>customer_pk<span class="token operator">&gt;</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认只接受一个查询参数，所以我们需要重写HyperlinkedRelatedField字段</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse

<span class="token keyword">class</span> <span class="token class-name">CustomerHyperlink</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>HyperlinkedRelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 定义一个类属性，而不需要接收它们，然后只需接收网址参数</span>
    view_name <span class="token operator">=</span> <span class="token string">&#39;customer-detail&#39;</span>
    <span class="token comment"># 查询集为固定查询集</span>
    queryset <span class="token operator">=</span> Customer<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 生成一个对象实例的url表示</span>
    <span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> view_name<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;organization_slug&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>organization<span class="token punctuation">.</span>slug<span class="token punctuation">,</span>
            <span class="token string">&#39;customer_pk&#39;</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>pk
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span>view_name<span class="token punctuation">,</span> kwargs<span class="token operator">=</span>url_kwargs<span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token builtin">format</span><span class="token punctuation">)</span>

    <span class="token comment"># 通过url参数获取对象实例，参数为固定的，不能更改</span>
    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> view_name<span class="token punctuation">,</span> view_args<span class="token punctuation">,</span> view_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        lookup_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span>
           <span class="token string">&#39;organization__slug&#39;</span><span class="token punctuation">:</span> view_kwargs<span class="token punctuation">[</span><span class="token string">&#39;organization_slug&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
           <span class="token string">&#39;pk&#39;</span><span class="token punctuation">:</span> view_kwargs<span class="token punctuation">[</span><span class="token string">&#39;customer_pk&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token operator">**</span>lookup_kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在通用视图中使用这种方法，也需要重写get_object方法<br> 通常情况下，推荐使用扁平的API视图，但是url嵌套也是可以的。</p><h2 id="_4-更多注意事项" tabindex="-1"><a class="header-anchor" href="#_4-更多注意事项" aria-hidden="true">#</a> 4. 更多注意事项</h2><ol><li>qureyset参数</li></ol><p>对于可写的关系型字段，只需要queryset参数，用于将用户输入映射到一个模型实例<br> 在2.X的版本中，如果使用了ModelSerializer，就会自动确定qureyset<br> 现在修改为，如果是可写的字段，必须明确设置queryset</p><ol start="2"><li>自定义HTML显示</li></ol><p>当模型实例用于填充choices时，将会使用对象的str方法。<br> 为了自定义一个表现形式需要继承重写RelatedField的display_value()方法，该方法<br> 接收一个模型对象，然后返回一个合适的字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TrackPrimaryKeyRelatedField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">display_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Track: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>切断选择字段</li></ol><p>当一个API接口提供的最大可选对象为1000,超过1000后，后面就会显示”More than 1000 items…”<br> 这是模板阻止了对超出可接受范围内的渲染<br> 有两个参数可以控制这个行为：<br> html_cutoff：用于设置可选框的最大接收个数，设置为None就会禁用此设置，默认为1000<br> html_cutoff_text：用于设置超过html_cutoff指定数量后的显示内容，默认为”More than {count} items…”<br> 可以在设置文件中设置HTML_SELECT_CUTOFF and HTML_SELECT_CUTOFF_TEXT成全局变量</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>assigned_to <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SlugRelatedField<span class="token punctuation">(</span>
   queryset<span class="token operator">=</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   slug_field<span class="token operator">=</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span>
   style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;base_template&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;input.html&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>反向关系<br> 使用ModelSerializer和HyperlinkedModelSerializer时，反向关系并不会默认创建。为了包含反向关系，需要明确添加该字段</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">AlbumSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        <span class="token comment"># 必须保证track中设置外键时将related_name设置为tracks</span>
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
        <span class="token comment"># 如果没有设置related_name</span>
        fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;track_set&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

<span class="token comment"># 模型中</span>
<span class="token keyword">class</span> <span class="token class-name">Track</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    album <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Album<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">&#39;tracks&#39;</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>通用关系<br> 如果想序列化一个通用的外键，需要自定义一个字段，用来明确表示该如何对其进行序列化和反序列化</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># https://docs.djangoproject.com/en/1.11/ref/contrib/contenttypes/</span>
<span class="token comment"># http://blog.csdn.net/laughing2333/article/details/53014267</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>contenttypes<span class="token punctuation">.</span>fields <span class="token keyword">import</span> GenericForeignKey
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>contenttypes<span class="token punctuation">.</span>models <span class="token keyword">import</span> ContentType

<span class="token keyword">class</span> <span class="token class-name">TaggedItem</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Tags arbitrary model instances using a generic relation.
    &quot;&quot;&quot;</span>
    tag_name <span class="token operator">=</span> models<span class="token punctuation">.</span>SlugField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    content_type <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>ContentType<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span>
    object_id <span class="token operator">=</span> models<span class="token punctuation">.</span>PositiveIntegerField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tagged_object <span class="token operator">=</span> GenericForeignKey<span class="token punctuation">(</span><span class="token string">&#39;content_type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;object_id&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>tag_name

<span class="token keyword">class</span> <span class="token class-name">Bookmark</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A bookmark consists of a URL, and 0 or more descriptive tags.
    &quot;&quot;&quot;</span>
    url <span class="token operator">=</span> models<span class="token punctuation">.</span>URLField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 如果删除了一个bookmark对象，相关的标签也会被删除</span>
    tags <span class="token operator">=</span> GenericRelation<span class="token punctuation">(</span>TaggedItem<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    A note consists of some text, and 0 or more descriptive tags.
    &quot;&quot;&quot;</span>
    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token comment"># note删除也需要相关标签</span>
    tags <span class="token operator">=</span> GenericRelation<span class="token punctuation">(</span>TaggedItem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以自定义一个字段用来为不同的实返回不同的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TaggedObjectRelatedField</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>RelatedField<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Bookmark<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;Bookmark: &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>url
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Note<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;Note: &#39;</span> <span class="token operator">+</span> value<span class="token punctuation">.</span>text
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;Unexpected type of tagged object&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要关联的对象能够嵌套表示，可以在序列化器内部重写.to_representation()方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">to_representation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        用合适的序列化器序列化相应对象。
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Bookmark<span class="token punctuation">)</span><span class="token punctuation">:</span>
            serializer <span class="token operator">=</span> BookmarkSerializer<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> Note<span class="token punctuation">)</span><span class="token punctuation">:</span>
            serializer <span class="token operator">=</span> NoteSerializer<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;Unexpected type of tagged object&#39;</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> serializer<span class="token punctuation">.</span>data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用GenericRelation表示的反向字段，因为其类型是已知的，可以被普通序列化器序列化。</p><ol start="6"><li>模型中的ManyToManyField</li></ol><p>默认情况下，含有through参数的ManyToManyField被设置为只读，所以确保将read_only 设置为True</p><ul><li>想在 many-to-many 关系保存额外信息，用 through 参数，例子如下。</li><li>中介 model 必须且只包含一个 target model 的外键。</li><li>中介 model 必须且只包含一个 source model 的外键。</li><li>只有一个例外，当多对多关系出现在自我包含时。</li><li>当自我包含多对多关系时，必须指定 symmetrical=False</li><li>不像普通的many-to-many字段，中介模型不可以通过add, create 或 签名方法来创建关系</li><li>move() 方法也无法使用，只能使用 clear() 方法</li><li>唯一的解决之道在于创建实例，然后完善细节</li><li>中介 model 和普通的多对多 model 的query 方法是一样的</li><li>可以用中介 model 的属性来 query 数据</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>

    <span class="token comment"># On Python 3: def __str__(self):</span>
    <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name

<span class="token keyword">class</span> <span class="token class-name">Group</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>
    members <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>Person<span class="token punctuation">,</span> through<span class="token operator">=</span><span class="token string">&#39;Membership&#39;</span><span class="token punctuation">)</span>

    <span class="token comment"># On Python 3: def __str__(self):</span>
    <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name
<span class="token comment"># 中介模型</span>
<span class="token keyword">class</span> <span class="token class-name">Membership</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    person <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Person<span class="token punctuation">)</span>
    group <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>Group<span class="token punctuation">)</span>
    date_joined <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span><span class="token punctuation">)</span>
    invite_reason <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个中介实例</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ringo <span class="token operator">=</span> Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Ringo Starr&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> paul <span class="token operator">=</span> Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Paul McCartney&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> beatles <span class="token operator">=</span> Group<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;The Beatles&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m1 <span class="token operator">=</span> Membership<span class="token punctuation">(</span>person<span class="token operator">=</span>ringo<span class="token punctuation">,</span> group<span class="token operator">=</span>beatles<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     date_joined<span class="token operator">=</span>date<span class="token punctuation">(</span><span class="token number">1962</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     invite_reason<span class="token operator">=</span><span class="token string">&quot;Needed a new drummer.&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> beatles<span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> Ringo Starr<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ringo<span class="token punctuation">.</span>group_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span>Group<span class="token punctuation">:</span> The Beatles<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m2 <span class="token operator">=</span> Membership<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>person<span class="token operator">=</span>paul<span class="token punctuation">,</span> group<span class="token operator">=</span>beatles<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     date_joined<span class="token operator">=</span>date<span class="token punctuation">(</span><span class="token number">1960</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     invite_reason<span class="token operator">=</span><span class="token string">&quot;Wanted to form a band.&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> beatles<span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> Ringo Starr<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> Paul McCartney<span class="token operator">&gt;</span><span class="token punctuation">]</span>

<span class="token comment"># THIS WILL NOT WORK</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> beatles<span class="token punctuation">.</span>members<span class="token punctuation">.</span>add<span class="token punctuation">(</span>john<span class="token punctuation">)</span>
<span class="token comment"># NEITHER WILL THIS</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> beatles<span class="token punctuation">.</span>members<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;George Harrison&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># AND NEITHER WILL THIS</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> beatles<span class="token punctuation">.</span>members <span class="token operator">=</span> <span class="token punctuation">[</span>john<span class="token punctuation">,</span> paul<span class="token punctuation">,</span> ringo<span class="token punctuation">,</span> george<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-三方包" tabindex="-1"><a class="header-anchor" href="#_5-三方包" aria-hidden="true">#</a> 5 三方包</h2><ol><li>DRF Nested Routers</li></ol><p>drf-nested-routers包提供了一个router和关系字段用于处理嵌套资源</p><ol start="2"><li>Rest Framework Generic Relations</li></ol><p>rest-framework-generic-relations为generic foreign keys提供了一个读写序列化器</p>`,61),r=s("br",null,null,-1),k=s("br",null,null,-1),d={href:"https://blog.csdn.net/runnoob_1115/article/details/78497680",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("————————————————"),r,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),k,n(" 原文链接："),s("a",d,[n("https://blog.csdn.net/runnoob_1115/article/details/78497680"),l(a)])])])}const _=t(i,[["render",m],["__file","Django-restframework19-Serializer关系型字段.html.vue"]]);export{_ as default};
