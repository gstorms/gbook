import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as s,b as n,d as e,f as t}from"./app-207e7d61.js";const l={},u=t(`<h1 id="drf21-authentication认证类" tabindex="-1"><a class="header-anchor" href="#drf21-authentication认证类" aria-hidden="true">#</a> DRF21-Authentication认证类</h1><p>权限认证类必须是可插拔的，钩子</p><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1 简介</h2><p>身份认证的原理是将用户请求和一系列认证证书联系起来。比如说一个用户发送了一个请求，或者说是带着token的请求。权限管理类（ permission）和节流（throttling ）策略能够使用它们的证书来决定这个请求是否被许可。</p><p>REST框架提供了大量用户认证方案，也允许用户实现自定义方案。<br> 身份认证一般在视图函数处理请求中的顺序十分靠前，在 permission and throttling之前，更在其他代码执行之前。<br> request.user一般由contrib.auth包中的User设置<br> request.auth被用来添加各种附加的身份认证信息。比如说他可以用来表示request携带的身份认证token<br> 注意：authentication自身并不会判断接收不接收用户的请求，他只是简单的标识用户所用的凭证</p><h3 id="_1-身份认证是怎样进行的" tabindex="-1"><a class="header-anchor" href="#_1-身份认证是怎样进行的" aria-hidden="true">#</a> 1 身份认证是怎样进行的？</h3><p>authentication方案总是定义成一个类的列表。REST框架会尝试认证列表中的每一个类。如果第一个类就认证成功了，就会设置request.user和request.auth信息<br> 如果没有一个类认证成功，request.user就会设置为django.contrib.auth.models.AnonymousUser，request.auth将会设置为None.<br> 对于未经用户认证的请求，其request.user和request.auth值可以通过UNAUTHENTICATED_USER和 UNAUTHENTICATED_TOKEN进行设置。<br> 默认的认证方案，可以使用DEFAULT_AUTHENTICATION_CLASSES进行设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.authentication.BasicAuthentication&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.authentication.SessionAuthentication&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以为每一个视图函数或者视图类设置认证方案。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>permissions <span class="token keyword">import</span> IsAuthenticated
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    authentication_classes <span class="token operator">=</span> <span class="token punctuation">(</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">)</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        content <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># \`django.contrib.auth.User\` instance.</span>
            <span class="token string">&#39;auth&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># None</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>

<span class="token comment"># @api_view装饰器</span>
<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@authentication_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SessionAuthentication<span class="token punctuation">,</span> BasicAuthentication<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@permission_classes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IsAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># \`django.contrib.auth.User\` instance.</span>
        <span class="token string">&#39;auth&#39;</span><span class="token punctuation">:</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># None</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-未经授权和禁止的响应对象" tabindex="-1"><a class="header-anchor" href="#_2-未经授权和禁止的响应对象" aria-hidden="true">#</a> 2 未经授权和禁止的响应对象</h3><p>当一个未经授权的请求被permission拒绝时，有两个错误代码对应</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>HTTP <span class="token number">401</span> Unauthorized
HTTP <span class="token number">403</span> Permission Denied
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>HTTP 401响应必须包含WWW-Authenticate一个响应头，他指导客户端怎样进行验证。<br> HTTP 403响应不包含WWW-Authenticate响应头<br> 这种响应依靠于认证方案。尽管可以使用多个认证方案。但是只有一种认证方案会被使用，用于确定响应类型。<br> 一个请求认证成功后也有可能被权限类所拒绝，表明这个请求没有权限访问。</p><h3 id="_3-使用mod-wsgi部署的apache服务的服务器" tabindex="-1"><a class="header-anchor" href="#_3-使用mod-wsgi部署的apache服务的服务器" aria-hidden="true">#</a> 3 使用mod_wsgi部署的Apache服务的服务器</h3><p>如果使用 Apache using mod_wsgi部署的，WSGI应用程序发送的授权头将不会被接收。身份验证将会使用Apache处理，而不是使用应用来处理<br> 如果您正在部署Apache，并且使用任何非基于会话的身份验证，您将需要显式地配置mod_wsgi，以便将所需的头信息传递到应用程序。这可以通过在适当的上下文中指定WSGIPassAuthorization并将其设置为“On”来完成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># this can go in either server config, virtual host, directory or .htaccess</span>
WSGIPassAuthorization On
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-用户认证指南" tabindex="-1"><a class="header-anchor" href="#_2-用户认证指南" aria-hidden="true">#</a> 2 用户认证指南</h2><h3 id="_1-basicauthentication" tabindex="-1"><a class="header-anchor" href="#_1-basicauthentication" aria-hidden="true">#</a> 1. BasicAuthentication</h3><p>此方案使用 HTTP Basic Authentication，签名为用户名和密码。此方案仅适用于测试<br> 如果认证成功：request.user为 Django User，request.auth为None.<br> 未经认证的响应对象将会被permission返回一个带有WWW-Authenticate响应头的HTTP 401 Unauthorized响应结果</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WWW<span class="token operator">-</span>Authenticate<span class="token punctuation">:</span> Basic realm<span class="token operator">=</span><span class="token string">&quot;api&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果使用BasicAuthentication，需要确保API只在https协议下使用。也许要确保客户端在登陆时会重新发送用户名和密码，而且不会永久的存储这些信息。</p><h3 id="_2-tokenauthentication" tabindex="-1"><a class="header-anchor" href="#_2-tokenauthentication" aria-hidden="true">#</a> 2. TokenAuthentication</h3><h4 id="_1-简介-1" tabindex="-1"><a class="header-anchor" href="#_1-简介-1" aria-hidden="true">#</a> 1. 简介</h4>`,24),r=s("br",null,null,-1),d=s("br",null,null,-1),k={href:"http://xn--manage-vt9i942agrrulpkr3cu0zazp7a1wa.py",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 需要为用户创建token </span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token

token <span class="token operator">=</span> Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> token<span class="token punctuation">.</span>key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于客户端的认证需要包含Authorization请求头，形式如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Authorization<span class="token punctuation">:</span> Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想使用不同的关键字，只需要继承TokenAuthentication，然后重新设置keyword类就可以了。如果成功认证，将提供一下信息：</p><ul><li>request.user： Django User</li><li>request.auth：rest_framework.authtoken.models.Token<br> 未认证成功的返回HTTP 401 Unauthorized，请求头为：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WWW<span class="token operator">-</span>Authenticate<span class="token punctuation">:</span> Token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>curl命令行可以用来测试token认证api</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>curl <span class="token operator">-</span>X GET http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>api<span class="token operator">/</span>example<span class="token operator">/</span> <span class="token operator">-</span>H <span class="token string">&#39;Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-生成令牌" tabindex="-1"><a class="header-anchor" href="#_2-生成令牌" aria-hidden="true">#</a> 2. 生成令牌</h4><ol><li>使用信号<br> 如果想自动生成用户令牌，可以通过捕捉用户的post_save信号，此方法一般写在models.py或者其他django启动时会运行的文件中</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings
<span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signals <span class="token keyword">import</span> post_save
<span class="token keyword">from</span> django<span class="token punctuation">.</span>dispatch <span class="token keyword">import</span> receiver
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token

<span class="token decorator annotation punctuation">@receiver</span><span class="token punctuation">(</span>post_save<span class="token punctuation">,</span> sender<span class="token operator">=</span>settings<span class="token punctuation">.</span>AUTH_USER_MODEL<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_auth_token</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> instance<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> created<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> created<span class="token punctuation">:</span>
        Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>instance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为已经存在的用户生成的令牌</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token

<span class="token keyword">for</span> user <span class="token keyword">in</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_or_create<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>暴露一个api<br> 当使用TokenAuthentication时，你可能想提供一个机制获取客户端的用户名和密码令牌（token）,REST框架提供了一个内建的视图函数（obtain_auth_token），用来提供此类功能。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken <span class="token keyword">import</span> views
urlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api-token-auth/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>obtain_auth_token<span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span class="token comment"># 当一个合法的用户名和密码提供给此函数时，将会返回一个JSON响应</span>
<span class="token punctuation">{</span> <span class="token string">&#39;token&#39;</span> <span class="token punctuation">:</span> <span class="token string">&#39;9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b&#39;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的obtain_auth_token方法视图使用Json格式的请求和响应对象<br> 而不是使用设置中的渲染和解析类， 如果你需要自定义obtain_auth_token，可以通过重写ObtainAuthToken视图类<br> 默认没有权限或者节流限制应用到obtain_auth_token上。如果你需要在生成token的时候为其添加限制，需要重写这个视图函数类，然后通过设置throttle_classes生成。</p><ol start="3"><li>使用admin</li></ol><p>也可以通过admin手动创建Token，如果数据量很大的话，推荐使用猴子补丁（monkey patch）TokenAdmin类来自定义需求。具体来说就是将‘user’字段设置成‘raw_field’</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>admin <span class="token keyword">import</span> TokenAdmin

TokenAdmin<span class="token punctuation">.</span>raw_id_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>利用django的命令行管理工具<br> 3.6.4版本以后，可以通过下面的命令生成用户token</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">.</span><span class="token operator">/</span>manage<span class="token punctuation">.</span>py drf_create_token <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令将为指定用户返回一个API token</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Generated token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b <span class="token keyword">for</span> user user1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想为用户重新生成一个token</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">.</span><span class="token operator">/</span>manage<span class="token punctuation">.</span>py drf_create_token <span class="token operator">-</span>r <span class="token operator">&lt;</span>username<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-sessionauthentication" tabindex="-1"><a class="header-anchor" href="#_3-sessionauthentication" aria-hidden="true">#</a> 3. SessionAuthentication</h3><p>此方案，使用django的默认会话后端进行验证。会话验证适合于与网站在同一会话环境中的ajax客户端。<br> 如果成功验证，SessionAuthentication会提供以下认证信息。</p><ul><li>request.user：django的User实例</li><li>request.auth: None<br> 没有通过验证的会返回HTTP 403 Forbidden响应。<br> 如果使用ajax类型的API，不安全的请求必须含有 CSRF token，例如PUT, PATCH, POST 或者 DELETE。<br> 使用django的标准登录视图，将会确保登录函数是被保护的<br> REST中的CSRF验证与Django相比，有少量不同。Django中 需要支持session和non-session验证。 这意味着认证请求需要验证CSRF，而匿名用户不需要验证CSRF token.这种方法不适合登录函数，因为其都需要验证CSRF。</li></ul><h3 id="_4-remoteuserauthentication" tabindex="-1"><a class="header-anchor" href="#_4-remoteuserauthentication" aria-hidden="true">#</a> 4. RemoteUserAuthentication</h3><p>此方案允许您将身份验证委托给您的web服务器，在该服务器设置REMOTE_USER环境变量。<br> 使用方法：</p><ul><li>AUTHENTICATION_BACKENDS设置中必须有django.contrib.auth.backends.RemoteUserBackend</li><li>默认情况下，RemoteUserBackend创建的用户User的用户名必须是唯一的。<br> 如果成功验证，RemoteUserAuthentication会提供以下认证信息。</li><li>request.user：django的User实例</li><li>request.auth: None</li></ul><h2 id="_3-自定义authentication" tabindex="-1"><a class="header-anchor" href="#_3-自定义authentication" aria-hidden="true">#</a> 3 自定义authentication</h2><p>继承BaseAuthentication<br> 重写.authenticate(self, request)方法，该方法认证成功会返回(user, auth)，否则None<br> 有时你需要返回一个认证异常AuthenticationFailed，而不是None<br> 如果没有尝试认证，返回None<br> 认证失败，抛出AuthenticationFailed异常，将会返回一个异常响应对象。无视任何权限检查，而且不再进行其他认证<br> 也可以重写.authenticate_header(self, request)，该方法返回值（字符串）作为HTTP 401 Unauthorized中WWW-Authenticate响应头的值<br> 如果没有重写.authenticate_header()方法，认证失败时将会直接返回HTTP 403 Forbidden响应对象。<br> 使用实例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> authentication
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> exceptions

<span class="token keyword">class</span> <span class="token class-name">ExampleAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span>BaseAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 重写认证方法</span>
    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;X_USERNAME&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> username<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span>
        <span class="token keyword">except</span> User<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> exceptions<span class="token punctuation">.</span>AuthenticationFailed<span class="token punctuation">(</span><span class="token string">&#39;No such user&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-三方包" tabindex="-1"><a class="header-anchor" href="#_4-三方包" aria-hidden="true">#</a> 4 三方包</h2><ol><li>Django OAuth Toolkit<br> django-oauth-toolkit</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;oauth2_provider&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;oauth2_provider.contrib.rest_framework.OAuth2Authentication&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Django REST framework OAuth</li></ol><p>djangorestframework-oauth，</p><ol start="3"><li>Digest Authentication</li></ol><p>djangorestframework-digestauth，HTTP digest authentication（http摘要认证模式），用来替代 HTTP basic authentication。<br> 提供了一个简单的加密认证。</p><ol start="4"><li>Django OAuth2 Consumer</li><li>JSON Web Token Authentication</li></ol><p>djangorestframework-jwt，JSON Web Token用于提供token-based authentication。JWT Authentication不需要数据库来验证token.djangorestframework-simplejwt提供了不同的特性。</p><ol start="6"><li>Hawk HTTP Authentication</li><li>HTTP Signature Authentication</li><li>Djoser</li></ol>`,44),m=s("br",null,null,-1),v=s("br",null,null,-1),b={href:"https://blog.csdn.net/runnoob_1115/article/details/78497702",target:"_blank",rel:"noopener noreferrer"};function g(_,y){const a=p("ExternalLinkIcon");return i(),c("div",null,[u,s("p",null,[n("此方案使用simple token-based HTTP Authentication方案。Token验证适用于client-server，例如本机桌面和移动客户端。"),r,n(" 为了使用此方案需要在设置中包含TokenAuthentication，和INSTALLED_APPS中设置rest_framework.authtoken"),d,n(" 需要进行数据迁移，"),s("a",k,[n("请设置完成后使用manage.py"),e(a)]),n(" migrate")]),h,s("p",null,[n("————————————————"),m,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),v,n(" 原文链接："),s("a",b,[n("https://blog.csdn.net/runnoob_1115/article/details/78497702"),e(a)])])])}const A=o(l,[["render",g],["__file","Django-restframework21-Authentication认证类.html.vue"]]);export{A as default};
