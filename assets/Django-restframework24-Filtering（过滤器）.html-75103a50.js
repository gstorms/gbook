import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,a as s,b as n,d as i,f as l}from"./app-3f278ba4.js";const c={},r=l(`<h1 id="drf24-filtering-过滤器" tabindex="-1"><a class="header-anchor" href="#drf24-filtering-过滤器" aria-hidden="true">#</a> DRF24-Filtering（过滤器）</h1><p>QuerySet一般提供数据库模型中的全部实例。但是通常情况下你只需要全部对象的子集</p><h2 id="_1-filtering" tabindex="-1"><a class="header-anchor" href="#_1-filtering" aria-hidden="true">#</a> 1 Filtering</h2><p>简单的过滤方法，继承GenericAPIView，然后重写.get_queryset()方法。</p><h3 id="_1-根据当前用户进行过滤-使用request-user" tabindex="-1"><a class="header-anchor" href="#_1-根据当前用户进行过滤-使用request-user" aria-hidden="true">#</a> 1. 根据当前用户进行过滤（使用request.user）</h3><p>只返回与当前经过身份验证的用户有关的结果，从而返回请求。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>models <span class="token keyword">import</span> Purchase
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> PurchaseSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics

<span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        返回当前用户购买的所有物品
        &quot;&quot;&quot;</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user
        <span class="token keyword">return</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-通过url过滤" tabindex="-1"><a class="header-anchor" href="#_2-通过url过滤" aria-hidden="true">#</a> 2. 通过URL过滤</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># url设置</span>
url<span class="token punctuation">(</span><span class="token string">&#39;^purchases/(?P&lt;username&gt;.+)/$&#39;</span><span class="token punctuation">,</span> PurchaseList<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token comment"># views</span>
<span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser__username<span class="token operator">=</span>username<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-通过查询参数过滤" tabindex="-1"><a class="header-anchor" href="#_3-通过查询参数过滤" aria-hidden="true">#</a> 3. 通过查询参数过滤</h3><p>不用重新设置url</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchaseList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    serializer_class <span class="token operator">=</span> PurchaseSerializer

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        queryset <span class="token operator">=</span> Purchase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        username <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> username <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            queryset <span class="token operator">=</span> queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>purchaser__username<span class="token operator">=</span>username<span class="token punctuation">)</span>
        <span class="token keyword">return</span> queryset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-generic-filtering" tabindex="-1"><a class="header-anchor" href="#_2-generic-filtering" aria-hidden="true">#</a> 2 Generic Filtering</h2><h3 id="_1-设置过滤后端" tabindex="-1"><a class="header-anchor" href="#_1-设置过滤后端" aria-hidden="true">#</a> 1. 设置过滤后端</h3><p>可以通过DEFAULT_FILTER_BACKENDS设置通用的过滤后端</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_FILTER_BACKENDS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&#39;django_filters.rest_framework.DjangoFilterBackend&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在视图中设置过滤后端</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> django_filters<span class="token punctuation">.</span>rest_framework
<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>serializers <span class="token keyword">import</span> UserSerializer
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> generics

<span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>django_filters<span class="token punctuation">.</span>rest_framework<span class="token punctuation">.</span>DjangoFilterBackend<span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-过滤对象查找" tabindex="-1"><a class="header-anchor" href="#_2-过滤对象查找" aria-hidden="true">#</a> 2. 过滤对象查找</h3><p>如果为视图配置了一个过滤后端，会被用来过滤listview的queryset和返回单个对象的queryset.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>products<span class="token operator">/</span><span class="token number">4675</span><span class="token operator">/</span>?category<span class="token operator">=</span>clothing<span class="token operator">&amp;</span>max_price<span class="token operator">=</span><span class="token number">10.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-重写queryset初始化方法" tabindex="-1"><a class="header-anchor" href="#_3-重写queryset初始化方法" aria-hidden="true">#</a> 3. 重写queryset初始化方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PurchasedProductsList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
   返回当前用户购买的所有商品
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> Product
    serializer_class <span class="token operator">=</span> ProductSerializer
    filter_class <span class="token operator">=</span> ProductFilter

    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>user
        <span class="token keyword">return</span> user<span class="token punctuation">.</span>purchase_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-接口使用指南" tabindex="-1"><a class="header-anchor" href="#_3-接口使用指南" aria-hidden="true">#</a> 3 接口使用指南</h2><ol><li>DjangoFilterBackend<br> 支持高度自定义的字段过滤，第一步安装django-filter，然后添加django_filters到INSTALLED_APPS。然后修改设置</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_FILTER_BACKENDS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&#39;django_filters.rest_framework.DjangoFilterBackend&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在视图中添加过滤后端</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django_filters<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> DjangoFilterBackend

<span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要设置简单的相等查询，可以通过设置filter_fields。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ProductList</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Product<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> ProductSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span><span class="token punctuation">)</span>
    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in_stock&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 使用</span>
http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>products?category<span class="token operator">=</span>clothing<span class="token operator">&amp;</span>in_stock<span class="token operator">=</span><span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要使用高级过滤功能，可以在视图中使用FilterSet</p><p>SearchFilter<br> SearchFilter支持单独的查寻参数，基于 Django admin’s search functionality。<br> 使用时，浏览器API接口包含一个SearchFilter。<br> 只有设置了search_fields属性，SearchFilter才能够应用。search_fields应该是墨西哥字段名的列表。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>SearchFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置外键</span>
    search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;profile__profession&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，搜索将使用不区分大小写的部分匹配。搜索参数可能包含多个搜索词，应该使用空格和逗号分隔。如果使用多个搜索条件，那么只有在所有提供的条件匹配的情况下，才会返回对象。<br> 搜索行为可以为search_fields字段设置不同的字符进行限制</p><ul><li>‘^’ Starts-with search.</li><li>‘=’ Exact matches.</li><li>‘@’ Full-text search. (Currently only supported Django’s MySQL backend.)</li><li>‘$’ Regex search.</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>search_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;=username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;=email&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>OrderingFilter<br> 默认情况下，查询参数为‘ordering’，但是可以通过ORDERING_PARAM重写</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>users?ordering<span class="token operator">=</span>username
http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>users?ordering<span class="token operator">=</span><span class="token operator">-</span>username
http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>api<span class="token operator">/</span>users?ordering<span class="token operator">=</span>account<span class="token punctuation">,</span>username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用ordering_fields指定哪些字段用来排序，有助于防止数据泄露。如果没有设置ordering_fields，默认serializer_class中的全部字段都可以用来排序。如果想根据任何字段排序也可以使用’<strong>all</strong>’</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果视图中设置类ordering，那么就默认按其之进行排序。ordering可以指定排序方式，order——by不可以。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserListView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> UserSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>OrderingFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
    ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DjangoObjectPermissionsFilter<br> 一般和django-guardian包一起，在添加了自定义权限的视图中使用。此过滤器仅仅返回用户有权限访问的对象。一般需要为对象添加一个合适的权限管理类，确保每个用户只能操作有权操作的对象。简单的方式就是继承DjangoObjectPermissions，然后添加视图的权限到perms_map中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 权限类permissions.py</span>
<span class="token keyword">class</span> <span class="token class-name">CustomObjectPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">.</span>DjangoObjectPermissions<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Similar to \`DjangoObjectPermissions\`, but adding &#39;view&#39; permissions.
    &quot;&quot;&quot;</span>
    perms_map <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.view_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;OPTIONS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.view_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;HEAD&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.view_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.add_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.change_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;PATCH&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.change_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;%(app_label)s.delete_%(model_name)s&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>

<span class="token comment"># views.py</span>
<span class="token keyword">class</span> <span class="token class-name">EventViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    如果用户有视图权限才为用户列出事件列表。然后用户拥有视图的&#39;add&#39;,
    &#39;change&#39;或&#39;delete&#39;权限才能允许用户操作事件
    &quot;&quot;&quot;</span>
    queryset <span class="token operator">=</span> Event<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> EventSerializer
    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span>DjangoObjectPermissionsFilter<span class="token punctuation">,</span><span class="token punctuation">)</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>myapp<span class="token punctuation">.</span>permissions<span class="token punctuation">.</span>CustomObjectPermissions<span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-自定义通用过滤器" tabindex="-1"><a class="header-anchor" href="#_4-自定义通用过滤器" aria-hidden="true">#</a> 4 自定义通用过滤器</h2><h3 id="_1-使用示例" tabindex="-1"><a class="header-anchor" href="#_1-使用示例" aria-hidden="true">#</a> 1. 使用示例</h3><p>您还可以提供自己的通用过滤后端，或者为其他开发人员编写一个可安装的应用程序。</p><ul><li>重写BaseFilterBackend，</li><li>重写.filter_queryset(self, request, queryset, view)方法，返回一个新的查询集queryset 除了允许客户机执行搜索和过滤，一般的过滤后端对于限制哪些对象应该对任何给定的请求或用户可见是很有用的。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">IsOwnerFilterBackend</span><span class="token punctuation">(</span>filters<span class="token punctuation">.</span>BaseFilterBackend<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    只允许用户看自己的对象
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>owner<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过在视图上重写get_queryset()来实现相同的行为，但是使用filter后端允许您更容易地将这个限制添加到多个视图中，或者在整个API中应用它。</p><h3 id="_2-自定义显示界面" tabindex="-1"><a class="header-anchor" href="#_2-自定义显示界面" aria-hidden="true">#</a> 2. 自定义显示界面</h3><p>通用过滤器（Generic filters）还可以在可浏览的API中提供界面。为了实现这一功能，您应该实现一个to_html()方法，该方法返回一个呈现的HTML表示的过滤器。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>to_html<span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-分页和模式" tabindex="-1"><a class="header-anchor" href="#_3-分页和模式" aria-hidden="true">#</a> 3. 分页和模式</h3><p>通过实现get_schema_fields()方法，还可以对REST框架提供的模式自动生成进行过滤控制。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>get_schema_fields<span class="token punctuation">(</span>self<span class="token punctuation">,</span> view<span class="token punctuation">)</span> <span class="token comment"># 返回一个coreapi.Field实例的列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-三方包" tabindex="-1"><a class="header-anchor" href="#_5-三方包" aria-hidden="true">#</a> 5 三方包</h2><ol><li>Django REST framework filters package</li></ol><p>需和DjangoFilterBackend一起使用，使创建根据关系过滤或多字段过滤查询的过滤器更容易</p><ol start="2"><li>Django REST framework full word search filter</li></ol><p>与filters.SearchFilter二选一</p><ol start="3"><li>Django URL Filter</li></ol><p>django-url-filter提供了一种安全的方式，可以通过友好的url来过滤数据。它与DRF序列化器和字段非常相似，在某种意义上，它们可以被嵌套，除非它们被称为过滤集和过        滤器。这提供了过滤相关数据的简便方法。而且这个库是通用的，所以它可以用来过滤其他数据源，而不仅仅是Django查询集。</p><ol start="4"><li>drf-url-filters</li></ol><p>drf-url-filters是一个简单的Django应用程序，它可以在drf模型视图集的查询中以一种干净、简单和可配置的方式使用过滤器。它还支持对传入的查询params及其值的验证。        在传入的查询参数中，使用了一个漂亮的python包，用于验证。最妙的是，您可以根据您的查询参数来定义自己的验证。</p>`,65),u=s("br",null,null,-1),d=s("br",null,null,-1),k={href:"https://blog.csdn.net/runnoob_1115/article/details/78497746",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,s("p",null,[n("————————————————"),u,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),d,n(" 原文链接："),s("a",k,[n("https://blog.csdn.net/runnoob_1115/article/details/78497746"),i(a)])])])}const _=e(c,[["render",v],["__file","Django-restframework24-Filtering（过滤器）.html.vue"]]);export{_ as default};
