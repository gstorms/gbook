import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as t,c as p,a,b as n,d as o,f as l}from"./app-d0fb0332.js";const r={},c=l(`<h1 id="drf25-pagination-分页" tabindex="-1"><a class="header-anchor" href="#drf25-pagination-分页" aria-hidden="true">#</a> DRF25-Pagination（分页）</h1><p>Django提供几个类专门用于处理分页数据。意味着你的数据被切割成几页。通过Previous/Next的链接进行调用。</p><h2 id="_1-pagination" tabindex="-1"><a class="header-anchor" href="#_1-pagination" aria-hidden="true">#</a> 1 Pagination</h2><h3 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h3><p>REST框架支持自定义分页风格，你可以修改每页显示数据集合的最大长度。<br> 分页链接支持以下两种方式提供给用户：</p><ul><li>分页链接是作为响应内容提供给用户</li><li>分页链接被包含在响应头中（Content-Range或者Link）<br> 内建风格使用作为响应内容提供给用户。这种风格更容易被使用可浏览API的用户所接受<br> 如果使用通用视图或者视图集合。系统会自动帮你进行分页。如果使用的是APIView,你就需要自己调用分页API，确保返回一个分页后的响应。可以将pagination_class设置为None关闭分页功能。</li></ul><h3 id="_2-设置分页风格" tabindex="-1"><a class="header-anchor" href="#_2-设置分页风格" aria-hidden="true">#</a> 2. 设置分页风格</h3><p>可以通过设置DEFAULT_PAGINATION_CLASS和PAGE_SIZE，设置全局变量。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.pagination.LimitOffsetPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要同时设置pagination class和page size。<br> 也可以在单个视图中设置pagination_class属性，一般你需要使用统一的分页风格。</p><h3 id="_3-修改分页风格" tabindex="-1"><a class="header-anchor" href="#_3-修改分页风格" aria-hidden="true">#</a> 3. 修改分页风格</h3><p>如果你需要修改分页风格 ，系需要重写分页类，然后设置你需要修改的属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LargeResultsSetPagination</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page_size <span class="token operator">=</span> <span class="token number">1000</span>
    page_size_query_param <span class="token operator">=</span> <span class="token string">&#39;page_size&#39;</span>
    max_page_size <span class="token operator">=</span> <span class="token number">10000</span>

<span class="token keyword">class</span> <span class="token class-name">StandardResultsSetPagination</span><span class="token punctuation">(</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page_size <span class="token operator">=</span> <span class="token number">100</span>
    page_size_query_param <span class="token operator">=</span> <span class="token string">&#39;page_size&#39;</span>
    max_page_size <span class="token operator">=</span> <span class="token number">1000</span>

<span class="token comment"># 然后在视图中使用.pagination_class属性调用该自定义类</span>
<span class="token keyword">class</span> <span class="token class-name">BillingRecordsView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Billing<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> BillingRecordsSerializer
    pagination_class <span class="token operator">=</span> LargeResultsSetPagination

<span class="token comment"># 或者是在设置中修改DEFAULT_PAGINATION_CLASS</span>
REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;apps.core.pagination.StandardResultsSetPagination&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-api指南" tabindex="-1"><a class="header-anchor" href="#_2-api指南" aria-hidden="true">#</a> 2 API指南</h2><h3 id="_1-pagenumberpagination" tabindex="-1"><a class="header-anchor" href="#_1-pagenumberpagination" aria-hidden="true">#</a> 1. PageNumberPagination</h3><p>这个分页样式接受请求查询参数中的一个数字页面号。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>GET https<span class="token punctuation">:</span><span class="token operator">//</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token operator">/</span>accounts<span class="token operator">/</span>?page<span class="token operator">=</span><span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>响应对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>HTTP <span class="token number">200</span> OK
<span class="token punctuation">{</span>
    <span class="token string">&quot;count&quot;</span><span class="token punctuation">:</span> <span class="token number">1023</span>
    <span class="token string">&quot;next&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?page=5&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;previous&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?page=3&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;results&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
       …
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承了GenericAPIView的视图中，也可以设置pagination_class属性选择PageNumberPagination<br> 配置属性：</p><ul><li>django_paginator_class<br> 使用Django分页类。默认为django.core.paginator.Paginator，适用于大多数情况</li><li>page_size<br> 用来显示每页显示对象的数量，如果设置了就重写PAGE_SIZE设置。</li><li>page_query_param<br> 页面查询参数，一个字符串值，指示用于分页控件的查询参数的名称。</li><li>page_size_query_param<br> 该参数允许客户端根据每个请求设置页面大小。一般默认设置为None.</li><li>max_page_size<br> 只有设置了page_size_query_param参数，该参数才有意义，为客户端请求页面中能够显示的最大数量</li><li>last_page_strings<br> 用于存储使用page_query_param参数请求过的值列表或元组，默认为(‘last’,)</li><li>template<br> 用来在可浏览API中，渲染分页的模板（html）名字，可以重写分页样式，或者设置为None,禁用分页。默认为”rest_framework/pagination/numbers.html”。</li></ul><h3 id="_2-limitoffsetpagination" tabindex="-1"><a class="header-anchor" href="#_2-limitoffsetpagination" aria-hidden="true">#</a> 2. LimitOffsetPagination</h3><p>这种分页样式与查找多个数据库记录时使用的语法类似。客户端包括一个”limit”和一个 “offset”查询参数。该限制表示返回的条目的最大数量，并且与page_size大小相同。偏移量表示查询的起始位置，与完整的未分页项的集合有关。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>GET https<span class="token punctuation">:</span><span class="token operator">//</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token operator">/</span>accounts<span class="token operator">/</span>?limit<span class="token operator">=</span><span class="token number">100</span><span class="token operator">&amp;</span>offset<span class="token operator">=</span><span class="token number">400</span>

HTTP <span class="token number">200</span> OK
<span class="token punctuation">{</span>
    <span class="token string">&quot;count&quot;</span><span class="token punctuation">:</span> <span class="token number">1023</span>
    <span class="token string">&quot;next&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?limit=100&amp;offset=500&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;previous&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://api.example.org/accounts/?limit=100&amp;offset=300&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;results&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
       …
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种风格需要设置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.pagination.LimitOffsetPagination&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，你也可以设置PAGE_SIZE，然后客户端就可以设置limit参数了。<br> 继承了GenericAPIView的子类，可以通过设置pagination_class属性为LimitOffsetPagination使用<br> （重写LimitOffsetPagination类）配置：</p><ul><li>default_limit： 如果客户端没有提供，则默认使用与PAGE_SIZE值一样。</li><li>limit_query_param：表示限制查询参数的名字，默认为’limit’</li><li>offset_query_param：表示偏移参数的名字， 默认为’offset’</li><li>max_limit：允许页面中显示的最大数量，默认为None</li><li>template: 渲染分页结果的模板名，默认为”rest_framework/pagination/numbers.html”.</li></ul><h3 id="_3-cursorpagination" tabindex="-1"><a class="header-anchor" href="#_3-cursorpagination" aria-hidden="true">#</a> 3. CursorPagination</h3><p>基于游标的分页显示了一个不透明的“cursor”指示器，客户端可以使用它来浏览结果集。这种分页方式只允许用户向前或向后进行查询。并且不允许客户端导航到任意位置。<br> 基于游标的分页要求在结果集中有一个惟一的、不变的条目顺序。这个排序通常是记录上的一个创建时间戳，用来表示分页的顺序。<br> 基于游标的分页比其他方案更复杂。它还要求结果集给出一个固定的顺序，并且不允许客户端任意地对结果集进行索引，但是它确实提供了以下好处:</p><ul><li>提供一致的分页视图。当使用正确的指针分页时，即使在分页过程中其他客户端插入新项时，客户端也不会在分页时看到同一个项两次。</li><li>支持使用非常大的数据集。大量数据集使用基于off-set的分页方式可能会变得低效或不可用。基于指针的分页模式有固定的时间属性，并且随着数据集的大小的增加而不会减慢。</li></ul><ol><li>细节和局限性</li></ol><p>正确地使用基于游标的分页方式需要对细节有一点注意。你需要考虑你想要什么样的命令翻转这个排序方式。默认是通过“-created”来排序的。这假设在模型实例上必须有一        个“created”的时间戳字段，并将显示一个“timeline”样式的分页视图，其中最近添加的项是第一个。<br> 你也可以通过’ordering’属性重写这个分页类，或者使用OrderingFilter过滤器这两种方式与CursorPagination一起使用。当使用OrderingFilter时，必须仔细考虑用来排序的字        段<br> 使用游标分页的字段要求：<br> 应该是一个不变的值，例如时间戳，标签，或者其他只在创建时设置的字段<br> 应该是唯一的或者近乎唯一的，使用毫秒精度的时间戳是一个很好的例子<br> 应该是一个强制表示为字符串的值<br> 该字段应该有一个数据库索引（重点）<br> 不满足这些要求，也可以使用游标分页，但会失去一些游标的优点</p><ol start="2"><li>设置全局变量</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.pagination.CursorPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在GenericAPIView子类中设置pagination_class属性</p><ol start="3"><li>配置</li></ol><ul><li>page_size：显示的最大条数</li><li>cursor_query_param： 游标查询参数名，默认为’cursor’</li><li>ordering： 排序字段名的列表或者元组，例如ordering = ‘slug’，默认为-created</li><li>template： 渲染模板名，默认为”rest_framework/pagination/previous_and_next.html”</li></ul><h2 id="_3-自定义分页" tabindex="-1"><a class="header-anchor" href="#_3-自定义分页" aria-hidden="true">#</a> 3 自定义分页</h2><ol><li>继承pagination.BasePagination</li><li>重写paginate_queryset(self, queryset, request, view=None)方法</li></ol><p>初始化queryset对象，设置pagination实例，返回一个只包含用户请求内容的可迭代的对象，形成分页对象</p><ol start="3"><li>重写get_paginated_response(self, data)方法</li></ol><p>序列化请求页中说包含的对象，返回一个Response对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CustomPagination</span><span class="token punctuation">(</span>pagination<span class="token punctuation">.</span>PageNumberPagination<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get_paginated_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&#39;links&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
               <span class="token string">&#39;next&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>get_next_link<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token string">&#39;previous&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>get_previous_link<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token string">&#39;count&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>page<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
            <span class="token string">&#39;results&#39;</span><span class="token punctuation">:</span> data
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 设置自定义分页、</span>
REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_PAGINATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;my_project.apps.core.pagination.CustomPagination&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;PAGE_SIZE&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，如果在意在可浏览的API中如何显示键的顺序，那么您可能会选择在构建分页响应的主体时使用OrderedDict，但这是可选的。</p><ol start="4"><li>分页模式</li></ol><p>如果需要对REST框架提供的分页进行控制，可以使用get_schema_fields(self, view)方法，该方法返回一个coreapi.Field实例的列表</p><h2 id="_4-html分页控制" tabindex="-1"><a class="header-anchor" href="#_4-html分页控制" aria-hidden="true">#</a> 4 HTML分页控制</h2><p>PageNumberPagination和LimitOffsetPagination使用page和previous，next进行控制<br> CursorPagination仅使用 previous和next进行控制</p><h3 id="_1-自定义控制" tabindex="-1"><a class="header-anchor" href="#_1-自定义控制" aria-hidden="true">#</a> 1. 自定义控制</h3><p>通过重写 templates。</p><ul><li>rest_framework/pagination/numbers.html</li><li>rest_framework/pagination/previous_and_next.html</li></ul><h3 id="_2-低级api" tabindex="-1"><a class="header-anchor" href="#_2-低级api" aria-hidden="true">#</a> 2. 低级API</h3><p>在pagination中，display_page_controls属性将用于决定分页类是否具有控制显示的功能<br> 自定义pagination类在paginate_queryset()方法中应该设置为True</p><h2 id="_5-三方包" tabindex="-1"><a class="header-anchor" href="#_5-三方包" aria-hidden="true">#</a> 5 三方包</h2><ol><li>DRF-extensions</li><li>drf-proxy-pagination</li></ol><p>提供ProxyPagination，用于允许在查询参数中设置分页类。</p><ol start="3"><li>link-header-pagination</li></ol>`,58),u=a("br",null,null,-1),d=a("br",null,null,-1),k={href:"https://blog.csdn.net/runnoob_1115/article/details/78506659",target:"_blank",rel:"noopener noreferrer"};function m(g,v){const s=i("ExternalLinkIcon");return t(),p("div",null,[c,a("p",null,[n("————————————————"),u,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),d,n(" 原文链接："),a("a",k,[n("https://blog.csdn.net/runnoob_1115/article/details/78506659"),o(s)])])])}const h=e(r,[["render",m],["__file","Django-restframework25-Pagination（分页）.html.vue"]]);export{h as default};
