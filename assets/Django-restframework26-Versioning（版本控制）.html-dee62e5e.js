import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-cfbf85c1.js";const t={},o=e(`<h1 id="drf26-versioning-版本控制" tabindex="-1"><a class="header-anchor" href="#drf26-versioning-版本控制" aria-hidden="true">#</a> DRF26-Versioning（版本控制）</h1><h2 id="一、versioning" tabindex="-1"><a class="header-anchor" href="#一、versioning" aria-hidden="true">#</a> 一、Versioning</h2><h3 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1.简介</h3><p>API版本控制可以用来在不同的客户端使用不同的行为。REST框架提供了大量不同的版本设计。<br> 版本控制是由传入的客户端请求决定的，并且可能基于请求URL，或者基于请求头。<br> 有许多有效的方法达到版本控制的目的。特别是为具有多个客户的长期系统工程进行设计时，没有版本控制的系统也是可以的。</p><h3 id="_2-rest框架的版本控制" tabindex="-1"><a class="header-anchor" href="#_2-rest框架的版本控制" aria-hidden="true">#</a> 2.REST框架的版本控制</h3><p>当使用版本控制时，request.version属性（字符串）与客户端请求的版本一致。<br> 默认情况下，没有使用版本控制，request.version将会返回None</p><ol><li>基于不同版本进行不同的行为</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>version <span class="token operator">==</span> <span class="token string">&#39;v1&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> AccountSerializerVersion1
    <span class="token keyword">return</span> AccountSerializer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>改变URL</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse

reverse<span class="token punctuation">(</span><span class="token string">&#39;bookings-list&#39;</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reverse函数将应用于转换任何请求版本的URL。</p><ul><li>NamespacedVersioning：类似命名空间</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;v1:bookings-list&#39;</span>
http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>org<span class="token operator">/</span>v1<span class="token operator">/</span>bookings<span class="token operator">/</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>QueryParameterVersioning：查询参数</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>http<span class="token punctuation">:</span><span class="token operator">//</span>example<span class="token punctuation">.</span>org<span class="token operator">/</span>bookings<span class="token operator">/</span>?version<span class="token operator">=</span><span class="token number">1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>版本控制和超链接序列化器<br> 当使用超链接的序列化器和基于URL的版本控制方案时，确保将请求作为序列化器的上下文。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> Booking<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer <span class="token operator">=</span> BookingsSerializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;all_bookings&#39;</span><span class="token punctuation">:</span> serializer<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-配置版本控制方案" tabindex="-1"><a class="header-anchor" href="#_3-配置版本控制方案" aria-hidden="true">#</a> 3. 配置版本控制方案</h3><ol><li>全局默认值设置</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_VERSIONING_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;rest_framework.versioning.NamespaceVersioning&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除非明确设置，否则DEFAULT_VERSIONING_CLASS值为None.此例中request.version将会始终返回None<br> 您还可以在一个单独的视图上设置版本控制方案。通常，您不需要这样做，因为在全局范围内使用一个版本控制方案更有意义。如果您确实需要这样做，请使用versioning_class属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ProfileList</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    versioning_class <span class="token operator">=</span> versioning<span class="token punctuation">.</span>QueryParameterVersioning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>其他的版本设置 <ul><li>DEFAULT_VERSION：传递给request.version的值，默认为None</li><li>ALLOWED_VERSIONS:如果设置，返回一系列用于控制版本的集合。如果客户提供的版本不在此集合中，将会抛出一个错误，一般情况下，DEFAULT_VERSION版本是ALLOWED_VERSIONS的一部分。默认为None.</li><li>VERSION_PARAM:应该用于任何版本控制参数的字符串，例如在媒体类型或URL查询参数中。默认为’version’。</li></ul></li></ol><p>设置自己的版本控制类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>versioning <span class="token keyword">import</span> URLPathVersioning
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">ExampleVersioning</span><span class="token punctuation">(</span>URLPathVersioning<span class="token punctuation">)</span><span class="token punctuation">:</span>
    default_version <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    allowed_versions <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    version_param <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">class</span> <span class="token class-name">ExampleView</span><span class="token punctuation">(</span>APIVIew<span class="token punctuation">)</span><span class="token punctuation">:</span>
    versioning_class <span class="token operator">=</span> ExampleVersioning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、自定义版本模式" tabindex="-1"><a class="header-anchor" href="#二、自定义版本模式" aria-hidden="true">#</a> 二、自定义版本模式</h2><ol><li>继承BaseVersioning类</li><li>重写.determine_version方法</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">XAPIVersionScheme</span><span class="token punctuation">(</span>versioning<span class="token punctuation">.</span>BaseVersioning<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">determine_version</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;HTTP_X_API_VERSION&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的版本控制是基于请求URL的，如果需要确定更改版本的url是怎么确定的，此时你就需要重写.reverse()方法。</p>`,29),p=[o];function i(l,c){return s(),a("div",null,p)}const d=n(t,[["render",i],["__file","Django-restframework26-Versioning（版本控制）.html.vue"]]);export{d as default};
