import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-cfbf85c1.js";const t={},o=e(`<h1 id="drf27-content-negotiation-内容协议" tabindex="-1"><a class="header-anchor" href="#drf27-content-negotiation-内容协议" aria-hidden="true">#</a> DRF27-Content-negotiation（内容协议）</h1><p>HTTP为‘内容协议’提供了几种机制。当存在多种表现方式可以选择时，该过程会选择最好的表现方式</p><h2 id="一、content-negotiation" tabindex="-1"><a class="header-anchor" href="#一、content-negotiation" aria-hidden="true">#</a> 一、Content negotiation</h2><h3 id="_1-确定渲染器" tabindex="-1"><a class="header-anchor" href="#_1-确定渲染器" aria-hidden="true">#</a> 1.确定渲染器</h3><p>REST框架使用简单的内容协议方式，基于可用渲染器的优先级和客户端的Accept:请求头中所标识的，用来确定返回给客户端的媒体类型。部分由服务端驱动，部分由客户端驱动。</p><ol><li>更具体的媒体类型被指定为不那么具体的媒体类型</li><li>如果多个媒体类型具有相同的特征，那么优先使用视图中指定的渲染器中的第一个</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 客户端的Accept请求头</span>
application<span class="token operator">/</span>json<span class="token punctuation">;</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> application<span class="token operator">/</span>json<span class="token punctuation">,</span> application<span class="token operator">/</span>yaml<span class="token punctuation">,</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span>
<span class="token comment"># 优先级为</span>
<span class="token number">1.</span> application<span class="token operator">/</span>json<span class="token punctuation">;</span> indent<span class="token operator">=</span><span class="token number">4</span>
<span class="token number">2.</span> application<span class="token operator">/</span>json<span class="token punctuation">,</span> application<span class="token operator">/</span>yaml<span class="token punctuation">,</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span> 
<span class="token number">3.</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在确定首选项时，“q”值不会被REST框架考虑。“q”值的使用会对缓存产生负面影响，在作者看来，它们是一种不必要的、过于复杂的内容协商方法。</p><h2 id="二、自定义内容协商协议" tabindex="-1"><a class="header-anchor" href="#二、自定义内容协商协议" aria-hidden="true">#</a> 二、自定义内容协商协议</h2><p>继承重写BaseContentNegotiation<br> 实现.select_parser(request, parsers)方法<br> 从可用的parser实例中选择一个合适的返回，如果没有解析器可以处理这种数据，就返回None<br> 实现.select_renderer(request, renderers, format_suffix)方法<br> 返回一个元组(renderer instance, media type)，或者NotAcceptable异常</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>negotiation <span class="token keyword">import</span> BaseContentNegotiation

<span class="token keyword">class</span> <span class="token class-name">IgnoreClientContentNegotiation</span><span class="token punctuation">(</span>BaseContentNegotiation<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">select_parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> parsers<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Select the first parser in the \`.parser_classes\` list.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> parsers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">select_renderer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> renderers<span class="token punctuation">,</span> format_suffix<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Select the first renderer in the \`.renderer_classes\` list.
        &quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>renderers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> renderers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>media_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>设置内容协议</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;DEFAULT_CONTENT_NEGOTIATION_CLASS&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;myapp.negotiation.IgnoreClientContentNegotiation&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment"># 或者</span>
<span class="token keyword">from</span> myapp<span class="token punctuation">.</span>negotiation <span class="token keyword">import</span> IgnoreClientContentNegotiation
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView

<span class="token keyword">class</span> <span class="token class-name">NoNegotiationView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    An example view that does not perform content negotiation.
    &quot;&quot;&quot;</span>
    content_negotiation_class <span class="token operator">=</span> IgnoreClientContentNegotiation

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">&#39;accepted media type&#39;</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>accepted_renderer<span class="token punctuation">.</span>media_type
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[o];function i(c,l){return s(),a("div",null,p)}const d=n(t,[["render",i],["__file","Django-restframework27-Content-negotiation（内容协议）.html.vue"]]);export{d as default};
