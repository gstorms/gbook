import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-207e7d61.js";const t={},p=e(`<h1 id="drf29-schemas-概要-模式-架构" tabindex="-1"><a class="header-anchor" href="#drf29-schemas-概要-模式-架构" aria-hidden="true">#</a> DRF29-Schemas（概要，模式，架构）</h1><blockquote><p>一份机器可读的关于API接口中有哪些资源可以使用，它们的url是多少，它们是如何呈现的，以及它们支持什么操作</p></blockquote><p>API架构是一种有用的工具，它允许使用实例，包括生成参考文档，或者驱动动态客户端库，这些库可以与您的API交互。</p><h2 id="一、内部陈述架构" tabindex="-1"><a class="header-anchor" href="#一、内部陈述架构" aria-hidden="true">#</a> 一、内部陈述架构</h2><p>简介<br> REST框架使用核心API来在独立表单中对架构信息进行建模。然后可以将这些信息渲染为各种不同的概要格式，或者用于生成API文档。<br> 在使用Core API时，架构信息被表示为一个文档，它是关于API信息的顶级容器对象。可用的API交互是使用Link来表示的。每个链接都包含一个URL、HTTP方法，并且可能包含一个Field列表，该列表描述了API端点可以接受的任何参数。Link和Field 实例也可能包括描述，这些描述允许将API架构呈现给用户文档。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>coreapi<span class="token punctuation">.</span>Document<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Flight Search API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://api.example.org/&#39;</span><span class="token punctuation">,</span>
    content<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&#39;search&#39;</span><span class="token punctuation">:</span> coreapi<span class="token punctuation">.</span>Link<span class="token punctuation">(</span>
            url<span class="token operator">=</span><span class="token string">&#39;/search/&#39;</span><span class="token punctuation">,</span>
            action<span class="token operator">=</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
            fields<span class="token operator">=</span><span class="token punctuation">[</span>
                coreapi<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>
                    name<span class="token operator">=</span><span class="token string">&#39;from&#39;</span><span class="token punctuation">,</span>
                    required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                    location<span class="token operator">=</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">,</span>
                    description<span class="token operator">=</span><span class="token string">&#39;City name or airport code.&#39;</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                coreapi<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>
                    name<span class="token operator">=</span><span class="token string">&#39;to&#39;</span><span class="token punctuation">,</span>
                    required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                    location<span class="token operator">=</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">,</span>
                    description<span class="token operator">=</span><span class="token string">&#39;City name or airport code.&#39;</span>
                <span class="token punctuation">)</span><span class="token punctuation">,</span>
                coreapi<span class="token punctuation">.</span>Field<span class="token punctuation">(</span>
                    name<span class="token operator">=</span><span class="token string">&#39;date&#39;</span><span class="token punctuation">,</span>
                    required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                    location<span class="token operator">=</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">,</span>
                    description<span class="token operator">=</span><span class="token string">&#39;Flight date in &quot;YYYY-MM-DD&quot; format.&#39;</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            description<span class="token operator">=</span><span class="token string">&#39;Return flight availability and prices.&#39;</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>架构输出格式<br> 为了将其表现为一个HTTP响应对象，架构的内部表示必须渲染成真实的字节以供响应对象使用。<br> Core JSON被设计成使用 Core API的标准格式。REST框架包含一个渲染类用于处理这种媒体类型，renderers.CoreJSONRenderer。<br> 其他的架构模式，如Open API (“Swagger”), JSON HyperSchema, or API Blueprint也能通过自定义渲染类来实现渲染。</p><p>架构和超链接媒体<br> 值得指出的是，Core API还可以用于hypermedia response，这是API模式的另一种交互风格。<br> 使用一个API架构，整个可用的接口将作为一个端点预先呈现。对于单个API端点的响应通常以纯数据的方式呈现，而不需要在每个响应中包含任何进一步的交互。<br> 使用Hypermedia时，客户端会呈现一个包含数据和可用交互的文档。每个交互都将产生一个新文档，详细描述当前状态和可用的交互。</p><h2 id="二、添加一个模式" tabindex="-1"><a class="header-anchor" href="#二、添加一个模式" aria-hidden="true">#</a> 二、添加一个模式</h2><p>REST框架包含一个功能自动生成一个schema，或者允许你指定一个。有许多不同的方式来为你添加一个schema。</p><h3 id="_1-使用get-schema-view-方法" tabindex="-1"><a class="header-anchor" href="#_1-使用get-schema-view-方法" aria-hidden="true">#</a> 1. 使用get_schema_view()方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas <span class="token keyword">import</span> get_schema_view

schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&quot;Server Monitoring API&quot;</span><span class="token punctuation">)</span>

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">&#39;^$&#39;</span><span class="token punctuation">,</span> schema_view<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦添加了视图，您就可以创建API请求来检索自动生成的模式定义。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>$ http http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span> Accept<span class="token punctuation">:</span>application<span class="token operator">/</span>coreapi<span class="token operator">+</span>json
HTTP<span class="token operator">/</span><span class="token number">1.0</span> <span class="token number">200</span> OK
Allow<span class="token punctuation">:</span> GET<span class="token punctuation">,</span> HEAD<span class="token punctuation">,</span> OPTIONS
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>vnd<span class="token punctuation">.</span>coreapi<span class="token operator">+</span>json

<span class="token punctuation">{</span>
    <span class="token string">&quot;_meta&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Server Monitoring API&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;_type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;document&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-get-schema-view-的参数为" tabindex="-1"><a class="header-anchor" href="#_2-get-schema-view-的参数为" aria-hidden="true">#</a> 2. get_schema_view()的参数为：</h3><ul><li>title：描述模式标题</li><li>url:可用于传递模式的规范URL。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Server Monitoring API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://www.example.org/api/&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>urlconf:一个字符串表示您想要生成一个API模式的URL conf的导入路径。默认值为django的 ROOT_URLCONF设置</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Server Monitoring API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://www.example.org/api/&#39;</span><span class="token punctuation">,</span>
    urlconf<span class="token operator">=</span><span class="token string">&#39;myproject.urls&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>renderer_classes：用来传递API根端点的渲染器类。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>schemas <span class="token keyword">import</span> get_schema_view
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>renderers <span class="token keyword">import</span> CoreJSONRenderer
<span class="token keyword">from</span> my_custom_package <span class="token keyword">import</span> APIBlueprintRenderer

schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Server Monitoring API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://www.example.org/api/&#39;</span><span class="token punctuation">,</span>
    renderer_classes<span class="token operator">=</span><span class="token punctuation">[</span>CoreJSONRenderer<span class="token punctuation">,</span> APIBlueprintRenderer<span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>patterns<br> 用于限制内联的url列表，如果你仅想暴露myproject.api的urls:</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>schema_url_patterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">r&#39;^api/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;myproject.api.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

schema_view <span class="token operator">=</span> get_schema_view<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Server Monitoring API&#39;</span><span class="token punctuation">,</span>
    url<span class="token operator">=</span><span class="token string">&#39;https://www.example.org/api/&#39;</span><span class="token punctuation">,</span>
    patterns<span class="token operator">=</span>schema_url_patterns<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>generator_class<br> 指定一个SchemaGenerator子类，用于传递SchemaView<br> 3. 显示指定一个SchemaView<br> 如果需要比get_schema_view()更多的控制权限，你需要使用SchemaGenerator类自动创建Document的实例，然后从视图中返回。<br> 这个选项给您提供了您想要的任何行为灵活设置模式端点。例如，您可以将不同的权限、节流或身份验证策略应用到模式端点。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># views.py</span>
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token punctuation">,</span> renderer_classes
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> renderers<span class="token punctuation">,</span> response<span class="token punctuation">,</span> schemas

generator <span class="token operator">=</span> schemas<span class="token punctuation">.</span>SchemaGenerator<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;Bookings API&#39;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>renderers<span class="token punctuation">.</span>CoreJSONRenderer<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">schema_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    schema <span class="token operator">=</span> generator<span class="token punctuation">.</span>get_schema<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>schema<span class="token punctuation">)</span>

<span class="token comment"># urls.py</span>
urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    url<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> schema_view<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以为不同的用户提供不同的模式，这取决于他们所拥有的权限。此方法可用于确保未经身份验证的请求与经过身份验证的请求不同，或确保不同的用户根据角色的不同判断用户是否可见。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>renderers<span class="token punctuation">.</span>CoreJSONRenderer<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">schema_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    generator <span class="token operator">=</span> schemas<span class="token punctuation">.</span>SchemaGenerator<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;Bookings API&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>generator<span class="token punctuation">.</span>get_schema<span class="token punctuation">(</span>request<span class="token operator">=</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-显示模式定义" tabindex="-1"><a class="header-anchor" href="#_3-显示模式定义" aria-hidden="true">#</a> 3. 显示模式定义</h3><p>自动生成方法的另一种选择是显式地指定API模式，方法是在代码中声明一个Document对象。这样做需要更多的工作，但是可以确保您对模式表示有完全的控制。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> coreapi
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view<span class="token punctuation">,</span> renderer_classes
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> renderers<span class="token punctuation">,</span> response

schema <span class="token operator">=</span> coreapi<span class="token punctuation">.</span>Document<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;Bookings API&#39;</span><span class="token punctuation">,</span>
    content<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@renderer_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>renderers<span class="token punctuation">.</span>CoreJSONRenderer<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">schema_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>Response<span class="token punctuation">(</span>schema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-静态模式文件" tabindex="-1"><a class="header-anchor" href="#_4-静态模式文件" aria-hidden="true">#</a> 4. 静态模式文件</h3><p>最后一个选项是将您的API模式编写为静态文件，使用可用的一种格式，比如Core JSON或Open API。</p>`,32),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","Django-restframework29-Schemas（概要，模式，架构）.html.vue"]]);export{d as default};
