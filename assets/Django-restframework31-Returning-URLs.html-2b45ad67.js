import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as r,a,b as n,d as i,f as s}from"./app-207e7d61.js";const c={},l=s('<h1 id="drf31-returning-urls" tabindex="-1"><a class="header-anchor" href="#drf31-returning-urls" aria-hidden="true">#</a> DRF31-Returning-URLs</h1><p>REST架构风格与其他基于网络的风格的主要特征是它强调组件之间的统一接口。</p><h2 id="一、returning-urls" tabindex="-1"><a class="header-anchor" href="#一、returning-urls" aria-hidden="true">#</a> 一、Returning URLs</h2><h3 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1.简介</h3>',4),u={href:"http://example.com/foobar",target:"_blank",rel:"noopener noreferrer"},d=a("br",null,null,-1),k=s(`<ul><li>更明确</li><li>减轻 API客户端负担</li><li>当在诸如JSON这样的表示中没有原生URI类型时，字符串的含义就没有什么不明确的地方了。</li><li>它使得使用超链接标记HTML表示变得很容易。<br> REST框架提供了两个实用的功能使返回绝对URI更简单。不是必须要求这么做，但是API自我描述时，会自动创建一个超链接，使浏览API更容易。</li></ul><h3 id="_2-reverse" tabindex="-1"><a class="header-anchor" href="#_2-reverse" aria-hidden="true">#</a> 2. reverse</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> reverse<span class="token punctuation">(</span>viewname<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与django.urls.reverse作用相似，除非它返回一个完全限定的URL，使用请求来确定主机和端口。<br> 应该将函数关键字参数包含在url中，例如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>reverse <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView
<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>timezone <span class="token keyword">import</span> now

<span class="token keyword">class</span> <span class="token class-name">APIRootView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
        year <span class="token operator">=</span> now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year
        data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token string">&#39;year-summary-url&#39;</span><span class="token punctuation">:</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;year-summary&#39;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>year<span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-reverse-lazy" tabindex="-1"><a class="header-anchor" href="#_3-reverse-lazy" aria-hidden="true">#</a> 3. reverse_lazy</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> reverse_lazy<span class="token punctuation">(</span>viewname<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与django.urls.reverse_lazy方法类似，除了在返回完整的url链接时，也需要包含请求参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>api_root <span class="token operator">=</span> reverse_lazy<span class="token punctuation">(</span><span class="token string">&#39;api-root&#39;</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9);function v(m,h){const e=o("ExternalLinkIcon");return p(),r("div",null,[l,a("p",null,[n("一般，从Web API返回绝对 URI更好，例如"),a("a",u,[n("http://example.com/foobar"),i(e)]),n("，而不是返回相对uri，例如/foobar。"),d,n(" 优点：")]),k])}const _=t(c,[["render",v],["__file","Django-restframework31-Returning-URLs.html.vue"]]);export{_ as default};
