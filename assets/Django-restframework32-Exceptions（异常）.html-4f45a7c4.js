import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a,b as n,d as i,f as c}from"./app-207e7d61.js";const l={},r=c(`<h1 id="drf32-exceptions-异常" tabindex="-1"><a class="header-anchor" href="#drf32-exceptions-异常" aria-hidden="true">#</a> DRF32-Exceptions（异常）</h1><p>一般在程序最外层统一对异常进行处理</p><h2 id="一、exceptions" tabindex="-1"><a class="header-anchor" href="#一、exceptions" aria-hidden="true">#</a> 一、Exceptions</h2><h3 id="_1-rest框架中视图中异常处理" tabindex="-1"><a class="header-anchor" href="#_1-rest框架中视图中异常处理" aria-hidden="true">#</a> 1.REST框架中视图中异常处理</h3><p>视图处理不同的异常，然后返回合适的异常响应。<br> 处理的异常包括：</p><ul><li>REST内部抛出的APIException的子类</li><li>Django’s Http404异常</li><li>Django’s PermissionDenied异常<br> 在每一个情况中，REST框架都会返回带有合适状态码和content-type的对象。响应主体包括关于错误的附加详细信息，大多数错误响应对象主体都包含一个‘detail’</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>DELETE http<span class="token punctuation">:</span><span class="token operator">//</span>api<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>foo<span class="token operator">/</span>bar HTTP<span class="token operator">/</span><span class="token number">1.1</span>
Accept<span class="token punctuation">:</span> application<span class="token operator">/</span>json

<span class="token comment"># 接收到的错误信息可能为</span>
HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">405</span> Method Not Allowed
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">42</span>

<span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Method &#39;DELETE&#39; not allowed.&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据验证错误有部分地方不同，response将会包含字段的名字.如果验证错误没有指定一个特别的字段，将会使用‘non_field_errors’键，或者无论什么字符串都会被设置为NON_FIELD_ERRORS_KEY的值</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 验证错误返回信息</span>
HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">400</span> Bad Request
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">94</span>

<span class="token punctuation">{</span><span class="token string">&quot;amount&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;A valid integer is required.&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;This field may not be blank.&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-自定义异常处理" tabindex="-1"><a class="header-anchor" href="#_2-自定义异常处理" aria-hidden="true">#</a> 2.自定义异常处理</h3><p>您可以通过创建一个处理程序函数来实现定制的异常处理，该函数可以将API视图中出现的异常转换为响应对象。这允许您控制API所使用的错误响应的样式。<br> 该函数必须接受一对参数，第一个是要处理的异常，第二个是包含任何额外上下文的字典，例如当前正在处理的视图。异常处理函数要么返回响应对象，要么返回Response，如果异常不能处理，就返回None。如果处理程序返回None，那么异常将被重新提高，而Django将返回一个标准的HTTP 500“server error”响应。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">405</span> Method Not Allowed
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>json
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">62</span>

<span class="token punctuation">{</span><span class="token string">&quot;status_code&quot;</span><span class="token punctuation">:</span> <span class="token number">405</span><span class="token punctuation">,</span> <span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Method &#39;DELETE&#39; not allowed.&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了改变响应对象的样式，可以自定义一个异常处理函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> exception_handler

<span class="token keyword">def</span> <span class="token function">custom_exception_handler</span><span class="token punctuation">(</span>exc<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Call REST framework&#39;s default exception handler first,</span>
    <span class="token comment"># to get the standard error response.</span>
    <span class="token comment"># 调用REST异常处理函数，获得标准的异常响应对象</span>
    response <span class="token operator">=</span> exception_handler<span class="token punctuation">(</span>exc<span class="token punctuation">,</span> context<span class="token punctuation">)</span>

    <span class="token comment"># Now add the HTTP status code to the response.</span>
    <span class="token comment"># 为响应对象添加状态码</span>
    <span class="token keyword">if</span> response <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        response<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token string">&#39;status_code&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>status_code

    <span class="token keyword">return</span> response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的处理函数不使用context参数，但如果异常处理程序需要更多的信息，例如当前正在处理的视图（context[‘view’]），则可能有用。<br> 异常处理函数也必须在设置文件中配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;EXCEPTION_HANDLER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;my_project.my_app.utils.custom_exception_handler&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有指定’EXCEPTION_HANDLER’，默认由REST的标准异常处理。<br> 注意：异常处理只会处理通过raise抛出的异常。努会处理由视图直接返回的异常响应，例如HTTP_400_BAD_REQUEST响应。因为其是验证失败后，由通用视图直接返回的。</p><h2 id="二、接口指南" tabindex="-1"><a class="header-anchor" href="#二、接口指南" aria-hidden="true">#</a> 二、接口指南</h2><h3 id="_1-apiexception" tabindex="-1"><a class="header-anchor" href="#_1-apiexception" aria-hidden="true">#</a> 1.APIException</h3><p>所有APIView和 @api_view内部抛出的异常基类<br> 为了提供一个自定义的异常，需要：</p><ol><li>继承APIException</li><li>设置.status_code，.default_detail，default_code属性。</li></ol><p>比如说有时，你的API依靠的第三方服务无法使用时，需要实现一个 “503 Service Unavailable” HTTP异常：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> APIException

<span class="token keyword">class</span> <span class="token class-name">ServiceUnavailable</span><span class="token punctuation">(</span>APIException<span class="token punctuation">)</span><span class="token punctuation">:</span>
    status_code <span class="token operator">=</span> <span class="token number">503</span>
    default_detail <span class="token operator">=</span> <span class="token string">&#39;Service temporarily unavailable, try again later.&#39;</span>
    default_code <span class="token operator">=</span> <span class="token string">&#39;service_unavailable&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>检查API异常</li></ol><p>有大量属性可以检查API异常的状态。可以使用它们为项目建立一个自定义的异常处理程序。<br> 需要的属性和方法有：</p><ul><li>.detail：返回错误的文本描述信息</li><li>.get_codes()：返回错误代码的标识符</li><li>.get_full_details()，返回文本描述和代码标识符</li></ul><p>在大多数情况下，错误的详细信息 detail 比较简单</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>
You do <span class="token keyword">not</span> have permission to perform this action<span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_codes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
permission_denied
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_full_details<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;You do not have permission to perform this action.&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;permission_denied&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在验证错误中，错误的detail要么是一个列表，要么是一个字典</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;This field is required.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;A valid integer is required.&quot;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_codes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;invalid&quot;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>get_full_details<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;This field is required.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;required&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;A valid integer is required.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;invalid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-parseerror" tabindex="-1"><a class="header-anchor" href="#_2-parseerror" aria-hidden="true">#</a> 2. ParseError</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> ParseError<span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果请求在访问request.data时，包含了错误的数据就会抛出<br> 默认情况下，这个异常会生成一个状态码为“400 Bad Request”的响应。</p><h3 id="_3-authenticationfailed" tabindex="-1"><a class="header-anchor" href="#_3-authenticationfailed" aria-hidden="true">#</a> 3. AuthenticationFailed</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> AuthenticationFailed<span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当接受到的请求包含不正确的认证信息时抛出。<br> 默认情况下，这个异常会生成状态码为“401 Unauthenticated”的响应，但是它也可能生成“403 Forbidden”响应，这取决于使用的身份验证方案。</p><h3 id="_4-notauthenticated" tabindex="-1"><a class="header-anchor" href="#_4-notauthenticated" aria-hidden="true">#</a> 4. NotAuthenticated</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> NotAuthenticated<span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当一个未认证请求在进行权限检查时抛出。<br> 默认情况下，这个异常会生成状态码为“401 Unauthenticated”的响应，但是它也可能生成“403 Forbidden”响应，这取决于使用的身份验证方案。</p><h3 id="_5-permissiondenied" tabindex="-1"><a class="header-anchor" href="#_5-permissiondenied" aria-hidden="true">#</a> 5.PermissionDenied</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> PermissionDenied<span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>认证请求进行权限检查失败后抛出。<br> 默认情况下生成状态码为”403 Forbidden”的响应对象。</p><h3 id="_6-notfound" tabindex="-1"><a class="header-anchor" href="#_6-notfound" aria-hidden="true">#</a> 6.NotFound</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> NotFound<span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当一个资源不在给定的url中抛出，和django中的Http404异常等价。<br> 默认情况下响应状态码为 “404 Not Found”</p><h3 id="_7-methodnotallowed" tabindex="-1"><a class="header-anchor" href="#_7-methodnotallowed" aria-hidden="true">#</a> 7.MethodNotAllowed</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> MethodNotAllowed<span class="token punctuation">(</span>method<span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当传入请求发生时，不会映射到视图上的处理程序方法。<br> 默认情况下，这个异常会生成HTTP状态码为 “405 Method Not Allowed”的响应。</p><h3 id="_8-notacceptable" tabindex="-1"><a class="header-anchor" href="#_8-notacceptable" aria-hidden="true">#</a> 8. NotAcceptable</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> NotAcceptable<span class="token punctuation">(</span>detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当传入请求中的Accept请求头不被任何可用的renderer满足时抛出，默认生成的响应对象状态码为”406 Not Acceptable”</p><h3 id="_9-unsupportedmediatype" tabindex="-1"><a class="header-anchor" href="#_9-unsupportedmediatype" aria-hidden="true">#</a> 9.UnsupportedMediaType</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> UnsupportedMediaType<span class="token punctuation">(</span>media_type<span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有合适的parser用于解析请求的content type类型时抛出<br> 默认生成的响应对象状态码为”415 Unsupported Media Type”</p><h3 id="_10-throttled" tabindex="-1"><a class="header-anchor" href="#_10-throttled" aria-hidden="true">#</a> 10.Throttled</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> Throttled<span class="token punctuation">(</span>wait<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在限流检查失败后抛出<br> 默认生成的响应对象状态码为”429 Too Many Requests”</p><h3 id="_11-validationerror" tabindex="-1"><a class="header-anchor" href="#_11-validationerror" aria-hidden="true">#</a> 11.ValidationError</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Signature<span class="token punctuation">:</span> ValidationError<span class="token punctuation">(</span>detail<span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证错误与其他APIException异常的区别：</p><ul><li>detail：必须有，列表或者字典，或者嵌套的数据结构<br> 一般需要导入ValidationError，例如raise serializers.ValidationError(‘This field must be an integer value.’)<br> ValidationError应该被用于序列化或者字段验证中。也会被serializer.is_valid（）的raise_exception调用。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在通用视图中使用raise_exception=True，意味着你可以重写API接口中的全局验证错误响应对象。为此，你需要使用自定义的异常处理。<br> 默认生成的响应对象状态码为”400 Bad Request”</p>`,63),u=a("br",null,null,-1),d=a("br",null,null,-1),k={href:"https://blog.csdn.net/runnoob_1115/article/details/78506719",target:"_blank",rel:"noopener noreferrer"};function v(h,m){const s=t("ExternalLinkIcon");return o(),p("div",null,[r,a("p",null,[n("————————————————"),u,n(" 版权声明：本文为CSDN博主「敲代码的伪文青」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。"),d,n(" 原文链接："),a("a",k,[n("https://blog.csdn.net/runnoob_1115/article/details/78506719"),i(s)])])])}const _=e(l,[["render",v],["__file","Django-restframework32-Exceptions（异常）.html.vue"]]);export{_ as default};
