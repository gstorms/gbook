import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-731a6e06.js";const e={},p=t(`<h1 id="drf34-testing-测试" tabindex="-1"><a class="header-anchor" href="#drf34-testing-测试" aria-hidden="true">#</a> DRF34-Testing（测试）</h1><blockquote><p>没有经过测试的代码是垃圾代码</p></blockquote><h2 id="一、testing" tabindex="-1"><a class="header-anchor" href="#一、testing" aria-hidden="true">#</a> 一、Testing</h2><p>REST框架包含一些用于扩展Django的测试框架的类，改进对API请求的支持。</p><h2 id="二、apirequestfactory" tabindex="-1"><a class="header-anchor" href="#二、apirequestfactory" aria-hidden="true">#</a> 二、APIRequestFactory</h2><p>继承了djngo的RequestFactory类。</p><h3 id="_1-创建一个测试请求" tabindex="-1"><a class="header-anchor" href="#_1-创建一个测试请求" aria-hidden="true">#</a> 1.创建一个测试请求</h3><p>简介<br> APIRequestFactory几乎支持与Django’s RequestFactory一样的API。意味着标准的.get(), .post(), .put(), .patch(), .delete(), .head() 和.options()都可以使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> APIRequestFactory

<span class="token comment"># 创建一个POST请求</span>
factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/notes/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;new idea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>使用format参数<br> 使用format参数，post, put和patch方法能够轻松使用 content type 而不仅仅是multipart form数据</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/notes/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;new idea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，可用的格式为’multipart’ 和’json’，为了和django存在的RequestFactory兼容，默认值为’multipart’<br> 为了支持更广发的请求格式，或者改变默认格式，可以在配置中修改。</p><ol><li>显示的编码请求正文</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>request <span class="token operator">=</span> factory<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/notes/&#39;</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;new idea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content_type<span class="token operator">=</span><span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>携带表单数据的PUT 和 PATCH方法<br> django和RST的一个不同之处就是，表单数据会被编码成其他方法，不只是post()。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用APIRequestFactory</span>
factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;/notes/547/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;remember to email dave&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 使用django的RequestFactory</span>
<span class="token keyword">from</span> django<span class="token punctuation">.</span>test<span class="token punctuation">.</span>client <span class="token keyword">import</span> encode_multipart<span class="token punctuation">,</span> RequestFactory

factory <span class="token operator">=</span> RequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;remember to email dave&#39;</span><span class="token punctuation">}</span>
content <span class="token operator">=</span> encode_multipart<span class="token punctuation">(</span><span class="token string">&#39;BoUnDaRyStRiNg&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
content_type <span class="token operator">=</span> <span class="token string">&#39;multipart/form-data; boundary=BoUnDaRyStRiNg&#39;</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;/notes/547/&#39;</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> content_type<span class="token operator">=</span>content_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-强制认证" tabindex="-1"><a class="header-anchor" href="#_2-强制认证" aria-hidden="true">#</a> 2. 强制认证</h3><p>当使用force_authenticate()方法的时，能够十分方便的直接认证请求，而不是构造一个身份验证信息<br> force_authenticate(request, user=None, token=None)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> force_authenticate

factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span><span class="token punctuation">)</span>
user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;olivia&#39;</span><span class="token punctuation">)</span>
view <span class="token operator">=</span> AccountDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 生成一个认证请求</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/accounts/django-superstars/&#39;</span><span class="token punctuation">)</span>
force_authenticate<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">)</span>
response <span class="token operator">=</span> view<span class="token punctuation">(</span>request<span class="token punctuation">)</span>

<span class="token comment"># 当需要token时：</span>
user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;olivia&#39;</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/accounts/django-superstars/&#39;</span><span class="token punctuation">)</span>
force_authenticate<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token operator">=</span>user<span class="token punctuation">,</span> token<span class="token operator">=</span>user<span class="token punctuation">.</span>auth_token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，当使用APIRequestFactory，对象返回是一个标准的django HttpRequest，而不是REST框架的Request请求，后者只在视图中创建一次。<br> 这意味着直接为Request对象设置属性可能不会获得预期的效果。例如直接设置.token属性和.user属性将不会起作用，只有在使用session认证时才会有用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Request will only authenticate if \`SessionAuthentication\` is in use.</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/accounts/django-superstars/&#39;</span><span class="token punctuation">)</span>
request<span class="token punctuation">.</span>user <span class="token operator">=</span> user
response <span class="token operator">=</span> view<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-强制进行csrf验证" tabindex="-1"><a class="header-anchor" href="#_3-强制进行csrf验证" aria-hidden="true">#</a> 3.强制进行CSRF验证</h3><p>默认情况下，APIRequestFactory创建的request对象没有经过REST框架视图提供的CSRF验证，如果你需要开启CSRF验证，你可以在APIRequestFactory初始化时，将enforce_csrf_checks设置为True</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>factory <span class="token operator">=</span> APIRequestFactory<span class="token punctuation">(</span>enforce_csrf_checks<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>值得注意的是，Django的标准请求工厂不需要包含这个选项，因为当使用常规的Django时，CSRF验证在中间件中进行，而不是在直接测试视图时运行。在使用REST框架时，CSRF验证发生在视图内部，因此请求工厂需要禁用视图级的CSRF检查。</p><h2 id="三、apiclient" tabindex="-1"><a class="header-anchor" href="#三、apiclient" aria-hidden="true">#</a> 三、APIClient</h2><p>扩展了django的Client类</p><h3 id="_1-制造请求" tabindex="-1"><a class="header-anchor" href="#_1-制造请求" aria-hidden="true">#</a> 1. 制造请求</h3><p>APIClient支持Django’s Client的接口。意味着标准的.get(), .post(), .put(), .patch(), .delete(), .head() 和.options()都可以使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> APIClient

client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/notes/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;new idea&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-认证-authenticating" tabindex="-1"><a class="header-anchor" href="#_2-认证-authenticating" aria-hidden="true">#</a> 2.认证（Authenticating）</h3><ol><li>login(**kwargs)<br> login允许在任何包含SessionAuthentication的视图中，认证请求。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Make all requests in the context of a logged in session.</span>
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>login<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;lauren&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;secret&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 登出</span>
client<span class="token punctuation">.</span>logout<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登录方法适合用于测试使用会话身份验证的API，例如web站点，其中包括与API的AJAX交互。</p><ol><li>credentials(**kwargs)<br> credentials方法可用于设置请求头部，然后被测试客户端包含在所有后续请求中。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>authtoken<span class="token punctuation">.</span>models <span class="token keyword">import</span> Token
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> APIClient

<span class="token comment"># Include an appropriate \`Authorization:\` header on all requests.</span>
token <span class="token operator">=</span> Token<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user__username<span class="token operator">=</span><span class="token string">&#39;lauren&#39;</span><span class="token punctuation">)</span>
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>credentials<span class="token punctuation">(</span>HTTP_AUTHORIZATION<span class="token operator">=</span><span class="token string">&#39;Token &#39;</span> <span class="token operator">+</span> token<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，第二次调用credentials会重新设置凭证。您可以通过调用没有参数的方法来取消任何现有的凭证。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client<span class="token punctuation">.</span>credentials<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>credentials方法适合用于测试需要身份验证头的api，例如基本身份验证、OAuth1a和OAuth2身份验证，以及简单的令牌身份验证方案。<br> 3. force_authenticate(user=None, token=None)<br> 有时你需要完全绕开身份认证，强制所有测试客户端的请求都是已认证的<br> 你就可以使用force_authenticate（）方法了</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;lauren&#39;</span><span class="token punctuation">)</span>
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>force_authenticate<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果后面的请求需要为未认证的，只需要将user或者token设置为None就可以。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client<span class="token punctuation">.</span>force_authenticate<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-csrf-validation" tabindex="-1"><a class="header-anchor" href="#_3-csrf-validation" aria-hidden="true">#</a> 3. CSRF validation</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 开启CSRF认证</span>
client <span class="token operator">=</span> APIClient<span class="token punctuation">(</span>enforce_csrf_checks<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，CSRF验证只适用于任何会话验证的视图。这意味着只有当客户端通过调用login()登录时才会发生CSRF验证。</p><p>四、RequestsClient（请求客户端）<br> REST框架也使用requests库提供了一个客户端用于和应用程序互动。<br> 用处：</p><ul><li>您期望与另一个Python服务器的API接口，并希望在与客户端看到的相同上测试服务器。</li><li>您希望以这样一种方式编写测试，它们也可以分阶段或者直接在环境中运行。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client <span class="token operator">=</span> RequestsClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://testserver/users/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求客户端与数据库一起运行<br> 如果您想编写单独与服务接口交互的测试，那么RequestsClient类是非常有用的。这比使用标准的Django测试客户端要严格一些，因为它意味着所有的交互都应该通过API进行。<br> 如果您使用RequestsClient，那么您将希望确保测试设置和结果断言是与作为常规的API调用执行一样的，而不是直接与数据库模型交互。例如，与其检查customer.objects.count()==3，不如列出客户端点，并确保它包含三个记录。</p><p>Headers &amp; Authentication（请求头和认证）<br> 提供自定义头和身份验证凭证的方式和使用request.Session一样。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth

client<span class="token punctuation">.</span>auth <span class="token operator">=</span> HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;x-test&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 会话使用实例</span>
s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>auth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;x-test&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># both &#39;x-test&#39; and &#39;x-test2&#39; are sent</span>
s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/headers&#39;</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;x-test2&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSRF<br> 如果在使用SessionAuthentication认证，POST, PUT, PATCH或者DELETE请求中必须包含 CSRF token。<br> 您可以通过遵循基于JavaScript的客户端使用的相同流程来实现这一点。首先要获取一个GET请求，以便获得CRSF令牌，然后在以下请求中显示该令牌。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>client <span class="token operator">=</span> RequestsClient<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Obtain a CSRF token.</span>
response <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/homepage/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>
csrftoken <span class="token operator">=</span> response<span class="token punctuation">.</span>cookies<span class="token punctuation">[</span><span class="token string">&#39;csrftoken&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># Interact with the API.</span>
response <span class="token operator">=</span> client<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;/organisations/&#39;</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MegaCorp&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;X-CSRFToken&#39;</span><span class="token punctuation">:</span> csrftoken<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Live tests（现场测试）<br> 谨慎使用RequestsClient和CoreAPIClient，都提供了可以在开发环境中运行测试实例的能力，或者直接运行在您的阶段服务器或生产环境中。<br> 使用这种风格来创建一些核心功能的基本测试是验证您的实时服务的一种有效方法。这样做可能需要仔细地注意设置和拆卸，以确保测试以一种不会直接影响客户数据的方式运行。</p><h2 id="五、coreapiclient" tabindex="-1"><a class="header-anchor" href="#五、coreapiclient" aria-hidden="true">#</a> 五、CoreAPIClient</h2><p>允许使用python的coreapi与自己的API进行互动</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 获取api模式</span>
client <span class="token operator">=</span> CoreAPIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
schema <span class="token operator">=</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://testserver/schema/&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个新的组织</span>
params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MegaCorp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">}</span>
client<span class="token punctuation">.</span>action<span class="token punctuation">(</span>schema<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;organisations&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;create&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>

<span class="token comment"># 确保列表中存在organisation</span>
data <span class="token operator">=</span> client<span class="token punctuation">.</span>action<span class="token punctuation">(</span>schema<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;organisations&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span><span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;MegaCorp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Headers &amp; Authentication</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth

<span class="token comment"># 设置请求头和用户认证信息</span>
client <span class="token operator">=</span> CoreAPIClient<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>session<span class="token punctuation">.</span>auth <span class="token operator">=</span> HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pass&#39;</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>session<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;x-test&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试实例</p><ul><li>APISimpleTestCase</li><li>APITransactionTestCase</li><li>APITestCase</li><li>APILiveServerTestCase</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse
<span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> status
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>test <span class="token keyword">import</span> APITestCase
<span class="token keyword">from</span> myproject<span class="token punctuation">.</span>apps<span class="token punctuation">.</span>core<span class="token punctuation">.</span>models <span class="token keyword">import</span> Account

<span class="token keyword">class</span> <span class="token class-name">AccountTests</span><span class="token punctuation">(</span>APITestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_create_account</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        创建一个新的account对象
        &quot;&quot;&quot;</span>
        url <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">&#39;account-list&#39;</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;DabApps&#39;</span><span class="token punctuation">}</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>Account<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>Account<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;DabApps&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试responses</p><ul><li>检查响应对象数据<br> 在检查测试响应的有效性时，通常更方便地检查响应创建的数据，而不是检查完全呈现的响应。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/users/4/&#39;</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lauren&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而不是检查response.content的解析结果</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/users/4/&#39;</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;lauren&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>渲染响应对象<br> 如果您正在直接使用APIRequestFactory测试视图，那么返回的响应将不会被呈现，因为模板响应是由Django的内部请求-响应周期来执行的。为了访问response.content，您首先需要渲染响应。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>view <span class="token operator">=</span> UserDetail<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span>
request <span class="token operator">=</span> factory<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;/users/4&#39;</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> view<span class="token punctuation">(</span>request<span class="token punctuation">,</span> pk<span class="token operator">=</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">)</span>
response<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Cannot access \`response.content\` without this.</span>
self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">&#39;{&quot;username&quot;: &quot;lauren&quot;, &quot;id&quot;: 4}&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置</p><ul><li>设置默认格式</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;TEST_REQUEST_DEFAULT_FORMAT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;json&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置可用的格式</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REST_FRAMEWORK <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token string">&#39;TEST_REQUEST_RENDERER_CLASSES&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>
        <span class="token string">&#39;rest_framework.renderers.MultiPartRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.JSONRenderer&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;rest_framework.renderers.TemplateHTMLRenderer&#39;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,74),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","Django-restframework34-Testing（测试）.html.vue"]]);export{d as default};
