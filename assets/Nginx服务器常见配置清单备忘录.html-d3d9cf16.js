import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c as o,a as n,b as a,d as e,f as i}from"./app-cfbf85c1.js";const p={},c=n("h1",{id:"nginx服务器常见配置清单备忘录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nginx服务器常见配置清单备忘录","aria-hidden":"true"},"#"),a(" Nginx服务器常见配置清单备忘录")],-1),d={href:"https://segmentfault.com/a/1190000040717509",target:"_blank",rel:"noopener noreferrer"},u=n("h1",{id:"写在前面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#写在前面","aria-hidden":"true"},"#"),a(" 写在前面")],-1),h=n("p",null,[a("Nginx是高性能轻量级WEB服务器的优秀代表，由于其提供HTTP代理和反向代理、负载均衡、缓存等一系列重要特性，从而广泛应用于当今的Web后端服务之中，而且各大互联网公司也都在重度使用，所以作为一个开发者，学会Nginx的使用和配置很有必要。"),n("br"),a(" 在本文中，我们将会从一份示例配置清单开始，来简单梳理一下Nginx服务器的各种常见配置指令的作用和用法。"),n("br"),a(" 话不多说，上菜！")],-1),v=n("strong",null,"编程之路",-1),k={href:"https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Frd2coding%2FRoad2Coding",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"6大编程方向(岗位)的自学路线+知识点大梳理",-1),b=n("strong",null,"面试考点",-1),g=n("strong",null,"我的简历",-1),_=n("strong",null,"几本硬核pdf笔记",-1),x=n("strong",null,"我的程序员人生",-1),f=i(`<hr><h2 id="nginx配置文件的整体结构" tabindex="-1"><a class="header-anchor" href="#nginx配置文件的整体结构" aria-hidden="true">#</a> Nginx配置文件的整体结构</h2><p>这里直接画一幅图就一目了然了，几个大的配置模块看得就很清楚。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1632972243175-efebb797-e13b-4b29-9aee-edc7f0ab86d8.png#clientId=ua6657e1b-8c82-4&amp;from=ui&amp;id=u162c0165&amp;margin=[object Object]&amp;name=1.png&amp;originHeight=732&amp;originWidth=524&amp;originalType=binary&amp;ratio=1&amp;size=51957&amp;status=done&amp;style=none&amp;taskId=ua1e4f06a-7c0d-422a-84d3-cce4c98fe0f" alt="1.png" loading="lazy"><br> 从图中可以看出主要包含以下几大部分内容：</p><h3 id="_1-全局块" tabindex="-1"><a class="header-anchor" href="#_1-全局块" aria-hidden="true">#</a> 1. 全局块</h3><p>该部分配置主要影响Nginx全局，通常包括下面几个部分：</p><ul><li>配置运行Nginx服务器用户（组）</li><li>worker进程数</li><li>Nginx进程PID存放路径</li><li>错误日志的存放路径</li><li>配置文件的引入</li><li>...</li></ul><h3 id="_2-events块" tabindex="-1"><a class="header-anchor" href="#_2-events块" aria-hidden="true">#</a> 2. events块</h3><p>该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：</p><ul><li>设置网络连接的序列化</li><li>是否允许同时接收多个网络连接</li><li>事件驱动模型的选择</li><li>最大连接数的配置</li><li>...</li></ul><h3 id="_3-http块" tabindex="-1"><a class="header-anchor" href="#_3-http块" aria-hidden="true">#</a> 3. http块</h3><ul><li>定义MIMI-Type</li><li>自定义服务日志</li><li>是否允许sendfile方式传输文件</li><li>连接超时时间</li><li>单连接请求数上限</li><li>...</li></ul><h3 id="_4-server块" tabindex="-1"><a class="header-anchor" href="#_4-server块" aria-hidden="true">#</a> 4. server块</h3><ul><li>配置网络端口监听</li><li>访问日志和错误页</li><li>基于名称的虚拟主机配置</li><li>基于IP的虚拟主机配置</li><li>location块配置</li><li>...</li></ul><h3 id="_5-location块" tabindex="-1"><a class="header-anchor" href="#_5-location块" aria-hidden="true">#</a> 5. location块</h3><ul><li>location配置</li><li>请求根目录配置</li><li>更改location的URI</li><li>网站默认首页配置</li><li>...</li></ul><hr><h2 id="一份配置清单例析" tabindex="-1"><a class="header-anchor" href="#一份配置清单例析" aria-hidden="true">#</a> 一份配置清单例析</h2><p>这里给出了一份简要的Nginx配置清单举例：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1632972269465-cc50e03c-90d7-4b83-a872-6ff21bd696ea.png#clientId=ua6657e1b-8c82-4&amp;from=ui&amp;id=u39bd5213&amp;margin=[object Object]&amp;name=2.png&amp;originHeight=732&amp;originWidth=567&amp;originalType=binary&amp;ratio=1&amp;size=305267&amp;status=done&amp;style=none&amp;taskId=u5801cd5b-f59c-45a9-9281-bd59da2559a" alt="2.png" loading="lazy"><br> 配置代码如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">user</span>  nobody  nobody</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">3</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">error_log</span>  logs/error.log</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>  logs/nginx.pid</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">use</span> epoll</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">&#39;<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> &quot;<span class="token variable">$request</span>&quot; &#39;</span>
                      <span class="token string">&#39;<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> &quot;<span class="token variable">$http_referer</span>&quot; &#39;</span>
                      <span class="token string">&#39;&quot;<span class="token variable">$http_user_agent</span>&quot; &quot;<span class="token variable">$http_x_forwarded_for</span>&quot;&#39;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">access_log</span>  logs/access.log  main</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sendfile</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">8088</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  codesheep</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">access_log</span>  /codesheep/webserver/server1/log/access.log</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">error_page</span>  <span class="token number">404</span>  /404.html</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> /server1/location1</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">root</span>   /codesheep/webserver</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.server2-location1.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token directive"><span class="token keyword">location</span> /server1/location2</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">root</span>   /codesheep/webserver</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.server2-location2.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">8089</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  192.168.31.177</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">access_log</span>  /codesheep/webserver/server2/log/access.log</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">error_page</span>  <span class="token number">404</span>  /404.html</span><span class="token punctuation">;</span>
        
        <span class="token directive"><span class="token keyword">location</span> /server2/location1</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">root</span>   /codesheep/webserver</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.server2-location1.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token directive"><span class="token keyword">location</span> /srv2/loc2</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">alias</span>   /codesheep/webserver/server2/location2/</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.server2-location2.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>
            <span class="token directive"><span class="token keyword">root</span> /codesheep/webserver/</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span> 404.html</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就对照这份示例配置清单来详细剖析一下配置文件中几个主要指令的含义及用法。</p><hr><h1 id="nginx用户-组-配置" tabindex="-1"><a class="header-anchor" href="#nginx用户-组-配置" aria-hidden="true">#</a> Nginx用户(组)配置</h1><p>配置项格式：user user [group];</p><ul><li>user：指定可以运行Nginx的用户</li><li>group：指定可以运行Nginx的用户组（可选项）</li></ul><p>如果user指令不配置或者配置为 user nobody nobody ，则默认所有用户都可以启动Nginx进程。</p><hr><h1 id="worker进程数配置" tabindex="-1"><a class="header-anchor" href="#worker进程数配置" aria-hidden="true">#</a> worker进程数配置</h1><p>这是Nginx服务器实现并发处理的关键配置，配置项格式为：<br> worker_processes number数;</p><ul><li>number：Nginx进程最多可以产生的worker process数</li><li>如果设置为auto，则Nginx将进行自动检测</li></ul><p>按照上文中的配置清单的实验，我们给worker_processes配置的数目是：3，启动Nginx服务器后，我们可以后台看一下主机上的Nginx进程情况：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很明显，理解 worker_processes 这个指令的含义就很容易了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1632972317075-708933cf-3343-4b51-9c18-f42325c81caf.png#clientId=ua6657e1b-8c82-4&amp;from=ui&amp;id=ua65a380a&amp;margin=[object Object]&amp;name=3.png&amp;originHeight=146&amp;originWidth=721&amp;originalType=binary&amp;ratio=1&amp;size=162099&amp;status=done&amp;style=none&amp;taskId=uf5212431-4423-42b8-9ed4-8b53d790f88" alt="3.png" loading="lazy"></p><hr><h1 id="error日志路径配置" tabindex="-1"><a class="header-anchor" href="#error日志路径配置" aria-hidden="true">#</a> error日志路径配置</h1><p>配置项格式：error_log file [可选日志级别];</p><ul><li>file：指定日志输出到某个文件file</li><li>常见的可选日志级别包括：info、debug、warn、error...等</li></ul><hr><h1 id="nginx进程pid存放路径配置" tabindex="-1"><a class="header-anchor" href="#nginx进程pid存放路径配置" aria-hidden="true">#</a> Nginx进程PID存放路径配置</h1><p>由于Nginx进程是作为系统守护进程在后台运行，所以该选项用于自定义配置PID文件的保存路径。<br> 配置项格式：pid file;</p><ul><li>file：指定其存放路径+文件名称</li><li>如果不指定默认置于路径 logs/nginx.pid</li></ul><hr><h1 id="事件驱动模型配置" tabindex="-1"><a class="header-anchor" href="#事件驱动模型配置" aria-hidden="true">#</a> 事件驱动模型配置</h1><p>配置项格式：use model;</p><ul><li>model模型可选择项包括：select、poll、kqueue、epoll、rtsig等......</li></ul><hr><h1 id="最大连接数配置" tabindex="-1"><a class="header-anchor" href="#最大连接数配置" aria-hidden="true">#</a> 最大连接数配置</h1><p>配置项格式：worker_connections number数;</p><ul><li>number默认值为512，表示允许每一个worker进程可以同时开启的最大连接数。</li></ul><hr><h1 id="配置文件的引入" tabindex="-1"><a class="header-anchor" href="#配置文件的引入" aria-hidden="true">#</a> 配置文件的引入</h1><p>该配置主要用于引入其他或者第三方的Nginx配置文件到当前的主配置文件中<br> 配置项格式：include conf_file;</p><hr><h1 id="网络连接的序列化配置" tabindex="-1"><a class="header-anchor" href="#网络连接的序列化配置" aria-hidden="true">#</a> 网络连接的序列化配置</h1><p>配置项格式：accept_mutex on;</p><ul><li>该配置默认为on状态，表示会对多个Nginx工作进程接收连接进行序列化，防止多个worker进程对连接的争抢。</li></ul><p>说到该指令，首先得阐述一下什么是所谓的“惊群问题”。就Nginx的场景来解释的话大致的意思就是：当一个新网络连接来到时，多个worker进程会被同时唤醒，但仅仅只有一个进程可以真正获得连接并处理之。如果每次唤醒的进程数目过多的话，其实是会影响一部分性能的。<br> 所以在这里，如果accept_mutex on，那么多个worker将是以串行方式来处理，其中有一个worker会被唤醒；反之若accept_mutex off，那么所有的worker都会被唤醒，不过只有一个worker能获取新连接，其它的worker会重新进入休眠状态。<br> 这个值的开关与否其实是要和具体场景挂钩的，一定程度上会影响系统的吞吐量。Nginx默认打开了accept_mutex，也算是一种保守的做法。</p><hr><h1 id="多网络连接-接收配置" tabindex="-1"><a class="header-anchor" href="#多网络连接-接收配置" aria-hidden="true">#</a> 多网络连接 接收配置</h1><p>配置项格式：multi_accept off;</p><ul><li>该配置默认为off，意指每个worker进程一次只能接收一个新到达的网络连接。如果想让每个Nginx的worker process都能同时接收多个网络连接，则需要开启此配置。</li></ul><hr><h1 id="mime-type定义" tabindex="-1"><a class="header-anchor" href="#mime-type定义" aria-hidden="true">#</a> MIME-Type定义</h1><p>MIME-Type指的是网络资源的媒体类型，也即前端请求的资源类型。<br> 配置项格式：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">include</span> mime.types</span><span class="token punctuation">;</span> 
<span class="token directive"><span class="token keyword">default_type</span> type类型</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>include配置用于将mime.types文件包含进来</li></ul><p>可以用cat mime.types 来查看mime.types的文件内容，我们发现其就是一个types结构，里面包含了各种浏览器能够识别的MIME类型以及对应类型的文件后缀名，如下所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12492743/1632972343558-713f8b90-70df-4a29-ac5e-63af5a01751e.png#clientId=ua6657e1b-8c82-4&amp;from=ui&amp;id=uf94efb72&amp;margin=[object Object]&amp;name=4.png&amp;originHeight=428&amp;originWidth=732&amp;originalType=binary&amp;ratio=1&amp;size=110610&amp;status=done&amp;style=none&amp;taskId=u36c71958-578b-4b45-907e-927fca48f99" alt="4.png" loading="lazy"></p><hr><h1 id="访问日志配置" tabindex="-1"><a class="header-anchor" href="#访问日志配置" aria-hidden="true">#</a> 访问日志配置</h1><p>配置项格式：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">access_log</span> path [format]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>path：自定义访问日志的路径+名称</li><li>format：自定义服务日志的格式（可选项）。</li></ul><hr><h1 id="连接超时配置" tabindex="-1"><a class="header-anchor" href="#连接超时配置" aria-hidden="true">#</a> 连接超时配置</h1><p>配置项格式：keepalive_timeout timeout [header_timeout];</p><ul><li>timeout 表示server端对连接的保持时间</li><li>header_timeout表示在应答报文头部的 Keep-Alive 域设置超时时间，可选项。</li></ul><hr><h1 id="sendfile配置" tabindex="-1"><a class="header-anchor" href="#sendfile配置" aria-hidden="true">#</a> sendfile配置</h1><p>配置项格式：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">sendfile</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>sendfile配置用于开启或关闭使用sendfile()系统调用来传输文件，默认off</li><li>注：在很多Web Server中，都引入了 sendfile的机制，来实现高性能文件传输。</li></ul><hr><h1 id="网络地址监听配置" tabindex="-1"><a class="header-anchor" href="#网络地址监听配置" aria-hidden="true">#</a> 网络地址监听配置</h1><p>配置项格式：</p><ul><li>第一种：配置监听的IP地址：listen IP[:PORT];</li><li>第二种：配置监听的端口：listen PORT;</li></ul><p>实际举例：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">listen</span> 192.168.31.177:8080</span><span class="token punctuation">;</span> <span class="token comment"># 监听特定IP和端口上的连接 </span>
<span class="token directive"><span class="token keyword">listen</span> 192.168.31.177</span><span class="token punctuation">;</span>      <span class="token comment"># 监听特定IP上所有端口的连接 </span>
<span class="token directive"><span class="token keyword">listen</span> <span class="token number">8080</span></span><span class="token punctuation">;</span>                <span class="token comment"># 监听特定端口上的所有IP的连接</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="基于名称或ip的虚拟主机配置" tabindex="-1"><a class="header-anchor" href="#基于名称或ip的虚拟主机配置" aria-hidden="true">#</a> 基于名称或IP的虚拟主机配置</h1><p>配置项格式：server_name name1 name2 ...</p><ul><li>name可以有多个并列名称，而且此处的name支持正则表达式书写</li></ul><p>实际举例：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server_name</span> ~^www\\.codesheep\\d+\\.com$</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至于基于IP的虚拟主机配置就更简单了：<br> 配置项格式：server_name IP地址</p><hr><h1 id="location配置" tabindex="-1"><a class="header-anchor" href="#location配置" aria-hidden="true">#</a> location配置</h1>`,95),y=n("p",{"css-module":"."},"配置项格式为：location [ = | ~ | ~* | ^~ ] /uri/",-1),w=i(`<ul><li>这里的uri可包含正则表达式的模糊匹配。</li></ul><p>uri前面的方括号中的内容是可选项，几种常见的情形如下：</p><ul><li>“=”：用于标准uri，进行字符串的精确匹配</li><li>“~”：用于正则uri，表示区分大小写的匹配</li><li>“~*”：用于正则uri，表示不区分大小写的匹配</li><li>“<sup>~”：用于标准uri，</sup>进行前缀匹配，~表示区分大小写</li></ul><hr><h1 id="根目录配置" tabindex="-1"><a class="header-anchor" href="#根目录配置" aria-hidden="true">#</a> 根目录配置</h1><p>配置项格式：root path;</p><ul><li>path：表示Nginx接收到请求以后查找资源的根目录路径</li></ul><p>当然，也还可以通过alias指令来更改location接收到的URI请求路径，指令为：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">alias</span> path</span><span class="token punctuation">;</span>  <span class="token comment"># path为修改后的根路径 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h1 id="默认首页配置" tabindex="-1"><a class="header-anchor" href="#默认首页配置" aria-hidden="true">#</a> 默认首页配置</h1><p>配置项格式：index index_file ......</p><ul><li>index_file可以包含多个用空格隔开的文件名，首先找到哪个页面，就使用哪个进行响应。</li></ul><hr><h1 id="后记" tabindex="-1"><a class="header-anchor" href="#后记" aria-hidden="true">#</a> 后记</h1>`,15),N=n("strong",null,"编程之路",-1),I={href:"https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2Frd2coding%2FRoad2Coding",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"6大编程方向(岗位)的自学路线+知识点大梳理",-1),P=n("strong",null,"面试考点",-1),T=n("strong",null,"我的简历",-1),$=n("strong",null,"几本硬核pdf笔记",-1),j=n("strong",null,"我的程序员人生",-1);function z(F,M){const s=t("ExternalLinkIcon");return r(),o("div",null,[c,n("blockquote",null,[n("p",null,[a("转载："),n("a",d,[a("https://segmentfault.com/a/1190000040717509"),e(s)])])]),u,h,n("blockquote",null,[n("p",null,[a("本文在GitHub开源仓库「"),v,a("」 "),n("a",k,[a("https://github.com/rd2coding/Road2Coding"),e(s)]),a(" 中已经收录，里面有我整理的"),m,a("、"),b,a("、"),g,a("、"),_,a("，以及"),x,a("，欢迎鉴赏。")])]),f,y,w,n("blockquote",null,[n("p",null,[a("本文在GitHub开源仓库「"),N,a("」 "),n("a",I,[a("https://github.com/rd2coding/Road2Coding"),e(s)]),a(" 中已经收录，里面有我整理的"),q,a("、"),P,a("、"),T,a("、"),$,a("，以及"),j,a("，欢迎鉴赏。")])])])}const H=l(p,[["render",z],["__file","Nginx服务器常见配置清单备忘录.html.vue"]]);export{H as default};
