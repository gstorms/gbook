import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as l,a as s,b as n,d as e,f as t}from"./app-3f278ba4.js";const c={},i=s("h1",{id:"pytest权威教程01-安装及入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#pytest权威教程01-安装及入门","aria-hidden":"true"},"#"),n(" Pytest权威教程01-安装及入门")],-1),d={id:"安装及入门",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#安装及入门","aria-hidden":"true"},"#",-1),u={href:"https://www.cnblogs.com/superhin/p/11455335.html#3947074107",target:"_blank",rel:"noopener noreferrer"},_=t("<p><strong>Python支持版本</strong>: Python 2.6,2.7,3.3,3.4,3.5,Jython,PyPy-2.3<br><strong>支持的平台</strong>: Unix/Posix and Windows<br><strong>PyPI包名</strong>: pytest<br><strong>依赖项</strong>: py,colorama (Windows)<br><strong>PDF文档</strong>: 下载最新版本文档<br> Pytest是一个使创建简单及可扩展性测试用例变得非常方便的框架。测试用例清晰、易读而无需大量的繁琐代码。只要几分钟你就可以对你的应用程序或者库展开一个小型的单元测试或者复杂的功能测试。</p>",1),v={id:"安装-pytest",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#安装-pytest","aria-hidden":"true"},"#",-1),b={href:"https://www.cnblogs.com/superhin/p/11455335.html#1327268672",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>在命令行执行以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-U</span> pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查安装的Pytest版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">--version</span>
This is pytest version <span class="token number">3</span>.x.y,imported from <span class="token variable">$PYTHON_PREFIX</span>/lib/python3.6/site-packages/pytest.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y={href:"https://www.cnblogs.com/superhin/p/11455335.html#2288625512",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>只需要4行代码即可创建一个简单的测试用例:<br> Copy</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_sample.py文件内容</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">def</span> <span class="token function">test_answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是这么简单。现在你可以执行一下这个测试用例:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-3.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">1</span> item

test_sample.py F                                                     <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
_______________________________ test_answer ________________________________

    def test_answer<span class="token punctuation">(</span><span class="token punctuation">)</span>:
<span class="token operator">&gt;</span>       assert func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span>
E       assert <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">5</span>
E        +  where <span class="token number">4</span> <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

test_sample.py:5: AssertionError
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<code>func(3)</code>并不等于<code>5</code>,这次测试返回了一个失败的结果信息。</p><blockquote><p><strong>注意：</strong><br> 你可以使用<code>assert</code>语句来断言你测试用例的期望结果。Pytest的高级断言内省机制, 可以智能地展示断言表达式的中间结果, 来避免来源于JUnit的方法中的变量名重复问题。</p></blockquote>`,6),f={id:"执行多条测试用例",tabindex:"-1"},w=s("a",{class:"header-anchor",href:"#执行多条测试用例","aria-hidden":"true"},"#",-1),x={href:"https://www.cnblogs.com/superhin/p/11455335.html#3747730090",target:"_blank",rel:"noopener noreferrer"},P=s("p",null,[s("code",null,"pytest"),n("命令会执行当前目录及子目录下所有"),s("code",null,"test_*.py"),n("及"),s("code",null,"*_test.py"),n("格式的文件。一般来说,用例需要遵循标准的测试发现规则。")],-1),E={id:"断言抛出了指定异常",tabindex:"-1"},T=s("a",{class:"header-anchor",href:"#断言抛出了指定异常","aria-hidden":"true"},"#",-1),q={href:"https://www.cnblogs.com/superhin/p/11455335.html#1338174723",target:"_blank",rel:"noopener noreferrer"},F=t(`<p>使用<code>raise</code>可以在相应代码的抛出的指定异常：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_sysexit.py文件内容</span>
<span class="token keyword">import</span> pytest
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> SystemExit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_mytest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>SystemExit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        f<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用“静默”模式,执行这个测试用例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span> test_sysexit.py
<span class="token builtin class-name">.</span>                                                                   <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),I={id:"使用类组织多条测试用例",tabindex:"-1"},R=s("a",{class:"header-anchor",href:"#使用类组织多条测试用例","aria-hidden":"true"},"#",-1),S={href:"https://www.cnblogs.com/superhin/p/11455335.html#565019293",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>一旦你需要开发多条测试用例,你可能会想要使用类来组织它们。使用Pytest可以很轻松的创建包含多条用例的测试类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_class.py文件内容</span>
<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_one</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> <span class="token string">&quot;this&quot;</span>
        <span class="token keyword">assert</span> <span class="token string">&#39;h&#39;</span> <span class="token keyword">in</span> x

    <span class="token keyword">def</span> <span class="token function">test_two</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
        <span class="token keyword">assert</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">&#39;check&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Pytest</code>可以发现所有遵循Python测试用例发现约定规则的用例,所以它能找到<code>Test</code>开头的测试类外以及类中所有以<code>test_</code>开头的函数及方法。测试类无需再继承任何对象。我们只需要简单地通过文件名来运行这个模块即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span> test_class.py
.F                                                                   <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
____________________________ TestClass.test_two ____________________________

self <span class="token operator">=</span> <span class="token operator">&lt;</span>test_class.TestClass object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_two<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:
        x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token operator">&gt;</span>       assert hasattr<span class="token punctuation">(</span>x,<span class="token string">&#39;check&#39;</span><span class="token punctuation">)</span>
E       AssertionError: assert False
E        +  where False <span class="token operator">=</span> hasattr<span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span>,<span class="token string">&#39;check&#39;</span><span class="token punctuation">)</span>

test_class.py:8: AssertionError
<span class="token number">1</span> failed,1 passed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一条用例执行成功,第二天用例执行失败。你可以很容易地通过断言中变量的中间值来理解失败的原因。</p>`,5),C={id:"函数测试中请求使用独立的临时目录",tabindex:"-1"},$=s("a",{class:"header-anchor",href:"#函数测试中请求使用独立的临时目录","aria-hidden":"true"},"#",-1),N={href:"https://www.cnblogs.com/superhin/p/11455335.html#2580749679",target:"_blank",rel:"noopener noreferrer"},U=t(`<p><code>Pytest</code>提供了内置fixtures方法参数,来使用任意资源,比如一个独立的临时目录：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_tmpdir.py文件内容</span>
<span class="token keyword">def</span> <span class="token function">test_needsfiles</span><span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试用例函数使用<code>tmpdir</code>作为参数,Pytest将在测试用例函数调用之前查找并调用fixture工厂方法来创建相应的资源。在测试运行之前,Pytest为每个测试用例创建一个独立的临时目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span> test_tmpdir.py
F                                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
_____________________________ test_needsfiles ______________________________

tmpdir <span class="token operator">=</span> local<span class="token punctuation">(</span><span class="token string">&#39;PYTEST_TMPDIR/test_needsfiles0&#39;</span><span class="token punctuation">)</span>

    def test_needsfiles<span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span>:
        print <span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span>
<span class="token operator">&gt;</span>       assert <span class="token number">0</span>
E       assert <span class="token number">0</span>

test_tmpdir.py:3: AssertionError
--------------------------- Captured stdout call ---------------------------
PYTEST_TMPDIR/test_needsfiles0
<span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>有关tmpdir处理的更多信息,请参见: 临时目录和文件</p></blockquote>`,5),D={id:"进一步阅读",tabindex:"-1"},L=s("a",{class:"header-anchor",href:"#进一步阅读","aria-hidden":"true"},"#",-1),V={href:"https://www.cnblogs.com/superhin/p/11455335.html#298985699",target:"_blank",rel:"noopener noreferrer"},B=s("p",null,"查看其他pytest文档资源,来帮助你建立自定义测试用例及独特的工作流：",-1),M=s("ul",null,[s("li",null,"“使用pytest -m pytest来调用pyest” - 命令行调用示例"),s("li",null,"“将pytest与原有测试套件一起使用”- 使用之前的测试用例"),s("li",null,[n("“使用属性标记测试用例” - "),s("code",null,"pytest.mark"),n("相关信息")]),s("li",null,"“pytest fixtures：显式,模块化,可扩展” - 为你的测试提供函数基准"),s("li",null,"“插件编写” - 管理和编写插件"),s("li",null,"“优质集成实践” - 虚拟环境和测试分层")],-1);function Y(j,J){const a=o("ExternalLinkIcon");return r(),l("div",null,[i,s("h2",d,[k,n(),s("a",u,[n("安装及入门#"),e(a)])]),_,s("h3",v,[m,n(" 安装 Pytest"),s("a",b,[n("#"),e(a)])]),h,s("p",null,[n("创建你的第一个测试用例"),s("a",y,[n("#"),e(a)])]),g,s("h3",f,[w,n(" 执行多条测试用例"),s("a",x,[n("#"),e(a)])]),P,s("h3",E,[T,n(" 断言抛出了指定异常"),s("a",q,[n("#"),e(a)])]),F,s("h3",I,[R,n(" 使用类组织多条测试用例"),s("a",S,[n("#"),e(a)])]),A,s("h3",C,[$,n(" 函数测试中请求使用独立的临时目录"),s("a",N,[n("#"),e(a)])]),U,s("h3",D,[L,n(" 进一步阅读"),s("a",V,[n("#"),e(a)])]),B,M])}const G=p(c,[["render",Y],["__file","Pytest教程01-安装及入门.html.vue"]]);export{G as default};
