import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a,b as s,d as l,f as n}from"./app-3f278ba4.js";const u={},i=n(`<h1 id="pytest权威教程02-pytest-使用及调用方法" tabindex="-1"><a class="header-anchor" href="#pytest权威教程02-pytest-使用及调用方法" aria-hidden="true">#</a> Pytest权威教程02-Pytest-使用及调用方法</h1><h2 id="使用python-m-pytest调用pytest" tabindex="-1"><a class="header-anchor" href="#使用python-m-pytest调用pytest" aria-hidden="true">#</a> 使用python -m pytest调用pytest</h2><p><em>2.0版本新增</em></p><p>你可以在命令行中通过Python编译器来调用Pytest执行测试:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pytest <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>python</code>调用会将当前目录也添加到<code>sys.path</code>中,除此之外,这几乎等同于命令行直接调用<code>pytest [...]</code>。</p><h3 id="可能出现的执行退出code" tabindex="-1"><a class="header-anchor" href="#可能出现的执行退出code" aria-hidden="true">#</a> 可能出现的执行退出code</h3><p>执行<code>pytest</code>可能会出现6中不同的退出code:</p><ul><li><strong>退出code 0</strong>: 收集并成功通过所有测试用例</li><li><strong>退出code 1</strong>: 收集并运行了测试,部分测试用例执行失败</li><li><strong>退出code 2</strong>: 测试执行被用户中断</li><li><strong>退出code 3</strong>: 执行测试中发生内部错误</li><li><strong>退出code 4</strong>: pytest命令行使用错误</li><li><strong>退出code 5</strong>: 没有收集到测试用例</li></ul><h3 id="获取版本路径、命令行选项及环境变量相关帮助" tabindex="-1"><a class="header-anchor" href="#获取版本路径、命令行选项及环境变量相关帮助" aria-hidden="true">#</a> 获取版本路径、命令行选项及环境变量相关帮助</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--version</span>   <span class="token comment"># 显示pytest导入位置</span>
pytest <span class="token parameter variable">--fixtures</span>  <span class="token comment"># 显示可用的内置方法参数</span>
pytest <span class="token parameter variable">-h</span> <span class="token parameter variable">--help</span> <span class="token comment"># 显示命令行及配置文件选项帮助信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第1-n-次失败后停止测试" tabindex="-1"><a class="header-anchor" href="#第1-n-次失败后停止测试" aria-hidden="true">#</a> 第1(N)次失败后停止测试</h3><p>在第1(N)次用例失败后停止测试执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-x</span>            <span class="token comment"># 第1次失败后停止</span>
pytest <span class="token parameter variable">--maxfail</span><span class="token operator">=</span><span class="token number">2</span>    <span class="token comment"># 2次失败后停止</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指定及选择测试用例" tabindex="-1"><a class="header-anchor" href="#指定及选择测试用例" aria-hidden="true">#</a> 指定及选择测试用例</h3><p>Pytest支持多种从命令行运行和选择测试用例的方法。</p><p><strong>运行模块内所有用例</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pytest test_mod.py

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行目录内所有用例</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest test_mod.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>按关键字表达式运行用例</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-k</span> <span class="token string">&quot;MyClass and not method&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将运行包含与指定表达式匹配的名称的测试用例,其中可以包括文件名、类名和函数名作为变量,并且支持Python运算符(and和or)操作。上面的示例将运行<code>TestMyClass.test_something</code>但不运行<code>TestMyClass.test_method_simple</code>。<br><strong>按节点id运行测试</strong><br> 每次执行收集到的测试用例集合都会被分配一个唯一的<code>nodeid</code>,其中包含模块文件名,后跟说明符,如类名、函数名及参数,由<code>::</code> 字符分隔。<br> 执行模块中某条指定的测试用例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest test_mod.py::test_func
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一个通过命令行挑选所执行测试用例的示例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest test_mod.py::TestClass::test_method
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>通过标记(Mark)表达式运行测试</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-m</span> slow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将会执行所有带<code>@pytest.mark.slow</code>装饰器的用例。</p><blockquote><p>有关更多信息,请参阅: 标记</p></blockquote><p><strong>从包中运行测试</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--pyargs</span> pkg.testing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将会导入<code>pkg.testing</code>并使用其文件系统位置来查找和运行测试。</p><h3 id="修改python原生追溯-traceback-信息" tabindex="-1"><a class="header-anchor" href="#修改python原生追溯-traceback-信息" aria-hidden="true">#</a> 修改Python原生追溯(traceback)信息</h3><p>修改回追溯信息示例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--showlocals</span> <span class="token comment"># 在追溯信息中显示局部变量</span>
pytest <span class="token parameter variable">-l</span>           <span class="token comment"># 显示局部变量 (简写)</span>

pytest <span class="token parameter variable">--tb</span><span class="token operator">=</span>auto    <span class="token comment"># (默认) 第1和最后1条使用详细追溯信息,其他使用简短追溯信息</span>

pytest <span class="token parameter variable">--tb</span><span class="token operator">=</span>long    <span class="token comment"># 详尽,信息丰富的追溯信息格式</span>
pytest <span class="token parameter variable">--tb</span><span class="token operator">=</span>short   <span class="token comment"># 简短的追溯信息格式</span>
pytest <span class="token parameter variable">--tb</span><span class="token operator">=</span>line    <span class="token comment"># 每个失败信息一行</span>
pytest <span class="token parameter variable">--tb</span><span class="token operator">=</span>native  <span class="token comment"># Python标准库格式</span>
pytest <span class="token parameter variable">--tb</span><span class="token operator">=</span>no      <span class="token comment"># 不使用追溯信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="详尽的测试结果摘要" tabindex="-1"><a class="header-anchor" href="#详尽的测试结果摘要" aria-hidden="true">#</a> 详尽的测试结果摘要</h3><p><em>2.9版本新增</em><br><code>-r</code>标志可用于在测试会话结束时显示测试结果摘要,从而可以在拥有大量用例的测试套件中轻松获得所有失败、跳过、标记失败(xfails)等测试结果的清晰描述。<br> 例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-ra</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-3.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">0</span> items

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> no tests ran <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-r</code>选项接受后面的多个字符,上面使用的<code>a</code>表示“除了执行通过(Pass)以外所有的结果”。<br> 以下是可以使用的可用字符的完整列表：<br> -<code>f</code> - 失败的用例<br> -<code>E</code> - 出错的用例<br> -<code>s</code> - 跳过的用例<br> -<code>x</code> - 标记失败的用例<br> -<code>X</code> - 标记成功的用例<br> -<code>p</code> - 成功用例<br> -<code>P</code> - 成功用例并输出信息<br> -<code>a</code> - 所有<code>pP</code>状态以外的用例<br> 可以使用多个字符,例如,只查看失败和跳过的用例,你可以执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-rfs</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-3.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">0</span> items

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> no tests ran <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行失败时进入pdb-python调试器" tabindex="-1"><a class="header-anchor" href="#执行失败时进入pdb-python调试器" aria-hidden="true">#</a> 执行失败时进入PDB(Python调试器)</h3><p>Python附带一个名为PDB的内置Python调试器。 pytest允许通过命令行选项进入PDB提示符：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--pdb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将在每次失败(或KeyboardInterrupt)时调用Python调试器。一般,你可能只希望在第一次失败的测试中执行此操作以了解某种故障情况：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-x</span> <span class="token parameter variable">--pdb</span>   <span class="token comment"># 在第一次用例失败时进入PDB</span>
pytest <span class="token parameter variable">--pdb</span> <span class="token parameter variable">--maxfail</span><span class="token operator">=</span><span class="token number">3</span>  <span class="token comment"># 在前3次失败是进入PDB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意,在任何失败时,异常信息都存储在\`sys.last_value1,1sys.last_type1和1sys.last_traceback1中。在交互模式中,这允许用户使用任何调试工具进行事后调试。也可以手动访问异常信息,例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">import</span> sys
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys.last_traceback.tb_lineno
<span class="token number">42</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sys.last_value
AssertionError<span class="token punctuation">(</span><span class="token string">&#39;assert result == &quot;ok&quot;&#39;</span>,<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试开始时进入pdb-python调试器" tabindex="-1"><a class="header-anchor" href="#测试开始时进入pdb-python调试器" aria-hidden="true">#</a> 测试开始时进入PDB(Python调试器)</h3><p><code>pytest</code>允许用户通过命令行选项在每次测试开始时立即进入PDB提示符：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--trace</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将在每次测试开始时调用Python调试器。</p><h3 id="设置断点" tabindex="-1"><a class="header-anchor" href="#设置断点" aria-hidden="true">#</a> 设置断点</h3><p>要在代码中设置断点,需要在代码中使用Python原生<code>import pdb; pdb.set_trace()</code>进行调用,Pytest会自动禁用显示print输出, 并捕获该用例输出结果：</p><ul><li>其他测试中的输出捕获不受影响。</li><li>任何先前的测试输出已经被捕获并将被处理。</li><li>在同一测试中生成的任何后续输出都不会被捕获,而是直接发送到<code>sys.stdout</code>。注意：即使是退出交互式PDB跟踪会话并继续常规测试后发生的测试输出,这也适用。</li></ul><h3 id="使用内置断点方法" tabindex="-1"><a class="header-anchor" href="#使用内置断点方法" aria-hidden="true">#</a> 使用内置断点方法</h3><p>Python 3.7引入了内置<code>breakpoint()</code>函数。 Pytest支持以下几种使用<code>breakpoint()</code>的方式：</p><ul><li>当<code>PYTHONBREAKPOINT</code>设置为默认值,调用<code>breakpoint()</code>时,pytest将使用其内部PDB跟踪交互界面(PDB trace UI)而不是Python自带的<code>pdb</code>。</li><li>测试完成后,默认会重置为Python自带的PDB跟踪交互界面。</li><li>在pytest后使用<code>--pdb</code>参数,在失败的测试/未处理异常中,pytest内部PDB跟踪交互界面与<code>breakpoint()</code>同时使用。</li><li><code>--pdbcls</code>参数可指定要使用的调试器类。</li></ul><h3 id="分析测试用例执行时间" tabindex="-1"><a class="header-anchor" href="#分析测试用例执行时间" aria-hidden="true">#</a> 分析测试用例执行时间</h3><p>显示执行最慢的10条测试用例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--durations</span><span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下,Pytest不会显示&lt;0.01s的测试时间, 除非在命令行上传递<code>-vv</code>。</p><h3 id="创建junit-xml格式的测试报告" tabindex="-1"><a class="header-anchor" href="#创建junit-xml格式的测试报告" aria-hidden="true">#</a> 创建JUnit XML格式的测试报告</h3><p>要创建可由Jenkins或其他持续集成软件读取的XML测试报告,可以使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--junitxml</span><span class="token operator">=</span>path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结束后,在指定路径<code>path</code>下创建一个XML报告文件<br><em>3.1版本新增</em><br> 可以通过修改配置中<code>junit_suite_name</code>字段的名称来更改XML报告中<code>root test suite</code>的名称。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
junit_suite_name <span class="token operator">=</span> my_suite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>record_property(添加新属性)</strong><br><em>版本2.8新增</em><br><em>版本3.5更改</em>: 在所有报告生成器(reporter)中用户属性<code>record_xml_property</code>项已改为<code>record_property</code>,<code>record_xml_property</code>现已弃用。<br> 可以使用<code>record_property</code>项来在XML报告中增加更多的日志信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_function</span><span class="token punctuation">(</span>record_property<span class="token punctuation">)</span><span class="token punctuation">:</span>
    record_property<span class="token punctuation">(</span><span class="token string">&quot;example_key&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生成的<code>testcase</code>标签是会添加一个额外的属性<code>example_key=&quot;1&quot;</code>：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testcase</span> <span class="token attr-name">classname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function<span class="token punctuation">&quot;</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function.py<span class="token punctuation">&quot;</span></span> <span class="token attr-name">line</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function<span class="token punctuation">&quot;</span></span> <span class="token attr-name">time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.0009<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>example_key<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testcase</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者,你可以将此函数集成在自定义标记装饰器中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py文件内容</span>

<span class="token keyword">def</span> <span class="token function">pytest_collection_modifyitems</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span>config<span class="token punctuation">,</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>
        <span class="token keyword">for</span> marker <span class="token keyword">in</span> item<span class="token punctuation">.</span>iter_markers<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;test_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            test_id <span class="token operator">=</span> marker<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            item<span class="token punctuation">.</span>user_properties<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;test_id&quot;</span><span class="token punctuation">,</span>test_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的测试用例中使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_function.py文件内容</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>test_id</span><span class="token punctuation">(</span><span class="token number">1501</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将导致：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testcase</span> <span class="token attr-name">classname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function<span class="token punctuation">&quot;</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function.py<span class="token punctuation">&quot;</span></span> <span class="token attr-name">line</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function<span class="token punctuation">&quot;</span></span> <span class="token attr-name">time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.0009<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1501<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testcase</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>警告：</strong><br><code>record_property</code>是一个实验性函数,将来可能会发生变化。<br> 另外,这将破坏一些XML结构验证,与某些持续集成软件一起使用时,可能会导致一些问题。</p></blockquote><p><strong>record_xml_attribute(修改xml节点属性)</strong><br><em>3.4版本新增</em><br> 可以使用<code>record_xml_attribute fixture向</code>testcase\`标签中添加其他xml属性。也可以用来覆盖原有属性值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_function</span><span class="token punctuation">(</span>record_xml_attribute<span class="token punctuation">)</span><span class="token punctuation">:</span>
    record_xml_attribute<span class="token punctuation">(</span><span class="token string">&quot;assertions&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;REQ-1234&quot;</span><span class="token punctuation">)</span>
    record_xml_attribute<span class="token punctuation">(</span><span class="token string">&quot;classname&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;custom_classname&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与<code>record_property</code>不同, 它不会在节点下添加子元素,而是在生成的<code>testcase</code>标签内添加一个属性<code>assertions =&quot;REQ-1234&quot;</code>,并使用<code>classname = custom_classname</code>覆盖默认的<code>classname</code>属性：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testcase</span> <span class="token attr-name">classname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>custom_classname<span class="token punctuation">&quot;</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function.py<span class="token punctuation">&quot;</span></span> <span class="token attr-name">line</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_function<span class="token punctuation">&quot;</span></span> <span class="token attr-name">time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.003<span class="token punctuation">&quot;</span></span> <span class="token attr-name">assertions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REQ-1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system-out</span><span class="token punctuation">&gt;</span></span>
        hello world
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system-out</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testcase</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>警告：</strong><br><code>record_xml_attribute</code>也是一个实验性函数,其界面可能会被更强大,更通用的未来版本所取代。但是,将保留函数本身。</p></blockquote><p>通过使用<code>record_xml_property</code>可以为在使用持续集成工具解析xml报告时提供帮助。 但是,一些解析器对允许的元素和属性非常严格。 许多工具使用xsd模式(如下例所示)来验证传入的xml。 确保使用解析器允许的属性名称。<br> 以下是Jenkins用于验证xml报告的结构：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>testcase<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>skipped<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>unbounded<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>failure<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>unbounded<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>system-out<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>unbounded<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>system-err<span class="token punctuation">&quot;</span></span> <span class="token attr-name">minOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxOccurs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>unbounded<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token attr-name">use</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>required<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>assertions<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token attr-name">use</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>optional<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>time<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token attr-name">use</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>optional<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classname<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token attr-name">use</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>optional<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>attribute</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token attr-name">use</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>optional<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>element</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LogXML: add_global_property</strong></p><p><em>3.0版本新增</em></p><p>如果要在<code>testsuite</code>级别添加属性节点,该节点可能包含与所有测试用例相关的属性,则可以使用<code>LogXML.add_global_properties</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">log_global_env_facts</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">if</span> pytest<span class="token punctuation">.</span>config<span class="token punctuation">.</span>pluginmanager<span class="token punctuation">.</span>hasplugin<span class="token punctuation">(</span><span class="token string">&quot;junitxml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        my_junit <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>pytest<span class="token punctuation">.</span>config<span class="token punctuation">,</span><span class="token string">&quot;_xml&quot;</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>

    my_junit<span class="token punctuation">.</span>add_global_property<span class="token punctuation">(</span><span class="token string">&quot;ARCH&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;PPC&quot;</span><span class="token punctuation">)</span>
    my_junit<span class="token punctuation">.</span>add_global_property<span class="token punctuation">(</span><span class="token string">&quot;STORAGE_TYPE&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CEPH&quot;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span>log_global_env_facts<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">start_and_prepare_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">TestMe</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会在生成的xml中的<code>testsuite</code>节点下的属性节中添加：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuite</span> <span class="token attr-name">errors</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">failures</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pytest<span class="token punctuation">&quot;</span></span> <span class="token attr-name">skips</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tests</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.006<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ARCH<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PPC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>STORAGE_TYPE<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CEPH<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testcase</span> <span class="token attr-name">classname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_me.TestMe<span class="token punctuation">&quot;</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_me.py<span class="token punctuation">&quot;</span></span> <span class="token attr-name">line</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>16<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test_foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">time</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.000243663787842<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuite</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>警告：</strong><br> 这依然是一个实验性的函数,其界面也可能会被更强大,更通用的未来版本所取代, 但也将保留该函数。</p></blockquote><h3 id="创建结果日志格式文件" tabindex="-1"><a class="header-anchor" href="#创建结果日志格式文件" aria-hidden="true">#</a> 创建结果日志格式文件</h3><p>_3.0版本_之后不推荐使用,计划在<code>4.0版本</code>中删除。<br> 对于仍然需要类似函数的用户来说,可以使用提供测试数据流的<code>pytest-tap</code>插件。<br> 如有任何疑虑,可以[建立一个问题(open an issue)。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--resultlog</span><span class="token operator">=</span>path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行后,在<code>path</code>路径中会创建一个纯文本结果日志文件,这些文件可以用于：例如,在<code>PyPy-test</code>网页显示多个修订版的测试结果。</p><h3 id="将测试报告发送到在线pastebin服务" tabindex="-1"><a class="header-anchor" href="#将测试报告发送到在线pastebin服务" aria-hidden="true">#</a> 将测试报告发送到在线pastebin服务</h3><p><strong>为每条测试失败用例建立一个日志URL链接：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--pastebin</span><span class="token operator">=</span>failed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会将测试运行信息提交到一个提供粘贴服务的远程服务器上,并为每条测试失败用例提供一个URL。 你可以像平常一样查看搜集结果,或者使用<code>-x</code>参数,来只显示某个特定的测试失败结果。<br><strong>为整个测试执行日志建立一个URL链接：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--pastebin</span><span class="token operator">=</span>all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,101),r={href:"http://bpaste.net",target:"_blank",rel:"noopener noreferrer"},d=n(`<h3 id="禁用插件" tabindex="-1"><a class="header-anchor" href="#禁用插件" aria-hidden="true">#</a> 禁用插件</h3><p>可以通过<code>-p</code>选项与前缀<code>no:</code>一起使用,来在运行时禁用加载特定插件。<br> 例如：要禁用加载从文本文件执行doctest测试的<code>doctest</code>插件,可以通过以下方式运行Pytest：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-p</span> no:doctest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="在python代码调用pytest" tabindex="-1"><a class="header-anchor" href="#在python代码调用pytest" aria-hidden="true">#</a> 在Python代码调用pytest</h3><p><em>版本2.0新增</em><br> 你可以在Python代码中直接调用pytest:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就和你从命令行调用“pytest”一样。但它不会引发<code>SystemExit</code>,而是返回<code>exitcode</code>。 你可以传入选项和参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;-x&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;mytestdir&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以为<code>pytest.main</code>指定其他插件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># myinvoke.py文件内容</span>
<span class="token keyword">import</span> pytest
<span class="token keyword">class</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">pytest_sessionfinish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;*** test run reporting finishing&quot;</span><span class="token punctuation">)</span>

pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;-qq&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>plugins<span class="token operator">=</span><span class="token punctuation">[</span>MyPlugin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行它将显示已添加MyPlugin并调用其中的hook方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ python myinvoke.py
<span class="token builtin class-name">.</span>                                                                   <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
*** <span class="token builtin class-name">test</span> run reporting finishing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意:</strong><br> 调用<code>pytest.main()</code>将会导入所有测试用例及其导入的其他模块。由于python导入系统的缓存机制,从同一进程后续调用<code>pytest.main()</code>不会反映调用之间对这些文件的更改。 因此,不建议从同一进程(例如,为了新运行测试)多次调用<code>pytest.main()</code>。</p></blockquote>`,13);function k(m,v){const t=p("ExternalLinkIcon");return o(),c("div",null,[i,a("p",null,[s("目前只实现了粘贴到"),a("a",r,[s("http://bpaste.net"),l(t)]),s("网站的服务。")]),d])}const h=e(u,[["render",k],["__file","Pytest教程02-Pytest-使用及调用方法.html.vue"]]);export{h as default};
