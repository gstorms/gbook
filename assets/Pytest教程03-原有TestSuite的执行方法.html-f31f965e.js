import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o,c as r,a as e,b as t,d as c,f as i}from"./app-cfbf85c1.js";const p={},d=i(`<h1 id="pytest权威教程03-原有testsuite的执行方法" tabindex="-1"><a class="header-anchor" href="#pytest权威教程03-原有testsuite的执行方法" aria-hidden="true">#</a> Pytest权威教程03-原有TestSuite的执行方法</h1><h3 id="原有testsuite的执行方法" tabindex="-1"><a class="header-anchor" href="#原有testsuite的执行方法" aria-hidden="true">#</a> 原有TestSuite的执行方法</h3><p>Pytest可以与大多数现有的测试套件(testsuite)一起使用,但是它的加载方式方式不像nose或Python的默认单元测试框架的测试运行器(test runner)。<br> 在使用本节之前,你需要安装pytest。</p><h3 id="使用pytest运行已存在的测试套件-test-suite" tabindex="-1"><a class="header-anchor" href="#使用pytest运行已存在的测试套件-test-suite" aria-hidden="true">#</a> 使用pytest运行已存在的测试套件(test suite)</h3><p>假设你想要在某个地方为现有仓库(respsitory)做贡献代码。 在使用某种版本控制软件拉取代码和设置完<code>virtualenv</code> (可选)后,你需要运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>仓库名<span class="token operator">&gt;</span>
pip <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span> <span class="token comment"># 环境所依赖的&#39;python setup.py develop&#39; 和 &#39;conda develop&#39;包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在你项目根目录中,这将为你的代码在<code>site-packages</code>中设置一个符号链接,来允许你无需安装自己的代码即可执行测试。<br> 在开发模式下如此使用,可以避免每次要运行测试时重新安装,这比每次使用<code>sys.path</code>将测试指向本地代码更简单。<br> 或者你可以考虑使用[tox。</p>`,7),l={href:"https://www.jianshu.com/p/6a05ccd3ca94",target:"_blank",rel:"noopener noreferrer"};function u(h,_){const s=n("ExternalLinkIcon");return o(),r("div",null,[d,e("blockquote",null,[e("p",null,[t("译者注: 实际官方并没有写Pytest怎么执行TestSuite,执行方法可以参考个人的另一篇文章: "),e("a",l,[t("https://www.jianshu.com/p/6a05ccd3ca94"),c(s)])])])])}const v=a(p,[["render",u],["__file","Pytest教程03-原有TestSuite的执行方法.html.vue"]]);export{v as default};
