import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-3f278ba4.js";const p={},o=e(`<h1 id="pytest权威教程04-断言的编写和报告" tabindex="-1"><a class="header-anchor" href="#pytest权威教程04-断言的编写和报告" aria-hidden="true">#</a> Pytest权威教程04-断言的编写和报告</h1><h3 id="使用assert语句进行断言" tabindex="-1"><a class="header-anchor" href="#使用assert语句进行断言" aria-hidden="true">#</a> 使用assert语句进行断言</h3><p>pytest允许你使用标准的Python<code>assert</code>断言语句来验证测试中的期望结果和实际结果。 例如,你可以编写以下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_assert1.py文件内容</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">3</span>

<span class="token keyword">def</span> <span class="token function">test_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来断言你的函数返回一个特定的值。 如果此断言失败,你将看到函数调用的返回值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_assert1.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-3.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">1</span> item

test_assert1.py F                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
______________________________ test_function _______________________________

    def test_function<span class="token punctuation">(</span><span class="token punctuation">)</span>:
<span class="token operator">&gt;</span>       assert f<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span>
E       assert <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span>
E        +  where <span class="token number">3</span> <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span>

test_assert1.py:5: AssertionError
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Pytest</code>支持显示常见的包括调用,属性,比较以及二元和一元运算符子表达式的值 (参考: pytest执行Python测试失败报告示例)。 你可以在不使用繁琐的Python惯用构造样板代码的同时,不丢失断言失败的对比信息(内省信息)。<br> 当然,你也可以像下面所示,指定断言失败的返回消息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">assert</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;值为奇数,应为偶数&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样将不会断言失败对比信息(内省信息),而只简单地在追溯信息中显示你指定的失败返回信息。</p><p>有关断言内省的更多信息,请参阅<strong>高级断言内省</strong>。</p><h3 id="异常断言" tabindex="-1"><a class="header-anchor" href="#异常断言" aria-hidden="true">#</a> 异常断言</h3><p>你可以像如下所示,使用<code>pytest.raises</code>作为上下文管理器来进行异常断言：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest

<span class="token keyword">def</span> <span class="token function">test_zero_division</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要访问实际的异常信息,你可以使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_recursion_depth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>RuntimeError<span class="token punctuation">)</span> <span class="token keyword">as</span> excinfo<span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            f<span class="token punctuation">(</span><span class="token punctuation">)</span>
        f<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token string">&#39;maximum recursion&#39;</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>excinfo<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>excinfo</code>是一个<code>ExceptionInfo</code>实例,它是实际异常的装饰器。 其主要属性有<code>.type</code>,<code>.value</code>及<code>.traceback</code>三种<br><em>版本3.0已修改</em><br> 在上下文管理器中,你可以使用参数<code>message</code>来指定自定义失败信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> with raises<span class="token punctuation">(</span>ZeroDivisionError,message<span class="token operator">=</span><span class="token string">&quot;Expecting ZeroDivisionError&quot;</span><span class="token punctuation">)</span>:
<span class="token punctuation">..</span>.    pass
<span class="token punctuation">..</span>. Failed: Expecting ZeroDivisionError
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想编写适用于Python 2.4的测试代码,你还可以使用其他两种方法来测试预期的异常：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ExpectedException<span class="token punctuation">,</span>func<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ExpectedException<span class="token punctuation">,</span><span class="token string">&quot;func(*args,**kwargs)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两者都可以对带任意参数的函数,断言是否出现了期望的异常：<code>ExpectedException</code>。 即使没有异常或出现了不同的异常,报告生成器也能输出一些有用的断言信息。<br> 注意,也可以为<code>pytest.mark.xfail</code>指定一个“raises”参数,当引发异常时标记用例失败：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>xfail</span><span class="token punctuation">(</span>raises<span class="token operator">=</span>IndexError<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    f<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于你在代码中故意设置的异常,使用<code>pytest.raises</code>断言更加好用,而将<code>@ pytest.mark.xfail</code>与check函数一起使用对于已知未修复或依赖中的bug会更好。<br> 此外,上下文管理器表单接受<code>match</code>关键字参数来测试正则表达式匹配中的异常(如<code>unittest</code>中的<code>TestCase.assertRaisesRegexp</code>方法)：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest

<span class="token keyword">def</span> <span class="token function">myfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Exception 123 raised&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span><span class="token keyword">match</span><span class="token operator">=</span><span class="token string">r&#39;.* 123 .*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        myfunc<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>match</code>变量后的正则表达式与使用<code>re.search</code>函数来进行匹配一致。 因此在上面的例子中,<code>match =&#39;123&#39;</code>不会引发异常。</p><h3 id="警示断言" tabindex="-1"><a class="header-anchor" href="#警示断言" aria-hidden="true">#</a> 警示断言</h3><p><em>2.8版本新增</em><br> 你可以使用<code>pytest.warns</code>检查代码是否引发了特定警告。</p><h3 id="使用上下文对比" tabindex="-1"><a class="header-anchor" href="#使用上下文对比" aria-hidden="true">#</a> 使用上下文对比</h3><p><em>2.0版本新增</em><br><code>Pytest</code>可以在断言的比较中提供丰富的上下文信息。 例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_assert2.py文件内容</span>

<span class="token keyword">def</span> <span class="token function">test_set_comparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    set1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&quot;1308&quot;</span><span class="token punctuation">)</span>
    set2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&quot;8035&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> set1 <span class="token operator">==</span> set2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你运行这个模块后</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_assert2.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-3.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">1</span> item

test_assert2.py F                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
___________________________ test_set_comparison ____________________________

    def test_set_comparison<span class="token punctuation">(</span><span class="token punctuation">)</span>:
        set1 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">&quot;1308&quot;</span><span class="token punctuation">)</span>
        set2 <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">&quot;8035&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span>       assert set1 <span class="token operator">==</span> set2
E       AssertionError: assert <span class="token punctuation">{</span><span class="token string">&#39;0&#39;</span>,<span class="token string">&#39;1&#39;</span>,<span class="token string">&#39;3&#39;</span>,<span class="token string">&#39;8&#39;</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token string">&#39;0&#39;</span>,<span class="token string">&#39;3&#39;</span>,<span class="token string">&#39;5&#39;</span>,<span class="token string">&#39;8&#39;</span><span class="token punctuation">}</span>
E         Extra items <span class="token keyword">in</span> the left set:
E         <span class="token string">&#39;1&#39;</span>
E         Extra items <span class="token keyword">in</span> the right set:
E         <span class="token string">&#39;5&#39;</span>
E         Use <span class="token parameter variable">-v</span> to get the full <span class="token function">diff</span>

test_assert2.py:5: AssertionError
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对大量用例进行了特定对比：</p><ul><li>长字符串断言：显示上下文差异</li><li>长序列断言：显示第一个失败的索引</li><li>字典断言：显示不同的key-value对</li></ul><p>有关更多示例,请参阅 报告样例。</p><h3 id="自定义断言对比信息" tabindex="-1"><a class="header-anchor" href="#自定义断言对比信息" aria-hidden="true">#</a> 自定义断言对比信息</h3><p>可以通过实现<code>hook</code>方法<code>pytest_assertrepr_compare</code>来在断言结果中添加你自己的详细说明信息。<br> **pytest_assertrepr_compare(config,op,left,right)<em>- [源码]<br> 返回失败断言表达式中的对比信息。<br> 如果没有自定义对比信息,则返回None,否则返回一列字符串。 字符串将由换行符连接,但字符串中的任何换行符都将被转义。 请注意,除第一行外的所有行都将略微缩进,目的是将第一行作为摘要。<br><strong>参数： config</strong>(pytest.config.Config</em> - pytest config 对象<br> 例如,在conftest.py文件中添加以下钩子(Hook)方法,可以为<code>Foo</code>对象提供了附加对比信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py内容</span>
<span class="token keyword">from</span> test_foocompare <span class="token keyword">import</span> Foo
<span class="token keyword">def</span> <span class="token function">pytest_assertrepr_compare</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>Foo<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span>Foo<span class="token punctuation">)</span> <span class="token keyword">and</span> op <span class="token operator">==</span> <span class="token string">&quot;==&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;Foo实例对比:&#39;</span><span class="token punctuation">,</span>
                <span class="token string">&#39;   值: %s != %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val<span class="token punctuation">,</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在,在测试模块使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_foocompare.py内容</span>
<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val

    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>val <span class="token operator">==</span> other<span class="token punctuation">.</span>val

<span class="token keyword">def</span> <span class="token function">test_compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    f1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    f2 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> f1 <span class="token operator">==</span> f2

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这个测试模块你可以看到<code>conftest.py</code>文件中定义的自定义输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span> test_foocompare.py
F                                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
_______________________________ test_compare _______________________________

    def test_compare<span class="token punctuation">(</span><span class="token punctuation">)</span>:
        f1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        f2 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">&gt;</span>       assert f1 <span class="token operator">==</span> f2
E       assert Foo实例对比:
E            值: <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span>

test_foocompare.py:11: AssertionError
<span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高级断言内省" tabindex="-1"><a class="header-anchor" href="#高级断言内省" aria-hidden="true">#</a> 高级断言内省</h3><p><em>2.1版本新函数</em><br> 报告有关失败断言的详细信息是通过在运行之前重写assert语句来实现的。 重写的断言语句将内省信息放入断言失败消息中。 <code>Pytest</code>只重写测试收集过程直接发现的测试模块中的assert断言,因此<strong>在支持模块(非测试模块)中的断言,不会被重写</strong>。<br> 你可以在导入模块前通过调用<code>register_assert_rewrite</code>手动启用断言重写(比如可以在<code>conftest.py</code>这样使用)。</p><div class="hint-container tip"><p class="hint-container-title">注意</p><p><code>Pytest</code>通过使用导入hook方法写入新的<code>pyc</code>文件来重写测试模块。 通常这种结构比较清晰。 但是,如果你混乱导入,导入的hook方法可能会受到干扰。<br> 如果是这种情况,你有两种选择：</p><ul><li>通过将字符串<code>PYTEST_DONT_REWRITE</code>添加到其docstring来禁用特定模块的重写。</li><li>使用<code>--assert = plain</code>禁用所有模块的重写。</li></ul></div><blockquote><p><strong>注意</strong><br><code>Pytest</code>通过使用导入hook方法写入新的<code>pyc</code>文件来重写测试模块。 通常这种结构比较清晰。 但是,如果你混乱导入,导入的hook方法可能会受到干扰。<br> 如果是这种情况,你有两种选择：</p><ul><li>通过将字符串<code>PYTEST_DONT_REWRITE</code>添加到其docstring来禁用特定模块的重写。</li><li>使用<code>--assert = plain</code>禁用所有模块的重写。</li></ul></blockquote><p>此外,如果无法写入新的<code>.pyc</code>文件(如在只读文件系统或zip文件中),重写将无提示失败。</p><blockquote><p>有关进一步的信息,课参阅：本杰明彼得森写的[pytest的新断言改写的幕后故事。</p></blockquote><p><em>版本2.1新函数</em>：添加断言重写作为备用内省技术。<br><em>版本2.1更改</em>：引入<code>--assert</code>选项。 弃用<code>--no-assert</code>和<code>--nomagic</code>。<br><em>版本3.0版更改</em>：删除<code>--no-assert</code>和--nomagic<code>选项。 删除</code>--assert = reinterp\`选项。</p>`,48),t=[o];function c(r,l){return n(),a("div",null,t)}const d=s(p,[["render",c],["__file","Pytest教程04-断言的编写和报告.html.vue"]]);export{d as default};
