import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as s,b as n,d as e,f as t}from"./app-3f278ba4.js";const l={},r=t(`<h1 id="pytest权威教程05-pytest-fixtures-清晰-模块化-易扩展" tabindex="-1"><a class="header-anchor" href="#pytest权威教程05-pytest-fixtures-清晰-模块化-易扩展" aria-hidden="true">#</a> Pytest权威教程05-Pytest-fixtures：清晰-模块化-易扩展</h1><p><em>2.0/2.3/2.4版本新函数</em><br> text fixtures的目的是为测试的重复执行提供一个可靠的固定基线。 <code>pytest fixture</code> 比经典的 <code>xUnit setUp/tearDown</code> 方法有着显着的改进：</p><ul><li><code>fixtures</code> 具有明确的名称,在测试用例/类/模块或整个项目中通过声明使用的 <code>fixtures</code> 名称来使用。</li><li><code>fixtures</code> 以模块化方式实现,因为每个 <code>fixture</code> 名称都会触发调用fixture函数,该 <code>fixture</code> 函数本身可以使用其它的 <code>fixtures</code> 。</li><li>从简单的单元测试到复杂的函数测试, <code>fixtures</code> 的管理允许根据配置和组件选项对 <code>fixtures</code> 和测试用例进行参数化,或者在测试用例/类/模块或整个测试会话范围内重复使用该 <code>fixture</code> 。</li></ul><p>此外, <code>pytest</code> 继续支持经典的 <code>xUnit</code> 风格的 <code>setup</code> 方法。 你可以根据需要混合使用两种样式,逐步从经典样式移动到新样式。 你也可以从现有的 <code>unittest.TestCase</code> 样式或基于 <code>nose</code> 的项目开始。</p><h3 id="fixtures作为函数参数使用" tabindex="-1"><a class="header-anchor" href="#fixtures作为函数参数使用" aria-hidden="true">#</a> Fixtures作为函数参数使用</h3><p>测试用例可以通过在其参数中使用fixtures名称来接收fixture对象。 每个fixture参数名称所对应的函数,可以通过使用<code>@pytest.fixture</code>注册成为一个fixture函数,来为测试用例提供一个fixture对象。 让我们看一个只包含一个fixture和一个使用它的测试用例的简单独立测试模块：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># ./test_smtpsimple.py内容</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> smtplib
    <span class="token keyword">return</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">&quot;smtp.gmail.com&quot;</span><span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_ehlo</span><span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response<span class="token punctuation">,</span>msg <span class="token operator">=</span> smtp_connection<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> response <span class="token operator">==</span> <span class="token number">250</span>
    <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token comment"># for demo purposes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里,<code>test_ehlo</code>需要<code>smtp_connection</code>来提供fixture对象。pytest将发现并调用带<code>@pytest.fixture</code>装饰器的<code>smtp_connection</code> fixture函数。 运行测试如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_smtpsimple.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-3.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">1</span> item

test_smtpsimple.py F                                                 <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
________________________________ test_ehlo _________________________________

smtp_connection <span class="token operator">=</span> <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_ehlo<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>:
        response,msg <span class="token operator">=</span> smtp_connection.ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>
        assert response <span class="token operator">==</span> <span class="token number">250</span>
<span class="token operator">&gt;</span>       assert <span class="token number">0</span> <span class="token comment"># for demo purposes</span>
E       assert <span class="token number">0</span>

test_smtpsimple.py:11: AssertionError
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试失败的回溯信息中,我们看到测试用例是使用<code>smtp_connection</code>参数调用的,即由fixture函数创建的<code>smtplib.SMTP()</code>实例。测试用例在我们故意的<code>assert 0</code>上失败。以下是pytest用这种方式调用测试用例使用的确切协议：</p><h3 id="fixtures-依赖注入的主要例子" tabindex="-1"><a class="header-anchor" href="#fixtures-依赖注入的主要例子" aria-hidden="true">#</a> Fixtures: 依赖注入的主要例子</h3><p>Fixtures允许测试用例能轻松引入预先定义好的初始化准备函数,而无需关心导入/设置/清理方法的细节。 这是依赖注入的一个主要示例,其中fixture函数的函数扮演”注入器“的角色,测试用例来“消费”这些fixture对象。</p>`,12),u={id:"conftest-py-共享fixture函数",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#conftest-py-共享fixture函数","aria-hidden":"true"},"#",-1),k={href:"http://conftest.py",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>如果在测试中需要使用多个测试文件中的fixture函数,则可以将其移动到<code>conftest.py</code>文件中,所需的fixture对象会自动被<code>Pytest</code>发现,而不需要再每次导入。 fixture函数的发现顺序从测试类开始,然后是测试模块,然后是conftest.py文件,最后是内置和第三方插件。<br> 你还可以使用conftest.py文件来实现本地每个目录的插件。</p><h3 id="共享测试数据" tabindex="-1"><a class="header-anchor" href="#共享测试数据" aria-hidden="true">#</a> 共享测试数据</h3><p>如果要使用数据文件中的测试数据,最好的方法是将这些数据加载到fixture函数中以供测试用例注入使用。这利用到了<code>pytest</code>的自动缓存机制。<br> 另一个好方法是在tests文件夹中添加数据文件。 还有社区插件可用于帮助处理这方面的测试,例如：<code>pytest-datadir</code>和<code>pytest-datafiles</code>。</p><h3 id="生效范围-在测试类-测试模块-测试会话中共享fixture对象" tabindex="-1"><a class="header-anchor" href="#生效范围-在测试类-测试模块-测试会话中共享fixture对象" aria-hidden="true">#</a> 生效范围：在测试类/测试模块/测试会话中共享fixture对象</h3><p>由于fixtures对象需要连接形成依赖网,而通常创建时间比较长。 扩展前面的示例,我们可以在<code>@pytest.fixture</code>调用中添加<code>scope =&quot;module&quot;</code>参数,以使每个测试模块只调用一次修饰的<code>smtp_connection</code> fixture函数(默认情况下,每个测试函数调用一次)。 因此,测试模块中的多个测试用例将各自注入相同的<code>smtp_connection</code>fixture对象,从而节省时间。scope参数的可选值包括：function(函数),class(类),module(模块),package(包)及 session(会话)。<br> 下一个示例将fixture函数放入单独的conftest.py文件中,以便来自目录中多个测试模块的测试可以访问fixture函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py文件内容</span>
<span class="token keyword">import</span> pytest
<span class="token keyword">import</span> smtplib

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">&quot;smtp.gmail.com&quot;</span><span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fixture对象的名称依然是<code>smtp_connection</code>,你可以通过在任何测试用例或fixture函数(在conftest.py所在的目录中或下面)使用参数<code>smtp_connection</code>作为输入参数来访问其结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_module.py文件内容</span>

<span class="token keyword">def</span> <span class="token function">test_ehlo</span><span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response<span class="token punctuation">,</span>msg <span class="token operator">=</span> smtp_connection<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> response <span class="token operator">==</span> <span class="token number">250</span>
    <span class="token keyword">assert</span> <span class="token string">b&quot;smtp.gmail.com&quot;</span> <span class="token keyword">in</span> msg
    <span class="token keyword">assert</span> <span class="token number">0</span>  <span class="token comment"># for demo purposes</span>

<span class="token keyword">def</span> <span class="token function">test_noop</span><span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response<span class="token punctuation">,</span>msg <span class="token operator">=</span> smtp_connection<span class="token punctuation">.</span>noop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> response <span class="token operator">==</span> <span class="token number">250</span>
    <span class="token keyword">assert</span> <span class="token number">0</span>  <span class="token comment"># for demo purposes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们故意插入失败的<code>assert 0</code>语句,以便检查发生了什么,运行测试并查看结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_module.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-4.x.y,py-1.x.y,pluggy-0.x.y
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">2</span> items

test_module.py FF                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
________________________________ test_ehlo _________________________________

smtp_connection <span class="token operator">=</span> <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_ehlo<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>:
        response,msg <span class="token operator">=</span> smtp_connection.ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>
        assert response <span class="token operator">==</span> <span class="token number">250</span>
        assert b<span class="token string">&quot;smtp.gmail.com&quot;</span> <span class="token keyword">in</span> msg
<span class="token operator">&gt;</span>       assert <span class="token number">0</span>  <span class="token comment"># for demo purposes</span>
E       assert <span class="token number">0</span>

test_module.py:6: AssertionError
________________________________ test_noop _________________________________

smtp_connection <span class="token operator">=</span> <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_noop<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>:
        response,msg <span class="token operator">=</span> smtp_connection.noop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        assert response <span class="token operator">==</span> <span class="token number">250</span>
<span class="token operator">&gt;</span>       assert <span class="token number">0</span>  <span class="token comment"># for demo purposes</span>
E       assert <span class="token number">0</span>

test_module.py:11: AssertionError
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">2</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会看到两个<code>assert 0</code>失败信息,更重要的是你还可以看到相同的(模块范围的)<code>smtp_connection</code>对象被传递到两个测试用例中,因为pytest在回溯信息中显示传入的参数值。 因此,使用<code>smtp_connection</code>的两个测试用例运行速度与单个函数一样快,因为它们重用了相同的fixture对象。<br> 如果你决定要使用session(会话,一次运行算一次会话)范围的<code>smtp_connection</code>对象,则只需如下声明：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># the returned fixture value will be shared for</span>
    <span class="token comment"># all tests needing it</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后,class(类)范围将为每个测试类调用一次fixture对象。</p><blockquote><p>注意:<br> Pytest一次只会缓存一个fixture实例。 这意味着当使用参数化fixture时,pytest可能会在给定范围内多次调用fixture函数。</p></blockquote><p><em>package(包)范围的fixture(实验性函数)</em><br><strong>3.7版本新函数</strong><br> 在pytest 3.7中,引入了包范围。 当包的最后一次测试结束时,最终确定包范围的fixture函数。</p><blockquote><p>警告:<br> 此函数是实验性的,如果在获得更多使用后发现隐藏的角落情况或此函数的严重问题,可能会在将来的版本中删除。</p></blockquote><p>谨慎使用此新函数,请务必报告你发现的任何问题。</p><h3 id="高范围的fixture函数优先实例化" tabindex="-1"><a class="header-anchor" href="#高范围的fixture函数优先实例化" aria-hidden="true">#</a> 高范围的fixture函数优先实例化</h3><p><strong>3.5版本新函数</strong><br> 在测试函数的fixture对象请求中,较高范围的fixture(例如session会话级)较低范围的fixture(例如function函数级或class类级优先执行。相同范围的fixture对象的按引入的顺序及fixtures之间的依赖关系按顺序调用。<br> 请考虑以下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">test_foo</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span>m1<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test_foo</code>中fixtures将按以下顺序执行：</p><ol><li>s1：是最高范围的fixture(会话级)</li><li>m1：是第二高的fixture(模块级)</li><li>tmpdir：是一个函数级的fixture,f1依赖它,因此它需要在f1前调用</li><li>f1：是test_foo参数列表中第一个函数范围的fixture。</li><li>f2：是test_foo参数列表中最后一个函数范围的fixture。</li></ol><h3 id="fixture结束-执行teardown代码" tabindex="-1"><a class="header-anchor" href="#fixture结束-执行teardown代码" aria-hidden="true">#</a> fixture结束/执行teardown代码</h3><p>当fixture超出范围时,通过使用yield语句而不是return,pytest支持fixture执行特定的teardown代码。yield语句之后的所有代码都视为teardown代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py文件内容</span>

<span class="token keyword">import</span> smtplib
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    smtp_connection <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">&quot;smtp.gmail.com&quot;</span><span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> smtp_connection  <span class="token comment"># provide the fixture value</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;teardown smtp&quot;</span><span class="token punctuation">)</span>
    smtp_connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无论测试的异常状态如何,<code>print</code>和<code>smtp.close()</code>语句将在模块中的最后一个测试完成执行时执行。<br> 让我们执行一下(上文的<code>test_module.py</code>)：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">--tb</span><span class="token operator">=</span>no
FFteardown smtp

<span class="token number">2</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到<code>smtp_connection</code>实例在两个测试完成执行后完成。 请注意,如果我们使用<code>scope =&#39;function&#39;</code>修饰我们的fixture函数,那么每次单个测试都会进行fixture的setup和teardown。 在任何一种情况下,测试模块本身都不需要改变或了解fixture函数的这些细节。<br> 请注意,我们还可以使用with语句无缝地使用yield语法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_yield2.py文件内容</span>

<span class="token keyword">import</span> smtplib
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">&quot;smtp.gmail.com&quot;</span><span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> smtp_connection<span class="token punctuation">:</span>
        <span class="token keyword">yield</span> smtp_connection  <span class="token comment"># provide the fixture value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结束后,<code>smtp_connection</code>连接将关闭,因为当with语句结束时,<code>smtp_connection</code>对象会自动关闭。<br> 请注意,如果在设置代码期间(yield关键字之前)发生异常,则不会调用teardown代码(在yield之后)。<br> 执行teardown代码的另一种选择是利用请求上下文对象的<code>addfinalizer</code>方法来注册teardown函数。<br> 以下是<code>smtp_connection</code>fixture函数更改为使用<code>addfinalizer</code>进行teardown：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of conftest.py</span>
<span class="token keyword">import</span> smtplib
<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    smtp_connection <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">&quot;smtp.gmail.com&quot;</span><span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">fin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;teardown smtp_connection&quot;</span><span class="token punctuation">)</span>
        smtp_connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    request<span class="token punctuation">.</span>addfinalizer<span class="token punctuation">(</span>fin<span class="token punctuation">)</span>
    <span class="token keyword">return</span> smtp_connection  <span class="token comment"># provide the fixture value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>yield</code>和<code>addfinalizer</code>方法在测试结束后调用它们的代码时的工作方式类似,但<code>addfinalizer</code>相比<code>yield</code>有两个主要区别：</p><ol><li>使用<code>addfinalizer</code>可以注册多个teardown函数。</li><li>无论fixture中setup代码是否引发异常,都将始终调用teardown代码。 即使其中一个资源无法创建/获取,也可以正确关闭fixture函数创建的所有资源：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">equipments</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> port <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&#39;C1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;C3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;C28&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        equip <span class="token operator">=</span> connect<span class="token punctuation">(</span>port<span class="token punctuation">)</span>
        request<span class="token punctuation">.</span>addfinalizer<span class="token punctuation">(</span>equip<span class="token punctuation">.</span>disconnect<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>equip<span class="token punctuation">)</span>
    <span class="token keyword">return</span> r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中,如果“C28”因异常而失败,则“C1”和“C3”仍将正确关闭。 当然,如果在注册<code>finalize</code>函数之前发生异常,那么它将不会被执行。</p><h3 id="fixtures中使用测试上下文的内省信息" tabindex="-1"><a class="header-anchor" href="#fixtures中使用测试上下文的内省信息" aria-hidden="true">#</a> Fixtures中使用测试上下文的内省信息</h3><p>Fixture函数可以接受request对象来内省“请求”测试函数,类或模块上下文。进一步扩展前一个smtp_connectionfixture例子,让我们从使用我们的fixture的测试模块中读取一个可选的服务器URL：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of conftest.py</span>
<span class="token keyword">import</span> pytest
<span class="token keyword">import</span> smtplib

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    server <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>module<span class="token punctuation">,</span><span class="token string">&quot;smtpserver&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;smtp.gmail.com&quot;</span><span class="token punctuation">)</span>
    smtp_connection <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>server<span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> smtp_connection
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;finalizing %s (%s)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>smtp_connection<span class="token punctuation">,</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span>
    smtp_connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用该request.module属性可选地smtpserver从测试模块获取 属性。如果我们再次执行,那么没有太大变化：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">--tb</span><span class="token operator">=</span>no
FFfinalizing <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span> <span class="token punctuation">(</span>smtp.gmail.com<span class="token punctuation">)</span>

<span class="token number">2</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们快速创建另一个测试模块,该模块实际上在其模块命名空间中设置服务器URL：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_anothersmtp.py</span>

smtpserver <span class="token operator">=</span> <span class="token string">&quot;mail.python.org&quot;</span>  <span class="token comment"># will be read by smtp fixture</span>

<span class="token keyword">def</span> <span class="token function">test_showhelo</span><span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token number">0</span><span class="token punctuation">,</span>smtp_connection<span class="token punctuation">.</span>helo<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行它：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-qq</span> <span class="token parameter variable">--tb</span><span class="token operator">=</span>short test_anothersmtp.py
F                                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
______________________________ test_showhelo _______________________________
test_anothersmtp.py:5: <span class="token keyword">in</span> test_showhelo
    assert <span class="token number">0</span>,smtp_connection.helo<span class="token punctuation">(</span><span class="token punctuation">)</span>
E   AssertionError: <span class="token punctuation">(</span><span class="token number">250</span>,b<span class="token string">&#39;mail.python.org&#39;</span><span class="token punctuation">)</span>
E   assert <span class="token number">0</span>
------------------------- Captured stdout teardown -------------------------
finalizing <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span> <span class="token punctuation">(</span>mail.python.org<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>瞧！该smtp_connectionFixture方法函数从模块命名空间拿起我们的邮件服务器名称。</p><h3 id="fixture作为函数工厂-译者注-fixture返回一个函数-以支持根据参数得到不同的结果。" tabindex="-1"><a class="header-anchor" href="#fixture作为函数工厂-译者注-fixture返回一个函数-以支持根据参数得到不同的结果。" aria-hidden="true">#</a> Fixture作为函数工厂(译者注：Fixture返回一个函数，以支持根据参数得到不同的结果。)</h3><p>“Fixture作为函数工厂”模式，可以支持在用例中根据不同的参数使用Fixture得到不同的结果。Fixture可以返回一个内部定义的函数，而不是直接返回数据，便可以在用例中使用该函数通过不同的参数获取到不同的结果。<br> Fixtures工厂方法可根据需要提供参数生成Fixture和方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">make_customer_record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">_make_customer_record</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
            <span class="token string">&quot;orders&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">return</span> _make_customer_record


<span class="token keyword">def</span> <span class="token function">test_customer_records</span><span class="token punctuation">(</span>make_customer_record<span class="token punctuation">)</span><span class="token punctuation">:</span>
    customer_1 <span class="token operator">=</span> make_customer_record<span class="token punctuation">(</span><span class="token string">&quot;Lisa&quot;</span><span class="token punctuation">)</span>
    customer_2 <span class="token operator">=</span> make_customer_record<span class="token punctuation">(</span><span class="token string">&quot;Mike&quot;</span><span class="token punctuation">)</span>
    customer_3 <span class="token operator">=</span> make_customer_record<span class="token punctuation">(</span><span class="token string">&quot;Meredith&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果工厂创建的数据需要管理,那么Fixture方法可以处理：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">make_customer_record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    created_records <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">_make_customer_record</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        record <span class="token operator">=</span> models<span class="token punctuation">.</span>Customer<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">,</span>orders<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        created_records<span class="token punctuation">.</span>append<span class="token punctuation">(</span>record<span class="token punctuation">)</span>
        <span class="token keyword">return</span> record

    <span class="token keyword">yield</span> _make_customer_record

    <span class="token keyword">for</span> record <span class="token keyword">in</span> created_records<span class="token punctuation">:</span>
        record<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">test_customer_records</span><span class="token punctuation">(</span>make_customer_record<span class="token punctuation">)</span><span class="token punctuation">:</span>
    customer_1 <span class="token operator">=</span> make_customer_record<span class="token punctuation">(</span><span class="token string">&quot;Lisa&quot;</span><span class="token punctuation">)</span>
    customer_2 <span class="token operator">=</span> make_customer_record<span class="token punctuation">(</span><span class="token string">&quot;Mike&quot;</span><span class="token punctuation">)</span>
    customer_3 <span class="token operator">=</span> make_customer_record<span class="token punctuation">(</span><span class="token string">&quot;Meredith&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fixtures参数化" tabindex="-1"><a class="header-anchor" href="#fixtures参数化" aria-hidden="true">#</a> Fixtures参数化</h3><p>可以对Fixture方法函数进行参数化,在这种情况下,它们将被多次调用,每次执行一组相关测试,即依赖于此Fixture方法的测试。测试函数通常不需要知道它们的重新运行。Fixture方法参数化有助于为可以以多种方式配置的组件编写详尽的函数测试。<br> 扩展前面的示例,我们可以标记Fixture方法以创建两个smtp_connectionFixture方法实例,这将导致使用Fixture方法的所有测试运行两次。fixture函数通过特殊request对象访问每个参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of conftest.py</span>
<span class="token keyword">import</span> pytest
<span class="token keyword">import</span> smtplib

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
                params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;smtp.gmail.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mail.python.org&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">smtp_connection</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    smtp_connection <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>request<span class="token punctuation">.</span>param<span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> smtp_connection
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;finalizing %s&quot;</span> <span class="token operator">%</span> smtp_connection<span class="token punctuation">)</span>
    smtp_connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要的变化是paramswith 的声明@pytest.fixture,一个值列表,每个值的Fixture方法函数将执行,并可以通过访问值request.param。没有测试函数代码需要更改。那么让我们再做一次：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span> test_module.py
FFFF                                                                 <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
________________________ test_ehlo<span class="token punctuation">[</span>smtp.gmail.com<span class="token punctuation">]</span> _________________________

smtp_connection <span class="token operator">=</span> <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_ehlo<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>:
        response,msg <span class="token operator">=</span> smtp_connection.ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>
        assert response <span class="token operator">==</span> <span class="token number">250</span>
        assert b<span class="token string">&quot;smtp.gmail.com&quot;</span> <span class="token keyword">in</span> msg
<span class="token operator">&gt;</span>       assert <span class="token number">0</span>  <span class="token comment"># for demo purposes</span>
E       assert <span class="token number">0</span>

test_module.py:6: AssertionError
________________________ test_noop<span class="token punctuation">[</span>smtp.gmail.com<span class="token punctuation">]</span> _________________________

smtp_connection <span class="token operator">=</span> <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_noop<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>:
        response,msg <span class="token operator">=</span> smtp_connection.noop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        assert response <span class="token operator">==</span> <span class="token number">250</span>
<span class="token operator">&gt;</span>       assert <span class="token number">0</span>  <span class="token comment"># for demo purposes</span>
E       assert <span class="token number">0</span>

test_module.py:11: AssertionError
________________________ test_ehlo<span class="token punctuation">[</span>mail.python.org<span class="token punctuation">]</span> ________________________

smtp_connection <span class="token operator">=</span> <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_ehlo<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>:
        response,msg <span class="token operator">=</span> smtp_connection.ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>
        assert response <span class="token operator">==</span> <span class="token number">250</span>
<span class="token operator">&gt;</span>       assert b<span class="token string">&quot;smtp.gmail.com&quot;</span> <span class="token keyword">in</span> msg
E       AssertionError: assert b<span class="token string">&#39;smtp.gmail.com&#39;</span> <span class="token keyword">in</span> b<span class="token string">&#39;mail.python.org\\nPIPELINING\\nSIZE 51200000\\nETRN\\nSTARTTLS\\nAUTH DIGEST-MD5 NTLM CRAM-MD5\\nENHANCEDSTATUSCODES\\n8BITMIME\\nDSN\\nSMTPUTF8\\nCHUNKING&#39;</span>

test_module.py:5: AssertionError
-------------------------- Captured stdout setup ---------------------------
finalizing <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>
________________________ test_noop<span class="token punctuation">[</span>mail.python.org<span class="token punctuation">]</span> ________________________

smtp_connection <span class="token operator">=</span> <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>

    def test_noop<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>:
        response,msg <span class="token operator">=</span> smtp_connection.noop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        assert response <span class="token operator">==</span> <span class="token number">250</span>
<span class="token operator">&gt;</span>       assert <span class="token number">0</span>  <span class="token comment"># for demo purposes</span>
E       assert <span class="token number">0</span>

test_module.py:11: AssertionError
------------------------- Captured stdout teardown -------------------------
finalizing <span class="token operator">&lt;</span>smtplib.SMTP object at 0xdeadbeef<span class="token operator">&gt;</span>
<span class="token number">4</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),v={href:"http://xn--mail-ut5ft42e.python.org",target:"_blank",rel:"noopener noreferrer"},b=s("br",null,null,-1),_={href:"http://smtp.gmail.com",target:"_blank",rel:"noopener noreferrer"},y={href:"http://mail.python.org",target:"_blank",rel:"noopener noreferrer"},f=s("br",null,null,-1),g=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_ids.py</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ids<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;spam&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ham&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span>param

<span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">def</span> <span class="token function">idfn</span><span class="token punctuation">(</span>fixture_value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> fixture_value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;eggs&quot;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ids<span class="token operator">=</span>idfn<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span>param

<span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面显示了如何ids使用要使用的字符串列表或将使用fixture值调用的函数,然后必须返回要使用的字符串。在后一种情况下,如果函数返回,None则将使用pytest的自动生成的ID。<br> 运行上述测试会导致使用以下测试ID：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest --collect-only
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-5.x.y,py-1.x.y,pluggy-0.x.y
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>
collected <span class="token number">10</span> items
<span class="token operator">&lt;</span>Module test_anothersmtp.py<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_showhelo<span class="token punctuation">[</span>smtp.gmail.com<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_showhelo<span class="token punctuation">[</span>mail.python.org<span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Module test_ids.py<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_a<span class="token punctuation">[</span>spam<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_a<span class="token punctuation">[</span>ham<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_b<span class="token punctuation">[</span>eggs<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Module test_module.py<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_ehlo<span class="token punctuation">[</span>smtp.gmail.com<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_noop<span class="token punctuation">[</span>smtp.gmail.com<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_ehlo<span class="token punctuation">[</span>mail.python.org<span class="token punctuation">]</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Function test_noop<span class="token punctuation">[</span>mail.python.org<span class="token punctuation">]</span><span class="token operator">&gt;</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> no tests ran <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用参数化fixtures标记" tabindex="-1"><a class="header-anchor" href="#使用参数化fixtures标记" aria-hidden="true">#</a> 使用参数化fixtures标记</h3><p>pytest.param()可用于在参数化Fixture方法的值集中应用标记,其方式与@ pytest.mark.parametrize一样。<br> 例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_fixture_marks.py</span>
<span class="token keyword">import</span> pytest
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pytest<span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>marks<span class="token operator">=</span>pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">data_set</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span>param

<span class="token keyword">def</span> <span class="token function">test_data</span><span class="token punctuation">(</span>data_set<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行此测试将跳过data_set带值的调用2：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_fixture_marks.py <span class="token parameter variable">-v</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-5.x.y,py-1.x.y,pluggy-0.x.y -- <span class="token variable">$PYTHON_PREFIX</span>/bin/python
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>
collecting <span class="token punctuation">..</span>. collected <span class="token number">3</span> items

test_fixture_marks.py::test_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> PASSED                           <span class="token punctuation">[</span> <span class="token number">33</span>%<span class="token punctuation">]</span>
test_fixture_marks.py::test_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> PASSED                           <span class="token punctuation">[</span> <span class="token number">66</span>%<span class="token punctuation">]</span>
test_fixture_marks.py::test_data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> SKIPPED                          <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">2</span> passed,1 skipped <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模块化-在fixture函数中使用fixtures函数" tabindex="-1"><a class="header-anchor" href="#模块化-在fixture函数中使用fixtures函数" aria-hidden="true">#</a> 模块化：在fixture函数中使用fixtures函数</h3><p>你不仅可以在测试函数中使用Fixture方法,而且Fixture方法函数可以自己使用其他Fixture方法。这有助于你的Fixture方法的模块化设计,并允许在许多项目中重复使用特定于框架的Fixture方法。作为一个简单的例子,我们可以扩展前面的例子并实例化一个对象app,我们将已经定义的smtp_connection资源粘贴 到它中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_appsetup.py</span>

<span class="token keyword">import</span> pytest

<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>smtp_connection<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>smtp_connection <span class="token operator">=</span> smtp_connection

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">app</span><span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> App<span class="token punctuation">(</span>smtp_connection<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_smtp_connection_exists</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> app<span class="token punctuation">.</span>smtp_connection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们声明一个appfixture,它接收先前定义的 smtp_connectionfixture并App用它实例化一个对象。我们来吧：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-v</span> test_appsetup.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-5.x.y,py-1.x.y,pluggy-0.x.y -- <span class="token variable">$PYTHON_PREFIX</span>/bin/python
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>
collecting <span class="token punctuation">..</span>. collected <span class="token number">2</span> items

test_appsetup.py::test_smtp_connection_exists<span class="token punctuation">[</span>smtp.gmail.com<span class="token punctuation">]</span> PASSED <span class="token punctuation">[</span> <span class="token number">50</span>%<span class="token punctuation">]</span>
test_appsetup.py::test_smtp_connection_exists<span class="token punctuation">[</span>mail.python.org<span class="token punctuation">]</span> PASSED <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">2</span> passed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于参数化smtp_connection,测试将使用两个不同的App实例和相应的smtp服务器运行两次。没有必要为appFixture方法要意识到的smtp_connection 参数化,因为pytest将全面分析Fixture方法依赖关系图。<br> 请注意,appFixture方法具有范围module并使用模块范围的smtp_connectionFixture方法。如果smtp_connection缓存在session范围上,该示例仍然可以工作 ：Fixture方法使用“更广泛”的范围Fixture方法,但不是相反的方式：会话范围的Fixture方法不能以有意义的方式使用模块范围的Fixture方法。</p><h3 id="使用fixture实例自动组织测试用例" tabindex="-1"><a class="header-anchor" href="#使用fixture实例自动组织测试用例" aria-hidden="true">#</a> 使用fixture实例自动组织测试用例</h3><p>pytest在测试运行期间最小化活动Fixture方法的数量。如果你有一个参数化Fixture方法,那么使用它的所有测试将首先用一个实例执行,然后在创建下一个Fixture方法实例之前调用终结器。除此之外,这还可以简化对创建和使用全局状态的应用程序的测试。<br> 以下示例使用两个参数化Fixture方法,其中一个基于每个模块作用域,并且所有函数执行print调用以显示设置/拆卸流程：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_module.py</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;mod1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mod2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">modarg</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    param <span class="token operator">=</span> request<span class="token punctuation">.</span>param
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;  SETUP modarg %s&quot;</span> <span class="token operator">%</span> param<span class="token punctuation">)</span>
    <span class="token keyword">yield</span> param
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;  TEARDOWN modarg %s&quot;</span> <span class="token operator">%</span> param<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">otherarg</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    param <span class="token operator">=</span> request<span class="token punctuation">.</span>param
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;  SETUP otherarg %s&quot;</span> <span class="token operator">%</span> param<span class="token punctuation">)</span>
    <span class="token keyword">yield</span> param
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;  TEARDOWN otherarg %s&quot;</span> <span class="token operator">%</span> param<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_0</span><span class="token punctuation">(</span>otherarg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;  RUN test0 with otherarg %s&quot;</span> <span class="token operator">%</span> otherarg<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>modarg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;  RUN test1 with modarg %s&quot;</span> <span class="token operator">%</span> modarg<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span>otherarg<span class="token punctuation">,</span>modarg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;  RUN test2 with otherarg %s and modarg %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>otherarg<span class="token punctuation">,</span>modarg<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们以详细模式运行测试并查看打印输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-v</span> <span class="token parameter variable">-s</span> test_module.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-5.x.y,py-1.x.y,pluggy-0.x.y -- <span class="token variable">$PYTHON_PREFIX</span>/bin/python
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>
collecting <span class="token punctuation">..</span>. collected <span class="token number">8</span> items

test_module.py::test_0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   SETUP otherarg <span class="token number">1</span>
  RUN test0 with otherarg <span class="token number">1</span>
PASSED  TEARDOWN otherarg <span class="token number">1</span>

test_module.py::test_0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>   SETUP otherarg <span class="token number">2</span>
  RUN test0 with otherarg <span class="token number">2</span>
PASSED  TEARDOWN otherarg <span class="token number">2</span>

test_module.py::test_1<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span>   SETUP modarg mod1
  RUN test1 with modarg mod1
PASSED
test_module.py::test_2<span class="token punctuation">[</span>mod1-1<span class="token punctuation">]</span>   SETUP otherarg <span class="token number">1</span>
  RUN test2 with otherarg <span class="token number">1</span> and modarg mod1
PASSED  TEARDOWN otherarg <span class="token number">1</span>

test_module.py::test_2<span class="token punctuation">[</span>mod1-2<span class="token punctuation">]</span>   SETUP otherarg <span class="token number">2</span>
  RUN test2 with otherarg <span class="token number">2</span> and modarg mod1
PASSED  TEARDOWN otherarg <span class="token number">2</span>

test_module.py::test_1<span class="token punctuation">[</span>mod2<span class="token punctuation">]</span>   TEARDOWN modarg mod1
  SETUP modarg mod2
  RUN test1 with modarg mod2
PASSED
test_module.py::test_2<span class="token punctuation">[</span>mod2-1<span class="token punctuation">]</span>   SETUP otherarg <span class="token number">1</span>
  RUN test2 with otherarg <span class="token number">1</span> and modarg mod2
PASSED  TEARDOWN otherarg <span class="token number">1</span>

test_module.py::test_2<span class="token punctuation">[</span>mod2-2<span class="token punctuation">]</span>   SETUP otherarg <span class="token number">2</span>
  RUN test2 with otherarg <span class="token number">2</span> and modarg mod2
PASSED  TEARDOWN otherarg <span class="token number">2</span>
  TEARDOWN modarg mod2


<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">8</span> passed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到参数化模块范围的modarg资源导致测试执行的排序,从而导致尽可能少的“活动”资源。mod1参数化资源的终结器在mod2资源建立之前执行 。<br> 特别注意test_0是完全独立的并且首先完成。然后执行mod1test_1 mod1,然后执行test_2 ,然后执行test_1,mod2最后执行test_2 mod2。<br> 该otherarg参数化资源(其函数范围)是之前设置和使用它的每一个测试后撕开了下来。</p><h3 id="在类-模块-项目中使用fixtures" tabindex="-1"><a class="header-anchor" href="#在类-模块-项目中使用fixtures" aria-hidden="true">#</a> 在类/模块/项目中使用fixtures</h3><p>有时,测试函数不需要直接访问Fixture方法对象。例如,测试可能需要使用空目录作为当前工作目录,但不关心具体目录。以下是如何使用标准tempfile和pytest fixture来实现它。我们将fixture的创建分成conftest.py文件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of conftest.py</span>

<span class="token keyword">import</span> pytest
<span class="token keyword">import</span> tempfile
<span class="token keyword">import</span> os

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">cleandir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    newpath <span class="token operator">=</span> tempfile<span class="token punctuation">.</span>mkdtemp<span class="token punctuation">(</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>newpath<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并通过usefixtures标记在测试模块中声明它的使用方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_setenv.py</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">&quot;cleandir&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestDirectoryInit</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_cwd_starts_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;myfile&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_cwd_again_starts_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于usefixtures标记,cleandir每个测试用例的执行都需要Fixture方法,就像为每个测试用例指定一个“cleandir”函数参数一样。让我们运行它来验证我们的Fixture方法是否已激活且测试通过：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span>
<span class="token punctuation">..</span>                                                                  <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token number">2</span> passed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以像这样指定多个Fixture方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">&quot;cleandir&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;anotherfixture&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用标记机制的通用函数在测试模块级别指定Fixture方法使用情况：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pytestmark <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures<span class="token punctuation">(</span><span class="token string">&quot;cleandir&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意,必须调用指定的变量pytestmark,分配例如 foomark不会激活Fixture方法。<br> 也可以将项目中所有测试所需的Fixture方法放入ini文件中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> content of pytest.ini
<span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
usefixtures <span class="token operator">=</span> cleandir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>警告<br> 请注意,此标记对Fixture方法函数没有影响。例如,这将无法按预期工作：</p></blockquote><p>@pytest.mark.usefixtures(&quot;my_other_fixture&quot;)<br> @pytest.fixture<br> def my_fixture_that_sadly_wont_use_my_other_fixture():<br> ...<br> 目前,这不会产生任何错误或警告,但这应由＃3664处理。</p><h3 id="自动使用fixtures-xunit-框架的setup固定方法" tabindex="-1"><a class="header-anchor" href="#自动使用fixtures-xunit-框架的setup固定方法" aria-hidden="true">#</a> 自动使用fixtures(xUnit 框架的setup固定方法)</h3><p>有时,你可能希望自动调用fixture,而无需显式声明函数参数或使用usefixtures装饰器。作为一个实际的例子,假设我们有一个数据库fixture,它有一个开始/回滚/提交架构,我们希望通过事务和回滚自动包围每个测试用例。以下是这个想法的虚拟自包含实现：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_db_transact.py</span>

<span class="token keyword">import</span> pytest

<span class="token keyword">class</span> <span class="token class-name">DB</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>intransaction <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">begin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>intransaction<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">rollback</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>intransaction<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> DB<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">transact</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>db<span class="token punctuation">)</span><span class="token punctuation">:</span>
        db<span class="token punctuation">.</span>begin<span class="token punctuation">(</span>request<span class="token punctuation">.</span>function<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
        <span class="token keyword">yield</span>
        db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_method1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>db<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> db<span class="token punctuation">.</span>intransaction <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">&quot;test_method1&quot;</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">test_method2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>db<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> db<span class="token punctuation">.</span>intransaction <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">&quot;test_method2&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类级别的transactfixture用autouse = true标记, 这意味着类中的所有测试用例都将使用此fixture而无需在测试函数签名中或使用类级usefixtures装饰器进行陈述。<br> 如果我们运行它,我们得到两个通过测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span>
<span class="token punctuation">..</span>                                                                  <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token number">2</span> passed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是autouseFixture方法在其他范围内的工作原理：</p><ul><li>autouse fixtures服从scope=关键字参数：如果autouse fixture具有scope=&#39;session&#39;它,它将只运行一次,无论它在何处定义。scope=&#39;class&#39;意味着它将每班运行一次,等等。</li><li>如果在测试模块中定义了autouse fixture,则其所有测试函数都会自动使用它。</li><li>如果在conftest.py文件中定义了autouse fixture,那么其目录下所有测试模块中的所有测试都将调用fixture。</li><li>最后,请谨慎使用：如果你在插件中定义了autouse fixture,则会在安装插件的所有项目中为所有测试调用它。如果Fixture方法仅在任何情况下在某些设置(例如ini文件中)的情况下工作,则这可能是有用的。这样的全局Fixture方法应该总是快速确定它是否应该做任何工作并避免昂贵的进口或计算。</li></ul><p>请注意,上述transactFixture方法很可能是你希望在项目中可用的Fixture方法,而不是通常处于活动状态。规范的方法是将transact定义放入conftest.py文件中,而不使用autouse：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of conftest.py</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
<span class="token keyword">def</span> <span class="token function">transact</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>db<span class="token punctuation">)</span><span class="token punctuation">:</span>
    db<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span>
    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>
然后让一个TestClass通过声明需要使用它：

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">&quot;transact&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_method1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此TestClass中的所有测试用例都将使用事务Fixture方法,而模块中的其他测试类或函数将不使用它,除非它们还添加transact引用。</p><h3 id="不同级别的fixtures的覆盖-优先级" tabindex="-1"><a class="header-anchor" href="#不同级别的fixtures的覆盖-优先级" aria-hidden="true">#</a> 不同级别的fixtures的覆盖(优先级)</h3><p>相对于在较大范围的测试套件中的Test Fixtures方法,在较小范围子套件你可能需要重写和覆盖外层的Test Fixtures方法,从而保持测试代码的可读性和可维护性。</p><h4 id="在文件夹级别-通过conftest文件-重写fixtures方法" tabindex="-1"><a class="header-anchor" href="#在文件夹级别-通过conftest文件-重写fixtures方法" aria-hidden="true">#</a> 在文件夹级别(通过conftest文件)重写fixtures方法</h4><p>假设用例目录结构为:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tests<span class="token operator">/</span>
    __init__<span class="token punctuation">.</span>py

    conftest<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/conftest.py</span>
        <span class="token keyword">import</span> pytest

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;username&#39;</span>

    test_something<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/test_something.py</span>
        <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> username <span class="token operator">==</span> <span class="token string">&#39;username&#39;</span>

    subfolder<span class="token operator">/</span>
        __init__<span class="token punctuation">.</span>py

        conftest<span class="token punctuation">.</span>py
            <span class="token comment"># content of tests/subfolder/conftest.py</span>
            <span class="token keyword">import</span> pytest

            <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
            <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">&#39;overridden-&#39;</span> <span class="token operator">+</span> username

        test_something<span class="token punctuation">.</span>py
            <span class="token comment"># content of tests/subfolder/test_something.py</span>
            <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">assert</span> username <span class="token operator">==</span> <span class="token string">&#39;overridden-username&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到,基础/上级fixtures方法可以通过子文件夹下的conftest.py中同名的fixtures方法覆盖,非常简单,只需要按照上面的例子使用即可.</p><h4 id="在测试模块级别重写fixtures方法" tabindex="-1"><a class="header-anchor" href="#在测试模块级别重写fixtures方法" aria-hidden="true">#</a> 在测试模块级别重写fixtures方法</h4><p>假设用例文件结构如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tests<span class="token operator">/</span>
    __init__<span class="token punctuation">.</span>py

    conftest<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/conftest.py</span>
        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;username&#39;</span>

    test_something<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/test_something.py</span>
        <span class="token keyword">import</span> pytest

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;overridden-&#39;</span> <span class="token operator">+</span> username

        <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> username <span class="token operator">==</span> <span class="token string">&#39;overridden-username&#39;</span>

    test_something_else<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/test_something_else.py</span>
        <span class="token keyword">import</span> pytest

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;overridden-else-&#39;</span> <span class="token operator">+</span> username

        <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> username <span class="token operator">==</span> <span class="token string">&#39;overridden-else-username&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中,用例模块(文件)中的fixture方法会覆盖文件夹conftest.py中同名的fixtures方法</p><h4 id="在直接参数化方法中覆盖fixtures方法" tabindex="-1"><a class="header-anchor" href="#在直接参数化方法中覆盖fixtures方法" aria-hidden="true">#</a> 在直接参数化方法中覆盖fixtures方法</h4><p>假设用例文件结构为:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tests<span class="token operator">/</span>
    __init__<span class="token punctuation">.</span>py

    conftest<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/conftest.py</span>
        <span class="token keyword">import</span> pytest

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;username&#39;</span>

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">other_username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;other-&#39;</span> <span class="token operator">+</span> username

    test_something<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/test_something.py</span>
        <span class="token keyword">import</span> pytest

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;directly-overridden-username&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> username <span class="token operator">==</span> <span class="token string">&#39;directly-overridden-username&#39;</span>

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;directly-overridden-username-other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">test_username_other</span><span class="token punctuation">(</span>other_username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> other_username <span class="token operator">==</span> <span class="token string">&#39;other-directly-overridden-username-other&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中,username fixture方法的结果值被参数化值覆盖。 请注意,即使测试不直接使用(也未在函数原型中提及),也可以通过这种方式覆盖fixture的值。</p><h4 id="使用非参数化fixture方法覆盖参数化fixtures方法-反之亦然" tabindex="-1"><a class="header-anchor" href="#使用非参数化fixture方法覆盖参数化fixtures方法-反之亦然" aria-hidden="true">#</a> 使用非参数化fixture方法覆盖参数化fixtures方法,反之亦然</h4><p>假设用例结构为:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tests<span class="token operator">/</span>
    __init__<span class="token punctuation">.</span>py

    conftest<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/conftest.py</span>
        <span class="token keyword">import</span> pytest

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">parametrized_username</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> request<span class="token punctuation">.</span>param

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">non_parametrized_username</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;username&#39;</span>

    test_something<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/test_something.py</span>
        <span class="token keyword">import</span> pytest

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span>
        <span class="token keyword">def</span> <span class="token function">parametrized_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;overridden-username&#39;</span>

        <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">def</span> <span class="token function">non_parametrized_username</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> request<span class="token punctuation">.</span>param

        <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>parametrized_username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> parametrized_username <span class="token operator">==</span> <span class="token string">&#39;overridden-username&#39;</span>

        <span class="token keyword">def</span> <span class="token function">test_parametrized_username</span><span class="token punctuation">(</span>non_parametrized_username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> non_parametrized_username <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span>

    test_something_else<span class="token punctuation">.</span>py
        <span class="token comment"># content of tests/test_something_else.py</span>
        <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>parametrized_username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> parametrized_username <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span>

        <span class="token keyword">def</span> <span class="token function">test_username</span><span class="token punctuation">(</span>non_parametrized_username<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">assert</span> non_parametrized_username <span class="token operator">==</span> <span class="token string">&#39;username&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中,使用非参数化fixture方法覆盖参数化fixture方法,以及使用参数化fixture覆盖非参数化fixture以用于特定测试模块。 这同样适用于文件夹级别的fixtures方法</p>`,63);function h(x,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,s("h3",u,[d,n(),s("a",k,[n("conftest.py"),e(a)]),n(": 共享fixture函数")]),m,s("p",null,[n("我们看到我们的两个测试函数分别针对不同的smtp_connection实例运行了两次 。另请注意,"),s("a",v,[n("对于mail.python.org"),e(a)]),n(" 连接,第二个测试失败,test_ehlo因为预期的服务器字符串不同于发送到服务器字符串。"),b,n(" Pytest将建立一个字符串,它是用于在参数化Fixture方法,例如每个器材值测试ID test_ehlo["),s("a",_,[n("smtp.gmail.com"),e(a)]),n("]和 test_ehlo["),s("a",y,[n("mail.python.org"),e(a)]),n("]在上述实施例。这些ID可用于-k选择要运行的特定案例,并且还可以在失败时识别特定案例。运行pytest --collect-only将显示生成的ID。"),f,n(" 数字,字符串,布尔值和None将在测试ID中使用它们通常的字符串表示形式。对于其他对象,Pytest将根据参数名称生成一个字符串。可以使用ids关键字参数自定义测试ID中用于特定Fixture方法值的字符串 ：")]),g])}const E=p(l,[["render",h],["__file","Pytest教程05-Pytest-fixtures：清晰-模块化-易扩展.html.vue"]]);export{E as default};
