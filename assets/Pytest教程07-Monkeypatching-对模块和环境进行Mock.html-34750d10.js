import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-d0fb0332.js";const e={},p=t(`<h1 id="pytest权威教程07-monkeypatching-对模块和环境进行mock" tabindex="-1"><a class="header-anchor" href="#pytest权威教程07-monkeypatching-对模块和环境进行mock" aria-hidden="true">#</a> Pytest权威教程07-Monkeypatching,对模块和环境进行Mock</h1><p>有时,测试需要调用依赖于全局设置的函数,或调用无法轻松测试的代码(如网络访问)。 monkeypatch fixture可帮助你安全地设置/删除属性,字典项或环境变量,或修改sys.path以进行导入。 请参阅monkeypatch博客文章,了解一些介绍材料并讨论其动机。</p><h3 id="简单示例如-猴子补丁方法" tabindex="-1"><a class="header-anchor" href="#简单示例如-猴子补丁方法" aria-hidden="true">#</a> 简单示例如: 猴子补丁方法</h3><p>如果你想阻止<code>os.expanduser</code>返回某个目录,你可以在测试用例调用其之前,使用<code>monkeypatch.setattr()</code>方法改造这个函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_module.py文件内容</span>
<span class="token keyword">import</span> os<span class="token punctuation">.</span>path
<span class="token keyword">def</span> <span class="token function">getssh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 伪应用代码</span>
    <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">&quot;~admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;.ssh&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_mytest</span><span class="token punctuation">(</span>monkeypatch<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mockreturn</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;/abc&#39;</span>
    monkeypatch<span class="token punctuation">.</span><span class="token builtin">setattr</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">,</span><span class="token string">&#39;expanduser&#39;</span><span class="token punctuation">,</span>mockreturn<span class="token punctuation">)</span>
    x <span class="token operator">=</span> getssh<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> x <span class="token operator">==</span> <span class="token string">&#39;/abc/.ssh&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里在我们的测试用例中,使用猴子补丁改造了<code>os.path.expanduser</code>, 然后再进行调用。 测试执行完成后对<code>os.path.expanduser</code>修改将被撤消。</p><h3 id="monkeypatching-返回对象-构建mock类" tabindex="-1"><a class="header-anchor" href="#monkeypatching-返回对象-构建mock类" aria-hidden="true">#</a> Monkeypatching 返回对象: 构建mock类</h3><h3 id="全局补丁示例如-阻止-requests-库的远程操作" tabindex="-1"><a class="header-anchor" href="#全局补丁示例如-阻止-requests-库的远程操作" aria-hidden="true">#</a> 全局补丁示例如:阻止&quot;requests&quot;库的远程操作</h3><p>如果要阻止&quot;requests&quot;库在所有测试中执行http请求,你可以执行以下操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py文件内容</span>
<span class="token keyword">import</span> pytest
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">no_requests</span><span class="token punctuation">(</span>monkeypatch<span class="token punctuation">)</span><span class="token punctuation">:</span>
    monkeypatch<span class="token punctuation">.</span><span class="token builtin">delattr</span><span class="token punctuation">(</span><span class="token string">&quot;requests.sessions.Session.request&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个测试用例执行时都会自动使用该fixture,它将删除测试用例内置属性中的<code>request.session.Session.request</code>,以便在测试中任何使用requests库创建http请求的用例都将失败。</p><blockquote><p>注意：<br> 不建议使用猴子补丁改造Python内置函数,如open,compile等,因为它可能会破坏pytest的内部逻辑。 如果必须要使用,你可以通过参数：<code>--tb = native</code>, <code>- tables = plain</code>和<code>--capture = no</code>来试试,不一定不会有问题。</p></blockquote><p>注意：<br> 改造<code>stdlib</code>函数和pytest依赖的某些第三方库本身可能会破坏pytest,因此在这些情况下,建议使用<code>MonkeyPatch.context()</code>来改造这些模块：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> functools


<span class="token keyword">def</span> <span class="token function">test_partial</span><span class="token punctuation">(</span>monkeypatch<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> monkeypatch<span class="token punctuation">.</span>context<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m<span class="token punctuation">:</span>
        m<span class="token punctuation">.</span><span class="token builtin">setattr</span><span class="token punctuation">(</span>functools<span class="token punctuation">,</span><span class="token string">&quot;partial&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> functools<span class="token punctuation">.</span>partial <span class="token operator">==</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看#3290号bug详情</p><h3 id="monkeypatching-环境变量" tabindex="-1"><a class="header-anchor" href="#monkeypatching-环境变量" aria-hidden="true">#</a> Monkeypatching 环境变量</h3><h3 id="monkeypatching字典" tabindex="-1"><a class="header-anchor" href="#monkeypatching字典" aria-hidden="true">#</a> Monkeypatching字典</h3><h3 id="参考api" tabindex="-1"><a class="header-anchor" href="#参考api" aria-hidden="true">#</a> 参考API</h3><p>查阅MonkeyPatch类相关文档。</p>`,19),o=[p];function c(i,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Pytest教程07-Monkeypatching-对模块和环境进行Mock.html.vue"]]);export{r as default};
