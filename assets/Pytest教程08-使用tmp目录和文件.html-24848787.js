import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as t}from"./app-207e7d61.js";const p={},e=t(`<h1 id="pytest权威教程08-使用tmp目录和文件" tabindex="-1"><a class="header-anchor" href="#pytest权威教程08-使用tmp目录和文件" aria-hidden="true">#</a> Pytest权威教程08-使用tmp目录和文件</h1><h3 id="tmp-path-fixture方法" tabindex="-1"><a class="header-anchor" href="#tmp-path-fixture方法" aria-hidden="true">#</a> tmp_path Fixture方法</h3><p><em>3.9版本新函数</em><br> 你可以使用<code>tmp_path</code> 在临时目录根目录中创建一个独立的临时目录以供测试调用。<br><code>tmp_path</code>是一个<code>pathlib/pathlib2.Path</code>对象。以下是测试使用方法的示例如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_tmp_path.py文件内容</span>
<span class="token keyword">import</span> os

CONTENT <span class="token operator">=</span> <span class="token string">u&quot;content&quot;</span>

<span class="token keyword">def</span> <span class="token function">test_create_file</span><span class="token punctuation">(</span>tmp_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> tmp_path <span class="token operator">/</span> <span class="token string">&quot;sub&quot;</span>
    d<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p <span class="token operator">=</span> d <span class="token operator">/</span> <span class="token string">&quot;hello.txt&quot;</span>
    p<span class="token punctuation">.</span>write_text<span class="token punctuation">(</span>CONTENT<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> p<span class="token punctuation">.</span>read_text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> CONTENT
    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>tmp_path<span class="token punctuation">.</span>iterdir<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
    <span class="token keyword">assert</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这个,我们可以看到,除了<code>assert 0</code>这一行,其他断言都正常测试通过：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_tmpdir.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-4.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">1</span> item

test_tmpdir.py F                                                     <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
_____________________________ test_create_file _____________________________

tmpdir <span class="token operator">=</span> local<span class="token punctuation">(</span><span class="token string">&#39;PYTEST_TMPDIR/test_create_file0&#39;</span><span class="token punctuation">)</span>

    def test_create_file<span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span>:
        p <span class="token operator">=</span> tmpdir.mkdir<span class="token punctuation">(</span><span class="token string">&quot;sub&quot;</span><span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span>
        p.write<span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span>
        assert p.read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;content&quot;</span>
        assert len<span class="token punctuation">(</span>tmpdir.listdir<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token operator">&gt;</span>       assert <span class="token number">0</span>
E       assert <span class="token number">0</span>

test_tmpdir.py:7: AssertionError
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tmp-path-factory-fixture方法" tabindex="-1"><a class="header-anchor" href="#tmp-path-factory-fixture方法" aria-hidden="true">#</a> tmp_path_factory Fixture方法</h3><p><em>2.8版本新函数</em><br><code>tmpdir_factory</code>是一个session范围的fixture,可用于从任何其他测试用例及fixture中创建任意临时目录。<br> 例如,假设你的测试套件需要使用程序动态生成在本地磁盘上的一个大图片,你可以整个测试session中只生成一次以节省时间,而不是为每个用例都在自己的<code>tmpdir</code>中计算并生成一次：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py文件内容</span>
<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">image_file</span><span class="token punctuation">(</span>tmpdir_factory<span class="token punctuation">)</span><span class="token punctuation">:</span>
    img <span class="token operator">=</span> compute_expensive_image<span class="token punctuation">(</span><span class="token punctuation">)</span>
    fn <span class="token operator">=</span> tmpdir_factory<span class="token punctuation">.</span>mktemp<span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&quot;img.png&quot;</span><span class="token punctuation">)</span>
    img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> fn


<span class="token comment"># contents of test_image.py</span>
<span class="token keyword">def</span> <span class="token function">test_histogram</span><span class="token punctuation">(</span>image_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    img <span class="token operator">=</span> load_image<span class="token punctuation">(</span>image_file<span class="token punctuation">)</span>
    <span class="token comment"># 计算和测试histogram</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关详细信息,请参阅tmpdir_factory API。</p><h3 id="tmpdir-fixture方法" tabindex="-1"><a class="header-anchor" href="#tmpdir-fixture方法" aria-hidden="true">#</a> tmpdir Fixture方法</h3><h3 id="tmpdir-factory-fixture方法" tabindex="-1"><a class="header-anchor" href="#tmpdir-factory-fixture方法" aria-hidden="true">#</a> tmpdir_factory Fixture方法</h3><h3 id="默认临时目录根目录" tabindex="-1"><a class="header-anchor" href="#默认临时目录根目录" aria-hidden="true">#</a> 默认临时目录根目录</h3><p>默认情况下,临时目录创建为系统临时目录的子目录。 基本名称将是<code>pytest-数字</code>,其中数字将随着每次测试运行而递增。 此外,第3个以后的临时目录会被删除。<br> 你可以如下所示,修改默认的临时目录设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--basetemp</span><span class="token operator">=</span>mydir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在本地计算机上分发测试时,<code>pytest</code>会为子进程配置临时目录根目录,以便所有临时数据都落在单个每个测试运行的临时目录根目录。</p>`,16),o=[e];function r(c,l){return n(),a("div",null,o)}const d=s(p,[["render",r],["__file","Pytest教程08-使用tmp目录和文件.html.vue"]]);export{d as default};
