import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-731a6e06.js";const t={},p=e(`<h1 id="pytest权威教程09-捕获标准输出及标准错误输出" tabindex="-1"><a class="header-anchor" href="#pytest权威教程09-捕获标准输出及标准错误输出" aria-hidden="true">#</a> Pytest权威教程09-捕获标准输出及标准错误输出</h1><h3 id="默认-stdout-stderr-stdin-捕获行为" tabindex="-1"><a class="header-anchor" href="#默认-stdout-stderr-stdin-捕获行为" aria-hidden="true">#</a> 默认 stdout/stderr/stdin 捕获行为</h3><p>在测试执行期间,程序中的标准输出/标准错误输出都会被捕获到。 如果测试或setup方法执行失败时,会在报错追溯信息中查看到程序中的标准输出及标准错误输出。(可以通过<code>--show-capture</code>命令行选项配置是否捕获程序中的标准输出/标准错误输出)。<br> 此外,<code>stdin</code>被设置为“null”对象,测试运行过程中无法从中读取数据,因为在运行自动化测试时很少需要等待交互式输入。<br> 捕获默认是通过拦截对低优先级文件描述符的写入来完成的。 这允许捕获简单print语句的输出以及测试启动的子进程的输出。</p><h3 id="设置捕获方法或禁用捕获" tabindex="-1"><a class="header-anchor" href="#设置捕获方法或禁用捕获" aria-hidden="true">#</a> 设置捕获方法或禁用捕获</h3><p><code>pytest</code>可以通过两种方式捕获输出：</p><ul><li>文件描述符(FD)级别捕获(默认)：将捕获进入操作系统文件描述符1和2的所有写入。</li><li><code>sys</code>级别捕获：仅捕获Python文件<code>sys.stdout</code>和<code>sys.stderr</code>。 不执行对文件描述符的写入捕获。</li></ul><p>你可以在命令行中指定不同的参数来使用不同的捕获机制：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span>            <span class="token comment"># 禁止捕获所有输出</span>
pytest <span class="token parameter variable">--capture</span><span class="token operator">=</span>sys <span class="token comment"># 使用in-mem文件代替sys.stdout/stderr with </span>
pytest <span class="token parameter variable">--capture</span><span class="token operator">=</span>fd  <span class="token comment"># 同时将filedescriptors 1和2指向临时文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调试中使用print语句" tabindex="-1"><a class="header-anchor" href="#调试中使用print语句" aria-hidden="true">#</a> 调试中使用print语句</h3><p>默认捕获stdout / stderr输出的一个主要好处是可以使用print语句进行调试：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_module.py文件内容</span>

<span class="token keyword">def</span> <span class="token function">setup_function</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;setting up %s&quot;</span> <span class="token operator">%</span> function<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">test_func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行此模块将只捕获失败用例相关的print信息,而不显示成功用例的print信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-4.x.y,py-1.x.y,pluggy-0.x.y
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>,inifile:
collected <span class="token number">2</span> items

test_module.py .F                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
________________________________ test_func2 ________________________________

    def test_func2<span class="token punctuation">(</span><span class="token punctuation">)</span>:
<span class="token operator">&gt;</span>       assert False
E       assert False

test_module.py:9: AssertionError
-------------------------- Captured stdout setup ---------------------------
setting up <span class="token operator">&lt;</span>function test_func2 at 0xdeadbeef<span class="token operator">&gt;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> failed,1 passed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在测试用例中使用的捕获的输出" tabindex="-1"><a class="header-anchor" href="#在测试用例中使用的捕获的输出" aria-hidden="true">#</a> 在测试用例中使用的捕获的输出</h3><p><code>capsys</code>,<code>capsysbinary</code>,<code>capfd</code>和<code>capfdbinary fixture</code>允许访问在测试执行期间创建的<code>stdout</code> / <code>stderr</code>输出。 下面是一个测试函数示例,它执行一些与输出相关的检查：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_myoutput</span><span class="token punctuation">(</span>capsys<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># or use &quot;capfd&quot; for fd-level</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;world\\n&quot;</span><span class="token punctuation">)</span>
    captured <span class="token operator">=</span> capsys<span class="token punctuation">.</span>readouterr<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> captured<span class="token punctuation">.</span>out <span class="token operator">==</span> <span class="token string">&quot;hello\\n&quot;</span>
    <span class="token keyword">assert</span> captured<span class="token punctuation">.</span>err <span class="token operator">==</span> <span class="token string">&quot;world\\n&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;next&quot;</span><span class="token punctuation">)</span>
    captured <span class="token operator">=</span> capsys<span class="token punctuation">.</span>readouterr<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> captured<span class="token punctuation">.</span>out <span class="token operator">==</span> <span class="token string">&quot;next\\n&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>readouterr()</code>调用时首先对输出流建立快照 - 并继续捕获输出,然后在该测试用例执行完成后,恢复原始输出流。而通过使用<code>capsys</code>可以避免在执行每个测试用例时都进行一次设置/重置输出流,并且还可以与pytest每次测试用例执行时捕获的输出信息进行交互。<br> 如果要在<code>filedescriptor</code>级别捕获,可以使用<code>capfd fixture</code>,它提供完全相同的接口,但也允许捕获直接写入操作系统级输出流(FD1和FD2)的库或子进程的输出流中。<br><em>3.3版本新函数</em><br><code>readouterr</code>的返回值更改为具有两个属性<code>out</code>和<code>err</code>的<code>namedtuple</code>。<br><em>3.3版本新函数</em><br> 如果测试中的代码写入了非文本数据,则可以使用<code>capsysbinary fixture</code>来捕获它,而后者会从<code>readouterr</code>方法返回字节。 <code>capfsysbinary fixture</code>目前仅在Python 3中可用。<br><em>3.0版本新函数</em><br> 要暂时禁用测试中的捕获,<code>capsys</code>和<code>capfd</code>都有一个<code>disabled()</code>方法,可以用作上下文管理器,禁用with块内的捕获：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_disabling_capturing</span><span class="token punctuation">(</span>capsys<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输出被捕获到了&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> capsys<span class="token punctuation">.</span>disabled<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输出未捕获到,直接使用sys.stdout标准输出&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;这个输出也被捕获到了&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[p];function r(c,l){return n(),a("div",null,o)}const u=s(t,[["render",r],["__file","Pytest教程09-捕获标准输出及标准错误输出.html.vue"]]);export{u as default};
