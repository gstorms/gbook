import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-3f278ba4.js";const t={},p=e(`<h1 id="pytest权威教程10-捕获警告信息" tabindex="-1"><a class="header-anchor" href="#pytest权威教程10-捕获警告信息" aria-hidden="true">#</a> Pytest权威教程10-捕获警告信息</h1><h3 id="捕获警告信息" tabindex="-1"><a class="header-anchor" href="#捕获警告信息" aria-hidden="true">#</a> 捕获警告信息</h3><p>3.1版中的新函数。<br> 从版本开始<code>3.1</code>,pytest现在会在测试执行期间自动捕获警告并在会话结束时显示它们：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_show_warnings.py</span>
<span class="token keyword">import</span> warnings
<span class="token keyword">def</span> <span class="token function">api_v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span>UserWarning<span class="token punctuation">(</span><span class="token string">&quot;api v1,should use functions from v2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">test_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> api_v1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行pytest现在产生这个输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_show_warnings.py
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y,pytest-4.x.y,py-1.x.y,pluggy-0.x.y
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>
collected <span class="token number">1</span> item
test_show_warnings.py <span class="token builtin class-name">.</span>                                             <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> warnings summary <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
test_show_warnings.py::test_one
  <span class="token variable">$REGENDOC_TMPDIR</span>/test_show_warnings.py:5: UserWarning: api v1,should use functions from v2
    warnings.warn<span class="token punctuation">(</span>UserWarning<span class="token punctuation">(</span><span class="token string">&quot;api v1,should use functions from v2&quot;</span><span class="token punctuation">))</span>
-- Docs: https://docs.pytest.org/en/latest/warnings.html
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> passed,1 warnings <span class="token keyword">in</span> <span class="token number">0.12</span> seconds <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-W</code>可以传递该标志以控制将显示哪些警告,甚至将其转换为错误：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest <span class="token parameter variable">-q</span> test_show_warnings.py <span class="token parameter variable">-W</span> error::UserWarning
F                                                                    <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
_________________________________ test_one _________________________________
 def test_one<span class="token punctuation">(</span><span class="token punctuation">)</span>:
<span class="token operator">&gt;</span>       assert api_v1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
test_show_warnings.py:10:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 def api_v1<span class="token punctuation">(</span><span class="token punctuation">)</span>:
<span class="token operator">&gt;</span>       warnings.warn<span class="token punctuation">(</span>UserWarning<span class="token punctuation">(</span><span class="token string">&quot;api v1,should use functions from v2&quot;</span><span class="token punctuation">))</span>
E       UserWarning: api v1,should use functions from v2
test_show_warnings.py:5: UserWarning
<span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以<code>pytest.ini</code>使用<code>filterwarnings</code>ini选项在文件中设置相同的选项。例如,以下配置将忽略所有用户警告,但会将所有其他警告转换为错误。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
filterwarnings <span class="token operator">=</span>
 error
 ignore::UserWarning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当警告与列表中的多个选项匹配时,将执行最后一个匹配选项的操作。<br> 这两个<code>-W</code>命令行选项和<code>filterwarnings</code>INI选项是基于Python的[-W选项,所以请参考这些部分Python文档的其他例子和高级的使用方法英寸</p><h3 id="pytest-mark-filterwarnings" tabindex="-1"><a class="header-anchor" href="#pytest-mark-filterwarnings" aria-hidden="true">#</a> @pytest.mark.filterwarnings</h3><p>版本3.2中的新函数。<br> 你可以使用<code>@pytest.mark.filterwarnings</code>向特定测试项添加警告过滤器,以便更好地控制应在测试,类甚至模块级别捕获哪些警告：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> warnings
<span class="token keyword">def</span> <span class="token function">api_v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span>UserWarning<span class="token punctuation">(</span><span class="token string">&quot;api v1,should use functions from v2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>filterwarnings</span><span class="token punctuation">(</span><span class="token string">&quot;ignore:api v1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> api_v1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用标记应用的过滤器优先于在命令行上传递或由<code>filterwarnings</code>ini选项配置的过滤器。<br> 你可以通过使用<code>filterwarnings</code>标记作为类装饰器或通过设置<code>pytestmark</code>变量将模块中的所有测试应用于类的所有测试：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># turns all warnings into errors for this module</span>
pytestmark <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>积分转到Florian Schulze获取</em>[pytest-warnings_插件中<strong>的参考实现</strong>。_</p><h3 id="禁用警告摘要" tabindex="-1"><a class="header-anchor" href="#禁用警告摘要" aria-hidden="true">#</a> 禁用警告摘要</h3><p>虽然不推荐,但你可以使用<code>--disable-warnings</code>命令行选项从测试运行输出中完全禁止警告摘要。</p><h3 id="完全禁用警告捕获" tabindex="-1"><a class="header-anchor" href="#完全禁用警告捕获" aria-hidden="true">#</a> 完全禁用警告捕获</h3><p>此插件默认启用,但可以在你的<code>pytest.ini</code>文件中完全禁用：</p><blockquote><p>[pytest]<br> addopts = -p no:warnings</p></blockquote><p>或者传入命令行。如果测试套件使用外部系统处理警告,这可能很有用。<code>-pno:warnings</code></p><h3 id="弃用警告和待命记录警告" tabindex="-1"><a class="header-anchor" href="#弃用警告和待命记录警告" aria-hidden="true">#</a> 弃用警告和待命记录警告</h3><p>版本3.8中的新函数。<br> 在3.9版中更改。<br> 默认情况下,pytest将显示<code>DeprecationWarning</code>和<code>PendingDeprecationWarning</code>从用户代码和第三方库警告,建议[PEP-0565。这有助于用户保持代码现代化,并在有效删除已弃用的警告时避免破坏。<br> 有时隐藏在你无法控制的代码(例如第三方库)中发生的某些特定弃用警告很有用,在这种情况下,你可以使用警告过滤器选项(ini或标记)来忽略这些警告。<br> 例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
filterwarnings <span class="token operator">=</span>
 ignore:.*U.*mode is deprecated:DeprecationWarning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将忽略<code>DeprecationWarning</code>消息开头与正则表达式匹配的所有类型的警告。<code>&quot;.*U.*modeisdeprecated&quot;</code><br> 注意<br> 如果在解释器级别配置警告,使用[PYTHONWARNINGS环境变量或\`-W\`命令行选项,pytest将默认不配置任何过滤器。<br> 此外,pytest不遵循\`PEP-0506\`重置所有警告过滤器的建议,因为它可能会破坏通过调用自行配置警告过滤器的测试套件\`warnings.simplefilter(请参阅问题[＃2430以获取该示例)。</p><h3 id="确保代码触发弃用警告" tabindex="-1"><a class="header-anchor" href="#确保代码触发弃用警告" aria-hidden="true">#</a> 确保代码触发弃用警告</h3><p>你还可以调用全局帮助程序来检查某个函数调用是否触发a<code>DeprecationWarning</code>或<code>PendingDeprecationWarning</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest
<span class="token keyword">def</span> <span class="token function">test_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pytest<span class="token punctuation">.</span>deprecated_call<span class="token punctuation">(</span>myfunction<span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下,<code>DeprecationWarning</code>并<code>PendingDeprecationWarning</code>不会被使用时,捕捉<code>pytest.warns</code>或<code>recwarn</code>因为默认的Python警告过滤器隐藏起来。如果你希望在自己的代码中记录它们,请使用以下命令<code>warnings.simplefilter(&#39;always&#39;)</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> warnings
<span class="token keyword">import</span> pytest
<span class="token keyword">def</span> <span class="token function">test_deprecation</span><span class="token punctuation">(</span>recwarn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">&quot;always&quot;</span><span class="token punctuation">)</span>
    warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">&quot;deprecated&quot;</span><span class="token punctuation">,</span>DeprecationWarning<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>recwarn<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
    <span class="token keyword">assert</span> recwarn<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>DeprecationWarning<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以将其用作上下文管理器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>deprecated_call<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        myobject<span class="token punctuation">.</span>deprecated_method<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用警告函数断言警告" tabindex="-1"><a class="header-anchor" href="#用警告函数断言警告" aria-hidden="true">#</a> 用警告函数断言警告</h3><p>版本2.8中的新函数。<br> 你可以检查代码是否引发了特定警告<code>pytest.warns</code>,其工作方式类似于[引发：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> warnings
<span class="token keyword">import</span> pytest

<span class="token keyword">def</span> <span class="token function">test_warning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>warns<span class="token punctuation">(</span>UserWarning<span class="token punctuation">)</span><span class="token punctuation">:</span>
        warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">&quot;my warning&quot;</span><span class="token punctuation">,</span>UserWarning<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未提出相关警告,测试将失败。<code>match</code>断言异常与文本或正则表达式匹配的关键字参数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> with warns<span class="token punctuation">(</span>UserWarning,match<span class="token operator">=</span><span class="token string">&#39;must be 0 or None&#39;</span><span class="token punctuation">)</span>:
<span class="token punctuation">..</span>.    warnings.warn<span class="token punctuation">(</span><span class="token string">&quot;value must be 0 or None&quot;</span>,UserWarning<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> with warns<span class="token punctuation">(</span>UserWarning,match<span class="token operator">=</span>r<span class="token string">&#39;must be \\d+/pre&gt;):
...    warnings.warn(&quot;value must be 42&quot;,UserWarning)
&gt;&gt;&gt; with warns(UserWarning,match=r&#39;</span>must be <span class="token punctuation">\\</span>d+/pre<span class="token operator">&gt;</span><span class="token punctuation">)</span>:
<span class="token punctuation">..</span>.    warnings.warn<span class="token punctuation">(</span><span class="token string">&quot;this is not here&quot;</span>,UserWarning<span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  <span class="token punctuation">..</span>.
Failed: DID NOT WARN. No warnings of <span class="token builtin class-name">type</span> <span class="token punctuation">..</span>.UserWarning<span class="token punctuation">..</span>. was emitted<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以调用<code>pytest.warns</code>函数或代码字符串：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pytest<span class="token punctuation">.</span>warns<span class="token punctuation">(</span>expected_warning<span class="token punctuation">,</span>func<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
pytest<span class="token punctuation">.</span>warns<span class="token punctuation">(</span>expected_warning<span class="token punctuation">,</span><span class="token string">&quot;func(*args,**kwargs)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数还返回所有引发警告(作为<code>warnings.WarningMessage</code>对象)的列表,你可以查询其他信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> pytest<span class="token punctuation">.</span>warns<span class="token punctuation">(</span>RuntimeWarning<span class="token punctuation">)</span> <span class="token keyword">as</span> record<span class="token punctuation">:</span>
    warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">&quot;another warning&quot;</span><span class="token punctuation">,</span>RuntimeWarning<span class="token punctuation">)</span>
<span class="token comment"># check that only one warning was raised</span>
<span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
<span class="token comment"># check that the message matches</span>
<span class="token keyword">assert</span> record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;another warning&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者,你可以使用[recwarnFixture方法详细检查凸起的警告(见下文)。</p><blockquote><p>注意<br><code>DeprecationWarning</code>并且<code>PendingDeprecationWarning</code>区别对待;请参阅[确保代码触发弃用警告。</p></blockquote><h3 id="录制警告" tabindex="-1"><a class="header-anchor" href="#录制警告" aria-hidden="true">#</a> 录制警告</h3><p>你可以使用Fixture方法<code>pytest.warns</code>或使用<code>recwarn</code>Fixture方法记录凸起的警告。<br> 要在<code>pytest.warns</code>不声明任何有关警告的情况下进行记录,请传递<code>None</code>为预期的警告类型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> pytest<span class="token punctuation">.</span>warns<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">as</span> record<span class="token punctuation">:</span>
    warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>UserWarning<span class="token punctuation">)</span>
    warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">&quot;runtime&quot;</span><span class="token punctuation">,</span>RuntimeWarning<span class="token punctuation">)</span>
<span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>
<span class="token keyword">assert</span> <span class="token builtin">str</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;user&quot;</span>
<span class="token keyword">assert</span> <span class="token builtin">str</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;runtime&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该<code>recwarn</code>Fixture方法将记录整个函数的警告：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> warnings

<span class="token keyword">def</span> <span class="token function">test_hello</span><span class="token punctuation">(</span>recwarn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>UserWarning<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>recwarn<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
    w <span class="token operator">=</span> recwarn<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>UserWarning<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">issubclass</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>category<span class="token punctuation">,</span>UserWarning<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">str</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;hello&quot;</span>
    <span class="token keyword">assert</span> w<span class="token punctuation">.</span>filename
    <span class="token keyword">assert</span> w<span class="token punctuation">.</span>lineno
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双方<code>recwarn</code>并<code>pytest.warns</code>返回相同的接口,用于记录警告：一个WarningsRecorder实例。要查看记录的警告,你可以迭代此实例,调用<code>len</code>它以获取已记录警告的数量,或将其编入索引以获取特定记录的警告。<br> 完整的API :<code>WarningsRecorder</code>.</p><h3 id="自定义失败消息" tabindex="-1"><a class="header-anchor" href="#自定义失败消息" aria-hidden="true">#</a> 自定义失败消息</h3><p>记录警告提供了在未发出警告或满足其他条件时生成自定义测试失败消息的机会。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>warns<span class="token punctuation">(</span>Warning<span class="token punctuation">)</span> <span class="token keyword">as</span> record<span class="token punctuation">:</span>
        f<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> record<span class="token punctuation">:</span>
            pytest<span class="token punctuation">.</span>fail<span class="token punctuation">(</span><span class="token string">&quot;Expected a warning!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在呼叫时没有发出警告<code>f</code>,那么将评估为。然后,你可以使用自定义错误消息进行调用。<code>notrecord\`\`True\`\`pytest.fail</code></p><h3 id="内部pytest警告" tabindex="-1"><a class="header-anchor" href="#内部pytest警告" aria-hidden="true">#</a> 内部pytest警告</h3><p>版本3.8中的新函数。<br> pytest可能会在某些情况下生成自己的警告,例如使用不当或不推荐使用的函数。<br> 例如,如果遇到匹配<code>python_classes</code>但也定义<code>__init__</code>构造函数的类,pytest将发出警告,因为这会阻止实例化类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of test_pytest_warnings.py</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">def</span> <span class="token function">test_foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest test_pytest_warnings.py <span class="token parameter variable">-q</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> warnings summary <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
test_pytest_warnings.py:1
  <span class="token variable">$REGENDOC_TMPDIR</span>/test_pytest_warnings.py:1: PytestWarning: cannot collect <span class="token builtin class-name">test</span> class <span class="token string">&#39;Test&#39;</span> because it has a __init__ constructor
    class Test:
-- Docs: https://docs.pytest.org/en/latest/warnings.html
<span class="token number">1</span> warnings <span class="token keyword">in</span> <span class="token number">0.12</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用用于过滤其他类型警告的相同内置机制来过滤这些警告。<br> 请阅读我们的[向后兼容性政策,了解我们如何继续弃用并最终删除函数。<br> pytest使用以下警告类型,它们是公共API的一部分：<br><em>class</em><code>PytestWarning</code><br> 基类：<code>UserWarning</code> pytest发出的所有警告的基类。<br><em>class</em><code>PytestDeprecationWarning</code><br> 基类：<code>pytest.PytestWarning</code> 将来版本中将删除的函数的警告类。<br><em>class</em><code>RemovedInPytest4Warning</code><br> 基类：<code>pytest.PytestDeprecationWarning</code> 计划在pytest 4.0中删除的函数的警告类。<br><em>class</em><code>PytestExperimentalApiWarning</code><br> 基类：<code>pytest.PytestWarning</code> 警告类别用于表示pytest中的实验。谨慎使用,因为API可能会在未来版本中更改甚至完全删除\\</p>`,60),o=[p];function c(r,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Pytest教程10-捕获警告信息.html.vue"]]);export{d as default};
