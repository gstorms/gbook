import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,f as e}from"./app-cfbf85c1.js";const t={},o=e(`<h1 id="pytest权威教程11-模块及测试文件中集成doctest测试-未完成" tabindex="-1"><a class="header-anchor" href="#pytest权威教程11-模块及测试文件中集成doctest测试-未完成" aria-hidden="true">#</a> Pytest权威教程11-模块及测试文件中集成doctest测试(未完成）</h1><p>默认的，所有匹配 <code>test*.txt</code> 的文件都可以通过标准 <code>doctest</code> 模块运行。你也可以改变匹配模式通过使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest --doctest-glob<span class="token operator">=</span><span class="token string">&quot;*.rst&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在命令行， <code>--doctest-glob</code> 可以出现多次。<br> 如果有这样一个文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># content of test_example.txt</span>

hello this is a doctest
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以直接使用 <code>pytest</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y, pytest-6.x.y, py-1.x.y, pluggy-0.x.y
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>
collected <span class="token number">1</span> item

test_example.txt <span class="token builtin class-name">.</span>                                                   <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.12s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了文本文件，你还可以通过类、方法或者是测试模块（test modules）的docstrings直接触发执行doctests：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># content of mymodule.py</span>
<span class="token keyword">def</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;a doctest in a docstring
    &gt;&gt;&gt; something()
    42
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ pytest --doctest-modules
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token builtin class-name">test</span> session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
platform linux -- Python <span class="token number">3</span>.x.y, pytest-6.x.y, py-1.x.y, pluggy-0.x.y
cachedir: <span class="token variable">$PYTHON_PREFIX</span>/.pytest_cache
rootdir: <span class="token variable">$REGENDOC_TMPDIR</span>
collected <span class="token number">2</span> items

mymodule.py <span class="token builtin class-name">.</span>                                                        <span class="token punctuation">[</span> <span class="token number">50</span>%<span class="token punctuation">]</span>
test_example.txt <span class="token builtin class-name">.</span>                                                   <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">2</span> passed <span class="token keyword">in</span> <span class="token number">0</span>.12s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以把设置放到 <code> pytest.ini</code>   中，使这些设置永久有效：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># content of pytest.ini</span>
<span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
addopts <span class="token operator">=</span> --doctest-modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编码" tabindex="-1"><a class="header-anchor" href="#编码" aria-hidden="true">#</a> 编码</h3><p>默认编码为UTF-8,你也可以使用<code>doctest_encoding</code> 配置选项在 <code>pytest.ini</code> 文件指定用于这些doctest文件的编码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># content of pytest.ini</span>
<span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
doctest_encoding <span class="token operator">=</span> latin1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-doctest-options" tabindex="-1"><a class="header-anchor" href="#using-doctest-options" aria-hidden="true">#</a> Using ‘doctest’ options</h3><h3 id="continue-on-failure" tabindex="-1"><a class="header-anchor" href="#continue-on-failure" aria-hidden="true">#</a> Continue on failure</h3><h3 id="output-format" tabindex="-1"><a class="header-anchor" href="#output-format" aria-hidden="true">#</a> Output format</h3><h3 id="pytest-specific-features" tabindex="-1"><a class="header-anchor" href="#pytest-specific-features" aria-hidden="true">#</a> pytest-specific features</h3><h3 id="使用fixtures" tabindex="-1"><a class="header-anchor" href="#使用fixtures" aria-hidden="true">#</a> 使用fixtures</h3><p>可以使用<code>getfixture</code>帮助器使用Fixture方法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># content of example.rst</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tmp <span class="token operator">=</span> getfixture<span class="token punctuation">(</span><span class="token string">&#39;tmpdir&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">..</span>.
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="doctest-namespace-fixture" tabindex="-1"><a class="header-anchor" href="#doctest-namespace-fixture" aria-hidden="true">#</a> ‘doctest_namespace’ fixture</h3><h3 id="skipping-tests" tabindex="-1"><a class="header-anchor" href="#skipping-tests" aria-hidden="true">#</a> Skipping tests</h3>`,24),p=[o];function r(c,l){return a(),n("div",null,p)}const u=s(t,[["render",r],["__file","Pytest教程11-模块及测试文件中集成doctest测试(未完成）.html.vue"]]);export{u as default};
