import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as d,a,b as s,d as n,f as t}from"./app-207e7d61.js";const p={},o=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>目前有两种纯测试的测试框架，pytest和unittest</li><li>unittest应该是广为人知，而且也是老框架了，很多人都用来做自动化，无论是UI还是接口</li><li>pytest是基于unittest开发的另一款更高级更好用的单元测试框架</li><li>出去面试也好，跟别人说起来也好，pytest的逼格明显高于unittest</li></ul><p></p><h2 id="为什么要用pytest" tabindex="-1"><a class="header-anchor" href="#为什么要用pytest" aria-hidden="true">#</a> 为什么要用Pytest</h2><h3 id="pytest-的官方网站介绍-它具有如下特点" tabindex="-1"><a class="header-anchor" href="#pytest-的官方网站介绍-它具有如下特点" aria-hidden="true">#</a> pytest 的官方网站介绍，它具有如下特点：</h3><ol><li>非常容易上手，入门简单，文档丰富，文档中有很多实例可以参考</li><li>能够支持简单的单元测试和复杂的功能测试</li><li>支持参数化</li><li>执行测试过程中可以将某些测试跳过（skip），或者对某些预期失败的case标记成失败</li><li>支持重复执行(rerun)失败的 case</li><li>支持运行由 nose, unittest 编写的测试 case</li><li>可生成 html 报告</li><li>方便的和持续集成工具 jenkins 集成</li><li>可支持执行部分用例</li><li>具有很多第三方插件，并且可以自定义扩展</li></ol><p></p><h2 id="安装pytest" tabindex="-1"><a class="header-anchor" href="#安装pytest" aria-hidden="true">#</a> 安装Pytest</h2><h3 id="cmd运行" tabindex="-1"><a class="header-anchor" href="#cmd运行" aria-hidden="true">#</a> cmd运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-U</span> pytest
pip3 <span class="token function">install</span> pytest <span class="token parameter variable">-i</span> http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看版本" tabindex="-1"><a class="header-anchor" href="#查看版本" aria-hidden="true">#</a> 查看版本</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
__title__  =
__Time__   = 2020-04-06 12:33
__Author__ = 小菠萝测试笔记
__Blog__   = https://www.cnblogs.com/poloyy/
&quot;&quot;&quot;</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token function">test_answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span>
<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_one</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> <span class="token string">&quot;this&quot;</span>
        <span class="token keyword">assert</span> <span class="token string">&quot;h&quot;</span> <span class="token keyword">in</span> x
    <span class="token keyword">def</span> <span class="token function">test_two</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
        <span class="token keyword">assert</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&quot;check&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，cmd进入当前文件目录，直接执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200406113939910-775602409.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h3>`,19),c=a("li",null,"如果只执行 pytest ，会查找当前目录及其子目录下以  test_*.py  或 *_test.py 文件，找到文件后，在文件中找到以  test 开头函数并执行",-1),h={href:"http://start.py",target:"_blank",rel:"noopener noreferrer"},u={href:"http://start.py",target:"_blank",rel:"noopener noreferrer"},m=t(`<p></p><h2 id="pytest用例的设计原则" tabindex="-1"><a class="header-anchor" href="#pytest用例的设计原则" aria-hidden="true">#</a> Pytest用例的设计原则</h2><p>用Pytest写用例时候，一定要按照下面的规则去写，否则不符合规则的测试用例是不会执行的</p><ul><li>文件名以 test_<em>.py 文件和</em>_test.py</li><li>以  test_ 开头的函数</li><li>以  Test 开头的类，不能包含 <strong>init</strong> 方法</li><li>以  test_ 开头的类里面的方法</li><li>所有的包 pakege 必须要有__init__.py 文件</li></ul><p></p><h2 id="pytest执行用例规则" tabindex="-1"><a class="header-anchor" href="#pytest执行用例规则" aria-hidden="true">#</a> Pytest执行用例规则</h2><p><strong>注意，下面讲的都是在cmd中执行pytest命令</strong></p><h3 id="_1、某个目录下所有的用例" tabindex="-1"><a class="header-anchor" href="#_1、某个目录下所有的用例" aria-hidden="true">#</a> 1、某个目录下所有的用例</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_2、执行某一个-py-文件下用例" tabindex="-1"><a class="header-anchor" href="#_2、执行某一个-py-文件下用例" aria-hidden="true">#</a> 2、执行某一个 py 文件下用例</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest 脚本名称.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),b={id:"_3、运行start-py-模块里面的某个函数-或者某个类-某个类里面的方法",tabindex:"-1"},v=a("a",{class:"header-anchor",href:"#_3、运行start-py-模块里面的某个函数-或者某个类-某个类里面的方法","aria-hidden":"true"},"#",-1),_={href:"http://xn--start-tj4o143b.py",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>加v和不加-v都可以，加-v的话，打印的信息更详细</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-v</span> 08_mark.py::TestClass::test_method
pytest 08_mark.py::TestClass::test_method
pytest start.py::test_answer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>`,3),y={id:"_4、运行start-py-模块里面-测试类里面的某个方法",tabindex:"-1"},k=a("a",{class:"header-anchor",href:"#_4、运行start-py-模块里面-测试类里面的某个方法","aria-hidden":"true"},"#",-1),f={href:"http://xn--start-tj4o143b.py",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest start.py::TestClass::test_two
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_5、-m-标记表达式-后续讲解" tabindex="-1"><a class="header-anchor" href="#_5、-m-标记表达式-后续讲解" aria-hidden="true">#</a> 5、-m 标记表达式（后续讲解）</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-m</span> login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将运行用 @pytest.mark.login 装饰器修饰的所有测试，后面再展开讲标记哦</p><h3 id="_6、-q-简单打印-只打印测试用例的执行结果" tabindex="-1"><a class="header-anchor" href="#_6、-q-简单打印-只打印测试用例的执行结果" aria-hidden="true">#</a> 6、-q 简单打印，只打印测试用例的执行结果</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-q</span> start.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_7、-s-详细打印" tabindex="-1"><a class="header-anchor" href="#_7、-s-详细打印" aria-hidden="true">#</a> 7、-s 详细打印</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span> start.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_8、-x-遇到错误时停止测试" tabindex="-1"><a class="header-anchor" href="#_8、-x-遇到错误时停止测试" aria-hidden="true">#</a> 8、-x 遇到错误时停止测试</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest start.py <span class="token parameter variable">-x</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_9、-maxfail-num-当用例错误个数达到指定数量时-停止测试" tabindex="-1"><a class="header-anchor" href="#_9、-maxfail-num-当用例错误个数达到指定数量时-停止测试" aria-hidden="true">#</a> 9、--maxfail=num，当用例错误个数达到指定数量时，停止测试</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest start.py <span class="token parameter variable">--maxfail</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_10、-k-匹配用例名称" tabindex="-1"><a class="header-anchor" href="#_10、-k-匹配用例名称" aria-hidden="true">#</a> 10、-k 匹配用例名称</h3><p>执行测试用例名称包含http的所有用例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-k</span> http start.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_11、-k-根据用例名称排除某些用例" tabindex="-1"><a class="header-anchor" href="#_11、-k-根据用例名称排除某些用例" aria-hidden="true">#</a> 11、-k 根据用例名称排除某些用例</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span> pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-k</span> <span class="token string">&quot;not http&quot;</span> start.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="_12、-k-同时匹配不同的用例名称" tabindex="-1"><a class="header-anchor" href="#_12、-k-同时匹配不同的用例名称" aria-hidden="true">#</a> 12、-k 同时匹配不同的用例名称</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-k</span> <span class="token string">&quot;method or weibo&quot;</span> start.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="pycharm运行pytest" tabindex="-1"><a class="header-anchor" href="#pycharm运行pytest" aria-hidden="true">#</a> Pycharm运行Pytest</h2><p>平时写代码，咱们都在Pycharm写的，怎么可能一直用cmd来跑用例呢，现在我们就来看看在Pycharm中如何运行Pytest</p><ol><li>首先，我们先要去<strong>settings里面设置单元测试框架为Pytest</strong></li><li>如果是nosetests的话，右键运行是以python脚本运行的哦</li><li>如果设置了unittest则是以unittest框架去运行</li></ol><p><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200406120954271-1361854733.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200406121305438-1106790149.png" alt="" loading="lazy"></p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>pytest 是可以兼容 unittest 脚本的，之前写的 unittest 用例也能用 pytest 框架去运行</p>`,33),q={href:"https://www.cnblogs.com/poloyy/p/12641505.html",target:"_blank",rel:"noopener noreferrer"};function w(P,T){const e=r("ExternalLinkIcon");return l(),d("div",null,[o,a("ul",null,[c,a("li",null,[s("如果只想执行某个文件，可以 pytest "),a("a",h,[s("start.py"),n(e)])]),a("li",null,[s("加上-q，就是显示简单的结果： pytest -q "),a("a",u,[s("start.py"),n(e)])])]),m,a("h3",b,[v,s(" 3、"),a("a",_,[s("运行start.py"),n(e)]),s(" 模块里面的某个函数，或者某个类，某个类里面的方法")]),g,a("h3",y,[k,s(" 4、"),a("a",f,[s("运行start.py"),n(e)]),s(" 模块里面,测试类里面的某个方法")]),x,a("blockquote",null,[a("p",null,[s("转载："),a("a",q,[s("https://www.cnblogs.com/poloyy/p/12641505.html"),n(e)])])])])}const N=i(p,[["render",w],["__file","Pytest系列（01）---快速入门和基础讲解.html.vue"]]);export{N as default};
