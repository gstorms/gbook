import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as n,b as s,d as i,f as c}from"./app-3f278ba4.js";const r={},l=c(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>与unittest不同，pytest使用的是python自带的assert关键字来进行断言</li><li>assert关键字后面可以接一个表达式，只要表达式的最终结果为True，那么断言通过，用例执行成功，否则用例执行失败</li></ul><p></p><h2 id="assert小栗子" tabindex="-1"><a class="header-anchor" href="#assert小栗子" aria-hidden="true">#</a> assert小栗子</h2><p>想在抛出异常之后输出一些提示信息，执行之后就方便查看是什么原因了</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 异常信息</span>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">3</span>
<span class="token keyword">def</span> <span class="token function">test_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;判断 a 为偶数，当前 a 的值为：%s&quot;</span> <span class="token operator">%</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行结果" tabindex="-1"><a class="header-anchor" href="#执行结果" aria-hidden="true">#</a> 执行结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200406130902312-172338387.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="常用断言" tabindex="-1"><a class="header-anchor" href="#常用断言" aria-hidden="true">#</a> 常用断言</h2><p>pytest 里面断言实际上就是 python 里面的 assert 断言方法，常用的有以下几种</p><ul><li>assert xx ：判断 xx 为真</li><li>assert not xx ：判断 xx 不为真</li><li>assert a in b ：判断 b 包含 a</li><li>assert a == b ：判断 a 等于 b</li><li>assert a != b ：判断 a 不等于 b</li></ul><p></p><h2 id="异常断言" tabindex="-1"><a class="header-anchor" href="#异常断言" aria-hidden="true">#</a> 异常断言</h2><p>可以使用 pytest.raises 作为上下文管理器，当抛出异常时可以获取到对应的异常实例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 断言异常</span>
<span class="token keyword">def</span> <span class="token function">test_zero_division</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**断言场景：**断言它抛的异常是不是预期想要的<br> **代码执行：**1/0<br> **预期结果：**抛的异常是ZeroDivisionError: division by zero<br> **如何断言：**通常是断言异常的 type 和 value 值了<br> **具体方式：**这里 1/0 的异常类型是 ZeroDivisionError，异常的 value 值是 divisionby zero</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 详细断言异常</span>
<span class="token keyword">def</span> <span class="token function">test_zero_division_long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> excinfo<span class="token punctuation">:</span>
        <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>
    <span class="token comment"># 断言异常类型 type</span>
    <span class="token keyword">assert</span> excinfo<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> ZeroDivisionError
    <span class="token comment"># 断言异常 value 值</span>
    <span class="token keyword">assert</span> <span class="token string">&quot;division by zero&quot;</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>excinfo<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>excinfo ：是一个异常信息实例<br><strong>主要属性：</strong> .type 、  .value 、 .traceback<br> **注意：**断言 type 的时候，异常类型是不需要加引号的，断言 value值的时候需转 str</p><h2 id="拓展一-match" tabindex="-1"><a class="header-anchor" href="#拓展一-match" aria-hidden="true">#</a> 拓展一：match</h2><p>可以将 match 关键字参数传递给上下文管理器，以测试正则表达式与异常的字符串表示形式是否匹配<br> **注意：**这种方法只能断言value，不能断言type</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 自定义消息</span>
<span class="token keyword">def</span> <span class="token function">test_zero_division_long</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token operator">=</span><span class="token string">&quot;.*zero.*&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> excinfo<span class="token punctuation">:</span>
        <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该 match 方法的regexp参数与 re.search  函数匹配，因此在上面的示例中 match=&#39;zero&#39; 也可以使用<br><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200406135355943-1838438116.png" alt="" loading="lazy"><br><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200406135407511-1382697695.png" alt="" loading="lazy"></p><h2 id="拓展二-检查断言装饰器" tabindex="-1"><a class="header-anchor" href="#拓展二-检查断言装饰器" aria-hidden="true">#</a> 拓展二：检查断言装饰器</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 断言装饰器</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>xfail</span><span class="token punctuation">(</span>raises<span class="token operator">=</span>ZeroDivisionError<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行结果-1" tabindex="-1"><a class="header-anchor" href="#执行结果-1" aria-hidden="true">#</a> 执行结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200406140623462-429848886.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h3><ul><li>代码抛出异常，但是和raises指定的异常类相匹配，所以不会断言失败</li><li>它相当于一个**检查异常装饰器****，功能：**检查是否有异常，不确定是否有异常</li><li>with pytest.raise(ZeroDivisionError)  对于故意测试异常代码的情况，使用可能会更好</li><li>而<code>@pytest.mark.xfail(raises=ZeroDivisionError)</code> 对于检查未修复的错误（即，可能会发生异常），使用检查断言可能会更好</li></ul>`,28),u={href:"https://www.cnblogs.com/poloyy/p/12641778.html",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const a=t("ExternalLinkIcon");return o(),p("div",null,[l,n("blockquote",null,[n("p",null,[s("转载："),n("a",u,[s("https://www.cnblogs.com/poloyy/p/12641778.html"),i(a)])])])])}const b=e(r,[["render",d],["__file","Pytest系列（02）---assert断言详细使用.html.vue"]]);export{b as default};
