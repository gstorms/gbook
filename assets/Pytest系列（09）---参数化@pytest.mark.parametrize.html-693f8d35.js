import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as s,d as c,f as i}from"./app-d0fb0332.js";const u={},l=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>pytest允许在多个级别启用测试参数化：</p><ul><li>pytest.fixture() 允许fixture有参数化功能（后面讲解）</li><li>@pytest.mark.parametrize 允许在测试函数或类中定义多组参数和fixtures</li><li>pytest_generate_tests 允许定义自定义参数化方案或扩展（拓展）</li></ul><p></p><h2 id="参数化场景" tabindex="-1"><a class="header-anchor" href="#参数化场景" aria-hidden="true">#</a> 参数化场景</h2><p>只有测试数据和期望结果不一样，但操作步骤是一样的测试用例可以用上参数化；<br> 可以看看下面的栗子</p><h2 id="未参数化的代码" tabindex="-1"><a class="header-anchor" href="#未参数化的代码" aria-hidden="true">#</a> 未参数化的代码</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">9</span>
<span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">6</span>
<span class="token keyword">def</span> <span class="token function">test_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">==</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，三个用例都是加法然后断言某个值，重复写三个类似的用例有点冗余</p><h2 id="利用参数化优化之后的代码" tabindex="-1"><a class="header-anchor" href="#利用参数化优化之后的代码" aria-hidden="true">#</a> 利用参数化优化之后的代码</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;test_input,expected&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&quot;3+5&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;2+4&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;6*9&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_eval</span><span class="token punctuation">(</span>test_input<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;测试数据</span><span class="token interpolation"><span class="token punctuation">{</span>test_input<span class="token punctuation">}</span></span><span class="token string">,期望结果</span><span class="token interpolation"><span class="token punctuation">{</span>expected<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>test_input<span class="token punctuation">)</span> <span class="token operator">==</span> expected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="执行结果" tabindex="-1"><a class="header-anchor" href="#执行结果" aria-hidden="true">#</a> 执行结果</h4><p><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200410134540490-1334187587.png" alt="" loading="lazy"><br> 可以看到，只有一条用例，但是利用参数化输入三组不同的测试数据和期望结果，最终执行的测试用例数=3，可以节省很多代码</p><h3 id="实际web-ui自动化中的开发场景-比如是一个登录框" tabindex="-1"><a class="header-anchor" href="#实际web-ui自动化中的开发场景-比如是一个登录框" aria-hidden="true">#</a> 实际Web UI自动化中的开发场景，比如是一个登录框</h3><ol><li>你肯定需要测试<strong>账号空、密码空、账号密码都为空、账号不存在、密码错误、账号密码正确</strong>等情况</li><li>这些用例的区别就在于<strong>输入的测试数据和对应的交互结果</strong></li><li>所以我们可以只写一条登录测试用例，然后把多组测试数据和期望结果参数化，节省很多代码量</li></ol><p></p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h2><p>def parametrize(self,argnames, argvalues, indirect=False, ids=None, scope=None):</p><h4 id="argnames" tabindex="-1"><a class="header-anchor" href="#argnames" aria-hidden="true">#</a> <strong>argnames</strong></h4><p>**源码解析：<strong>a comma-separated string denoting one or more argument names, or a list/tuple of argument strings.</strong><br> **含义：**参数名字<br><strong>格式：<strong>字符串&quot;arg1,arg2,arg3&quot;</strong>【需要用逗号分隔】</strong><br> **备注：**源码中写了可以是参数字符串的list或者tuple，但博主实操过是不行的，不知道是不是写的有问题，大家可以看看评论下<br><strong>示例</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pwd&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&quot;yy1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;yy2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 错的</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pwd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&quot;yy1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;yy2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 错的</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;name,pwd&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&quot;yy1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;yy2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>备注</strong><br> 有朋友提出现在上面标注错的两个可以正常使用了</p><h4 id="argvalues" tabindex="-1"><a class="header-anchor" href="#argvalues" aria-hidden="true">#</a> <strong>argvalues</strong></h4><p><strong>源码解析：</strong></p><ul><li>The list of argvalues determines how often a test is invoked with different argument values.</li><li>If only one argname was specified argvalues is a list of values.<strong>【只有一个参数，则是值列表】</strong></li><li>If N argnames were specified, argvalues must be a list of N-tuples, where each tuple-element specifies a value for its respective argname.<strong>【如果有多个参数，则用元组来存每一组值】</strong></li></ul><p><strong>含义：<strong>参数值列表<br><strong>格式：<strong>必须是列表，如：[ val1,val2,val3 ]<br> 如果只有一个参数，里面则是值的列表如：</strong>@pytest.mark.parametrize(&quot;username&quot;, [&quot;yy&quot;, &quot;yy2&quot;, &quot;yy3&quot;])</strong><br> 如果有多个参数例，则需要用元组来存放值，一个元组对应一组参数的值，如：</strong>@pytest.mark.parametrize(&quot;name,pwd&quot;, [(&quot;yy1&quot;, &quot;123&quot;), (&quot;yy2&quot;, &quot;123&quot;), (&quot;yy3&quot;, &quot;123&quot;)])</strong><br> **备注：**虽然源码说需要list包含tuple，但我试了下，tuple包含list，list包含list也是可以的........</p><h4 id="ids" tabindex="-1"><a class="header-anchor" href="#ids" aria-hidden="true">#</a> ids</h4><p>**含义：**用例的ID<br> **格式：**传一个字符串列表<br> **作用：**可以标识每一个测试用例，自定义测试数据结果的显示，为了增加可读性<br> **强调：**ids的长度需要与测试数据列表的长度一致</p><h4 id="indirect" tabindex="-1"><a class="header-anchor" href="#indirect" aria-hidden="true">#</a> indirect</h4><p><strong>作用：<strong>如果设置成True，则把传进来的参数当</strong>函数执行</strong>，而不是一个参数（下一篇博文即讲解）<br>  <br><strong>讲完源码，对方法有更深入的了解了，我们就讲讲常用的场景</strong></p><h2 id="装饰测试类" tabindex="-1"><a class="header-anchor" href="#装饰测试类" aria-hidden="true">#</a> 装饰测试类</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;a, b, expect&#39;</span><span class="token punctuation">,</span> data_1<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestParametrize</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n测试函数11111 测试数据为\\n{}-{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> a <span class="token operator">+</span> b <span class="token operator">==</span> expect
    <span class="token keyword">def</span> <span class="token function">test_parametrize_2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n测试函数22222 测试数据为\\n{}-{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> a <span class="token operator">+</span> b <span class="token operator">==</span> expect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="执行结果-1" tabindex="-1"><a class="header-anchor" href="#执行结果-1" aria-hidden="true">#</a> 执行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200410234743433-487154828.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="重点" tabindex="-1"><a class="header-anchor" href="#重点" aria-hidden="true">#</a> 重点</h4><p>当装饰器 @pytest.mark.parametrize 装饰测试类时，会将数据集合传递给类的所有测试用例方法</p><h2 id="笛卡尔积-多个参数化装饰器" tabindex="-1"><a class="header-anchor" href="#笛卡尔积-多个参数化装饰器" aria-hidden="true">#</a> “笛卡尔积”，多个参数化装饰器</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 笛卡尔积，组合数据</span>
data_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
data_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> data_1<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> data_2<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;笛卡尔积 测试数据为 ： </span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">，</span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="执行结果-2" tabindex="-1"><a class="header-anchor" href="#执行结果-2" aria-hidden="true">#</a> 执行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200410235331463-1433687745.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="重点知识" tabindex="-1"><a class="header-anchor" href="#重点知识" aria-hidden="true">#</a> 重点知识</h4><ul><li>一个函数或一个类可以装饰多个 @pytest.mark.parametrize</li><li>这种方式，最终生成的用例数是n<em>m，比如上面的代码就是：参数a的数据有3个，参数b的数据有2个，所以最终的用例数有3</em>2=6条</li><li>当参数化装饰器有很多个的时候，用例数都等于n<em>n</em>n<em>n</em>....</li></ul><p></p><h2 id="参数化-传入字典数据" tabindex="-1"><a class="header-anchor" href="#参数化-传入字典数据" aria-hidden="true">#</a> 参数化 ，传入字典数据</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字典</span>
data_1 <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token string">&#39;pwd&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token string">&#39;pwd&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;dic&#39;</span><span class="token punctuation">,</span> data_1<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;测试数据为\\n</span><span class="token interpolation"><span class="token punctuation">{</span>dic<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;user:</span><span class="token interpolation"><span class="token punctuation">{</span>dic<span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">,pwd</span><span class="token interpolation"><span class="token punctuation">{</span>dic<span class="token punctuation">[</span><span class="token string">&quot;pwd&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没啥特别的，只是数据类型是常见的dict而已</p><h4 id="执行结果-3" tabindex="-1"><a class="header-anchor" href="#执行结果-3" aria-hidden="true">#</a> 执行结果</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>09parametrize.py::test_parametrize_1<span class="token punctuation">[</span>dic0<span class="token punctuation">]</span> PASSED                        <span class="token punctuation">[</span> <span class="token number">50</span>%<span class="token punctuation">]</span>测试数据为
<span class="token punctuation">{</span><span class="token string">&#39;user&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token string">&#39;pwd&#39;</span><span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
user:1,pwd2
09parametrize.py::test_parametrize_1<span class="token punctuation">[</span>dic1<span class="token punctuation">]</span> PASSED                        <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>测试数据为
<span class="token punctuation">{</span><span class="token string">&#39;user&#39;</span><span class="token builtin class-name">:</span> <span class="token number">3</span>, <span class="token string">&#39;pwd&#39;</span><span class="token builtin class-name">:</span> <span class="token number">4</span><span class="token punctuation">}</span>
user:3,pwd4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="参数化-标记数据" tabindex="-1"><a class="header-anchor" href="#参数化-标记数据" aria-hidden="true">#</a> 参数化，标记数据</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 标记参数化</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;test_input,expected&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&quot;3+5&quot;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&quot;2+4&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    pytest<span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token string">&quot;6 * 9&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> marks<span class="token operator">=</span>pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>xfail<span class="token punctuation">)</span><span class="token punctuation">,</span>
    pytest<span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token string">&quot;6*6&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> marks<span class="token operator">=</span>pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip<span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_mark</span><span class="token punctuation">(</span>test_input<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>test_input<span class="token punctuation">)</span> <span class="token operator">==</span> expected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="执行结果-4" tabindex="-1"><a class="header-anchor" href="#执行结果-4" aria-hidden="true">#</a> 执行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200412144723018-908939123.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参数化-增加可读性" tabindex="-1"><a class="header-anchor" href="#参数化-增加可读性" aria-hidden="true">#</a> 参数化，增加可读性</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 增加可读性</span>
data_1 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span class="token comment"># ids</span>
ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a:{} + b:{} = expect:{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span> <span class="token keyword">for</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect <span class="token keyword">in</span> data_1<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;a, b, expect&#39;</span><span class="token punctuation">,</span> data_1<span class="token punctuation">,</span> ids<span class="token operator">=</span>ids<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestParametrize</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;测试函数1测试数据为{}-{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> a <span class="token operator">+</span> b <span class="token operator">==</span> expect
    <span class="token keyword">def</span> <span class="token function">test_parametrize_2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;测试函数2数据为{}-{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> a <span class="token operator">+</span> b <span class="token operator">==</span> expect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h4 id="执行结果-5" tabindex="-1"><a class="header-anchor" href="#执行结果-5" aria-hidden="true">#</a> 执行结果</h4><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200412145321771-874304562.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h4><p>多少组数据，就要有多少个id，然后组成一个id的列表<br> **作用：**主要是为了更加清晰看到用例的含义</p>`,64),r={href:"https://www.cnblogs.com/poloyy/p/12675457.html",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[l,n("blockquote",null,[n("p",null,[s("转载："),n("a",r,[s("https://www.cnblogs.com/poloyy/p/12675457.html"),c(a)])])])])}const v=t(u,[["render",k],["__file","Pytest系列（09）---参数化@pytest.mark.parametrize.html.vue"]]);export{v as default};
