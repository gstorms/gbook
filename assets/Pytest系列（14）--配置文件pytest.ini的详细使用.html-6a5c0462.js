import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,a as s,b as n,d as e,f as i}from"./app-d0fb0332.js";const r={},c=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),n(" 前言")],-1),u=s("p",null,"pytest配置文件可以改变pytest的运行方式，它是一个固定的文件pytest.ini文件，读取配置信息，按指定的方式去运行",-1),d=s("h2",{id:"非test文件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#非test文件","aria-hidden":"true"},"#"),n(" 非test文件")],-1),k=s("p",null,"pytest里面有些文件是非test文件",-1),v=s("li",null,"pytest.ini：pytest的主配置文件，可以改变pytest的默认行为",-1),m={href:"http://conftest.py",target:"_blank",rel:"noopener noreferrer"},b=s("li",null,[s("strong",null,"init"),n(".py：识别该文件夹为python的package包")],-1),g=i(`<p></p><h2 id="查看pytest-ini的配置选项" tabindex="-1"><a class="header-anchor" href="#查看pytest-ini的配置选项" aria-hidden="true">#</a> 查看pytest.ini的配置选项</h2><p>cmd执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--help</span>
 
找到这部分内容
<span class="token punctuation">[</span>pytest<span class="token punctuation">]</span> ini-options <span class="token keyword">in</span> the first pytest.ini<span class="token operator">|</span>tox.ini<span class="token operator">|</span>setup.cfg <span class="token function">file</span> found:
  markers <span class="token punctuation">(</span>linelist<span class="token punctuation">)</span>:   markers <span class="token keyword">for</span> <span class="token builtin class-name">test</span> functions
  empty_parameter_set_mark <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default marker <span class="token keyword">for</span> empty parametersets
  norecursedirs <span class="token punctuation">(</span>args<span class="token punctuation">)</span>: directory patterns to avoid <span class="token keyword">for</span> recursion
  testpaths <span class="token punctuation">(</span>args<span class="token punctuation">)</span>:     directories to search <span class="token keyword">for</span> tests when no files or directories are given <span class="token keyword">in</span> the <span class="token builtin class-name">command</span> line.
  usefixtures <span class="token punctuation">(</span>args<span class="token punctuation">)</span>:   list of default fixtures to be used with this project
  python_files <span class="token punctuation">(</span>args<span class="token punctuation">)</span>:  glob-style <span class="token function">file</span> patterns <span class="token keyword">for</span> Python <span class="token builtin class-name">test</span> module discovery
  python_classes <span class="token punctuation">(</span>args<span class="token punctuation">)</span>:
                        prefixes or glob names <span class="token keyword">for</span> Python <span class="token builtin class-name">test</span> class discovery
  python_functions <span class="token punctuation">(</span>args<span class="token punctuation">)</span>:
                        prefixes or glob names <span class="token keyword">for</span> Python <span class="token builtin class-name">test</span> <span class="token keyword">function</span> and method discovery
  disable_test_id_escaping_and_forfeit_all_rights_to_community_support <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>:
                        disable string escape non-ascii characters, might cause unwanted side effects<span class="token punctuation">(</span>use at your own
                        risk<span class="token punctuation">)</span>
  console_output_style <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        console output: <span class="token string">&quot;classic&quot;</span>, or with additional progress information <span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span> <span class="token punctuation">(</span>percentage<span class="token punctuation">)</span> <span class="token operator">|</span>
                        <span class="token string">&quot;count&quot;</span><span class="token punctuation">)</span>.
  xfail_strict <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>:  default <span class="token keyword">for</span> the strict parameter of xfail markers when not given explicitly <span class="token punctuation">(</span>default: False<span class="token punctuation">)</span>
  enable_assertion_pass_hook <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>:
                        Enables the pytest_assertion_pass hook.Make sure to delete any previously generated pyc cache
                        files.
  junit_suite_name <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        Test suite name <span class="token keyword">for</span> JUnit report
  junit_logging <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        Write captured log messages to JUnit report: one of no<span class="token operator">|</span>log<span class="token operator">|</span>system-out<span class="token operator">|</span>system-err<span class="token operator">|</span>out-err<span class="token operator">|</span>all
  junit_log_passing_tests <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>:
                        Capture log information <span class="token keyword">for</span> passing tests to JUnit report:
  junit_duration_report <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        Duration <span class="token function">time</span> to report: one of total<span class="token operator">|</span>call
  junit_family <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        Emit XML <span class="token keyword">for</span> schema: one of legacy<span class="token operator">|</span>xunit1<span class="token operator">|</span>xunit2
  doctest_optionflags <span class="token punctuation">(</span>args<span class="token punctuation">)</span>:
                        option flags <span class="token keyword">for</span> doctests
  doctest_encoding <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        encoding used <span class="token keyword">for</span> doctest files
  cache_dir <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:   cache directory path.
  filterwarnings <span class="token punctuation">(</span>linelist<span class="token punctuation">)</span>:
                        Each line specifies a pattern <span class="token keyword">for</span> warnings.filterwarnings. Processed after -W/--pythonwarnings.
  log_print <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>:     default value <span class="token keyword">for</span> --no-print-logs
  log_level <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:   default value <span class="token keyword">for</span> --log-level
  log_format <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:  default value <span class="token keyword">for</span> --log-format
  log_date_format <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-date-format
  log_cli <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>:       <span class="token builtin class-name">enable</span> log display during <span class="token builtin class-name">test</span> run <span class="token punctuation">(</span>also known as <span class="token string">&quot;live logging&quot;</span><span class="token punctuation">)</span>.
  log_cli_level <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-cli-level
  log_cli_format <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-cli-format
  log_cli_date_format <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-cli-date-format
  log_file <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:    default value <span class="token keyword">for</span> --log-file
  log_file_level <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-file-level
  log_file_format <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-file-format
  log_file_date_format <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-file-date-format
  log_auto_indent <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        default value <span class="token keyword">for</span> --log-auto-indent
  faulthandler_timeout <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:
                        Dump the traceback of all threads <span class="token keyword">if</span> a <span class="token builtin class-name">test</span> takes <span class="token function">more</span> than TIMEOUT seconds to finish. Not
                        available on Windows.
  addopts <span class="token punctuation">(</span>args<span class="token punctuation">)</span>:       extra <span class="token builtin class-name">command</span> line options
  minversion <span class="token punctuation">(</span>string<span class="token punctuation">)</span>:  minimally required pytest version
  rsyncdirs <span class="token punctuation">(</span>pathlist<span class="token punctuation">)</span>: list of <span class="token punctuation">(</span>relative<span class="token punctuation">)</span> paths to be rsynced <span class="token keyword">for</span> remote distributed testing.
  rsyncignore <span class="token punctuation">(</span>pathlist<span class="token punctuation">)</span>:
                        list of <span class="token punctuation">(</span>relative<span class="token punctuation">)</span> glob-style paths to be ignored <span class="token keyword">for</span> rsyncing.
  looponfailroots <span class="token punctuation">(</span>pathlist<span class="token punctuation">)</span>:
                        directories to check <span class="token keyword">for</span> changes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="pytest-ini应该放哪里" tabindex="-1"><a class="header-anchor" href="#pytest-ini应该放哪里" aria-hidden="true">#</a> pytest.ini应该放哪里？</h2><p>就放在项目根目录下 ，不要乱放，不要乱起其他名字<br>  <br><strong>接下来讲下常用的配置项</strong></p><h2 id="marks" tabindex="-1"><a class="header-anchor" href="#marks" aria-hidden="true">#</a> marks</h2><p>**作用：**测试用例中添加了 @pytest.mark.webtest 装饰器，如果不添加marks选项的话，就会报warnings<br> **格式：**list列表类型<br><strong>写法：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
markers <span class="token operator">=</span>
    weibo: this is weibo page
    toutiao: toutiao
    xinlang: xinlang
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="xfail-strict" tabindex="-1"><a class="header-anchor" href="#xfail-strict" aria-hidden="true">#</a> xfail_strict</h2><p>**作用：**设置xfail_strict = True可以让那些标记为@pytest.mark.xfail但实际通过显示XPASS的测试用例被报告为失败<br> **格式：**True 、False（默认），1、0<br><strong>写法：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
<span class="token comment"># mark标记说明</span>
markers <span class="token operator">=</span>
    weibo: this is weibo page
    toutiao: toutiao
    xinlang: xinlang
xfail_strict <span class="token operator">=</span> True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>具体代码栗子</strong><br> 未设置 xfail_strict = True 时，测试结果显示XPASS</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>xfail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
    b <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>
    <span class="token keyword">assert</span> a <span class="token operator">!=</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>collecting <span class="token punctuation">..</span>. collected <span class="token number">1</span> item
02断言异常.py::test_case1 XPASS <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> xpassed <span class="token keyword">in</span> <span class="token number">0</span>.02s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已设置 xfail_strict = True 时，测试结果显示failed</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>collecting <span class="token punctuation">..</span>. collected <span class="token number">1</span> item
02断言异常.py::test_case1 FAILED                                         <span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span>
02断言异常.py:54 <span class="token punctuation">(</span>test_case1<span class="token punctuation">)</span>
<span class="token punctuation">[</span>XPASS<span class="token punctuation">(</span>strict<span class="token punctuation">)</span><span class="token punctuation">]</span> 
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> FAILURES <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
_________________________________ test_case1 __________________________________
<span class="token punctuation">[</span>XPASS<span class="token punctuation">(</span>strict<span class="token punctuation">)</span><span class="token punctuation">]</span> 
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> short <span class="token builtin class-name">test</span> summary info <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
FAILED 02断言异常.py::test_case1
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> <span class="token number">1</span> failed <span class="token keyword">in</span> <span class="token number">0</span>.02s <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="addopts" tabindex="-1"><a class="header-anchor" href="#addopts" aria-hidden="true">#</a> <strong>addopts</strong></h2><p>**作用：**addopts参数可以更改默认命令行选项，这个当我们在cmd输入一堆指令去执行用例的时候，就可以用该参数代替了，省去重复性的敲命令工作<br> **比如：**想测试完生成报告，失败重跑两次，一共运行两次，通过分布式去测试，如果在cmd中写的话，命令会很长</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-v</span> <span class="token parameter variable">--rerun</span><span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">--count</span><span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">--html</span><span class="token operator">=</span>report.html --self-contained-html <span class="token parameter variable">-n</span><span class="token operator">=</span>auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每次都这样敲不太现实，addopts就可以完美解决这个问题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
<span class="token comment"># mark</span>
markers <span class="token operator">=</span>
    weibo: this is weibo page
    toutiao: toutiao
    xinlang: xinlang
xfail_strict <span class="token operator">=</span> True
<span class="token comment"># 命令行参数</span>
addopts <span class="token operator">=</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">--reruns</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--count</span><span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">--html</span><span class="token operator">=</span>reports.html --self-contained-html <span class="token parameter variable">-n</span><span class="token operator">=</span>auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>加了addopts之后，我们在cmd中只需要敲pytest就可以生效了！！</strong></p><h2 id="log-cli" tabindex="-1"><a class="header-anchor" href="#log-cli" aria-hidden="true">#</a> log_cli</h2><p>**作用：**控制台实时输出日志<br> **格式：**log_cli=True 或False（默认），或者log_cli=1 或 0</p><h3 id="log-cli-0的运行结果" tabindex="-1"><a class="header-anchor" href="#log-cli-0的运行结果" aria-hidden="true">#</a> log_cli=0的运行结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200415100511883-1706958706.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="log-cli-1的运行结果" tabindex="-1"><a class="header-anchor" href="#log-cli-1的运行结果" aria-hidden="true">#</a> log_cli=1的运行结果</h3><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200415100540480-1964956329.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h3><p>很明显，加了log_cli=1之后，可以清晰看到哪个package下的哪个module下的哪个测试用例是否passed还是failed；<br><strong>所以平时测试代码是否有问题的情况下推荐加！！！但如果拿去批量跑测试用例的话不建议加，谁知道会不会影响运行性能呢？</strong></p><h2 id="norecursedirs" tabindex="-1"><a class="header-anchor" href="#norecursedirs" aria-hidden="true">#</a> norecursedirs</h2><p><strong>作用：<strong>pytest 收集测试用例时，会递归遍历所有子目录，包括某些你明知道没必要遍历的目录，遇到这种情况，可以使用 norecursedirs 参数简化 pytest 的搜索工作</strong>【还是挺有用的！！！】</strong><br><strong>默认设置：</strong> norecursedirs = .* build dist CVS _darcs {arch} *.egg<br> **正确写法：**多个路径用空格隔开</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
norecursedirs <span class="token operator">=</span> .* build dist CVS _darcs <span class="token punctuation">{</span>arch<span class="token punctuation">}</span> *.egg venv src resources log report util
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="更改测试用例收集规则" tabindex="-1"><a class="header-anchor" href="#更改测试用例收集规则" aria-hidden="true">#</a> 更改测试用例收集规则</h2><p>pytest默认的测试用例收集规则</p><ul><li>文件名以 test_*.py 文件和 *_test.py</li><li>以  test_ 开头的函数</li><li>以  Test 开头的类，不能包含 <strong>init</strong> 方法</li><li>以  test_ 开头的类里面的方法</li></ul><p>我们是可以修改或者添加这个用例收集规则的；当然啦，是建议在原有的规则上添加的，如下配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>pytest<span class="token punctuation">]</span>
python_files <span class="token operator">=</span>     test_*  *_test  test*
python_classes <span class="token operator">=</span>   Test*   test*
python_functions <span class="token operator">=</span> test_*  test*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>`,44),_={href:"https://www.cnblogs.com/poloyy/p/12702294.html",target:"_blank",rel:"noopener noreferrer"};function h(f,y){const a=o("ExternalLinkIcon");return p(),l("div",null,[c,u,d,k,s("ul",null,[v,s("li",null,[s("a",m,[n("conftest.py"),e(a)]),n("：测试用例的一些fixture配置")]),b]),g,s("blockquote",null,[s("p",null,[n("转载："),s("a",_,[n("https://www.cnblogs.com/poloyy/p/12702294.html"),e(a)])])])])}const q=t(r,[["render",h],["__file","Pytest系列（14）--配置文件pytest.ini的详细使用.html.vue"]]);export{q as default};
