import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,a as n,b as s,d as t,f as e}from"./app-731a6e06.js";const c={},u=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><ul><li>平常我们功能测试用例非常多时，比如有1千条用例，假设每个用例执行需要1分钟，如果单个测试人员执行需要1000分钟才能跑完</li><li>当项目非常紧急时，会需要协调多个测试资源来把任务分成两部分，于是执行时间缩短一半，如果有10个小伙伴，那么执行时间就会变成十分之一，大大节省了测试时间</li><li>为了节省项目测试时间，10个测试同时并行测试，这就是一种分布式场景</li><li>同样道理，当我们自动化测试用例排常多的时候， 一条条按顺序执行会非常慢，<strong>pytest-xdist的出现就是为了让自动化测试用例可以分布式执行，从而节省自动化测试时间</strong></li><li><strong>pytest-xdist是属于进程级别的并发</strong></li></ul><p></p><h2 id="分布式执行用例的设计原则-重中之重的重点" tabindex="-1"><a class="header-anchor" href="#分布式执行用例的设计原则-重中之重的重点" aria-hidden="true">#</a> 分布式执行用例的设计原则（重中之重的重点）</h2><ul><li>用例之间是独立的，用例之间没有依赖关系，用例可以完全独立运行**【独立运行】**</li><li>用例执行没有顺序，随机顺序都能正常执行**【随机执行】**</li><li>每个用例都能重复运行，运行结果不会影响其他用例**【不影响其他用例】**</li></ul><p></p><h2 id="插件安装" tabindex="-1"><a class="header-anchor" href="#插件安装" aria-hidden="true">#</a> 插件安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> pytest-xdist <span class="token parameter variable">-i</span> http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="pytest-xdist通过一些独特的测试执行模式扩展了pytest" tabindex="-1"><a class="header-anchor" href="#pytest-xdist通过一些独特的测试执行模式扩展了pytest" aria-hidden="true">#</a> pytest-xdist通过一些独特的测试执行模式扩展了pytest</h2><ul><li>**测试运行并行化：**如果有多个CPU或主机，则可以将它们用于组合的测试运行。 这样可以加快开发速度或使用远程计算机的特殊资源。</li><li>**--looponfail：**在子进程中重复运行测试。 每次运行之后，pytest都会等到项目中的文件更改后再运行之前失败的测试。 重复此过程，直到所有测试通过，然后再次执行完整运行。</li><li>**跨平台覆盖：**您可以指定不同的Python解释程序或不同的平台，并在所有这些平台上并行运行测试。</li></ul><p></p><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><p>这是运行代码的包结构</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>14xdist是项目文件夹名称
│  conftest.py
│  test_1.py
│  __init__.py
│              
├─test_51job
│  │  conftest.py
│  │  test_case1.py
│  │  __init__.py 
│          
├─test_toutiao
│  │  test_case2.py
│
├─test_weibo
│  │  conftest.py
│  │  test_case3.py
│  │  __init__.py 
│          

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="具体代码" tabindex="-1"><a class="header-anchor" href="#具体代码" aria-hidden="true">#</a> 具体代码</h3>`,16),r={id:"最外层的conftest-py",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#最外层的conftest-py","aria-hidden":"true"},"#",-1),k={href:"http://xn--conftest-rv0oy7wi15a552b.py",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 外层conftest.py</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;====登录功能，返回账号，token===&quot;</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> <span class="token string">&quot;testyy&quot;</span>
    token <span class="token operator">=</span> <span class="token string">&quot;npoi213bn4&quot;</span>
    <span class="token keyword">yield</span> name<span class="token punctuation">,</span> token
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;====退出登录！！！====&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="最外层的test-1-py" tabindex="-1"><a class="header-anchor" href="#最外层的test-1-py" aria-hidden="true">#</a> 最外层的test_1.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_get_info</span><span class="token punctuation">(</span>login<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    name<span class="token punctuation">,</span> token <span class="token operator">=</span> login
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;***基础用例：获取用户个人信息***&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;用户名:</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, token:</span><span class="token interpolation"><span class="token punctuation">{</span>token<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-51job包下的conftest-py" tabindex="-1"><a class="header-anchor" href="#test-51job包下的conftest-py" aria-hidden="true">#</a> test_51job包下的conftest.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">open_51</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name<span class="token punctuation">,</span> token <span class="token operator">=</span> login
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;###用户 </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> 打开51job网站###&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-51job包下的test-case1-py" tabindex="-1"><a class="header-anchor" href="#test-51job包下的test-case1-py" aria-hidden="true">#</a> test_51job包下的test_case1.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_case2_01</span><span class="token punctuation">(</span>open_51<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;51job，列出所有职位用例&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_case2_02</span><span class="token punctuation">(</span>open_51<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;51job，找出所有python岗位&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-toutiao包下的test-case2-py" tabindex="-1"><a class="header-anchor" href="#test-toutiao包下的test-case2-py" aria-hidden="true">#</a> test_toutiao包下的test_case2.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_no_fixture</span><span class="token punctuation">(</span>login<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;==没有__init__测试用例，我进入头条了==&quot;</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-weibo包下的conftest-py" tabindex="-1"><a class="header-anchor" href="#test-weibo包下的conftest-py" aria-hidden="true">#</a> test_weibo包下的conftest.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">open_weibo</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name<span class="token punctuation">,</span> token <span class="token operator">=</span> login
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;&amp;&amp;&amp; 用户 </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> 返回微博首页 &amp;&amp;&amp;&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-weibo包下的test-case3-py" tabindex="-1"><a class="header-anchor" href="#test-weibo包下的test-case3-py" aria-hidden="true">#</a> test_weibo包下的test_case3.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestWeibo</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_case1_01</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> open_weibo<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;查看微博热搜&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_case1_02</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> open_weibo<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;查看微博范冰冰&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="不使用分布式测试的命令和所需执行时间" tabindex="-1"><a class="header-anchor" href="#不使用分布式测试的命令和所需执行时间" aria-hidden="true">#</a> 不使用分布式测试的命令和所需执行时间</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200414092305407-782175120.png" alt="" loading="lazy"><br>  <br> 可以看到，执行一条用例大概1s（因为每个用例都加了 sleep(1) ），一共30条用例，总共运行30s；那么如果有1000条用例，执行时间就真的是1000s</p><h3 id="使用分布式测试的命令和所需执行时间" tabindex="-1"><a class="header-anchor" href="#使用分布式测试的命令和所需执行时间" aria-hidden="true">#</a> 使用分布式测试的命令和所需执行时间</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-n</span> auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200414092647002-1058636098.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h3><ul><li>可以看到，最终运行时间只需要6s，我的电脑是真6核，假12核</li><li>-n auto：可以自动检测到系统的CPU核数；从测试结果来看，检测到的是逻辑处理器的数量，即假12核</li><li>使用auto等于利用了所有CPU来跑用例，此时CPU占用率会特别高</li></ul><p></p><h3 id="可以指定需要多少个cpu来跑用例" tabindex="-1"><a class="header-anchor" href="#可以指定需要多少个cpu来跑用例" aria-hidden="true">#</a> 可以指定需要多少个CPU来跑用例</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-n</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200414093640698-1947498338.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="pytest-xdist是可以和pytest-html很好的相结合" tabindex="-1"><a class="header-anchor" href="#pytest-xdist是可以和pytest-html很好的相结合" aria-hidden="true">#</a> pytest-xdist是可以和pytest-html很好的相结合</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-s</span> <span class="token parameter variable">-n</span> auto <span class="token parameter variable">--html</span><span class="token operator">=</span>report.html --self-contained-html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="pytest-xdist按照一定的顺序执行" tabindex="-1"><a class="header-anchor" href="#pytest-xdist按照一定的顺序执行" aria-hidden="true">#</a> pytest-xdist按照一定的顺序执行</h2><p>pytest-xdist默认是无序执行的，可以通过 --dist 参数来控制顺序<br> --dist=loadscope</p><ul><li>将按照同一个模块module下的函数和同一个测试类class下的方法来分组，然后将每个测试组发给可以执行的worker，<strong>确保同一个组的测试用例在同一个进程中执行</strong></li><li>目前无法自定义分组，按类class分组优先于按模块module分组</li></ul><p>--dist=loadfile<br> 按照同一个文件名来分组，然后将每个测试组发给可以执行的worker，<strong>确保同一个组的测试用例在同一个进程中执行</strong></p><h2 id="如何让scope-session的fixture在test-session中仅仅执行一次" tabindex="-1"><a class="header-anchor" href="#如何让scope-session的fixture在test-session中仅仅执行一次" aria-hidden="true">#</a> 如何让scope=session的fixture在test session中仅仅执行一次</h2><p>pytest-xdist是让每个worker进程执行属于自己的测试用例集下的所有测试用例<br> 这意味着在不同进程中，不同的测试用例可能会调用同一个scope范围级别较高（例如session）的fixture，该fixture则会被执行多次，这不符合scope=session的预期</p><h3 id="如何解决" tabindex="-1"><a class="header-anchor" href="#如何解决" aria-hidden="true">#</a> 如何解决？</h3><p>虽然pytest-xdist没有内置的支持来确保会话范围的夹具仅执行一次，但是可以通过使用锁定文件进行进程间通信来实现。</p><h3 id="小栗子" tabindex="-1"><a class="header-anchor" href="#小栗子" aria-hidden="true">#</a> 小栗子</h3><ol><li>下面的示例只需要执行一次login（因为它是只需要执行一次来定义配置选项，等等）</li><li>当第一次请求这个fixture时，则会利用FileLock仅产生一次fixture数据</li><li>当其他进程再次请求这个fixture时，则会从文件中读取数据</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest
<span class="token keyword">from</span> filelock <span class="token keyword">import</span> FileLock
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;====登录功能，返回账号，token===&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> FileLock<span class="token punctuation">(</span><span class="token string">&quot;session.lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> <span class="token string">&quot;testyy&quot;</span>
        token <span class="token operator">=</span> <span class="token string">&quot;npoi213bn4&quot;</span>
        <span class="token comment"># web ui自动化</span>
        <span class="token comment"># 声明一个driver，再返回</span>
        <span class="token comment"># 接口自动化</span>
        <span class="token comment"># 发起一个登录请求，将token返回都可以这样写</span>
    <span class="token keyword">yield</span> name<span class="token punctuation">,</span> token
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;====退出登录！！！====&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),m={href:"https://www.cnblogs.com/poloyy/p/12694861.html",target:"_blank",rel:"noopener noreferrer"};function b(h,y){const a=i("ExternalLinkIcon");return o(),l("div",null,[u,n("h3",r,[d,s(),n("a",k,[s("最外层的conftest.py"),t(a)])]),v,n("blockquote",null,[n("p",null,[s("转载： "),n("a",m,[s("https://www.cnblogs.com/poloyy/p/12694861.html"),t(a)])])])])}const _=p(c,[["render",b],["__file","Pytest系列（16）--分布式测试插件之pytest-xdist的详细使用.html.vue"]]);export{_ as default};
