import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,a as n,b as s,d as e,f as t}from"./app-731a6e06.js";const c={},u=t(`<h2 id="官方介绍" tabindex="-1"><a class="header-anchor" href="#官方介绍" aria-hidden="true">#</a> 官方介绍</h2><ol><li>Allure Framework是一种灵活的轻量级多语言测试报告工具，不仅可以以简洁的Web报告形式非常简洁地显示已测试的内容，也允许参与开发过程的每个人从日常测试中提取最大程度的有用信息</li><li>从开发/质量保证的角度来看，Allure报告可以缩短常见缺陷的生命周期：可以将测试失败划分为bug和损坏的测试，还可以配置log，step，fixture，attachments，timings，历史记录以及与TMS的集成以及Bug跟踪系统，因此负责任的开发人员和测试人员将掌握所有信息</li><li>从管理人员的角度来看，Allure提供了一个清晰的“全局”，涵盖了已涵盖的功能，缺陷聚集的位置，执行时间表的外观以及许多其他方便的事情</li><li>Allure的模块化和可扩展性确保您始终能够微调某些东西，以使Allure更适合您</li></ol><p></p><h2 id="个人介绍" tabindex="-1"><a class="header-anchor" href="#个人介绍" aria-hidden="true">#</a> 个人介绍</h2><ol><li>对于管理层来说，测试报告当然是越直观、简洁、数据清晰越好，而Allure就满足以上这么多点，而且很好的和pytest集成了</li><li>相比于pytest-html来说，Allure的报告真的是十全十美鸭！！</li><li>唯一不足的就是，拓展功能需要在测试用例集上加装饰器</li></ol><p></p><h2 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件" aria-hidden="true">#</a> 安装插件</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> allure-pytest <span class="token parameter variable">-i</span> http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h2><p>这是运行代码的包结构</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 是项目文件夹名称</span>
15allure
│  conftest.py
│  test_1.py
│  __init__.py
│              
├─test_51job
│  │  conftest.py
│  │  test_case1.py
│  │  __init__.py 
│          
├─test_toutiao
│  │  test_case2.py
│
├─test_weibo
│  │  conftest.py
│  │  test_case3.py
│  │  __init__.py 
│
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>`,13),r={id:"最外层的conftest-py",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#最外层的conftest-py","aria-hidden":"true"},"#",-1),k={href:"http://xn--conftest-rv0oy7wi15a552b.py",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 外层conftest.py</span>

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;====登录功能，返回账号，token===&quot;</span><span class="token punctuation">)</span>
    name <span class="token operator">=</span> <span class="token string">&quot;testyy&quot;</span>
    token <span class="token operator">=</span> <span class="token string">&quot;npoi213bn4&quot;</span>
    <span class="token keyword">yield</span> name<span class="token punctuation">,</span> token
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;====退出登录！！！====&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="最外层的test-1-py" tabindex="-1"><a class="header-anchor" href="#最外层的test-1-py" aria-hidden="true">#</a> 最外层的test_1.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_get_info</span><span class="token punctuation">(</span>login<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    name<span class="token punctuation">,</span> token <span class="token operator">=</span> login
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;***基础用例：获取用户个人信息***&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;用户名:</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">, token:</span><span class="token interpolation"><span class="token punctuation">{</span>token<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-51job包下的conftest-py" tabindex="-1"><a class="header-anchor" href="#test-51job包下的conftest-py" aria-hidden="true">#</a> test_51job包下的conftest.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">open_51</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name<span class="token punctuation">,</span> token <span class="token operator">=</span> login
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;###用户 </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> 打开51job网站###&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-51job包下的test-case1-py" tabindex="-1"><a class="header-anchor" href="#test-51job包下的test-case1-py" aria-hidden="true">#</a> test_51job包下的test_case1.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_case2_01</span><span class="token punctuation">(</span>open_51<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;51job，列出所有职位用例&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_case2_02</span><span class="token punctuation">(</span>open_51<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;51job，找出所有python岗位&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-toutiao包下的test-case2-py" tabindex="-1"><a class="header-anchor" href="#test-toutiao包下的test-case2-py" aria-hidden="true">#</a> test_toutiao包下的test_case2.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_no_fixture</span><span class="token punctuation">(</span>login<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;==没有__init__测试用例，我进入头条了==&quot;</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-weibo包下的conftest-py" tabindex="-1"><a class="header-anchor" href="#test-weibo包下的conftest-py" aria-hidden="true">#</a> test_weibo包下的conftest.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">open_weibo</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name<span class="token punctuation">,</span> token <span class="token operator">=</span> login
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;&amp;&amp;&amp; 用户 </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> 返回微博首页 &amp;&amp;&amp;&quot;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="test-weibo包下的test-case3-py" tabindex="-1"><a class="header-anchor" href="#test-weibo包下的test-case3-py" aria-hidden="true">#</a> test_weibo包下的test_case3.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">import</span> pytest


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TestWeibo</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">test_case1_01</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> open_weibo<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;查看微博热搜&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">test_case1_02</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> open_weibo<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;查看微博范冰冰&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="执行命令" tabindex="-1"><a class="header-anchor" href="#执行命令" aria-hidden="true">#</a> 执行命令</h3><p>要使Allure能够在测试执行期间收集测试结果，只需添加 --alluredir 选项，并提供指向应存储结果的文件夹的路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">-n</span> auto <span class="token parameter variable">--alluredir</span><span class="token operator">=</span>allure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p><h3 id="生成出来的结果" tabindex="-1"><a class="header-anchor" href="#生成出来的结果" aria-hidden="true">#</a> 生成出来的结果</h3><p>可以看到，这不是我们想要的结果，一堆json、txt文件....<br><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200416133934690-1488645011.png" alt="" loading="lazy"></p><h3 id="要在测试完成后查看实际报告-需要使用allure命令行来让测试结果生成报告" tabindex="-1"><a class="header-anchor" href="#要在测试完成后查看实际报告-需要使用allure命令行来让测试结果生成报告" aria-hidden="true">#</a> 要在测试完成后查看实际报告，需要使用Allure命令行来让测试结果生成报告</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>allure serve allure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就会自动在默认浏览器中显示生成的报告<br><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200416133939321-270564959.png" alt="" loading="lazy"></p><h2 id="查看suites-函数级别的测试用例" tabindex="-1"><a class="header-anchor" href="#查看suites-函数级别的测试用例" aria-hidden="true">#</a> 查看suites（函数级别的测试用例）</h2><p>从包名-模块名-测试用例<br><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200416135945754-1615428832.png" alt="" loading="lazy"></p><h2 id="查看suites-类级别的测试用例" tabindex="-1"><a class="header-anchor" href="#查看suites-类级别的测试用例" aria-hidden="true">#</a> 查看suites（类级别的测试用例）</h2><p>从包名-模块名-类名-测试用例<br><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200416135949209-2093306085.png" alt="" loading="lazy"></p><h2 id="查看测试用例详情" tabindex="-1"><a class="header-anchor" href="#查看测试用例详情" aria-hidden="true">#</a> 查看测试用例详情</h2><ul><li><strong>parameters</strong>：如果用了 @pytest.mark.parametrize ，在右侧的parameters是可以看到传了什么参数和对应的值</li><li><strong>set up</strong>：调用fixture的前置操作</li><li><strong>tear down</strong>：调用fixture的后置操作</li></ul><figure><img src="https://img2020.cnblogs.com/blog/1896874/202004/1896874-20200416140444076-1695464512.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="allure报告结构" tabindex="-1"><a class="header-anchor" href="#allure报告结构" aria-hidden="true">#</a> Allure报告结构</h2><ul><li><p>Overview：总览</p></li><li><p>Categories：类别，默认是分了failed和error，凡是执行结果是其中一个的都会被归到类里面，可以通过这里快捷查看哪些用例是failed和error的</p></li><li><p>Suites：测试套件，就是所有用例的层级关系，可以根据package、module、类、方法来查找用例</p></li><li><p>Graphs：测试结果图形化，包括用例执行结果的分布图，优先级，耗时等</p></li><li><p>Timeline：可以看到测试用例精确的测试时序（执行顺序），包括执行时间</p></li><li><p>Behaviors：行为驱动，根据epic、feature、story来分组测试用例（后面会讲到）</p></li><li><p>Packages：这就是按照package、module来分组测试用例了</p></li></ul><p></p>`,39),m={href:"https://www.cnblogs.com/poloyy/p/12712616.html",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const a=i("ExternalLinkIcon");return o(),l("div",null,[u,n("h3",r,[d,s(),n("a",k,[s("最外层的conftest.py"),e(a)])]),v,n("blockquote",null,[n("p",null,[s("转载："),n("a",m,[s("https://www.cnblogs.com/poloyy/p/12712616.html"),e(a)])])])])}const f=p(c,[["render",b],["__file","Pytest系列（18）--超美测试报告插件之allure-pytest的基础使用.html.vue"]]);export{f as default};
