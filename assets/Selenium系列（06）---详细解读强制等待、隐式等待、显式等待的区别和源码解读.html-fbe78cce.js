import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,a as n,b as s,d as e,f as t}from"./app-3f278ba4.js";const c={},r=t(`<h2 id="设置元素等待" tabindex="-1"><a class="header-anchor" href="#设置元素等待" aria-hidden="true">#</a> <strong>设置元素等待</strong></h2><p><strong>为什么需要设置元素等待？</strong></p><ul><li><strong>因为</strong>，目前大多数Web应用程序都是使用Ajax和Javascript开发的；每次加载一个网页，就会加载各种HTML标签、JS文件</li><li><strong>但是</strong>，加载肯定有加载顺序，大型网站很难说一秒内就把所有东西加载出来，不仅如此，加载速度也受网络波动影响</li><li><strong>因此</strong>，当我们要在网页中做<strong>元素定位</strong>的时候，有可能我们打开了网页但元素未加载出来，这个时候就定位不到元素，就会报错</li><li><strong>所以</strong>，我们需要设置元素等待，**意思就是：**等待指定元素已被加载出来之后，我们才去定位该元素，就不会出现定位失败的现象了</li></ul><p></p><h3 id="如果我们不设置元素等待-那怎么避免-因元素未加载出来而定位失败-的情况出现呢" tabindex="-1"><a class="header-anchor" href="#如果我们不设置元素等待-那怎么避免-因元素未加载出来而定位失败-的情况出现呢" aria-hidden="true">#</a> 如果我们不设置元素等待，那怎么避免 **因元素未加载出来而定位失败 **的情况出现呢？</h3><ul><li>答案很简单，就是调用 sleep() ，也叫**强制等待  **</li><li>但是<strong>缺点</strong>就是：如果指定的时间过长，即使元素已被加载出来了，但还是要继续等，这样会浪费很多时间</li></ul><h2 id="强制等待的栗子" tabindex="-1"><a class="header-anchor" href="#强制等待的栗子" aria-hidden="true">#</a> 强制等待的栗子</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
__title__  =
__Time__   = 2020/3/25 17:52
__Author__ = 小菠萝测试笔记
__Blog__   = https://www.cnblogs.com/poloyy/
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver

driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">&quot;../resources/chromedriver.exe&quot;</span><span class="token punctuation">)</span>
<span class="token number">20</span><span class="token punctuation">)</span>

<span class="token comment"># 访问网址</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># ===强制等待3秒才执行下一步===</span>
sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># 找到搜索框</span>
inputElement <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;kw&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="webdriver提供了两种类型的等待-显式等待和隐式等待" tabindex="-1"><a class="header-anchor" href="#webdriver提供了两种类型的等待-显式等待和隐式等待" aria-hidden="true">#</a> WebDriver提供了两种类型的等待：显式等待和隐式等待</h1><h2 id="隐式等待" tabindex="-1"><a class="header-anchor" href="#隐式等待" aria-hidden="true">#</a> 隐式等待</h2><h3 id="什么是隐式等待" tabindex="-1"><a class="header-anchor" href="#什么是隐式等待" aria-hidden="true">#</a> 什么是隐式等待？</h3><ul><li>如果某些元素不是立即可用的，隐式等待是告诉WebDriver去等待一定的时间后去查找元素</li><li>默认等待时间是0秒，隐式等待对整个WebDriver的周期都起作用，所以只要设置一次即可</li></ul><p></p><h3 id="如何体现隐式等待" tabindex="-1"><a class="header-anchor" href="#如何体现隐式等待" aria-hidden="true">#</a> <strong>如何体现隐式等待？</strong></h3><p>如果在规定时间内，整个网页都加载完成，则执行下一步，否则会抛出异常</p><h3 id="隐式等待的弊端" tabindex="-1"><a class="header-anchor" href="#隐式等待的弊端" aria-hidden="true">#</a> 隐式等待的弊端</h3><p><strong>可以把隐式等待当做全局变量</strong>，它影响整个页面，所以程序需要等待整个<strong>页面加载完成（就是浏览器标签栏那个小圈不再转）时，才会执行下一步****【页面加载完成，才能执行下一步】</strong><br> 但可能页面加载未完成的时候，需要定位的元素已经加载完成了，但受限于某些JS文件、图片加载特别慢，我们不能执行下一步，<strong>必须</strong>得等到网页所有东西都加载完了才能下一步**【增加不必要的加载时间】**</p><h3 id="隐式等待的代码" tabindex="-1"><a class="header-anchor" href="#隐式等待的代码" aria-hidden="true">#</a> 隐式等待的代码</h3><p>很简单，就调用一个方法即可，毕竟是作用于WebDriver的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
__title__  =
__Time__   = 2020/3/25 17:52
__Author__ = 小菠萝测试笔记
__Blog__   = https://www.cnblogs.com/poloyy/
&quot;&quot;&quot;</span>

<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver

<span class="token comment"># 加载驱动</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">&quot;../resources/chromedriver.exe&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># ===隐性等待20s===</span>
driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>

<span class="token comment"># 访问网址</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 找到搜索框</span>
inputElement <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;kw&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="显式等待" tabindex="-1"><a class="header-anchor" href="#显式等待" aria-hidden="true">#</a> 显式等待</h2><h3 id="什么是显式等待" tabindex="-1"><a class="header-anchor" href="#什么是显式等待" aria-hidden="true">#</a> 什么是显式等待？</h3><ul><li>需要定位某个元素的时候，但元素可能不可见，这个时候<strong>针对这个元素</strong>就可以使用显式等待了</li><li>显式等待和隐式等待最大的不同就是：<strong>你可以它看成是局部变量，作用于指定元素</strong></li></ul><p></p><h3 id="显式等待的优势" tabindex="-1"><a class="header-anchor" href="#显式等待的优势" aria-hidden="true">#</a> 显式等待的优势</h3><p>相比隐式等待，显式等待只对指定元素生效，不再是在整个WebDriver生命周期内生效**【仅对元素生效】**<br> 可以根据需要定位的元素来设置显式等待，无需等待页面完全加载，节省大量因加载无关紧要文件而浪费掉的时间**【针对元素设置，无需等待页面加载完成，节省加载时间】**</p><h3 id="显式等待的代码" tabindex="-1"><a class="header-anchor" href="#显式等待的代码" aria-hidden="true">#</a> 显式等待的代码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
__title__  =
__Time__   = 2020/3/25 17:52
__Author__ = 小菠萝测试笔记
__Blog__   = https://www.cnblogs.com/poloyy/
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver

<span class="token comment"># 加载驱动</span>
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC

driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">&quot;../resources/chromedriver.exe&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 访问网址</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># ===显式等待===</span>

<span class="token comment"># 设置元素等待实例，最多等10秒，每0.5秒查看条件是否成立</span>
element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>
    <span class="token comment"># 条件：直到元素加载完成</span>
    EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">&quot;kw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="webdriverwait源码解读" tabindex="-1"><a class="header-anchor" href="#webdriverwait源码解读" aria-hidden="true">#</a> WebDriverWait源码解读</h1><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">WebDriverWait</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> driver<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> poll_frequency<span class="token operator">=</span>POLL_FREQUENCY<span class="token punctuation">,</span> ignored_exceptions<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token string">&quot;&quot;</span>&quot;Constructor<span class="token punctuation">,</span> takes a WebDriver instance <span class="token keyword">and</span> timeout <span class="token keyword">in</span> seconds<span class="token punctuation">.</span>
           <span class="token punctuation">:</span>Args<span class="token punctuation">:</span>
            <span class="token operator">-</span> driver <span class="token operator">-</span> Instance of WebDriver <span class="token punctuation">(</span>Ie<span class="token punctuation">,</span> Firefox<span class="token punctuation">,</span> Chrome <span class="token keyword">or</span> Remote<span class="token punctuation">)</span>
            <span class="token operator">-</span> timeout <span class="token operator">-</span> Number of seconds before timing out
            <span class="token operator">-</span> poll_frequency <span class="token operator">-</span> sleep interval between calls
              By default<span class="token punctuation">,</span> it <span class="token keyword">is</span> <span class="token number">0.5</span> second<span class="token punctuation">.</span>
            <span class="token operator">-</span> ignored_exceptions <span class="token operator">-</span> iterable structure of exception classes ignored during calls<span class="token punctuation">.</span>
              By default<span class="token punctuation">,</span> it contains NoSuchElementException only<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webdriverwait实例初始化传参" tabindex="-1"><a class="header-anchor" href="#webdriverwait实例初始化传参" aria-hidden="true">#</a> WebDriverWait实例初始化传参</h2><ul><li>**driver：**WebDriver实例，传入前面声明的driver即可</li><li>**timeout：**最大超时时间；</li><li>**poll_frequency：**执行间隔，默认0.5s</li><li>**ignored_exceptions：**需要忽略的异常 <ul><li>如果在调用 until() 或 until_not() 的过程中抛出这个元组中的异常， 则不中断代码，继续等待；</li><li>如果抛出的是这个元组外的异常，则中断代码；</li><li>忽略的异常默认只有 NoSuchElementException</li></ul></li></ul><p></p><h2 id="通俗易懂的-webdriverwait" tabindex="-1"><a class="header-anchor" href="#通俗易懂的-webdriverwait" aria-hidden="true">#</a> 通俗易懂的 WebDriverWait</h2><p>WebDriverWait(driver实例, 超时时长, 调用频率, 忽略的异常).until(要调用的 方法, 超时时返回的信息)</p><h2 id="webdriverwait实例的两个方法" tabindex="-1"><a class="header-anchor" href="#webdriverwait实例的两个方法" aria-hidden="true">#</a> WebDriverWait实例的两个方法</h2><h3 id="until-self-method-message" tabindex="-1"><a class="header-anchor" href="#until-self-method-message" aria-hidden="true">#</a> until(self, method, message=&#39;&#39;)</h3><p><strong>作用：<strong>每隔一段时间</strong>（上面的poll_frequency）<strong>调用method，直到返回值</strong>不为</strong>False或<strong>不为</strong>空<br> **method：**需要执行的method<br> **message：**抛出异常时的文案，会返回 TimeoutException ，表示超时<br><strong>注意</strong>：这个才是常用的，如：定位元素直到不返回空</p><h3 id="until-not-self-method-message" tabindex="-1"><a class="header-anchor" href="#until-not-self-method-message" aria-hidden="true">#</a> until_not(self, method, message=&#39;&#39;)</h3><p><strong>作用：<strong>调用method，直到返回值</strong>为</strong>False或<strong>为</strong>空<br> **method：**需要执行的method<br> **message：**抛出异常时的文案，会返回  TimeoutException ，表示超时</p><h3 id="两个方法的-method参数注意点" tabindex="-1"><a class="header-anchor" href="#两个方法的-method参数注意点" aria-hidden="true">#</a> 两个方法的 method参数注意点</h3><p>如果直接传入WebElement（页面元素）对象</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&#39;kw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则会抛出异常</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>TypeError<span class="token punctuation">:</span> <span class="token string">&#39;xxx&#39;</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token builtin">callable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>method 参数需要传入的对象必须包含  <strong>call()</strong>  方法 ，什么意思？让对象可以直接被调用</p><h3 id="官方提供的两个小例子" tabindex="-1"><a class="header-anchor" href="#官方提供的两个小例子" aria-hidden="true">#</a> 官方提供的两个小例子</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;someId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
is_disappeared <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ElementNotVisibleException<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until_not<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">&quot;someId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_displayed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，通过匿名函数也是可以的，可以说比后面介绍的  expected_conditions   模块要方便多了<br>  <br><strong>那么有哪些是包含  <strong>call()</strong>  的对象呢？</strong></p><ul><li>expected_conditions 模块（接下来重点讲的）</li><li>WebElement的 is_displayed() 、 is_enabled() 、 is_selected()</li></ul><p></p><h1 id="expected-conditions源码解读" tabindex="-1"><a class="header-anchor" href="#expected-conditions源码解读" aria-hidden="true">#</a> expected_conditions源码解读</h1><p></p><h2 id="expected-conditions的介绍" tabindex="-1"><a class="header-anchor" href="#expected-conditions的介绍" aria-hidden="true">#</a> expected_conditions的介绍</h2><p>是selenium中的一个模块，包含一系列用于判断的条件类，一共26个类<br>  <br><strong>这里就只介绍两个在设置元素等待里面最常用的判断条件类</strong><br> ** **</p><h2 id="其一-presence-of-element-located" tabindex="-1"><a class="header-anchor" href="#其一-presence-of-element-located" aria-hidden="true">#</a> <strong>其一：presence_of_element_located</strong></h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">presence_of_element_located</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; An expectation for checking that an element is present on the DOM
    of a page. This does not necessarily mean that the element is visible.
    locator - used to find the element
    returns the WebElement once it is located
    &quot;&quot;&quot;</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locator<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>locator <span class="token operator">=</span> locator
        
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> _find_element<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> self<span class="token punctuation">.</span>locator<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>检查当前DOM树种是否存在该元素（和是否可见没有关系），<strong>只要有一个元素加载出来则通过</strong></p><h3 id="locator参数" tabindex="-1"><a class="header-anchor" href="#locator参数" aria-hidden="true">#</a> locator参数</h3>`,60),d={href:"http://By.ID",target:"_blank",rel:"noopener noreferrer"},u=n("li",null,"第一个参数：定位元素的方式，和那八种元素定位方式一样，只是这里需要引入 By 模块，然后再调用类属性",-1),v=n("li",null,"第二个参数：和之前调用元素定位方法一样传参即可",-1),k={href:"http://By.ID",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="一起来看看by模块的源码" tabindex="-1"><a class="header-anchor" href="#一起来看看by模块的源码" aria-hidden="true">#</a> 一起来看看By模块的源码</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">By</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Set of supported locator strategies.
    &quot;&quot;&quot;</span>
    ID <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span>
    XPATH <span class="token operator">=</span> <span class="token string">&quot;xpath&quot;</span>
    LINK_TEXT <span class="token operator">=</span> <span class="token string">&quot;link text&quot;</span>
    PARTIAL_LINK_TEXT <span class="token operator">=</span> <span class="token string">&quot;partial link text&quot;</span>
    NAME <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span>
    TAG_NAME <span class="token operator">=</span> <span class="token string">&quot;tag name&quot;</span>
    CLASS_NAME <span class="token operator">=</span> <span class="token string">&quot;class name&quot;</span>
    CSS_SELECTOR <span class="token operator">=</span> <span class="token string">&quot;css selector&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h2 id="其二-presence-of-all-elements-located" tabindex="-1"><a class="header-anchor" href="#其二-presence-of-all-elements-located" aria-hidden="true">#</a> <strong>其二：presence_of_all_elements_located</strong></h2><p>源码几乎一样</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">presence_of_all_elements_located</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> locator<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>locator <span class="token operator">=</span> locator
        
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> _find_elements<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> self<span class="token punctuation">.</span>locator<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><h3 id="唯一要注意的点就是" tabindex="-1"><a class="header-anchor" href="#唯一要注意的点就是" aria-hidden="true">#</a> 唯一要注意的点就是</h3><ul><li>因为调用的是 _find_elements ，会返回多个元素</li><li>如果用这个条件类，<strong>必须等所有匹配到的元素都加载出来才通过</strong></li></ul><p>**</p>`,10),b={href:"https://www.cnblogs.com/poloyy/p/12587729.html",target:"_blank",rel:"noopener noreferrer"};function h(_,g){const a=o("ExternalLinkIcon");return p(),l("div",null,[r,n("p",null,[s("传入一个元组，格式如下 （"),n("a",d,[s("By.ID"),e(a)]),s(', "元素ID"）')]),n("ul",null,[u,v,n("li",null,[s("所以正确写法是： presence_of_element_located(("),n("a",k,[s("By.ID"),e(a)]),s(', "kw"))')])]),m,n("blockquote",null,[n("p",null,[s("转载： "),n("a",b,[s("https://www.cnblogs.com/poloyy/p/12587729.html"),e(a)])])])])}const w=i(c,[["render",h],["__file","Selenium系列（06）---详细解读强制等待、隐式等待、显式等待的区别和源码解读.html.vue"]]);export{w as default};
