import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as s,c as t,a as e,b as i,d as o,f as r}from"./app-cfbf85c1.js";const c={},_=r(`<h1 id="webdriver接口" tabindex="-1"><a class="header-anchor" href="#webdriver接口" aria-hidden="true">#</a> WebDriver接口</h1><h3 id="一、webdriver的初始化" tabindex="-1"><a class="header-anchor" href="#一、webdriver的初始化" aria-hidden="true">#</a> 一、WebDriver的初始化</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>
	command_executor<span class="token operator">=</span><span class="token string">&#39;http://127.0.0.1:4444/wd/hub&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 执行JSONWireProtocol指令的命令执行器，比如ChromeRemoteConnection</span>
 	desired_capabilities<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token comment"># 对于浏览器的一些描述和控制信息</span>
 	browser_profile<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token comment"># 仅供FireFox浏览器使用</span>
 	proxy<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token comment"># 一个代理对象Proxy</span>
 	keep_alive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token comment"># HTTP keep-alive参数</span>
 	file_detector<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token comment"># 文件查找器，默认是LocalFileDetector</span>
 	options<span class="token operator">=</span><span class="token boolean">None</span> <span class="token comment"># 特定浏览器类型的Options对象</span>
<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器是否属于W3C模式，查看WebDriver对象的self.w3c属性即可；有些命令不支持W3C模式。<br>     WebDriver对象实现了with上下文对象语法。</p><h3 id="二、webdriver的属性" tabindex="-1"><a class="header-anchor" href="#二、webdriver的属性" aria-hidden="true">#</a> 二、WebDriver的属性</h3><ul><li>mobile --- 把WebDriver包装成移动对象，Web测试时无用。</li><li>name --- WebDriver使用的浏览器的名称</li><li>title --- 当前浏览器的标题信息</li><li>current_url --- 当前浏览器正在访问的URL路径</li><li>page_source --- 当前浏览器的页面源代码</li><li>current_window_handle --- 当前会话的浏览器窗体的句柄，每一个会话都是一个独立的浏览器窗口。</li><li>window_handles --- 浏览器窗体的句柄列表</li><li>switch_to --- 目标切换器</li><li>desired_capabilities --- 浏览器的设置和控制参数。</li><li>file_detector --- 文件查找器对象，继承自FileDetector。</li><li>orientation --- 指的是当前屏幕的方向(针对APP来说)</li><li>application_cache --- 浏览器的缓存对象ApplicationCache，用于缓存管理交互。</li><li>log_types --- 浏览器支持的日志类型名称</li></ul><p></p><h3 id="三、webdriver的元素查找" tabindex="-1"><a class="header-anchor" href="#三、webdriver的元素查找" aria-hidden="true">#</a> 三、WebDriver的元素查找</h3><h4 id="_1、一次查找一个元素" tabindex="-1"><a class="header-anchor" href="#_1、一次查找一个元素" aria-hidden="true">#</a> 1、一次查找一个元素</h4><ul><li>find_element_by_id</li><li>find_element_by_name</li><li>find_element_by_xpath</li><li>find_element_by_link_text</li><li>find_element_by_partial_link_text</li><li>find_element_by_tag_name</li><li>find_element_by_class_name</li><li>find_element_by_css_selector</li></ul><h4 id="_2、一次查找多个元素" tabindex="-1"><a class="header-anchor" href="#_2、一次查找多个元素" aria-hidden="true">#</a> 2、一次查找多个元素</h4><ul><li>find_elements_by_id</li><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li></ul><h4 id="_3、通用查找" tabindex="-1"><a class="header-anchor" href="#_3、通用查找" aria-hidden="true">#</a> 3、通用查找</h4><ul><li>find_element --- 通过指定策略类型和目标值来查找元素，返回WebElement元素。</li><li>find_elements --- 通过指定策略类型和目标值来查找元素，返回WebElement元素的列表。</li></ul><p></p><h3 id="四、webdriver的其它方法" tabindex="-1"><a class="header-anchor" href="#四、webdriver的其它方法" aria-hidden="true">#</a> 四、WebDriver的其它方法</h3><h4 id="_1、浏览器操作" tabindex="-1"><a class="header-anchor" href="#_1、浏览器操作" aria-hidden="true">#</a> 1、浏览器操作</h4><ul><li>execute --- 执行指定的JSON命令</li><li>execute_script --- 执行JavaScript脚本</li><li>execute_async_script --- 异步执行JavaScript脚本</li><li>switch_to_active_element --- 切换到当前活动的元素</li><li>switch_to_window --- 切换到指定句柄的窗口(这个窗口指的是浏览器下面的TAB页)</li><li>switch_to_frame --- 切换到指定Frame</li><li>switch_to_default_content --- 切换到默认内容</li><li>switch_to_alert --- 切换到警告</li><li>implicitly_wait --- 设置WebDriver命令或元素查找的超时等待时间</li><li>set_script_timeout --- 设置WebDriver执行脚本的超时等待时间</li><li>set_page_load_timeout --- 设置Web页面加载超时等待时间</li></ul><h4 id="_2、浏览器控制" tabindex="-1"><a class="header-anchor" href="#_2、浏览器控制" aria-hidden="true">#</a> 2、浏览器控制</h4><ul><li>get --- 访问目标URL页面</li><li>close --- 关闭浏览器窗口上的当前TAB页面</li><li>quit --- 关闭浏览器</li><li>maximize_window --- 最大化浏览器</li><li>fullscreen_window --- 全屏浏览器</li><li>minimize_window --- 最小化浏览器</li><li>back --- 浏览器返回到上一个地址</li><li>forward --- 浏览器向前到下一个地址</li><li>refresh --- 浏览器刷新</li><li>get_screenshot_as_file --- Web页面截屏数据保存为PNG文件</li><li>save_screenshot --- Web页面截屏数据保存为PNG文件</li><li>get_screenshot_as_png --- Web页面截屏数据保存为PNG格式的二进制数据</li><li>get_screenshot_as_base64 --- Web页面截屏数据保存为二进制数据的base64编码字符串</li><li>get_window_size --- 获取浏览器窗口的大小</li><li>set_window_size --- 设置浏览器窗口的大小</li><li>get_window_position --- 获取浏览器窗口的位置</li><li>set_window_position --- 设置浏览器窗口的位置</li><li>get_window_rect --- 获取浏览器的窗口大小和位置</li><li>set_window_rect --- 设置浏览器的窗口大小和位置</li></ul><h4 id="_3、浏览器管理" tabindex="-1"><a class="header-anchor" href="#_3、浏览器管理" aria-hidden="true">#</a> 3、浏览器管理</h4><ul><li>get_cookies --- 获取当前会话的所有cookie</li><li>get_cookie --- 在当前会话中获取指定名称的cookie</li><li>delete_cookie --- 在当前会话中删除指定名称的cookie</li><li>delete_all_cookies --- 删除当前会话的所有cookie</li><li>add_cookie --- 添加cookie到当前会话</li><li>get_log --- 获取指定类型的日志</li></ul><h4 id="_4、辅助函数" tabindex="-1"><a class="header-anchor" href="#_4、辅助函数" aria-hidden="true">#</a> 4、辅助函数</h4><ul><li>start_client --- 钩子函数定义，在WebDriver的会话启动前调用。</li><li>stop_client --- 钩子函数定义，在WebDriver的quit()方法执行前调用。</li><li>start_session --- 启动浏览器会话，一般不要单独调用，因为一调用之后之前的浏览器会话会丢失。</li><li>create_web_element --- 创建一个标准的WebElement元素对象，用于包装和解包装Web元素。</li></ul>`,24),d={href:"https://www.cnblogs.com/ringboow/p/11120191.html",target:"_blank",rel:"noopener noreferrer"};function p(h,b){const n=a("ExternalLinkIcon");return s(),t("div",null,[_,e("blockquote",null,[e("p",null,[i("参考"),e("a",d,[i("https://www.cnblogs.com/ringboow/p/11120191.html"),o(n)])])])])}const k=l(c,[["render",p],["__file","WebDriver接口.html.vue"]]);export{k as default};
