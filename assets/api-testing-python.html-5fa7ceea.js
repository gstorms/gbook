import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as u,a as n,b as s,d as a,w as l,e as r,f as e}from"./app-3f278ba4.js";const k={},d={href:"https://en.wikipedia.org/wiki/Representational_state_transfer",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),m=n("p",null,[s("Sometimes you may want to send requests to the server directly from Python without loading a page and running js code in it."),n("br"),s(" A few examples where it may come in handy:")],-1),b=n("ul",null,[n("li",null,"Test your server API."),n("li",null,"Prepare server side state before visiting the web application in a test."),n("li",null,"Validate server side post-conditions after running some actions in the browser.")],-1),g=n("p",null,"All of that could be achieved via [APIRequestContext] methods.",-1),_=n("code",null,"pytest-playwright",-1),q=n("h2",{id:"writing-api-test",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#writing-api-test","aria-hidden":"true"},"#"),s(" Writing API Test")],-1),h=n("p",null,"[APIRequestContext] can send all kinds of HTTP(S) requests over network.",-1),w={href:"https://docs.github.com/en/rest",target:"_blank",rel:"noopener noreferrer"},y=e(`<ul><li>Create a new repository before running tests.</li><li>Create a few issues and validate server state.</li><li>Delete the repository after running tests.</li></ul><h3 id="configure" tabindex="-1"><a class="header-anchor" href="#configure" aria-hidden="true">#</a> Configure</h3><p>GitHub API requires authorization, so we&#39;ll configure the token once for all tests. While at it, we&#39;ll also set the <code>baseURL</code> to simplify the tests.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Generator

<span class="token keyword">import</span> pytest
<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> Playwright<span class="token punctuation">,</span> APIRequestContext

GITHUB_API_TOKEN <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;GITHUB_API_TOKEN&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> GITHUB_API_TOKEN<span class="token punctuation">,</span> <span class="token string">&quot;GITHUB_API_TOKEN is not set&quot;</span>


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">api_request_context</span><span class="token punctuation">(</span>
    playwright<span class="token punctuation">:</span> Playwright<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Generator<span class="token punctuation">[</span>APIRequestContext<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment"># We set this header per GitHub guidelines.</span>
        <span class="token string">&quot;Accept&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/vnd.github.v3+json&quot;</span><span class="token punctuation">,</span>
        <span class="token comment"># Add authorization token to all requests.</span>
        <span class="token comment"># Assuming personal access token available in the environment.</span>
        <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&quot;token </span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_API_TOKEN<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    request_context <span class="token operator">=</span> playwright<span class="token punctuation">.</span>request<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span>
        base_url<span class="token operator">=</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">,</span> extra_http_headers<span class="token operator">=</span>headers
    <span class="token punctuation">)</span>
    <span class="token keyword">yield</span> request_context
    request_context<span class="token punctuation">.</span>dispose<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write-tests" tabindex="-1"><a class="header-anchor" href="#write-tests" aria-hidden="true">#</a> Write tests</h3><p>Now that we initialized request object we can add a few tests that will create new issues in the repository.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Generator

<span class="token keyword">import</span> pytest
<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> Playwright<span class="token punctuation">,</span> APIRequestContext

GITHUB_API_TOKEN <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;GITHUB_API_TOKEN&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> GITHUB_API_TOKEN<span class="token punctuation">,</span> <span class="token string">&quot;GITHUB_API_TOKEN is not set&quot;</span>

GITHUB_USER <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;GITHUB_USER&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> GITHUB_USER<span class="token punctuation">,</span> <span class="token string">&quot;GITHUB_USER is not set&quot;</span>

GITHUB_REPO <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span>

<span class="token comment"># ...</span>

<span class="token keyword">def</span> <span class="token function">test_should_create_bug_report</span><span class="token punctuation">(</span>api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;[Bug] report 1&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bug description&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    new_issue <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>ok

    issues <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> issues<span class="token punctuation">.</span>ok
    issues_response <span class="token operator">=</span> issues<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    issue <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> issue<span class="token punctuation">:</span> issue<span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;[Bug] report 1&quot;</span><span class="token punctuation">,</span> issues_response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">assert</span> issue
    <span class="token keyword">assert</span> issue<span class="token punctuation">[</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;Bug description&quot;</span>

<span class="token keyword">def</span> <span class="token function">test_should_create_feature_request</span><span class="token punctuation">(</span>api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;[Feature] request 1&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Feature description&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    new_issue <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>ok

    issues <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> issues<span class="token punctuation">.</span>ok
    issues_response <span class="token operator">=</span> issues<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    issue <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> issue<span class="token punctuation">:</span> issue<span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;[Feature] request 1&quot;</span><span class="token punctuation">,</span> issues_response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">assert</span> issue
    <span class="token keyword">assert</span> issue<span class="token punctuation">[</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;Feature description&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="setup-and-teardown" tabindex="-1"><a class="header-anchor" href="#setup-and-teardown" aria-hidden="true">#</a> Setup and teardown</h3>`,8),f={href:"https://docs.pytest.org/en/stable/fixture.html#fixture-scopes",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"yield",-1),I=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># ...</span>
<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">,</span> autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_test_repository</span><span class="token punctuation">(</span>
    api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Generator<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment"># Before all</span>
    new_repo <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&quot;/user/repos&quot;</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> GITHUB_REPO<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> new_repo<span class="token punctuation">.</span>ok
    <span class="token keyword">yield</span>
    <span class="token comment"># After all</span>
    deleted_repo <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> deleted_repo<span class="token punctuation">.</span>ok
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="complete-test-example" tabindex="-1"><a class="header-anchor" href="#complete-test-example" aria-hidden="true">#</a> Complete test example</h3><p>Here is the complete example of an API test:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> auto
<span class="token keyword">import</span> os
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Generator

<span class="token keyword">import</span> pytest
<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> Playwright<span class="token punctuation">,</span> Page<span class="token punctuation">,</span> APIRequestContext<span class="token punctuation">,</span> expect

GITHUB_API_TOKEN <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;GITHUB_API_TOKEN&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> GITHUB_API_TOKEN<span class="token punctuation">,</span> <span class="token string">&quot;GITHUB_API_TOKEN is not set&quot;</span>

GITHUB_USER <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;GITHUB_USER&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> GITHUB_USER<span class="token punctuation">,</span> <span class="token string">&quot;GITHUB_USER is not set&quot;</span>

GITHUB_REPO <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span>


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">api_request_context</span><span class="token punctuation">(</span>
    playwright<span class="token punctuation">:</span> Playwright<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Generator<span class="token punctuation">[</span>APIRequestContext<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token comment"># We set this header per GitHub guidelines.</span>
        <span class="token string">&quot;Accept&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/vnd.github.v3+json&quot;</span><span class="token punctuation">,</span>
        <span class="token comment"># Add authorization token to all requests.</span>
        <span class="token comment"># Assuming personal access token available in the environment.</span>
        <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&quot;token </span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_API_TOKEN<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    request_context <span class="token operator">=</span> playwright<span class="token punctuation">.</span>request<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span>
        base_url<span class="token operator">=</span><span class="token string">&quot;https://api.github.com&quot;</span><span class="token punctuation">,</span> extra_http_headers<span class="token operator">=</span>headers
    <span class="token punctuation">)</span>
    <span class="token keyword">yield</span> request_context
    request_context<span class="token punctuation">.</span>dispose<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">,</span> autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_test_repository</span><span class="token punctuation">(</span>
    api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Generator<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token comment"># Before all</span>
    new_repo <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&quot;/user/repos&quot;</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> GITHUB_REPO<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> new_repo<span class="token punctuation">.</span>ok
    <span class="token keyword">yield</span>
    <span class="token comment"># After all</span>
    deleted_repo <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> deleted_repo<span class="token punctuation">.</span>ok


<span class="token keyword">def</span> <span class="token function">test_should_create_bug_report</span><span class="token punctuation">(</span>api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;[Bug] report 1&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bug description&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    new_issue <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
        <span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data
    <span class="token punctuation">)</span>
    <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>ok

    issues <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> issues<span class="token punctuation">.</span>ok
    issues_response <span class="token operator">=</span> issues<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    issue <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>
        <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> issue<span class="token punctuation">:</span> issue<span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;[Bug] report 1&quot;</span><span class="token punctuation">,</span> issues_response<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">assert</span> issue
    <span class="token keyword">assert</span> issue<span class="token punctuation">[</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;Bug description&quot;</span>


<span class="token keyword">def</span> <span class="token function">test_should_create_feature_request</span><span class="token punctuation">(</span>api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;[Feature] request 1&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Feature description&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    new_issue <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
        <span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data
    <span class="token punctuation">)</span>
    <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>ok

    issues <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> issues<span class="token punctuation">.</span>ok
    issues_response <span class="token operator">=</span> issues<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    issue <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>
        <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> issue<span class="token punctuation">:</span> issue<span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;[Feature] request 1&quot;</span><span class="token punctuation">,</span> issues_response<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">assert</span> issue
    <span class="token keyword">assert</span> issue<span class="token punctuation">[</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;Feature description&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prepare-server-state-via-api-calls" tabindex="-1"><a class="header-anchor" href="#prepare-server-state-via-api-calls" aria-hidden="true">#</a> Prepare server state via API calls</h2><p>The following test creates a new issue via API and then navigates to the list of all issues in the<br> project to check that it appears at the top of the list. The check is performed using [LocatorAssertions].</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_last_created_issue_should_be_first_in_the_list</span><span class="token punctuation">(</span>api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">,</span> page<span class="token punctuation">:</span> Page<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">create_issue</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> title<span class="token punctuation">,</span>
            <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Feature description&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        new_issue <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
            <span class="token string-interpolation"><span class="token string">f&quot;/repos/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">,</span> data<span class="token operator">=</span>data
        <span class="token punctuation">)</span>
        <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>ok
    create_issue<span class="token punctuation">(</span><span class="token string">&quot;[Feature] request 1&quot;</span><span class="token punctuation">)</span>
    create_issue<span class="token punctuation">(</span><span class="token string">&quot;[Feature] request 2&quot;</span><span class="token punctuation">)</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;https://github.com/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">)</span>
    first_issue <span class="token operator">=</span> page<span class="token punctuation">.</span>locator<span class="token punctuation">(</span><span class="token string">&quot;a[data-hovercard-type=&#39;issue&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first
    expect<span class="token punctuation">(</span>first_issue<span class="token punctuation">)</span><span class="token punctuation">.</span>to_have_text<span class="token punctuation">(</span><span class="token string">&quot;[Feature] request 2&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="check-the-server-state-after-running-user-actions" tabindex="-1"><a class="header-anchor" href="#check-the-server-state-after-running-user-actions" aria-hidden="true">#</a> Check the server state after running user actions</h2><p>The following test creates a new issue via user interface in the browser and then checks via API if<br> it was created:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_last_created_issue_should_be_on_the_server</span><span class="token punctuation">(</span>api_request_context<span class="token punctuation">:</span> APIRequestContext<span class="token punctuation">,</span> page<span class="token punctuation">:</span> Page<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;https://github.com/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues&quot;</span></span><span class="token punctuation">)</span>
    page<span class="token punctuation">.</span>locator<span class="token punctuation">(</span><span class="token string">&quot;text=New issue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
    page<span class="token punctuation">.</span>locator<span class="token punctuation">(</span><span class="token string">&quot;[aria-label=&#39;Title&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">&quot;Bug report 1&quot;</span><span class="token punctuation">)</span>
    page<span class="token punctuation">.</span>locator<span class="token punctuation">(</span><span class="token string">&quot;[aria-label=&#39;Comment body&#39;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">&quot;Bug description&quot;</span><span class="token punctuation">)</span>
    page<span class="token punctuation">.</span>locator<span class="token punctuation">(</span><span class="token string">&quot;text=Submit new issue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
    issue_id <span class="token operator">=</span> page<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    new_issue <span class="token operator">=</span> api_request_context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;https://github.com/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_USER<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>GITHUB_REPO<span class="token punctuation">}</span></span><span class="token string">/issues/</span><span class="token interpolation"><span class="token punctuation">{</span>issue_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>ok
    <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;[Bug] report 1&quot;</span>
    <span class="token keyword">assert</span> new_issue<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;Bug description&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reuse-authentication-state" tabindex="-1"><a class="header-anchor" href="#reuse-authentication-state" aria-hidden="true">#</a> Reuse authentication state</h2>`,11),T=n("br",null,null,-1),P={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",target:"_blank",rel:"noopener noreferrer"},U=n("br",null,null,-1),B=n("code",null,"method: APIRequestContext.storageState",-1),G=n("br",null,null,-1),R=e(`<p>Storage state is interchangeable between [BrowserContext] and [APIRequestContext]. You can<br> use it to log in via API calls and then create a new context with cookies already there.<br> The following code snippet retrieves state from an authenticated [APIRequestContext] and<br> creates a new [BrowserContext] with that state.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>request_context <span class="token operator">=</span> playwright<span class="token punctuation">.</span>request<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span>http_credentials<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
request_context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/login&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># Save storage state into a variable.</span>
state <span class="token operator">=</span> request_context<span class="token punctuation">.</span>storage_state<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Create a new context with the saved storage state.</span>
context <span class="token operator">=</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span>storage_state<span class="token operator">=</span>state<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function H(E,A){const t=p("ExternalLinkIcon"),o=p("RouterLink");return c(),u("div",null,[n("p",null,[s("Playwright can be used to get access to the "),n("a",d,[s("REST"),a(t)]),s(" API of"),v,s(" your application.")]),m,b,g,n("p",null,[s("The following examples rely on the "),a(o,{to:"/book/playwright/test-runners.html"},{default:l(()=>[_]),_:1}),s(" package which add Playwright fixtures to the Pytest test-runner.")]),r(" TOC "),q,h,n("p",null,[s("The following example demonstrates how to use Playwright to test issues creation via "),n("a",w,[s("GitHub API"),a(t)]),s(". The test suite will do the following:")]),y,n("p",null,[s("These tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use a "),n("a",f,[s("session fixture"),a(t)]),s(" for that. The part before "),x,s(" is the before all and after is the after all.")]),I,n("p",null,[s("Web apps use cookie-based or token-based authentication, where authenticated"),T,s(" state is stored as "),n("a",P,[s("cookies"),a(t)]),s("."),U,s(" Playwright provides ["),B,s("] method that can be used to"),G,s(" retrieve storage state from an authenticated context and then create new contexts with that state.")]),R])}const C=i(k,[["render",H],["__file","api-testing-python.html.vue"]]);export{C as default};
