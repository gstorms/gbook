import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as u,a as s,b as n,d as a,w as p,f as o}from"./app-207e7d61.js";const r={},k=o(`<h2 id="core-concepts" tabindex="-1"><a class="header-anchor" href="#core-concepts" aria-hidden="true">#</a> Core concepts</h2><p>Regardless of the authentication strategy you choose, you are likely to store authenticated browser state on the file system.</p><p>We recommend to create <code>playwright/.auth</code> directory and add it to your <code>.gitignore</code>. Your authentication routine will produce authenticated browser state and save it to a file in this <code>playwright/.auth</code> directory. Later on, tests will reuse this state and start already authenticated.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> playwright/.auth
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>playwright/.auth&quot;</span> <span class="token operator">&gt;&gt;</span> .gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-batch line-numbers-mode" data-ext="batch"><pre class="language-batch"><code><span class="token command"><span class="token keyword">md</span> playwright\\.auth</span>
<span class="token command"><span class="token keyword">echo</span>. &gt;&gt; .gitignore</span>
<span class="token command"><span class="token keyword">echo</span> <span class="token string">&quot;playwright/.auth&quot;</span> &gt;&gt; .gitignore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">New-Item</span> <span class="token operator">-</span>ItemType Directory <span class="token operator">-</span>Force <span class="token operator">-</span>Path playwright\\<span class="token punctuation">.</span>auth
<span class="token function">Add-Content</span> <span class="token operator">-</span>path <span class="token punctuation">.</span>gitignore <span class="token string">&quot;\`r\`nplaywright/.auth&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="basic-shared-account-in-all-tests" tabindex="-1"><a class="header-anchor" href="#basic-shared-account-in-all-tests" aria-hidden="true">#</a> Basic: shared account in all tests</h2><ul><li>langs: js</li></ul><p>This is the <strong>recommended</strong> approach for tests <strong>without server-side state</strong>. Authenticate once in the <strong>setup project</strong>, save the authentication state, and then reuse it to bootstrap each test already authenticated.</p><p><strong>When to use</strong></p><ul><li>When you can imagine all your tests running at the same time with the same account, without affecting each other.</li></ul><p><strong>When not to use</strong></p><ul><li>Your tests modify server-side state. For example, one test checks the rendering of the settings page, while the other test is changing the setting, and you run tests in parallel. In this case, tests must use different accounts.</li><li>Your authentication is browser-specific.</li></ul><p><strong>Details</strong></p><p>Create <code>auth.setup.ts</code> that will prepare authenticated browser state for all other tests.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// auth.setup.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token keyword">as</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> authFile <span class="token operator">=</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span><span class="token punctuation">;</span>

<span class="token function">setup</span><span class="token punctuation">(</span><span class="token string">&#39;authenticate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Perform authentication steps. Replace these actions with your own.</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Username or email address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Sign in&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// End of authentication steps.</span>

  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> authFile <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a new <code>setup</code> project in the config and declare it as a dependency for all your testing projects. This project will always run and authenticate before all the tests. All testing projects should use the authenticated state as <code>storageState</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> devices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">projects</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// Setup project</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;setup&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">testMatch</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\.setup\\.ts</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;chromium&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">&#39;Desktop Chrome&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// Use prepared auth state.</span>
        <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;firefox&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>devices<span class="token punctuation">[</span><span class="token string">&#39;Desktop Firefox&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">// Use prepared auth state.</span>
        <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tests start already authenticated because we specified <code>storageState</code> in the config.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tests/example.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// page is authenticated</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="moderate-one-account-per-parallel-worker" tabindex="-1"><a class="header-anchor" href="#moderate-one-account-per-parallel-worker" aria-hidden="true">#</a> Moderate: one account per parallel worker</h2><ul><li>langs: js</li></ul><p>This is the <strong>recommended</strong> approach for tests that <strong>modify server-side state</strong>. In Playwright, worker processes run in parallel. In this approach, each parallel worker is authenticated once. All tests ran by worker are reusing the same authentication state. We will need multiple testing accounts, one per each parallel worker.</p><p><strong>When to use</strong></p><ul><li>Your tests modify shared server-side state. For example, one test checks the rendering of the settings page, while the other test is changing the setting.</li></ul><p><strong>When not to use</strong></p><ul><li>Your tests do not modify any shared server-side state. In this case, all tests can use a single shared account.</li></ul><p><strong>Details</strong></p>`,28),d=s("code",null,"playwright/fixtures.ts",-1),v=s("code",null,"storageState",-1),m=s("code",null,"property: TestInfo.parallelIndex",-1),g=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright/fixtures.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token keyword">as</span> baseTest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> test <span class="token operator">=</span> baseTest<span class="token punctuation">.</span>extend<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">workerStorageState</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Use the same storage state for all tests in this worker.</span>
  <span class="token function-variable function">storageState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> workerStorageState <span class="token punctuation">}</span><span class="token punctuation">,</span> use</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">use</span><span class="token punctuation">(</span>workerStorageState<span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Authenticate once per worker with a worker-scoped fixture.</span>
  <span class="token literal-property property">workerStorageState</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> browser <span class="token punctuation">}</span><span class="token punctuation">,</span> use</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Use parallelIndex as a unique identifier for each worker.</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parallelIndex<span class="token punctuation">;</span>
    <span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>project<span class="token punctuation">.</span>outputDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.auth/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Reuse existing authentication state if any.</span>
      <span class="token keyword">await</span> <span class="token function">use</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Important: make sure we authenticate in a clean environment by unsetting storage state.</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Acquire a unique account, for example create a new one.</span>
    <span class="token comment">// Alternatively, you can have a list of precreated accounts for testing.</span>
    <span class="token comment">// Make sure that accounts are unique, so that multiple team members</span>
    <span class="token comment">// can run tests at the same time without interference.</span>
    <span class="token keyword">const</span> account <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">acquireAccount</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Perform authentication steps. Replace these actions with your own.</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Username or email address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Sign in&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// End of authentication steps.</span>

    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> fileName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">use</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">&#39;worker&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, each test file should import <code>test</code> from our fixtures file instead of <code>@playwright/test</code>. No changes are needed in the config.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tests/example.spec.ts</span>

<span class="token comment">// Important: import our fixtures.</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../playwright/fixtures&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// page is authenticated</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="signing-in-before-each-test" tabindex="-1"><a class="header-anchor" href="#signing-in-before-each-test" aria-hidden="true">#</a> Signing in before each test</h2><ul><li>langs: java, python, csharp</li></ul>`,5),b=o(`<p>The following example logs into GitHub. Once these steps are executed,<br> the browser context will be authenticated.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Page</span> page <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&quot;https://github.com/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Interact with login form</span>
page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&quot;Username or email address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&quot;Password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token class-name">AriaRole</span><span class="token punctuation">.</span><span class="token constant">BUTTON</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Page<span class="token punctuation">.</span>GetByRoleOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Sign in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Continue with the test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>new_page<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Interact with login form</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>get_by_label<span class="token punctuation">(</span><span class="token string">&quot;Username or email address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>get_by_label<span class="token punctuation">(</span><span class="token string">&quot;Password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>page<span class="token punctuation">.</span>get_by_role<span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;Sign in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Continue with the test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page <span class="token operator">=</span> context<span class="token punctuation">.</span>new_page<span class="token punctuation">(</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Interact with login form</span>
page<span class="token punctuation">.</span>get_by_label<span class="token punctuation">(</span><span class="token string">&quot;Username or email address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>get_by_label<span class="token punctuation">(</span><span class="token string">&quot;Password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>get_by_role<span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;Sign in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># Continue with the test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">NewPageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">GotoAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://github.com/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Interact with login form</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">GetByLabel</span><span class="token punctuation">(</span><span class="token string">&quot;Username or email address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FillAsync</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">GetByLabel</span><span class="token punctuation">(</span><span class="token string">&quot;Password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FillAsync</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">GetByRole</span><span class="token punctuation">(</span>AriaRole<span class="token punctuation">.</span>Button<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;Sign in&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ClickAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Continue with the test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redoing login for every test can slow down test execution. To mitigate that, reuse<br> existing authentication state instead.</p><h2 id="reusing-signed-in-state" tabindex="-1"><a class="header-anchor" href="#reusing-signed-in-state" aria-hidden="true">#</a> Reusing signed in state</h2><ul><li>langs: java, csharp, python</li></ul><p>Playwright provides a way to reuse the signed-in state in the tests. That way you can log<br> in only once and then skip the log in step for all of the tests.</p>`,9),h={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",target:"_blank",rel:"noopener noreferrer"},w={href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage",target:"_blank",rel:"noopener noreferrer"},y={href:"https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state",target:"_blank",rel:"noopener noreferrer"},f=o(`<p>Cookies and local storage state can be used across different browsers. They depend on your application&#39;s authentication model: some apps might require both cookies and local storage.</p><p>The following code snippet retrieves state from an authenticated context and creates a new context with that state.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Save storage state into the file.</span>
context<span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BrowserContext<span class="token punctuation">.</span>StorageStateOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;state.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create a new context with the saved storage state.</span>
<span class="token class-name">BrowserContext</span> context <span class="token operator">=</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">Browser<span class="token punctuation">.</span>NewContextOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStorageStatePath</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;state.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Save storage state into the file.</span>
storage <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>storage_state<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&quot;state.json&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Create a new context with the saved storage state.</span>
context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span>storage_state<span class="token operator">=</span><span class="token string">&quot;state.json&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Save storage state into the file.</span>
storage <span class="token operator">=</span> context<span class="token punctuation">.</span>storage_state<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&quot;state.json&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Create a new context with the saved storage state.</span>
context <span class="token operator">=</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span>storage_state<span class="token operator">=</span><span class="token string">&quot;state.json&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Save storage state into the file.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">StorageStateAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Path <span class="token operator">=</span> <span class="token string">&quot;state.json&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create a new context with the saved storage state.</span>
<span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">NewContextAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    StorageStatePath <span class="token operator">=</span> <span class="token string">&quot;state.json&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="advanced-scenarios" tabindex="-1"><a class="header-anchor" href="#advanced-scenarios" aria-hidden="true">#</a> Advanced scenarios</h2><h3 id="authenticate-with-api-request" tabindex="-1"><a class="header-anchor" href="#authenticate-with-api-request" aria-hidden="true">#</a> Authenticate with API request</h3><ul><li>langs: js</li></ul><p><strong>When to use</strong></p><ul><li>Your web application supports authenticating via API that is easier/faster than interacting witht the app UI.</li></ul><p><strong>Details</strong></p><p>We will send the API request with [APIRequestContext] and then save authenticated state as usual.</p><p>In the <a href="#basic-shared-account-in-all-tests">setup project</a>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// auth.setup.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token keyword">as</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> authFile <span class="token operator">=</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span><span class="token punctuation">;</span>

<span class="token function">setup</span><span class="token punctuation">(</span><span class="token string">&#39;authenticate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> request <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Send authentication request. Replace with your own.</span>
  <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">form</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;user&#39;</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;password&#39;</span><span class="token operator">:</span> <span class="token string">&#39;password&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> authFile <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, in a <a href="#moderate-one-account-per-parallel-worker">worker fixture</a>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright/fixtures.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token keyword">as</span> baseTest<span class="token punctuation">,</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> test <span class="token operator">=</span> baseTest<span class="token punctuation">.</span>extend<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">workerStorageState</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Use the same storage state for all tests in this worker.</span>
  <span class="token function-variable function">storageState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> workerStorageState <span class="token punctuation">}</span><span class="token punctuation">,</span> use</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">use</span><span class="token punctuation">(</span>workerStorageState<span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token comment">// Authenticate once per worker with a worker-scoped fixture.</span>
  <span class="token literal-property property">workerStorageState</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> use</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Use parallelIndex as a unique identifier for each worker.</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parallelIndex<span class="token punctuation">;</span>
    <span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>project<span class="token punctuation">.</span>outputDir<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">.auth/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Reuse existing authentication state if any.</span>
      <span class="token keyword">await</span> <span class="token function">use</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Important: make sure we authenticate in a clean environment by unsetting storage state.</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Acquire a unique account, for example create a new one.</span>
    <span class="token comment">// Alternatively, you can have a list of precreated accounts for testing.</span>
    <span class="token comment">// Make sure that accounts are unique, so that multiple team members</span>
    <span class="token comment">// can run tests at the same time without interference.</span>
    <span class="token keyword">const</span> account <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">acquireAccount</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Send authentication request. Replace with your own.</span>
    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">form</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;user&#39;</span><span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;password&#39;</span><span class="token operator">:</span> <span class="token string">&#39;password&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> fileName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">use</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">&#39;worker&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multiple-signed-in-roles" tabindex="-1"><a class="header-anchor" href="#multiple-signed-in-roles" aria-hidden="true">#</a> Multiple signed in roles</h3><ul><li>langs: js</li></ul><p><strong>When to use</strong></p><ul><li>You have more than one role in your end to end tests, but you can reuse accounts across all tests.</li></ul><p><strong>Details</strong></p><p>We will authenticate multiple times in the setup project.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// auth.setup.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token keyword">as</span> setup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> adminFile <span class="token operator">=</span> <span class="token string">&#39;playwright/.auth/admin.json&#39;</span><span class="token punctuation">;</span>

<span class="token function">setup</span><span class="token punctuation">(</span><span class="token string">&#39;authenticate as admin&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Perform authentication steps. Replace these actions with your own.</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Username or email address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Sign in&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// End of authentication steps.</span>

  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> adminFile <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> userFile <span class="token operator">=</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span><span class="token punctuation">;</span>

<span class="token function">setup</span><span class="token punctuation">(</span><span class="token string">&#39;authenticate as user&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Perform authentication steps. Replace these actions with your own.</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://github.com/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Username or email address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Sign in&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// End of authentication steps.</span>

  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storageState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> userFile <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After that, specify <code>storageState</code> for each test file or test group, <strong>instead of</strong> setting it in the config.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tests/example.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

test<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/admin.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;admin test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// page is authenticated as admin</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  test<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;user test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// page is authenticated as a user</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="testing-multiple-roles-together" tabindex="-1"><a class="header-anchor" href="#testing-multiple-roles-together" aria-hidden="true">#</a> Testing multiple roles together</h3><ul><li>langs: js</li></ul><p><strong>When to use</strong></p><ul><li>You need to test how multiple authenticated roles interact together, in a single test.</li></ul><p><strong>Details</strong></p><p>Use multiple [BrowserContext]s and [Page]s with different storage states in the same test.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// tests/example.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;admin and user&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> browser <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// adminContext and all pages inside, including adminPage, are signed in as &quot;admin&quot;.</span>
  <span class="token keyword">const</span> adminContext <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/admin.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> adminPage <span class="token operator">=</span> <span class="token keyword">await</span> adminContext<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// userContext and all pages inside, including userPage, are signed in as &quot;user&quot;.</span>
  <span class="token keyword">const</span> userContext <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> userPage <span class="token operator">=</span> <span class="token keyword">await</span> userContext<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ... interact with both adminPage and userPage ...</span>

  <span class="token keyword">await</span> adminContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> userContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="testing-multiple-roles-with-pom-fixtures" tabindex="-1"><a class="header-anchor" href="#testing-multiple-roles-with-pom-fixtures" aria-hidden="true">#</a> Testing multiple roles with POM fixtures</h3><ul><li>langs: js</li></ul><p><strong>When to use</strong></p><ul><li>You need to test how multiple authenticated roles interact together, in a single test.</li></ul><p><strong>Details</strong></p><p>You can introduce fixtures that will provide a page authenticated as each role.</p>`,39),x=s("code",null,"adminStorageState.json",-1),q=s("code",null,"userStorageState.json",-1),S=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright/fixtures.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token keyword">as</span> base<span class="token punctuation">,</span> Page<span class="token punctuation">,</span> Browser<span class="token punctuation">,</span> Locator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Page Object Model for the &quot;admin&quot; page.</span>
<span class="token comment">// Here you can add locators and helper methods specific to the admin page.</span>
<span class="token keyword">class</span> <span class="token class-name">AdminPage</span> <span class="token punctuation">{</span>
  <span class="token comment">// Page signed in as &quot;admin&quot;.</span>
  <span class="token literal-property property">page</span><span class="token operator">:</span> Page<span class="token punctuation">;</span>

  <span class="token comment">// Example locator pointing to &quot;Welcome, Admin&quot; greeting.</span>
  <span class="token literal-property property">greeting</span><span class="token operator">:</span> Locator<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">page</span><span class="token operator">:</span> Page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;#greeting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Page Object Model for the &quot;user&quot; page.</span>
<span class="token comment">// Here you can add locators and helper methods specific to the user page.</span>
<span class="token keyword">class</span> <span class="token class-name">UserPage</span> <span class="token punctuation">{</span>
  <span class="token comment">// Page signed in as &quot;user&quot;.</span>
  <span class="token literal-property property">page</span><span class="token operator">:</span> Page<span class="token punctuation">;</span>

  <span class="token comment">// Example locator pointing to &quot;Welcome, User&quot; greeting.</span>
  <span class="token literal-property property">greeting</span><span class="token operator">:</span> Locator<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">page</span><span class="token operator">:</span> Page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;#greeting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Declare the types of your fixtures.</span>
type MyFixtures <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">adminPage</span><span class="token operator">:</span> AdminPage<span class="token punctuation">;</span>
  <span class="token literal-property property">userPage</span><span class="token operator">:</span> UserPage<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> test <span class="token operator">=</span> base<span class="token punctuation">.</span>extend<span class="token operator">&lt;</span>MyFixtures<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">adminPage</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> browser <span class="token punctuation">}</span><span class="token punctuation">,</span> use</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/admin.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> adminPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdminPage</span><span class="token punctuation">(</span><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">use</span><span class="token punctuation">(</span>adminPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">userPage</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> browser <span class="token punctuation">}</span><span class="token punctuation">,</span> use</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">storageState</span><span class="token operator">:</span> <span class="token string">&#39;playwright/.auth/user.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> userPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserPage</span><span class="token punctuation">(</span><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">use</span><span class="token punctuation">(</span>userPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// tests/example.spec.ts</span>
<span class="token comment">// Import test with our new fixtures.</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./fixtures&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Use adminPage and userPage fixtures in the test.</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;admin and user&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> adminPage<span class="token punctuation">,</span> userPage <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... interact with both adminPage and userPage ...</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>adminPage<span class="token punctuation">.</span>greeting<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome, Admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>userPage<span class="token punctuation">.</span>greeting<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome, User&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="session-storage" tabindex="-1"><a class="header-anchor" href="#session-storage" aria-hidden="true">#</a> Session storage</h3>`,2),_={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage",target:"_blank",rel:"noopener noreferrer"},A=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Get session storage and store as env variable</span>
<span class="token keyword">const</span> sessionStorage <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;playwright/.auth/session.json&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set session storage in a new context</span>
<span class="token keyword">const</span> sessionStorage <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;playwright/.auth/session.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">addInitScript</span><span class="token punctuation">(</span><span class="token parameter">storage</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname <span class="token operator">===</span> <span class="token string">&#39;example.com&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> sessionStorage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Get session storage and store as env variable</span>
<span class="token class-name">String</span> sessionStorage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;JSON.stringify(sessionStorage)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">,</span> sessionStorage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set session storage in a new context</span>
<span class="token class-name">String</span> sessionStorage <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">addInitScript</span><span class="token punctuation">(</span><span class="token string">&quot;(storage =&gt; {\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  if (window.location.hostname === &#39;example.com&#39;) {\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;    const entries = JSON.parse(storage);\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;     for (const [key, value] of Object.entries(entries)) {\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;      window.sessionStorage.setItem(key, value);\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;    };\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  }\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;})(&#39;&quot;</span> <span class="token operator">+</span> sessionStorage <span class="token operator">+</span> <span class="token string">&quot;&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token comment"># Get session storage and store as env variable</span>
session_storage <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;() =&gt; JSON.stringify(sessionStorage)&quot;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> session_storage

<span class="token comment"># Set session storage in a new context</span>
session_storage <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>add_init_script<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;(storage =&gt; {
  if (window.location.hostname === &#39;example.com&#39;) {
    const entries = JSON.parse(storage)
    for (const [key, value] of Object.entries(entries)) {
      window.sessionStorage.setItem(key, value)
    }
  }
})(&#39;&quot;&quot;&quot;</span> <span class="token operator">+</span> session_storage <span class="token operator">+</span> <span class="token string">&quot;&#39;)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token comment"># Get session storage and store as env variable</span>
session_storage <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;() =&gt; JSON.stringify(sessionStorage)&quot;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> session_storage

<span class="token comment"># Set session storage in a new context</span>
session_storage <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>add_init_script<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;(storage =&gt; {
  if (window.location.hostname === &#39;example.com&#39;) {
    const entries = JSON.parse(storage)
    for (const [key, value] of Object.entries(entries)) {
      window.sessionStorage.setItem(key, value)
    }
  }
})(&#39;&quot;&quot;&quot;</span> <span class="token operator">+</span> session_storage <span class="token operator">+</span> <span class="token string">&quot;&#39;)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Get session storage and store as env variable</span>
<span class="token class-name"><span class="token keyword">var</span></span> sessionStorage <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;() =&gt; JSON.stringify(sessionStorage)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Environment<span class="token punctuation">.</span><span class="token function">SetEnvironmentVariable</span><span class="token punctuation">(</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">,</span> sessionStorage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set session storage in a new context</span>
<span class="token class-name"><span class="token keyword">var</span></span> loadedSessionStorage <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">GetEnvironmentVariable</span><span class="token punctuation">(</span><span class="token string">&quot;SESSION_STORAGE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">AddInitScriptAsync</span><span class="token punctuation">(</span><span class="token string">@&quot;(storage =&gt; {
    if (window.location.hostname === &#39;example.com&#39;) {
      const entries = JSON.parse(storage);
      for (const [key, value] of Object.entries(entries)) {
        window.sessionStorage.setItem(key, value);
      }
    }
  })(&#39;&quot;</span> <span class="token operator">+</span> loadedSessionStorage <span class="token operator">+</span> <span class="token string">&quot;&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function I(O,C){const t=c("RouterLink"),e=c("ExternalLinkIcon");return l(),u("div",null,[s("p",null,[n("Playwright executes tests in isolated environments called "),a(t,{to:"/book/playwright/browser-contexts.html"},{default:p(()=>[n("browser contexts")]),_:1}),n(". This isolation model improves reproducibility and prevents cascading test failures. Tests can load existing authenticated state. This eliminates the need to authenticate in every test and speeds up test execution.")]),k,s("p",null,[n("We will authenticate once per "),a(t,{to:"/book/playwright/test-parallel.html#worker-processes"},{default:p(()=>[n("worker process")]),_:1}),n(", each with a unique account.")]),s("p",null,[n("Create "),d,n(" file that will "),a(t,{to:"/book/playwright/test-fixtures.html#overriding-fixtures"},{default:p(()=>[n("override "),v,n(" fixture")]),_:1}),n(" to authenticate once per worker. Use ["),m,n("] to differentiate between workers.")]),g,s("p",null,[n("The Playwright API can "),a(t,{to:"/book/playwright/input.html"},{default:p(()=>[n("automate interaction")]),_:1}),n(" with a login form.")]),b,s("p",null,[n("Web apps use cookie-based or token-based authentication, where authenticated state is stored as "),s("a",h,[n("cookies"),a(e)]),n(" or in "),s("a",w,[n("local storage"),a(e)]),n(". Playwright provides "),s("a",y,[n("browserContext.storageState([options])"),a(e)]),n(" method that can be used to retrieve storage state from authenticated contexts and then create new contexts with pre-populated state.")]),f,s("p",null,[n("Below is an example that "),a(t,{to:"/book/playwright/test-fixtures.html#creating-a-fixture"},{default:p(()=>[n("creates fixtures")]),_:1}),n(" for two "),a(t,{to:"/book/playwright/pom.html"},{default:p(()=>[n("Page Object Models")]),_:1}),n(" - admin POM and user POM. It assumes "),x,n(" and "),q,n(" files were created in the global setup.")]),S,s("p",null,[n("Reusing authenticated state covers "),s("a",_,[n("cookies"),a(e)]),n(" and "),s("a",j,[n("local storage"),a(e)]),n(" based authentication. Rarely, "),s("a",P,[n("session storage"),a(e)]),n(" is used for storing information associated with the signed-in state. Session storage is specific to a particular domain and is not persisted across page loads. Playwright does not provide API to persist session storage, but the following snippet can be used to save/load session storage.")]),A])}const R=i(r,[["render",I],["__file","auth.html.vue"]]);export{R as default};
