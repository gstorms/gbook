import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as s,a as e,b as t,d as l,f as o}from"./app-3f278ba4.js";const c={},d=o('<h1 id="class-apirequest" tabindex="-1"><a class="header-anchor" href="#class-apirequest" aria-hidden="true">#</a> class: APIRequest</h1><ul><li>since: v1.16</li></ul><p>Exposes API that can be used for the Web API testing. This class is used for creating<br> [APIRequestContext] instance which in turn can be used for sending web requests. An instance<br> of this class can be obtained via [<code>property: Playwright.request</code>]. For more information<br> see [APIRequestContext].</p><h2 id="async-method-apirequest-newcontext" tabindex="-1"><a class="header-anchor" href="#async-method-apirequest-newcontext" aria-hidden="true">#</a> async method: APIRequest.newContext</h2><ul><li>since: v1.16</li></ul><ul><li>returns: &lt;[APIRequestContext]&gt;</li></ul><p>Creates new instances of [APIRequestContext].</p><h3 id="option-apirequest-newcontext-useragent-context-option-useragent" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-useragent-context-option-useragent" aria-hidden="true">#</a> option: APIRequest.newContext.useragent = %%-context-option-useragent-%%</h3><ul><li>since: v1.16</li></ul><h3 id="option-apirequest-newcontext-extrahttpheaders-context-option-extrahttpheaders" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-extrahttpheaders-context-option-extrahttpheaders" aria-hidden="true">#</a> option: APIRequest.newContext.extraHTTPHeaders = %%-context-option-extrahttpheaders-%%</h3><ul><li>since: v1.16</li></ul><h3 id="option-apirequest-newcontext-httpcredentials-context-option-httpcredentials" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-httpcredentials-context-option-httpcredentials" aria-hidden="true">#</a> option: APIRequest.newContext.httpCredentials = %%-context-option-httpcredentials-%%</h3><ul><li>since: v1.16</li></ul><h3 id="option-apirequest-newcontext-proxy-browser-option-proxy" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-proxy-browser-option-proxy" aria-hidden="true">#</a> option: APIRequest.newContext.proxy = %%-browser-option-proxy-%%</h3><ul><li>since: v1.16</li></ul><h3 id="option-apirequest-newcontext-ignorehttpserrors-context-option-ignorehttpserrors" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-ignorehttpserrors-context-option-ignorehttpserrors" aria-hidden="true">#</a> option: APIRequest.newContext.ignoreHTTPSErrors = %%-context-option-ignorehttpserrors-%%</h3><ul><li>since: v1.16</li></ul><h3 id="option-apirequest-newcontext-timeout" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-timeout" aria-hidden="true">#</a> option: APIRequest.newContext.timeout</h3><ul><li>since: v1.16</li></ul><ul><li><code>timeout</code> &lt;[float]&gt;</li></ul><p>Maximum time in milliseconds to wait for the response. Defaults to<br><code>30000</code> (30 seconds). Pass <code>0</code> to disable timeout.</p><h3 id="option-apirequest-newcontext-baseurl" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-baseurl" aria-hidden="true">#</a> option: APIRequest.newContext.baseURL</h3><ul><li>since: v1.16</li></ul><ul><li><code>baseURL</code> &lt;[string]&gt;</li></ul>',24),h=e("code",null,"method: APIRequestContext.get",-1),u={href:"https://developer.mozilla.org/en-US/docs/Web/API/URL/URL",target:"_blank",rel:"noopener noreferrer"},p=e("code",null,"URL()",-1),x=o('<ul><li>baseURL: <code>http://localhost:3000</code> and sending request to <code>/bar.html</code> results in <code>http://localhost:3000/bar.html</code></li><li>baseURL: <code>http://localhost:3000/foo/</code> and sending request to <code>./bar.html</code> results in <code>http://localhost:3000/foo/bar.html</code></li><li>baseURL: <code>http://localhost:3000/foo</code> (without trailing slash) and navigating to <code>./bar.html</code> results in <code>http://localhost:3000/bar.html</code></li></ul><h3 id="option-apirequest-newcontext-storagestate" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-storagestate" aria-hidden="true">#</a> option: APIRequest.newContext.storageState</h3><ul><li>since: v1.16</li><li>langs: js, python</li></ul><ul><li><code>storageState</code> &lt;[path]|[Object]&gt; <ul><li><code>cookies</code> &lt;[Array]&lt;[Object]&gt;&gt; <ul><li><code>name</code> &lt;[string]&gt;</li><li><code>value</code> &lt;[string]&gt;</li><li><code>domain</code> &lt;[string]&gt;</li><li><code>path</code> &lt;[string]&gt;</li><li><code>expires</code> &lt;[float]&gt; Unix time in seconds.</li><li><code>httpOnly</code> &lt;[boolean]&gt;</li><li><code>secure</code> &lt;[boolean]&gt;</li><li><code>sameSite</code> &lt;[SameSiteAttribute]&lt;&quot;Strict&quot;|&quot;Lax&quot;|&quot;None&quot;&gt;&gt;</li></ul></li><li><code>origins</code> &lt;[Array]&lt;[Object]&gt;&gt; <ul><li><code>origin</code> &lt;[string]&gt;</li><li><code>localStorage</code> &lt;[Array]&lt;[Object]&gt;&gt; <ul><li><code>name</code> &lt;[string]&gt;</li><li><code>value</code> &lt;[string]&gt;</li></ul></li></ul></li></ul></li></ul><p>Populates context with given storage state. This option can be used to initialize context with logged-in information<br> obtained via [<code>method: BrowserContext.storageState</code>] or [<code>method: APIRequestContext.storageState</code>]. Either a path to the<br> file with saved storage, or the value returned by one of [<code>method: BrowserContext.storageState</code>] or<br> [<code>method: APIRequestContext.storageState</code>] methods.</p><h3 id="option-apirequest-newcontext-storagestate-1" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-storagestate-1" aria-hidden="true">#</a> option: APIRequest.newContext.storageState</h3><ul><li>since: v1.16</li><li>langs: java, csharp</li></ul><ul><li><code>storageState</code> &lt;[string]&gt;</li></ul><p>Populates context with given storage state. This option can be used to initialize context with logged-in information<br> obtained via [<code>method: BrowserContext.storageState</code>] or [<code>method: APIRequestContext.storageState</code>]. Either a path to the<br> file with saved storage, or the value returned by one of [<code>method: BrowserContext.storageState</code>] or<br> [<code>method: APIRequestContext.storageState</code>] methods.</p><h3 id="option-apirequest-newcontext-storagestatepath-csharp-java-context-option-storage-state-path" tabindex="-1"><a class="header-anchor" href="#option-apirequest-newcontext-storagestatepath-csharp-java-context-option-storage-state-path" aria-hidden="true">#</a> option: APIRequest.newContext.storageStatePath = %%-csharp-java-context-option-storage-state-path-%%</h3><ul><li>since: v1.18</li></ul>',11);function g(b,q){const n=i("ExternalLinkIcon");return r(),s("div",null,[d,e("p",null,[t("Methods like ["),h,t("] take the base URL into consideration by using the "),e("a",u,[p,l(n)]),t(" constructor for building the corresponding URL. Examples:")]),x])}const f=a(c,[["render",g],["__file","class-apirequest.html.vue"]]);export{f as default};
