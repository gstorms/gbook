import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-207e7d61.js";const e={},o=t(`<h1 id="class-consolemessage" tabindex="-1"><a class="header-anchor" href="#class-consolemessage" aria-hidden="true">#</a> class: ConsoleMessage</h1><ul><li>since: v1.8</li></ul><p>[ConsoleMessage] objects are dispatched by page via the [<code>event: Page.console</code>] event.<br> For each console messages logged in the page there will be corresponding event in the Playwright<br> context.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Listen for all console logs</span>
page<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;console&#39;</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// Listen for all console events and handle errors</span>
page<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;console&#39;</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error text: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get the next console log</span>
<span class="token keyword">const</span> msgPromise <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">waitForEvent</span><span class="token punctuation">(</span><span class="token string">&#39;console&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Issue console.log inside the page</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token keyword">await</span> msgPromise<span class="token punctuation">;</span>

<span class="token comment">// Deconstruct console log arguments</span>
<span class="token keyword">await</span> msg<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
<span class="token keyword">await</span> msg<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Listen for all console messages and print them to the standard output.</span>
page<span class="token punctuation">.</span><span class="token function">onConsoleMessage</span><span class="token punctuation">(</span>msg <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Listen for all console messages and print errors to the standard output.</span>
page<span class="token punctuation">.</span><span class="token function">onConsoleMessage</span><span class="token punctuation">(</span>msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error text: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get the next console message</span>
<span class="token class-name">ConsoleMessage</span> msg <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">waitForConsoleMessage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Issue console.log inside the page</span>
  page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;console.log(&#39;hello&#39;, 42, { foo: &#39;bar&#39; });&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Deconstruct console.log arguments</span>
msg<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>
msg<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jsonValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Listen for all console logs</span>
page<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> msg<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Listen for all console events and handle errors</span>
page<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> msg<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;error: </span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">if</span> msg<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">&quot;error&quot;</span> <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span>

<span class="token comment"># Get the next console log</span>
<span class="token keyword">async</span> <span class="token keyword">with</span> page<span class="token punctuation">.</span>expect_console_message<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> msg_info<span class="token punctuation">:</span>
    <span class="token comment"># Issue console.log inside the page</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;console.log(&#39;hello&#39;, 42, { foo: &#39;bar&#39; })&quot;</span><span class="token punctuation">)</span>
msg <span class="token operator">=</span> <span class="token keyword">await</span> msg_info<span class="token punctuation">.</span>value

<span class="token comment"># Deconstruct print arguments</span>
<span class="token keyword">await</span> msg<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>json_value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># hello</span>
<span class="token keyword">await</span> msg<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>json_value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Listen for all console logs</span>
page<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> msg<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Listen for all console events and handle errors</span>
page<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">&quot;console&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> msg<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;error: </span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">if</span> msg<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">&quot;error&quot;</span> <span class="token keyword">else</span> <span class="token boolean">None</span><span class="token punctuation">)</span>

<span class="token comment"># Get the next console log</span>
<span class="token keyword">with</span> page<span class="token punctuation">.</span>expect_console_message<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> msg_info<span class="token punctuation">:</span>
    <span class="token comment"># Issue console.log inside the page</span>
    page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;console.log(&#39;hello&#39;, 42, { foo: &#39;bar&#39; })&quot;</span><span class="token punctuation">)</span>
msg <span class="token operator">=</span> msg_info<span class="token punctuation">.</span>value

<span class="token comment"># Deconstruct print arguments</span>
msg<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>json_value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># hello</span>
msg<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>json_value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Listen for all console messages and print them to the standard output.</span>
page<span class="token punctuation">.</span>Console <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Listen for all console messages and print errors to the standard output.</span>
page<span class="token punctuation">.</span>Console <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Error text: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Get the next console message</span>
<span class="token class-name"><span class="token keyword">var</span></span> waitForMessageTask <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">WaitForConsoleMessageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;console.log(&#39;hello&#39;, 42, { foo: &#39;bar&#39; });&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token keyword">await</span> waitForMessageTask<span class="token punctuation">;</span>
<span class="token comment">// Deconstruct console.log arguments</span>
<span class="token keyword">await</span> message<span class="token punctuation">.</span>Args<span class="token punctuation">.</span><span class="token function">ElementAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">JsonValueAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
<span class="token keyword">await</span> message<span class="token punctuation">.</span>Args<span class="token punctuation">.</span><span class="token function">ElementAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">JsonValueAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-consolemessage-args" tabindex="-1"><a class="header-anchor" href="#method-consolemessage-args" aria-hidden="true">#</a> method: ConsoleMessage.args</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[Array]&lt;[JSHandle]&gt;&gt;</li></ul><p>List of arguments passed to a <code>console</code> function call. See also [<code>event: Page.console</code>].</p><h2 id="method-consolemessage-location" tabindex="-1"><a class="header-anchor" href="#method-consolemessage-location" aria-hidden="true">#</a> method: ConsoleMessage.location</h2><ul><li>since: v1.8</li><li>langs: js, python</li></ul><ul><li>returns: &lt;[Object]&gt; <ul><li><code>url</code> &lt;[string]&gt; URL of the resource.</li><li><code>lineNumber</code> &lt;[int]&gt; 0-based line number in the resource.</li><li><code>columnNumber</code> &lt;[int]&gt; 0-based column number in the resource.</li></ul></li></ul><h2 id="method-consolemessage-location-1" tabindex="-1"><a class="header-anchor" href="#method-consolemessage-location-1" aria-hidden="true">#</a> method: ConsoleMessage.location</h2><ul><li>since: v1.8</li><li>langs: csharp, java</li></ul><ul><li>returns: &lt;[string]&gt;</li></ul><p>URL of the resource followed by 0-based line and column numbers in the resource formatted as <code>URL:line:column</code>.</p><h2 id="method-consolemessage-text" tabindex="-1"><a class="header-anchor" href="#method-consolemessage-text" aria-hidden="true">#</a> method: ConsoleMessage.text</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[string]&gt;</li></ul><p>The text of the console message.</p><h2 id="method-consolemessage-type" tabindex="-1"><a class="header-anchor" href="#method-consolemessage-type" aria-hidden="true">#</a> method: ConsoleMessage.type</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[string]&gt;</li></ul><p>One of the following values: <code>&#39;log&#39;</code>, <code>&#39;debug&#39;</code>, <code>&#39;info&#39;</code>, <code>&#39;error&#39;</code>, <code>&#39;warning&#39;</code>, <code>&#39;dir&#39;</code>, <code>&#39;dirxml&#39;</code>, <code>&#39;table&#39;</code>,<br><code>&#39;trace&#39;</code>, <code>&#39;clear&#39;</code>, <code>&#39;startGroup&#39;</code>, <code>&#39;startGroupCollapsed&#39;</code>, <code>&#39;endGroup&#39;</code>, <code>&#39;assert&#39;</code>, <code>&#39;profile&#39;</code>, <code>&#39;profileEnd&#39;</code>,<br><code>&#39;count&#39;</code>, <code>&#39;timeEnd&#39;</code>.</p>`,27),p=[o];function c(l,u){return s(),a("div",null,p)}const r=n(e,[["render",c],["__file","class-consolemessage.html.vue"]]);export{r as default};
