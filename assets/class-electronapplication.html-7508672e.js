import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,f as s}from"./app-207e7d61.js";const t={},o=s(`<h1 id="class-electronapplication" tabindex="-1"><a class="header-anchor" href="#class-electronapplication" aria-hidden="true">#</a> class: ElectronApplication</h1><ul><li>since: v1.9</li><li>langs: js</li></ul><p>Electron application representation. You can use [<code>method: Electron.launch</code>] to<br> obtain the application instance. This instance you can control main electron process<br> as well as work with Electron windows:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">_electron</span><span class="token operator">:</span> electron <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;playwright&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Launch Electron app.</span>
  <span class="token keyword">const</span> electronApp <span class="token operator">=</span> <span class="token keyword">await</span> electron<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;main.js&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Evaluation expression in the Electron context.</span>
  <span class="token keyword">const</span> appPath <span class="token operator">=</span> <span class="token keyword">await</span> electronApp<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> app <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// This runs in the main Electron process, parameter here is always</span>
    <span class="token comment">// the result of the require(&#39;electron&#39;) in the main app script.</span>
    <span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token function">getAppPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Get the first window that the app opens, wait if necessary.</span>
  <span class="token keyword">const</span> window <span class="token operator">=</span> <span class="token keyword">await</span> electronApp<span class="token punctuation">.</span><span class="token function">firstWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Print the title.</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Capture a screenshot.</span>
  <span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;intro.png&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Direct Electron console to Node terminal.</span>
  window<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;console&#39;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Click button.</span>
  <span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;text=Click me&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Exit app.</span>
  <span class="token keyword">await</span> electronApp<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-electronapplication-close" tabindex="-1"><a class="header-anchor" href="#event-electronapplication-close" aria-hidden="true">#</a> event: ElectronApplication.close</h2><ul><li>since: v1.9</li></ul><p>This event is issued when the application closes.</p><h2 id="event-electronapplication-window" tabindex="-1"><a class="header-anchor" href="#event-electronapplication-window" aria-hidden="true">#</a> event: ElectronApplication.window</h2><ul><li>since: v1.9</li></ul><ul><li>argument: &lt;[Page]&gt;</li></ul><p>This event is issued for every window that is created <strong>and loaded</strong> in Electron. It contains a [Page] that can<br> be used for Playwright automation.</p><h2 id="async-method-electronapplication-browserwindow" tabindex="-1"><a class="header-anchor" href="#async-method-electronapplication-browserwindow" aria-hidden="true">#</a> async method: ElectronApplication.browserWindow</h2><ul><li>since: v1.11</li></ul><ul><li>returns: &lt;[JSHandle]&gt;</li></ul><p>Returns the BrowserWindow object that corresponds to the given Playwright page.</p><h3 id="param-electronapplication-browserwindow-page" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-browserwindow-page" aria-hidden="true">#</a> param: ElectronApplication.browserWindow.page</h3><ul><li>since: v1.11</li></ul><ul><li><code>page</code> &lt;[Page]&gt;</li></ul><p>Page to retrieve the window for.</p><h2 id="async-method-electronapplication-close" tabindex="-1"><a class="header-anchor" href="#async-method-electronapplication-close" aria-hidden="true">#</a> async method: ElectronApplication.close</h2><ul><li>since: v1.9</li></ul><p>Closes Electron application.</p><h2 id="method-electronapplication-context" tabindex="-1"><a class="header-anchor" href="#method-electronapplication-context" aria-hidden="true">#</a> method: ElectronApplication.context</h2><ul><li>since: v1.9</li></ul><ul><li>returns: &lt;[BrowserContext]&gt;</li></ul><p>This method returns browser context that can be used for setting up context-wide routing, etc.</p><h2 id="async-method-electronapplication-evaluate" tabindex="-1"><a class="header-anchor" href="#async-method-electronapplication-evaluate" aria-hidden="true">#</a> async method: ElectronApplication.evaluate</h2><ul><li>since: v1.9</li></ul><ul><li>returns: &lt;[Serializable]&gt;</li></ul><p>Returns the return value of [<code>param: expression</code>].</p><p>If the function passed to the [<code>method: ElectronApplication.evaluate</code>] returns a [Promise], then<br> [<code>method: ElectronApplication.evaluate</code>] would wait for the promise to resolve and return its value.</p><p>If the function passed to the [<code>method: ElectronApplication.evaluate</code>] returns a non-[Serializable] value, then<br> [<code>method: ElectronApplication.evaluate</code>] returns <code>undefined</code>. Playwright also supports transferring<br> some additional values that are not serializable by <code>JSON</code>: <code>-0</code>, <code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>.</p><h3 id="param-electronapplication-evaluate-expression-evaluate-expression" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-evaluate-expression-evaluate-expression" aria-hidden="true">#</a> param: ElectronApplication.evaluate.expression = %%-evaluate-expression-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-electronapplication-evaluate-expression-js-electron-evaluate-workerfunction" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-evaluate-expression-js-electron-evaluate-workerfunction" aria-hidden="true">#</a> param: ElectronApplication.evaluate.expression = %%-js-electron-evaluate-workerfunction-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-electronapplication-evaluate-arg" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-evaluate-arg" aria-hidden="true">#</a> param: ElectronApplication.evaluate.arg</h3><ul><li>since: v1.9</li></ul><ul><li><code>arg</code> ?&lt;[EvaluationArgument]&gt;</li></ul><p>Optional argument to pass to [<code>param: expression</code>].</p><h2 id="async-method-electronapplication-evaluatehandle" tabindex="-1"><a class="header-anchor" href="#async-method-electronapplication-evaluatehandle" aria-hidden="true">#</a> async method: ElectronApplication.evaluateHandle</h2><ul><li>since: v1.9</li></ul><ul><li>returns: &lt;[JSHandle]&gt;</li></ul><p>Returns the return value of [<code>param: expression</code>] as a [JSHandle].</p><p>The only difference between [<code>method: ElectronApplication.evaluate</code>] and [<code>method: ElectronApplication.evaluateHandle</code>] is that [<code>method: ElectronApplication.evaluateHandle</code>] returns [JSHandle].</p><p>If the function passed to the [<code>method: ElectronApplication.evaluateHandle</code>] returns a [Promise], then<br> [<code>method: ElectronApplication.evaluateHandle</code>] would wait for the promise to resolve and return its value.</p><h3 id="param-electronapplication-evaluatehandle-expression-evaluate-expression" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-evaluatehandle-expression-evaluate-expression" aria-hidden="true">#</a> param: ElectronApplication.evaluateHandle.expression = %%-evaluate-expression-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-electronapplication-evaluatehandle-expression-js-electron-evaluate-workerfunction" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-evaluatehandle-expression-js-electron-evaluate-workerfunction" aria-hidden="true">#</a> param: ElectronApplication.evaluateHandle.expression = %%-js-electron-evaluate-workerfunction-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-electronapplication-evaluatehandle-arg" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-evaluatehandle-arg" aria-hidden="true">#</a> param: ElectronApplication.evaluateHandle.arg</h3><ul><li>since: v1.9</li></ul><ul><li><code>arg</code> ?&lt;[EvaluationArgument]&gt;</li></ul><p>Optional argument to pass to [<code>param: expression</code>].</p><h2 id="async-method-electronapplication-firstwindow" tabindex="-1"><a class="header-anchor" href="#async-method-electronapplication-firstwindow" aria-hidden="true">#</a> async method: ElectronApplication.firstWindow</h2><ul><li>since: v1.9</li></ul><ul><li>returns: &lt;[Page]&gt;</li></ul><p>Convenience method that waits for the first application window to be opened.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> electronApp <span class="token operator">=</span> <span class="token keyword">await</span> electron<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;main.js&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> window <span class="token operator">=</span> <span class="token keyword">await</span> electronApp<span class="token punctuation">.</span><span class="token function">firstWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-electronapplication-process" tabindex="-1"><a class="header-anchor" href="#method-electronapplication-process" aria-hidden="true">#</a> method: ElectronApplication.process</h2><ul><li>since: v1.21</li></ul><ul><li>returns: &lt;[ChildProcess]&gt;</li></ul><p>Returns the main process for this Electron Application.</p><h2 id="async-method-electronapplication-waitforevent" tabindex="-1"><a class="header-anchor" href="#async-method-electronapplication-waitforevent" aria-hidden="true">#</a> async method: ElectronApplication.waitForEvent</h2><ul><li>since: v1.9</li></ul><ul><li>returns: &lt;[any]&gt;</li></ul><p>Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy value. Will throw an error if the application is closed before the event is fired. Returns the event data value.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> windowPromise <span class="token operator">=</span> electronApp<span class="token punctuation">.</span><span class="token function">waitForEvent</span><span class="token punctuation">(</span><span class="token string">&#39;window&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> mainWindow<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> window <span class="token operator">=</span> <span class="token keyword">await</span> windowPromise<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-electronapplication-waitforevent-event-wait-for-event-event" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-waitforevent-event-wait-for-event-event" aria-hidden="true">#</a> param: ElectronApplication.waitForEvent.event = %%-wait-for-event-event-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-electronapplication-waitforevent-optionsorpredicate" tabindex="-1"><a class="header-anchor" href="#param-electronapplication-waitforevent-optionsorpredicate" aria-hidden="true">#</a> param: ElectronApplication.waitForEvent.optionsOrPredicate</h3><ul><li>since: v1.9</li><li>langs: js</li></ul><ul><li><code>optionsOrPredicate</code> ?&lt;[function]|[Object]&gt; <ul><li><code>predicate</code> &lt;[function]&gt; receives the event data and resolves to truthy value when the waiting should resolve.</li><li><code>timeout</code> ?&lt;[float]&gt; maximum time to wait for in milliseconds. Defaults to <code>30000</code> (30 seconds). Pass <code>0</code> to<br> disable timeout. The default value can be changed by using the [<code>method: BrowserContext.setDefaultTimeout</code>].</li></ul></li></ul><p>Either a predicate that receives an event or an options object. Optional.</p><h2 id="method-electronapplication-windows" tabindex="-1"><a class="header-anchor" href="#method-electronapplication-windows" aria-hidden="true">#</a> method: ElectronApplication.windows</h2><ul><li>since: v1.9</li></ul><ul><li>returns: &lt;[Array]&lt;[Page]&gt;&gt;</li></ul><p>Convenience method that returns all the opened windows.</p>`,80),i=[o];function p(l,c){return a(),e("div",null,i)}const d=n(t,[["render",p],["__file","class-electronapplication.html.vue"]]);export{d as default};
