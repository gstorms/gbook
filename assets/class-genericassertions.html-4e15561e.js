import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-207e7d61.js";const t={},o=e(`<h1 id="class-genericassertions" tabindex="-1"><a class="header-anchor" href="#class-genericassertions" aria-hidden="true">#</a> class: GenericAssertions</h1><ul><li>since: v1.9</li><li>langs: js</li></ul><p>The [GenericAssertions] class provides assertion methods that can be used to make assertions about any values in the tests. A new instance of [GenericAssertions] is created by calling [<code>method: PlaywrightAssertions.expectGeneric</code>]:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;assert a value&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="property-genericassertions-not" tabindex="-1"><a class="header-anchor" href="#property-genericassertions-not" aria-hidden="true">#</a> property: GenericAssertions.not</h2><ul><li>since: v1.9</li></ul><ul><li>returns: &lt;[GenericAssertions]&gt;</li></ul><p>Makes the assertion check for the opposite condition. For example, the following code passes:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-genericassertions-tobe" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobe" aria-hidden="true">#</a> method: GenericAssertions.toBe</h2><ul><li>since: v1.9</li></ul><p>Compares value with [<code>param: expected</code>] by calling <code>Object.is</code>. This method compares objects by reference instead of their contents, similarly to the strict equality operator <code>===</code>.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tobe-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobe-expected" aria-hidden="true">#</a> param: GenericAssertions.toBe.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[any]&gt;</li></ul><p>Expected value.</p><h2 id="method-genericassertions-tobecloseto" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobecloseto" aria-hidden="true">#</a> method: GenericAssertions.toBeCloseTo</h2><ul><li>since: v1.9</li></ul><p>Compares floating point numbers for approximate equality. Use this method instead of [<code>method: GenericAssertions.toBe</code>] when comparing floating point numbers.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tobecloseto-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobecloseto-expected" aria-hidden="true">#</a> param: GenericAssertions.toBeCloseTo.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[float]&gt;</li></ul><p>Expected value.</p><h3 id="param-genericassertions-tobecloseto-numdigits" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobecloseto-numdigits" aria-hidden="true">#</a> param: GenericAssertions.toBeCloseTo.numDigits</h3><ul><li>since: v1.9</li></ul><ul><li><code>numDigits</code> ?&lt;[int]&gt;</li></ul><p>The number of decimal digits after the decimal point that must be equal.</p><h2 id="method-genericassertions-tobedefined" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobedefined" aria-hidden="true">#</a> method: GenericAssertions.toBeDefined</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is not <code>undefined</code>.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-genericassertions-tobefalsy" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobefalsy" aria-hidden="true">#</a> method: GenericAssertions.toBeFalsy</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is false in a boolean context, one of <code>false</code>, <code>0</code>, <code>&#39;&#39;</code>, <code>null</code>, <code>undefined</code> or <code>NaN</code>. Use this method when you don&#39;t care about the specific value.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-genericassertions-tobegreaterthan" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobegreaterthan" aria-hidden="true">#</a> method: GenericAssertions.toBeGreaterThan</h2><ul><li>since: v1.9</li></ul><p>Ensures that <code>value &gt; expected</code> for number or big integer values.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tobegreaterthan-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobegreaterthan-expected" aria-hidden="true">#</a> param: GenericAssertions.toBeGreaterThan.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[float]|[bigint]&gt;</li></ul><p>The value to compare to.</p><h2 id="method-genericassertions-tobegreaterthanorequal" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobegreaterthanorequal" aria-hidden="true">#</a> method: GenericAssertions.toBeGreaterThanOrEqual</h2><ul><li>since: v1.9</li></ul><p>Ensures that <code>value &gt;= expected</code> for number or big integer values.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tobegreaterthanorequal-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobegreaterthanorequal-expected" aria-hidden="true">#</a> param: GenericAssertions.toBeGreaterThanOrEqual.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[float]|[bigint]&gt;</li></ul><p>The value to compare to.</p><h2 id="method-genericassertions-tobeinstanceof" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobeinstanceof" aria-hidden="true">#</a> method: GenericAssertions.toBeInstanceOf</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is an instance of a class. Uses <code>instanceof</code> operator.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInstanceOf</span><span class="token punctuation">(</span>Page<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInstanceOf</span><span class="token punctuation">(</span>Example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tobeinstanceof-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobeinstanceof-expected" aria-hidden="true">#</a> param: GenericAssertions.toBeInstanceOf.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[Function]&gt;</li></ul><p>The class or constructor function.</p><h2 id="method-genericassertions-tobelessthan" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobelessthan" aria-hidden="true">#</a> method: GenericAssertions.toBeLessThan</h2><ul><li>since: v1.9</li></ul><p>Ensures that <code>value &lt; expected</code> for number or big integer values.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tobelessthan-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobelessthan-expected" aria-hidden="true">#</a> param: GenericAssertions.toBeLessThan.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[float]|[bigint]&gt;</li></ul><p>The value to compare to.</p><h2 id="method-genericassertions-tobelessthanorequal" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobelessthanorequal" aria-hidden="true">#</a> method: GenericAssertions.toBeLessThanOrEqual</h2><ul><li>since: v1.9</li></ul><p>Ensures that <code>value &lt;= expected</code> for number or big integer values.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThanOrEqual</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tobelessthanorequal-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tobelessthanorequal-expected" aria-hidden="true">#</a> param: GenericAssertions.toBeLessThanOrEqual.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[float]|[bigint]&gt;</li></ul><p>The value to compare to.</p><h2 id="method-genericassertions-tobenan" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobenan" aria-hidden="true">#</a> method: GenericAssertions.toBeNaN</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is <code>NaN</code>.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-genericassertions-tobenull" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobenull" aria-hidden="true">#</a> method: GenericAssertions.toBeNull</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is <code>null</code>.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-genericassertions-tobetruthy" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobetruthy" aria-hidden="true">#</a> method: GenericAssertions.toBeTruthy</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is true in a boolean context, <strong>anything but</strong> <code>false</code>, <code>0</code>, <code>&#39;&#39;</code>, <code>null</code>, <code>undefined</code> or <code>NaN</code>. Use this method when you don&#39;t care about the specific value.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">example</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-genericassertions-tobeundefined" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tobeundefined" aria-hidden="true">#</a> method: GenericAssertions.toBeUndefined</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is <code>undefined</code>.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="method-genericassertions-tocontain-1" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tocontain-1" aria-hidden="true">#</a> method: GenericAssertions.toContain#1</h2><ul><li>since: v1.9</li></ul><p>Ensures that string value contains an expected substring. Comparison is case-sensitive.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">&#39;Hello, World&#39;</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tocontain-1-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tocontain-1-expected" aria-hidden="true">#</a> param: GenericAssertions.toContain#1.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[string]&gt;</li></ul><p>Expected substring.</p><h2 id="method-genericassertions-tocontain-2" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tocontain-2" aria-hidden="true">#</a> method: GenericAssertions.toContain#2</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is an <code>Array</code> or <code>Set</code> and contains an expected item.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tocontain-2-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tocontain-2-expected" aria-hidden="true">#</a> param: GenericAssertions.toContain#2.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[any]&gt;</li></ul><p>Expected value in the collection.</p><h2 id="method-genericassertions-tocontainequal" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tocontainequal" aria-hidden="true">#</a> method: GenericAssertions.toContainEqual</h2><ul><li>since: v1.9</li></ul><p>Ensures that value is an <code>Array</code> or <code>Set</code> and contains an item equal to the expected.</p><p>For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by [<code>method: GenericAssertions.toContain#2</code>].</p><p>For primitive values, this method is equivalent to [<code>method: GenericAssertions.toContain#2</code>].</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">example</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">another</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">more</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">another</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">another</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tocontainequal-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tocontainequal-expected" aria-hidden="true">#</a> param: GenericAssertions.toContainEqual.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[any]&gt;</li></ul><p>Expected value in the collection.</p><h2 id="method-genericassertions-toequal" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-toequal" aria-hidden="true">#</a> method: GenericAssertions.toEqual</h2><ul><li>since: v1.9</li></ul><p>Compares contents of the value with contents of [<code>param: expected</code>], performing &quot;deep equality&quot; check.</p><p>For objects, this method recursively checks equality of all fields, rather than comparing objects by reference as performed by [<code>method: GenericAssertions.toBe</code>].</p><p>For primitive values, this method is equivalent to [<code>method: GenericAssertions.toBe</code>].</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-toequal-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-toequal-expected" aria-hidden="true">#</a> param: GenericAssertions.toEqual.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[any]&gt;</li></ul><p>Expected value.</p><h2 id="method-genericassertions-tohavelength" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tohavelength" aria-hidden="true">#</a> method: GenericAssertions.toHaveLength</h2><ul><li>since: v1.9</li></ul><p>Ensures that value has a <code>.length</code> property equal to [<code>param: expected</code>]. Useful for arrays and strings.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tohavelength-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tohavelength-expected" aria-hidden="true">#</a> param: GenericAssertions.toHaveLength.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[int]&gt;</li></ul><p>Expected length.</p><h2 id="method-genericassertions-tohaveproperty" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tohaveproperty" aria-hidden="true">#</a> method: GenericAssertions.toHaveProperty</h2><ul><li>since: v1.9</li></ul><p>Ensures that property at provided <code>keyPath</code> exists on the object and optionally checks that property is equal to the [<code>param: expected</code>]. Equality is checked recursively, similarly to [<code>method: GenericAssertions.toEqual</code>].</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">&#39;a.b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">&#39;a.b&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">&#39;a.b[0]&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveProperty</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tohaveproperty-keypath" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tohaveproperty-keypath" aria-hidden="true">#</a> param: GenericAssertions.toHaveProperty.keyPath</h3><ul><li>since: v1.9</li></ul><ul><li><code>keyPath</code> &lt;[string]&gt;</li></ul><p>Path to the property. Use dot notation <code>a.b</code> to check nested properties and indexed <code>a[2]</code> notation to check nested array items.</p><h3 id="param-genericassertions-tohaveproperty-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tohaveproperty-expected" aria-hidden="true">#</a> param: GenericAssertions.toHaveProperty.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> ?&lt;[any]&gt;</li></ul><p>Optional expected value to compare the property to.</p><h2 id="method-genericassertions-tomatch" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tomatch" aria-hidden="true">#</a> method: GenericAssertions.toMatch</h2><ul><li>since: v1.9</li></ul><p>Ensures that string value matches a regular expression.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">&#39;Is 42 enough?&#39;</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Is \\d+ enough</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tomatch-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tomatch-expected" aria-hidden="true">#</a> param: GenericAssertions.toMatch.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[RegExp]&gt;</li></ul><p>Regular expression to match against.</p><h2 id="method-genericassertions-tomatchobject" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tomatchobject" aria-hidden="true">#</a> method: GenericAssertions.toMatchObject</h2><ul><li>since: v1.9</li></ul><p>Compares contents of the value with contents of [<code>param: expected</code>], performing &quot;deep equality&quot; check. Allows extra properties to be present in the value, unlike [<code>method: GenericAssertions.toEqual</code>], so you can check just a subset of object properties.</p><p>When comparing arrays, the number of items must match, and each item is checked recursively.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tomatchobject-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tomatchobject-expected" aria-hidden="true">#</a> param: GenericAssertions.toMatchObject.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[Object]|[Array]&gt;</li></ul><p>The expected object value to match against.</p><h2 id="method-genericassertions-tostrictequal" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tostrictequal" aria-hidden="true">#</a> method: GenericAssertions.toStrictEqual</h2><ul><li>since: v1.9</li></ul><p>Compares contents of the value with contents of [<code>param: expected</code>] <strong>and</strong> their types.</p><p>Differences from [<code>method: GenericAssertions.toEqual</code>]:</p><ul><li>Keys with undefined properties are checked. For example, <code>{ a: undefined, b: 2 }</code> does not match <code>{ b: 2 }</code>.</li><li>Array sparseness is checked. For example, <code>[, 1]</code> does not match <code>[undefined, 1]</code>.</li><li>Object types are checked to be equal. For example, a class instance with fields <code>a</code> and <code>b</code> will not equal a literal object with fields <code>a</code> and <code>b</code>.</li></ul><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tostrictequal-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tostrictequal-expected" aria-hidden="true">#</a> param: GenericAssertions.toStrictEqual.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> &lt;[any]&gt;</li></ul><p>Expected value.</p><h2 id="method-genericassertions-tothrow" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tothrow" aria-hidden="true">#</a> method: GenericAssertions.toThrow</h2><ul><li>since: v1.9</li></ul><p>Calls the function and ensures it throws an error.</p><p>Optionally compares the error with [<code>param: expected</code>]. Allowed expected values:</p><ul><li>Regular expression - error message should <strong>match</strong> the pattern.</li><li>String - error message should <strong>include</strong> the substring.</li><li>Error object - error message should be <strong>equal to</strong> the message property of the object.</li><li>Error class - error object should be an <strong>instance of</strong> the class.</li></ul><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Something bad&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Something bad&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">something</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Something bad&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tothrow-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tothrow-expected" aria-hidden="true">#</a> param: GenericAssertions.toThrow.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> ?&lt;[any]&gt;</li></ul><p>Expected error message or error object.</p><h2 id="method-genericassertions-tothrowerror" tabindex="-1"><a class="header-anchor" href="#method-genericassertions-tothrowerror" aria-hidden="true">#</a> method: GenericAssertions.toThrowError</h2><ul><li>since: v1.9</li></ul><p>An alias for [<code>method: GenericAssertions.toThrow</code>].</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Something bad&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrowError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="param-genericassertions-tothrowerror-expected" tabindex="-1"><a class="header-anchor" href="#param-genericassertions-tothrowerror-expected" aria-hidden="true">#</a> param: GenericAssertions.toThrowError.expected</h3><ul><li>since: v1.9</li></ul><ul><li><code>expected</code> ?&lt;[any]&gt;</li></ul><p>Expected error message or error object.</p>`,218),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","class-genericassertions.html.vue"]]);export{d as default};
