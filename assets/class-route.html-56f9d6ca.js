import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as p,a as c,b as n,d as u,w as l,f as s}from"./app-3f278ba4.js";const i={},r=s('<h1 id="class-route" tabindex="-1"><a class="header-anchor" href="#class-route" aria-hidden="true">#</a> class: Route</h1><ul><li>since: v1.8</li></ul><p>Whenever a network route is set up with [<code>method: Page.route</code>] or [<code>method: BrowserContext.route</code>], the <code>Route</code> object<br> allows to handle the route.</p>',3),d=s(`<h2 id="async-method-route-abort" tabindex="-1"><a class="header-anchor" href="#async-method-route-abort" aria-hidden="true">#</a> async method: Route.abort</h2><ul><li>since: v1.8</li></ul><p>Aborts the route&#39;s request.</p><h3 id="param-route-abort-errorcode" tabindex="-1"><a class="header-anchor" href="#param-route-abort-errorcode" aria-hidden="true">#</a> param: Route.abort.errorCode</h3><ul><li>since: v1.8</li></ul><ul><li><code>errorCode</code> ?&lt;[string]&gt;</li></ul><p>Optional error code. Defaults to <code>failed</code>, could be one of the following:</p><ul><li><code>&#39;aborted&#39;</code> - An operation was aborted (due to user action)</li><li><code>&#39;accessdenied&#39;</code> - Permission to access a resource, other than the network, was denied</li><li><code>&#39;addressunreachable&#39;</code> - The IP address is unreachable. This usually means that there is no route to the specified<br> host or network.</li><li><code>&#39;blockedbyclient&#39;</code> - The client chose to block the request.</li><li><code>&#39;blockedbyresponse&#39;</code> - The request failed because the response was delivered along with requirements which are not<br> met (&#39;X-Frame-Options&#39; and &#39;Content-Security-Policy&#39; ancestor checks, for instance).</li><li><code>&#39;connectionaborted&#39;</code> - A connection timed out as a result of not receiving an ACK for data sent.</li><li><code>&#39;connectionclosed&#39;</code> - A connection was closed (corresponding to a TCP FIN).</li><li><code>&#39;connectionfailed&#39;</code> - A connection attempt failed.</li><li><code>&#39;connectionrefused&#39;</code> - A connection attempt was refused.</li><li><code>&#39;connectionreset&#39;</code> - A connection was reset (corresponding to a TCP RST).</li><li><code>&#39;internetdisconnected&#39;</code> - The Internet connection has been lost.</li><li><code>&#39;namenotresolved&#39;</code> - The host name could not be resolved.</li><li><code>&#39;timedout&#39;</code> - An operation timed out.</li><li><code>&#39;failed&#39;</code> - A generic failure occurred.</li></ul><h2 id="async-method-route-continue" tabindex="-1"><a class="header-anchor" href="#async-method-route-continue" aria-hidden="true">#</a> async method: Route.continue</h2><ul><li>since: v1.8</li><li>langs: <ul><li>alias-java: resume</li><li>alias-python: continue_</li></ul></li></ul><p>Continues route&#39;s request with optional overrides.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">route<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Override headers</span>
  <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>request<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo-value&#39;</span><span class="token punctuation">,</span> <span class="token comment">// set &quot;foo&quot; header</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// remove &quot;bar&quot; header</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  route<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>headers<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Override headers</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo-value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set &quot;foo&quot; header</span>
  headers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// remove &quot;bar&quot; header</span>
  route<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Route<span class="token punctuation">.</span>ResumeOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># override headers</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token operator">**</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
        <span class="token string">&quot;foo&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo-value&quot;</span> <span class="token comment"># set &quot;foo&quot; header</span>
        <span class="token string">&quot;bar&quot;</span><span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># remove &quot;bar&quot; header</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span>continue_<span class="token punctuation">(</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># override headers</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token operator">**</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
        <span class="token string">&quot;foo&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo-value&quot;</span> <span class="token comment"># set &quot;foo&quot; header</span>
        <span class="token string">&quot;bar&quot;</span><span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># remove &quot;bar&quot; header</span>
    <span class="token punctuation">}</span>
    route<span class="token punctuation">.</span>continue_<span class="token punctuation">(</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>

page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">&quot;origin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    route<span class="token punctuation">.</span><span class="token function">ContinueAsync</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Details</strong></p><p>Note that any overrides such as [<code>option: url</code>] or [<code>option: headers</code>] only apply to the request being routed. If this request results in a redirect, overrides will not be applied to the new redirected request. If you want to propagate a header through redirects, use the combination of [<code>method: Route.fetch</code>] and [<code>method: Route.fulfill</code>] instead.</p><h3 id="option-route-continue-url" tabindex="-1"><a class="header-anchor" href="#option-route-continue-url" aria-hidden="true">#</a> option: Route.continue.url</h3><ul><li>since: v1.8</li></ul><ul><li><code>url</code> &lt;[string]&gt;</li></ul><p>If set changes the request URL. New URL must have same protocol as original one.</p><h3 id="option-route-continue-method" tabindex="-1"><a class="header-anchor" href="#option-route-continue-method" aria-hidden="true">#</a> option: Route.continue.method</h3><ul><li>since: v1.8</li></ul><ul><li><code>method</code> &lt;[string]&gt;</li></ul><p>If set changes the request method (e.g. GET or POST).</p><h3 id="option-route-continue-postdata" tabindex="-1"><a class="header-anchor" href="#option-route-continue-postdata" aria-hidden="true">#</a> option: Route.continue.postData</h3><ul><li>since: v1.8</li><li>langs: js, python</li></ul><ul><li><code>postData</code> &lt;[string]|[Buffer]|[Serializable]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-continue-postdata-1" tabindex="-1"><a class="header-anchor" href="#option-route-continue-postdata-1" aria-hidden="true">#</a> option: Route.continue.postData</h3><ul><li>since: v1.8</li><li>langs: java</li></ul><ul><li><code>postData</code> &lt;[string]|[Buffer]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-continue-postdata-2" tabindex="-1"><a class="header-anchor" href="#option-route-continue-postdata-2" aria-hidden="true">#</a> option: Route.continue.postData</h3><ul><li>since: v1.8</li><li>langs: csharp</li></ul><ul><li><code>postData</code> &lt;[Buffer]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-continue-headers" tabindex="-1"><a class="header-anchor" href="#option-route-continue-headers" aria-hidden="true">#</a> option: Route.continue.headers</h3><ul><li>since: v1.8</li></ul><ul><li><code>headers</code> &lt;[Object]&lt;[string], [string]&gt;&gt;</li></ul><p>If set changes the request HTTP headers. Header values will be converted to a string.</p><h2 id="async-method-route-fallback" tabindex="-1"><a class="header-anchor" href="#async-method-route-fallback" aria-hidden="true">#</a> async method: Route.fallback</h2><ul><li>since: v1.23</li></ul><p>When several routes match the given pattern, they run in the order opposite to their registration.<br> That way the last registered route can always override all the previous ones. In the example below,<br> request will be handled by the bottom-most handler first, then it&#39;ll fall back to the previous one and<br> in the end will be aborted by the first registered route.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs last.</span>
  route<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs second.</span>
  route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs first.</span>
  route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs last.</span>
  route<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs second.</span>
  route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs first.</span>
  route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Runs last.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Runs second.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Runs first.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>abort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Runs last.</span>
page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Runs second.</span>
page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Runs first.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Runs last.</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">AbortAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Runs second.</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">FallbackAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Runs first.</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">FallbackAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Registering multiple routes is useful when you want separate handlers to<br> handle different kinds of requests, for example API calls vs page resources or<br> GET requests vs POST requests as in the example below.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Handle GET requests.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Handling GET only.</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Handle POST requests.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Handling POST only.</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Handle GET requests.</span>
page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Handling GET only.</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Handle POST requests.</span>
page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Handling POST only.</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Handle GET requests.</span>
<span class="token keyword">def</span> <span class="token function">handle_post</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> route<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span>
        route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
  <span class="token comment"># Handling GET only.</span>
  <span class="token comment"># ...</span>

<span class="token comment"># Handle POST requests.</span>
<span class="token keyword">def</span> <span class="token function">handle_post</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> route<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">:</span>
        route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
  <span class="token comment"># Handling POST only.</span>
  <span class="token comment"># ...</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle_get<span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle_post<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Handle GET requests.</span>
<span class="token keyword">def</span> <span class="token function">handle_post</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> route<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span>
        route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
  <span class="token comment"># Handling GET only.</span>
  <span class="token comment"># ...</span>

<span class="token comment"># Handle POST requests.</span>
<span class="token keyword">def</span> <span class="token function">handle_post</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> route<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">:</span>
        route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
  <span class="token comment"># Handling POST only.</span>
  <span class="token comment"># ...</span>

page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle_get<span class="token punctuation">)</span>
page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle_post<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Handle GET requests.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method <span class="token operator">!=</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">FallbackAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Handling GET only.</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Handle POST requests.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method <span class="token operator">!=</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">FallbackAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Handling POST only.</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One can also modify request while falling back to the subsequent handler, that way intermediate<br> route handler can modify url, method, headers and postData of the request.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">route<span class="token punctuation">,</span> request</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Override headers</span>
  <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>request<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;foo-value&#39;</span><span class="token punctuation">,</span> <span class="token comment">// set &quot;foo&quot; header</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// remove &quot;bar&quot; header</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>headers<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Override headers</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo-value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set &quot;foo&quot; header</span>
  headers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// remove &quot;bar&quot; header</span>
  route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Route<span class="token punctuation">.</span>ResumeOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># override headers</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token operator">**</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
        <span class="token string">&quot;foo&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo-value&quot;</span> <span class="token comment"># set &quot;foo&quot; header</span>
        <span class="token string">&quot;bar&quot;</span><span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># remove &quot;bar&quot; header</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># override headers</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token operator">**</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>
        <span class="token string">&quot;foo&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;foo-value&quot;</span> <span class="token comment"># set &quot;foo&quot; header</span>
        <span class="token string">&quot;bar&quot;</span><span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># remove &quot;bar&quot; header</span>
    <span class="token punctuation">}</span>
    route<span class="token punctuation">.</span>fallback<span class="token punctuation">(</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>

page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo-value&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    route<span class="token punctuation">.</span><span class="token function">FallbackAsync</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="option-route-fallback-url" tabindex="-1"><a class="header-anchor" href="#option-route-fallback-url" aria-hidden="true">#</a> option: Route.fallback.url</h3><ul><li>since: v1.23</li></ul><ul><li><code>url</code> &lt;[string]&gt;</li></ul><p>If set changes the request URL. New URL must have same protocol as original one. Changing the URL won&#39;t<br> affect the route matching, all the routes are matched using the original request URL.</p><h3 id="option-route-fallback-method" tabindex="-1"><a class="header-anchor" href="#option-route-fallback-method" aria-hidden="true">#</a> option: Route.fallback.method</h3><ul><li>since: v1.23</li></ul><ul><li><code>method</code> &lt;[string]&gt;</li></ul><p>If set changes the request method (e.g. GET or POST).</p><h3 id="option-route-fallback-postdata" tabindex="-1"><a class="header-anchor" href="#option-route-fallback-postdata" aria-hidden="true">#</a> option: Route.fallback.postData</h3><ul><li>since: v1.23</li><li>langs: js, python</li></ul><ul><li><code>postData</code> &lt;[string]|[Buffer]|[Serializable]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-fallback-postdata-1" tabindex="-1"><a class="header-anchor" href="#option-route-fallback-postdata-1" aria-hidden="true">#</a> option: Route.fallback.postData</h3><ul><li>since: v1.23</li><li>langs: java</li></ul><ul><li><code>postData</code> &lt;[string]|[Buffer]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-fallback-postdata-2" tabindex="-1"><a class="header-anchor" href="#option-route-fallback-postdata-2" aria-hidden="true">#</a> option: Route.fallback.postData</h3><ul><li>since: v1.23</li><li>langs: csharp</li></ul><ul><li><code>postData</code> &lt;[Buffer]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-fallback-headers" tabindex="-1"><a class="header-anchor" href="#option-route-fallback-headers" aria-hidden="true">#</a> option: Route.fallback.headers</h3><ul><li>since: v1.23</li></ul><ul><li><code>headers</code> &lt;[Object]&lt;[string], [string]&gt;&gt;</li></ul><p>If set changes the request HTTP headers. Header values will be converted to a string.</p><h2 id="async-method-route-fetch" tabindex="-1"><a class="header-anchor" href="#async-method-route-fetch" aria-hidden="true">#</a> async method: Route.fetch</h2><ul><li>since: v1.29</li></ul><ul><li>returns: &lt;[APIResponse]&gt;</li></ul><p>Performs the request and fetches result without fulfilling it, so that the response<br> could be modified and then fulfilled.</p><p><strong>Usage</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;https://dog.ceo/api/breeds/list/all&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  json<span class="token punctuation">.</span>message<span class="token punctuation">[</span><span class="token string">&#39;big_red_dog&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span> response<span class="token punctuation">,</span> json <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;https://dog.ceo/api/breeds/list/all&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token class-name">APIResponse</span> response <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">JsonObject</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JsonObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">JsonObject</span> message <span class="token operator">=</span> itemObj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  message<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;big_red_dog&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Route<span class="token punctuation">.</span>FulfillOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> route<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token punctuation">)</span>
    json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    json<span class="token punctuation">[</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;big_red_dog&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>response<span class="token operator">=</span>response<span class="token punctuation">,</span> json<span class="token operator">=</span>json<span class="token punctuation">)</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;https://dog.ceo/api/breeds/list/all&quot;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> route<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token punctuation">)</span>
    json <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    json<span class="token punctuation">[</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;big_red_dog&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>response<span class="token operator">=</span>response<span class="token punctuation">,</span> json<span class="token operator">=</span>json<span class="token punctuation">)</span>

page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;https://dog.ceo/api/breeds/list/all&quot;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://dog.ceo/api/breeds/list/all&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> route <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">FetchAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">dynamic</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">JsonAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    json<span class="token punctuation">.</span>message<span class="token punctuation">.</span>big_red_dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">FulfillAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Response <span class="token operator">=</span> response<span class="token punctuation">,</span> Json <span class="token operator">=</span> json <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Details</strong></p><p>Note that [<code>option: headers</code>] option will apply to the fetched request as well as any redirects initiated by it. If you want to only apply [<code>option: headers</code>] to the original request, but not to redirects, look into [<code>method: Route.continue</code>] instead.</p><h3 id="option-route-fetch-url" tabindex="-1"><a class="header-anchor" href="#option-route-fetch-url" aria-hidden="true">#</a> option: Route.fetch.url</h3><ul><li>since: v1.29</li></ul><ul><li><code>url</code> &lt;[string]&gt;</li></ul><p>If set changes the request URL. New URL must have same protocol as original one.</p><h3 id="option-route-fetch-maxredirects" tabindex="-1"><a class="header-anchor" href="#option-route-fetch-maxredirects" aria-hidden="true">#</a> option: Route.fetch.maxRedirects</h3><ul><li>since: v1.31</li></ul><ul><li><code>maxRedirects</code> &lt;[int]&gt;</li></ul><p>Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded.<br> Defaults to <code>20</code>. Pass <code>0</code> to not follow redirects.</p><h3 id="option-route-fetch-method" tabindex="-1"><a class="header-anchor" href="#option-route-fetch-method" aria-hidden="true">#</a> option: Route.fetch.method</h3><ul><li>since: v1.29</li></ul><ul><li><code>method</code> &lt;[string]&gt;</li></ul><p>If set changes the request method (e.g. GET or POST).</p><h3 id="option-route-fetch-postdata" tabindex="-1"><a class="header-anchor" href="#option-route-fetch-postdata" aria-hidden="true">#</a> option: Route.fetch.postData</h3><ul><li>langs: js, python</li><li>since: v1.29</li></ul><ul><li><code>postData</code> &lt;[string]|[Buffer]|[Serializable]&gt;</li></ul><p>Allows to set post data of the request. If the data parameter is an object, it will be serialized to json string<br> and <code>content-type</code> header will be set to <code>application/json</code> if not explicitly set. Otherwise the <code>content-type</code> header will be<br> set to <code>application/octet-stream</code> if not explicitly set.</p><h3 id="option-route-fetch-postdata-1" tabindex="-1"><a class="header-anchor" href="#option-route-fetch-postdata-1" aria-hidden="true">#</a> option: Route.fetch.postData</h3><ul><li>langs: java</li><li>since: v1.29</li></ul><ul><li><code>postData</code> &lt;[string]|[Buffer]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-fetch-postdata-2" tabindex="-1"><a class="header-anchor" href="#option-route-fetch-postdata-2" aria-hidden="true">#</a> option: Route.fetch.postData</h3><ul><li>since: v1.29</li><li>langs: csharp</li></ul><ul><li><code>postData</code> &lt;[Buffer]&gt;</li></ul><p>If set changes the post data of request.</p><h3 id="option-route-fetch-headers" tabindex="-1"><a class="header-anchor" href="#option-route-fetch-headers" aria-hidden="true">#</a> option: Route.fetch.headers</h3><ul><li>since: v1.29</li></ul><ul><li><code>headers</code> &lt;[Object]&lt;[string], [string]&gt;&gt;</li></ul><p>If set changes the request HTTP headers. Header values will be converted to a string.</p><h2 id="async-method-route-fulfill" tabindex="-1"><a class="header-anchor" href="#async-method-route-fulfill" aria-hidden="true">#</a> async method: Route.fulfill</h2><ul><li>since: v1.8</li></ul><p>Fulfills route&#39;s request with given response.</p><p><strong>Usage</strong></p><p>An example of fulfilling all requests with 404 responses:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span>
    <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;Not Found!&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Route<span class="token punctuation">.</span>FulfillOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;Not Found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>
    status<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span>
    content_type<span class="token operator">=</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>
    body<span class="token operator">=</span><span class="token string">&quot;not found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>
    status<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span>
    content_type<span class="token operator">=</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>
    body<span class="token operator">=</span><span class="token string">&quot;not found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> route<span class="token punctuation">.</span><span class="token function">FulfillAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Status <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span>
    ContentType <span class="token operator">=</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>
    Body <span class="token operator">=</span> <span class="token string">&quot;Not Found!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An example of serving static file:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/xhr_endpoint&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;mock_data.json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/xhr_endpoint&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">Route<span class="token punctuation">.</span>FulfillOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;mock_data.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/xhr_endpoint&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&quot;mock_data.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&quot;**/xhr_endpoint&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&quot;mock_data.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/xhr_endpoint&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> route<span class="token punctuation">.</span><span class="token function">FulfillAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Path <span class="token operator">=</span> <span class="token string">&quot;mock_data.json&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="option-route-fulfill-status" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-status" aria-hidden="true">#</a> option: Route.fulfill.status</h3><ul><li>since: v1.8</li></ul><ul><li><code>status</code> &lt;[int]&gt;</li></ul><p>Response status code, defaults to <code>200</code>.</p><h3 id="option-route-fulfill-headers" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-headers" aria-hidden="true">#</a> option: Route.fulfill.headers</h3><ul><li>since: v1.8</li></ul><ul><li><code>headers</code> &lt;[Object]&lt;[string], [string]&gt;&gt;</li></ul><p>Response headers. Header values will be converted to a string.</p><h3 id="option-route-fulfill-contenttype" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-contenttype" aria-hidden="true">#</a> option: Route.fulfill.contentType</h3><ul><li>since: v1.8</li></ul><ul><li><code>contentType</code> &lt;[string]&gt;</li></ul><p>If set, equals to setting <code>Content-Type</code> response header.</p><h3 id="option-route-fulfill-body" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-body" aria-hidden="true">#</a> option: Route.fulfill.body</h3><ul><li>since: v1.8</li><li>langs: js, python</li></ul><ul><li><code>body</code> &lt;[string]|[Buffer]&gt;</li></ul><p>Response body.</p><h3 id="option-route-fulfill-body-1" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-body-1" aria-hidden="true">#</a> option: Route.fulfill.body</h3><ul><li>since: v1.8</li><li>langs: csharp, java</li></ul><ul><li><code>body</code> &lt;[string]&gt;</li></ul><p>Optional response body as text.</p><h3 id="option-route-fulfill-bodybytes" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-bodybytes" aria-hidden="true">#</a> option: Route.fulfill.bodyBytes</h3><ul><li>since: v1.9</li><li>langs: csharp, java</li></ul><ul><li><code>bodyBytes</code> &lt;[Buffer]&gt;</li></ul><p>Optional response body as raw bytes.</p><h3 id="option-route-fulfill-json" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-json" aria-hidden="true">#</a> option: Route.fulfill.json</h3><ul><li>since: v1.29</li><li>langs: js, python, csharp</li></ul><ul><li><code>json</code> &lt;[Serializable]&gt;</li></ul><p>JSON response. This method will set the content type to <code>application/json</code> if not set.</p><h3 id="option-route-fulfill-path" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-path" aria-hidden="true">#</a> option: Route.fulfill.path</h3><ul><li>since: v1.8</li></ul><ul><li><code>path</code> &lt;[path]&gt;</li></ul><p>File path to respond with. The content type will be inferred from file extension. If <code>path</code> is a relative path, then it<br> is resolved relative to the current working directory.</p><h3 id="option-route-fulfill-response" tabindex="-1"><a class="header-anchor" href="#option-route-fulfill-response" aria-hidden="true">#</a> option: Route.fulfill.response</h3><ul><li>since: v1.15</li></ul><ul><li><code>response</code> &lt;[APIResponse]&gt;</li></ul><p>[APIResponse] to fulfill route&#39;s request with. Individual fields of the response (such as headers) can be overridden using fulfill options.</p><h2 id="method-route-request" tabindex="-1"><a class="header-anchor" href="#method-route-request" aria-hidden="true">#</a> method: Route.request</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[Request]&gt;</li></ul><p>A request to be routed.</p>`,184);function k(v,m){const a=e("RouterLink");return o(),p("div",null,[r,c("p",null,[n("Learn more about "),u(a,{to:"/book/playwright/network.html"},{default:l(()=>[n("networking")]),_:1}),n(".")]),d])}const g=t(i,[["render",k],["__file","class-route.html.vue"]]);export{g as default};
