import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as u,c as n,a as s,b as t,d as l,w as a,f as e}from"./app-3f278ba4.js";const p={},d=e('<h1 id="class-testresult" tabindex="-1"><a class="header-anchor" href="#class-testresult" aria-hidden="true">#</a> class: TestResult</h1><ul><li>since: v1.10</li><li>langs: js</li></ul><p>A result of a single [TestCase] run.</p><h2 id="property-testresult-attachments" tabindex="-1"><a class="header-anchor" href="#property-testresult-attachments" aria-hidden="true">#</a> property: TestResult.attachments</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[Array]&lt;[Object]&gt;&gt; <ul><li><code>name</code> &lt;[string]&gt; Attachment name.</li><li><code>contentType</code> &lt;[string]&gt; Content type of this attachment to properly present in the report, for example <code>&#39;application/json&#39;</code> or <code>&#39;image/png&#39;</code>.</li><li><code>path</code> ?&lt;[string]&gt; Optional path on the filesystem to the attached file.</li><li><code>body</code> ?&lt;[Buffer]&gt; Optional attachment body used instead of a file.</li></ul></li></ul><p>The list of files or buffers attached during the test execution through [<code>property: TestInfo.attachments</code>].</p><h2 id="property-testresult-duration" tabindex="-1"><a class="header-anchor" href="#property-testresult-duration" aria-hidden="true">#</a> property: TestResult.duration</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[float]&gt;</li></ul><p>Running time in milliseconds.</p><h2 id="property-testresult-error" tabindex="-1"><a class="header-anchor" href="#property-testresult-error" aria-hidden="true">#</a> property: TestResult.error</h2><ul><li>since: v1.10</li></ul><ul><li>type: ?&lt;[TestError]&gt;</li></ul><p>First error thrown during test execution, if any. This is equal to the first<br> element in [<code>property: TestResult.errors</code>].</p><h2 id="property-testresult-errors" tabindex="-1"><a class="header-anchor" href="#property-testresult-errors" aria-hidden="true">#</a> property: TestResult.errors</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[Array]&lt;[TestError]&gt;&gt;</li></ul><p>Errors thrown during the test execution.</p><h2 id="property-testresult-retry" tabindex="-1"><a class="header-anchor" href="#property-testresult-retry" aria-hidden="true">#</a> property: TestResult.retry</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[int]&gt;</li></ul><p>When test is retries multiple times, each retry attempt is given a sequential number.</p>',23),h=e('<h2 id="property-testresult-starttime" tabindex="-1"><a class="header-anchor" href="#property-testresult-starttime" aria-hidden="true">#</a> property: TestResult.startTime</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[Date]&gt;</li></ul><p>Start time of this particular test run.</p><h2 id="property-testresult-status" tabindex="-1"><a class="header-anchor" href="#property-testresult-status" aria-hidden="true">#</a> property: TestResult.status</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[TestStatus]&lt;&quot;passed&quot;|&quot;failed&quot;|&quot;timedOut&quot;|&quot;skipped&quot;|&quot;interrupted&quot;&gt;&gt;</li></ul><p>The status of this test result. See also [<code>property: TestCase.expectedStatus</code>].</p><h2 id="property-testresult-stderr" tabindex="-1"><a class="header-anchor" href="#property-testresult-stderr" aria-hidden="true">#</a> property: TestResult.stderr</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[Array]&lt;[string]|[Buffer]&gt;&gt;</li></ul><p>Anything written to the standard error during the test run.</p><h2 id="property-testresult-stdout" tabindex="-1"><a class="header-anchor" href="#property-testresult-stdout" aria-hidden="true">#</a> property: TestResult.stdout</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[Array]&lt;[string]|[Buffer]&gt;&gt;</li></ul><p>Anything written to the standard output during the test run.</p><h2 id="property-testresult-steps" tabindex="-1"><a class="header-anchor" href="#property-testresult-steps" aria-hidden="true">#</a> property: TestResult.steps</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[Array]&lt;[TestStep]&gt;&gt;</li></ul><p>List of steps inside this test run.</p><h2 id="property-testresult-workerindex" tabindex="-1"><a class="header-anchor" href="#property-testresult-workerindex" aria-hidden="true">#</a> property: TestResult.workerIndex</h2><ul><li>since: v1.10</li></ul><ul><li>type: &lt;[int]&gt;</li></ul><p>Index of the worker where the test was run. If the test was not run a single time, for example when the user interrupted testing, the only result will have a <code>workerIndex</code> equal to <code>-1</code>.</p>',24),c=e('<h2 id="property-testresult-parallelindex" tabindex="-1"><a class="header-anchor" href="#property-testresult-parallelindex" aria-hidden="true">#</a> property: TestResult.parallelIndex</h2><ul><li>since: v1.30</li></ul><ul><li>type: &lt;[int]&gt;</li></ul><p>The index of the worker between <code>0</code> and <code>workers - 1</code>. It is guaranteed that workers running at the same time have a different <code>parallelIndex</code>.</p>',4);function y(f,g){const r=o("RouterLink");return u(),n("div",null,[d,s("p",null,[t("Learn more about "),l(r,{to:"/book/playwright/test-retries.html#retries"},{default:a(()=>[t("test retries")]),_:1}),t(".")]),h,s("p",null,[t("Learn more about "),l(r,{to:"/book/playwright/test-parallel.html"},{default:a(()=>[t("parallelism and sharding")]),_:1}),t(" with Playwright Test.")]),c])}const T=i(p,[["render",y],["__file","class-testresult.html.vue"]]);export{T as default};
