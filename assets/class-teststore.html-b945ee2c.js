import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as a,f as n}from"./app-3f278ba4.js";const e={},o=n(`<h1 id="class-teststore" tabindex="-1"><a class="header-anchor" href="#class-teststore" aria-hidden="true">#</a> class: TestStore</h1><ul><li>since: v1.32</li><li>langs: js</li></ul><p>Playwright Test provides a global <code>store</code> object that can be used to read/write values on the filesystem. Each value is stored in its own file inside &#39;./playwright&#39; directory, configurable with [<code>property: TestConfig.storeDir</code>].</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;get user name&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page<span class="token punctuation">,</span> context <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Return mock user info from the store.</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/info/user&#39;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> store<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">&#39;mocks/user.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">&#39;My Profile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Check that the name matches mock data.</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="async-method-teststore-delete" tabindex="-1"><a class="header-anchor" href="#async-method-teststore-delete" aria-hidden="true">#</a> async method: TestStore.delete</h2><ul><li>since: v1.32</li></ul><p>Delete named item from the store. Does nothing if the path is not in the store.</p><h3 id="param-teststore-delete-path" tabindex="-1"><a class="header-anchor" href="#param-teststore-delete-path" aria-hidden="true">#</a> param: TestStore.delete.path</h3><ul><li>since: v1.32</li></ul><ul><li><code>path</code> &lt;[string]&gt;</li></ul><p>Item path.</p><h2 id="async-method-teststore-get" tabindex="-1"><a class="header-anchor" href="#async-method-teststore-get" aria-hidden="true">#</a> async method: TestStore.get</h2><ul><li>since: v1.32</li></ul><ul><li>returns: &lt;[any]&gt;</li></ul><p>Get named item from the store. Returns undefined if there is no value with given path.</p><h3 id="param-teststore-get-path" tabindex="-1"><a class="header-anchor" href="#param-teststore-get-path" aria-hidden="true">#</a> param: TestStore.get.path</h3><ul><li>since: v1.32</li></ul><ul><li><code>path</code> &lt;[string]&gt;</li></ul><p>Item path.</p><h2 id="method-teststore-path" tabindex="-1"><a class="header-anchor" href="#method-teststore-path" aria-hidden="true">#</a> method: TestStore.path</h2><ul><li>since: v1.32</li></ul><ul><li>returns: &lt;[string]&gt;</li></ul><p>Returns absolute path of the corresponding store entry on the file system.</p><h3 id="param-teststore-path-path" tabindex="-1"><a class="header-anchor" href="#param-teststore-path-path" aria-hidden="true">#</a> param: TestStore.path.path</h3><ul><li>since: v1.32</li></ul><ul><li><code>path</code> &lt;[string]&gt;</li></ul><p>Path of the item in the store.</p><h2 id="method-teststore-root" tabindex="-1"><a class="header-anchor" href="#method-teststore-root" aria-hidden="true">#</a> method: TestStore.root</h2><ul><li>since: v1.32</li></ul><ul><li>returns: &lt;[string]&gt;</li></ul><p>Returns absolute path of the store root directory.</p><h2 id="async-method-teststore-set" tabindex="-1"><a class="header-anchor" href="#async-method-teststore-set" aria-hidden="true">#</a> async method: TestStore.set</h2><ul><li>since: v1.32</li></ul><p>Set value to the store.</p><h3 id="param-teststore-set-path" tabindex="-1"><a class="header-anchor" href="#param-teststore-set-path" aria-hidden="true">#</a> param: TestStore.set.path</h3><ul><li>since: v1.32</li></ul><ul><li><code>path</code> &lt;[string]&gt;</li></ul><p>Item path.</p><h3 id="param-teststore-set-value" tabindex="-1"><a class="header-anchor" href="#param-teststore-set-value" aria-hidden="true">#</a> param: TestStore.set.value</h3><ul><li>since: v1.32</li></ul><ul><li><code>value</code> &lt;[any]&gt;</li></ul><p>Item value. The value must be serializable to JSON. Passing <code>undefined</code> deletes the entry with given path.</p>`,42),p=[o];function i(l,c){return t(),a("div",null,p)}const d=s(e,[["render",i],["__file","class-teststore.html.vue"]]);export{d as default};
