import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as a,f as i}from"./app-3f278ba4.js";const o={},r=i('<h1 id="class-websocket" tabindex="-1"><a class="header-anchor" href="#class-websocket" aria-hidden="true">#</a> class: WebSocket</h1><ul><li>since: v1.8</li></ul><p>The [WebSocket] class represents websocket connections in the page.</p><h2 id="event-websocket-close" tabindex="-1"><a class="header-anchor" href="#event-websocket-close" aria-hidden="true">#</a> event: WebSocket.close</h2><ul><li>since: v1.8</li></ul><ul><li>argument: &lt;[WebSocket]&gt;</li></ul><p>Fired when the websocket closes.</p><h2 id="event-websocket-framereceived" tabindex="-1"><a class="header-anchor" href="#event-websocket-framereceived" aria-hidden="true">#</a> event: WebSocket.frameReceived</h2><ul><li>since: v1.9</li></ul><ul><li>argument: &lt;[Object]&gt; <ul><li><code>payload</code> &lt;[string]|[Buffer]&gt; frame payload</li></ul></li></ul><p>Fired when the websocket receives a frame.</p><h2 id="event-websocket-framereceived-1" tabindex="-1"><a class="header-anchor" href="#event-websocket-framereceived-1" aria-hidden="true">#</a> event: WebSocket.frameReceived</h2><ul><li>since: v1.9</li><li>langs: csharp, java</li></ul><ul><li>argument: &lt;[WebSocketFrame]&gt;</li></ul><h2 id="event-websocket-framesent" tabindex="-1"><a class="header-anchor" href="#event-websocket-framesent" aria-hidden="true">#</a> event: WebSocket.frameSent</h2><ul><li>since: v1.9</li></ul><ul><li>argument: &lt;[Object]&gt; <ul><li><code>payload</code> &lt;[string]|[Buffer]&gt; frame payload</li></ul></li></ul><p>Fired when the websocket sends a frame.</p><h2 id="event-websocket-framesent-1" tabindex="-1"><a class="header-anchor" href="#event-websocket-framesent-1" aria-hidden="true">#</a> event: WebSocket.frameSent</h2><ul><li>since: v1.9</li><li>langs: csharp, java</li></ul><ul><li>argument: &lt;[WebSocketFrame]&gt;</li></ul><h2 id="event-websocket-socketerror" tabindex="-1"><a class="header-anchor" href="#event-websocket-socketerror" aria-hidden="true">#</a> event: WebSocket.socketError</h2><ul><li>since: v1.9</li></ul><ul><li>argument: &lt;[String]&gt;</li></ul><p>Fired when the websocket has an error.</p><h2 id="method-websocket-isclosed" tabindex="-1"><a class="header-anchor" href="#method-websocket-isclosed" aria-hidden="true">#</a> method: WebSocket.isClosed</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[boolean]&gt;</li></ul><p>Indicates that the web socket has been closed.</p><h2 id="method-websocket-url" tabindex="-1"><a class="header-anchor" href="#method-websocket-url" aria-hidden="true">#</a> method: WebSocket.url</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[string]&gt;</li></ul><p>Contains the URL of the WebSocket.</p><h2 id="async-method-websocket-waitforevent" tabindex="-1"><a class="header-anchor" href="#async-method-websocket-waitforevent" aria-hidden="true">#</a> async method: WebSocket.waitForEvent</h2><ul><li>since: v1.8</li><li>langs: js, python <ul><li>alias-python: expect_event</li></ul></li></ul><ul><li>returns: &lt;[any]&gt;</li></ul><p>Waits for event to fire and passes its value into the predicate function. Returns when the predicate returns truthy<br> value. Will throw an error if the webSocket is closed before the event is fired. Returns the event data value.</p><h2 id="async-method-websocket-waitforevent-1" tabindex="-1"><a class="header-anchor" href="#async-method-websocket-waitforevent-1" aria-hidden="true">#</a> async method: WebSocket.waitForEvent</h2><ul><li>since: v1.8</li><li>langs: python</li></ul><ul><li>returns: &lt;[EventContextManager]&gt;</li></ul><h3 id="param-websocket-waitforevent-event" tabindex="-1"><a class="header-anchor" href="#param-websocket-waitforevent-event" aria-hidden="true">#</a> param: WebSocket.waitForEvent.event</h3><ul><li>since: v1.8</li></ul><ul><li><code>event</code> &lt;[string]&gt;</li></ul><p>Event name, same one would pass into <code>webSocket.on(event)</code>.</p><h3 id="param-websocket-waitforevent-optionsorpredicate" tabindex="-1"><a class="header-anchor" href="#param-websocket-waitforevent-optionsorpredicate" aria-hidden="true">#</a> param: WebSocket.waitForEvent.optionsOrPredicate</h3><ul><li>since: v1.8</li><li>langs: js</li></ul><ul><li><code>optionsOrPredicate</code> ?&lt;[function]|[Object]&gt; <ul><li><code>predicate</code> &lt;[function]&gt; receives the event data and resolves to truthy value when the waiting should resolve.</li><li><code>timeout</code> ?&lt;[float]&gt; maximum time to wait for in milliseconds. Defaults to <code>30000</code> (30 seconds). Pass <code>0</code> to disable timeout. The default value can be changed by using the [<code>method: BrowserContext.setDefaultTimeout</code>].</li></ul></li></ul><p>Either a predicate that receives an event or an options object. Optional.</p><h3 id="option-websocket-waitforevent-predicate-wait-for-event-predicate" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforevent-predicate-wait-for-event-predicate" aria-hidden="true">#</a> option: WebSocket.waitForEvent.predicate = %%-wait-for-event-predicate-%%</h3><ul><li>since: v1.8</li></ul><h3 id="option-websocket-waitforevent-timeout-wait-for-event-timeout" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforevent-timeout-wait-for-event-timeout" aria-hidden="true">#</a> option: WebSocket.waitForEvent.timeout = %%-wait-for-event-timeout-%%</h3><ul><li>since: v1.8</li></ul><h2 id="async-method-websocket-waitforframereceived" tabindex="-1"><a class="header-anchor" href="#async-method-websocket-waitforframereceived" aria-hidden="true">#</a> async method: WebSocket.waitForFrameReceived</h2><ul><li>since: v1.10</li><li>langs: java</li></ul><ul><li>returns: &lt;[WebSocketFrame]&gt;</li></ul><p>Performs action and waits for a frame to be sent. If predicate is provided, it passes<br> [WebSocketFrame] value into the <code>predicate</code> function and waits for <code>predicate(webSocketFrame)</code> to return a truthy value.<br> Will throw an error if the WebSocket or Page is closed before the frame is received.</p><h3 id="option-websocket-waitforframereceived-predicate" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforframereceived-predicate" aria-hidden="true">#</a> option: WebSocket.waitForFrameReceived.predicate</h3><ul><li>since: v1.9</li></ul><ul><li><code>predicate</code> &lt;[function]([WebSocketFrame]):[boolean]&gt;</li></ul><p>Receives the [WebSocketFrame] object and resolves to truthy value when the waiting should resolve.</p><h3 id="option-websocket-waitforframereceived-timeout-wait-for-event-timeout" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforframereceived-timeout-wait-for-event-timeout" aria-hidden="true">#</a> option: WebSocket.waitForFrameReceived.timeout = %%-wait-for-event-timeout-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-websocket-waitforframereceived-callback-java-wait-for-event-callback" tabindex="-1"><a class="header-anchor" href="#param-websocket-waitforframereceived-callback-java-wait-for-event-callback" aria-hidden="true">#</a> param: WebSocket.waitForFrameReceived.callback = %%-java-wait-for-event-callback-%%</h3><ul><li>since: v1.9</li></ul><h2 id="async-method-websocket-waitforframesent" tabindex="-1"><a class="header-anchor" href="#async-method-websocket-waitforframesent" aria-hidden="true">#</a> async method: WebSocket.waitForFrameSent</h2><ul><li>since: v1.10</li><li>langs: java</li></ul><ul><li>returns: &lt;[WebSocketFrame]&gt;</li></ul><p>Performs action and waits for a frame to be sent. If predicate is provided, it passes<br> [WebSocketFrame] value into the <code>predicate</code> function and waits for <code>predicate(webSocketFrame)</code> to return a truthy value.<br> Will throw an error if the WebSocket or Page is closed before the frame is sent.</p><h3 id="option-websocket-waitforframesent-predicate" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforframesent-predicate" aria-hidden="true">#</a> option: WebSocket.waitForFrameSent.predicate</h3><ul><li>since: v1.9</li></ul><ul><li><code>predicate</code> &lt;[function]([WebSocketFrame]):[boolean]&gt;</li></ul><p>Receives the [WebSocketFrame] object and resolves to truthy value when the waiting should resolve.</p><h3 id="option-websocket-waitforframesent-timeout-wait-for-event-timeout" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforframesent-timeout-wait-for-event-timeout" aria-hidden="true">#</a> option: WebSocket.waitForFrameSent.timeout = %%-wait-for-event-timeout-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-websocket-waitforframesent-callback-java-wait-for-event-callback" tabindex="-1"><a class="header-anchor" href="#param-websocket-waitforframesent-callback-java-wait-for-event-callback" aria-hidden="true">#</a> param: WebSocket.waitForFrameSent.callback = %%-java-wait-for-event-callback-%%</h3><ul><li>since: v1.9</li></ul><h2 id="async-method-websocket-waitforevent2" tabindex="-1"><a class="header-anchor" href="#async-method-websocket-waitforevent2" aria-hidden="true">#</a> async method: WebSocket.waitForEvent2</h2><ul><li>since: v1.8</li><li>langs: python <ul><li>alias-python: wait_for_event</li></ul></li></ul><ul><li>returns: &lt;[any]&gt;</li></ul><div class="hint-container note"><p class="hint-container-title">æ³¨</p><p>In most cases, you should use [<code>method: WebSocket.waitForEvent</code>].</p></div><p>Waits for given <code>event</code> to fire. If predicate is provided, it passes<br> event&#39;s value into the <code>predicate</code> function and waits for <code>predicate(event)</code> to return a truthy value.<br> Will throw an error if the socket is closed before the <code>event</code> is fired.</p><h3 id="param-websocket-waitforevent2-event-wait-for-event-event" tabindex="-1"><a class="header-anchor" href="#param-websocket-waitforevent2-event-wait-for-event-event" aria-hidden="true">#</a> param: WebSocket.waitForEvent2.event = %%-wait-for-event-event-%%</h3><ul><li>since: v1.8</li></ul><h3 id="option-websocket-waitforevent2-predicate-wait-for-event-predicate" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforevent2-predicate-wait-for-event-predicate" aria-hidden="true">#</a> option: WebSocket.waitForEvent2.predicate = %%-wait-for-event-predicate-%%</h3><ul><li>since: v1.8</li></ul><h3 id="option-websocket-waitforevent2-timeout-wait-for-event-timeout" tabindex="-1"><a class="header-anchor" href="#option-websocket-waitforevent2-timeout-wait-for-event-timeout" aria-hidden="true">#</a> option: WebSocket.waitForEvent2.timeout = %%-wait-for-event-timeout-%%</h3><ul><li>since: v1.8</li></ul>',87),n=[r];function c(l,s){return t(),a("div",null,n)}const u=e(o,[["render",c],["__file","class-websocket.html.vue"]]);export{u as default};
