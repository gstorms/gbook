import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c,a as n,b as a,d as e,f as t}from"./app-207e7d61.js";const l={},i=n("h1",{id:"class-worker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#class-worker","aria-hidden":"true"},"#"),a(" class: Worker")],-1),u=n("ul",null,[n("li",null,"since: v1.8")],-1),k={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"worker",-1),v=n("br",null,null,-1),h=n("code",null,"close",-1),m=n("br",null,null,-1),w=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>page<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;worker&#39;</span><span class="token punctuation">,</span> <span class="token parameter">worker</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Worker created: &#39;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token parameter">worker</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Worker destroyed: &#39;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Current workers:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> worker <span class="token keyword">of</span> page<span class="token punctuation">.</span><span class="token function">workers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  &#39;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">onWorker</span><span class="token punctuation">(</span>worker <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Worker created: &quot;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker<span class="token punctuation">.</span><span class="token function">onClose</span><span class="token punctuation">(</span>worker1 <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Worker destroyed: &quot;</span> <span class="token operator">+</span> worker1<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Current workers:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Worker</span> worker <span class="token operator">:</span> page<span class="token punctuation">.</span><span class="token function">workers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;  &quot;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">handle_worker</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;worker created: &quot;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    worker<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;worker destroyed: &quot;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>

page<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">&#39;worker&#39;</span><span class="token punctuation">,</span> handle_worker<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;current workers:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> worker <span class="token keyword">in</span> page<span class="token punctuation">.</span>workers<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;    &quot;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>page<span class="token punctuation">.</span>Worker <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> worker<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Worker created: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">worker<span class="token punctuation">.</span>Url</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    worker<span class="token punctuation">.</span>Close <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Worker closed </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">worker<span class="token punctuation">.</span>Url</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Current Workers:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pageWorker <span class="token keyword">in</span> page<span class="token punctuation">.</span>Workers<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;\\tWorker: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">pageWorker<span class="token punctuation">.</span>Url</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="event-worker-close" tabindex="-1"><a class="header-anchor" href="#event-worker-close" aria-hidden="true">#</a> event: Worker.close</h2><ul><li>since: v1.8</li></ul><ul><li>argument: &lt;[Worker]&gt;</li></ul>`,7),g={href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"},f=t('<h2 id="async-method-worker-evaluate" tabindex="-1"><a class="header-anchor" href="#async-method-worker-evaluate" aria-hidden="true">#</a> async method: Worker.evaluate</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[Serializable]&gt;</li></ul><p>Returns the return value of [<code>param: expression</code>].</p><p>If the function passed to the [<code>method: Worker.evaluate</code>] returns a [Promise], then [<code>method: Worker.evaluate</code>] would wait for the promise<br> to resolve and return its value.</p><p>If the function passed to the [<code>method: Worker.evaluate</code>] returns a non-[Serializable] value, then [<code>method: Worker.evaluate</code>] returns <code>undefined</code>. Playwright also supports transferring some<br> additional values that are not serializable by <code>JSON</code>: <code>-0</code>, <code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>.</p><h3 id="param-worker-evaluate-expression-evaluate-expression" tabindex="-1"><a class="header-anchor" href="#param-worker-evaluate-expression-evaluate-expression" aria-hidden="true">#</a> param: Worker.evaluate.expression = %%-evaluate-expression-%%</h3><ul><li>since: v1.8</li></ul><h3 id="param-worker-evaluate-expression-js-worker-evaluate-workerfunction" tabindex="-1"><a class="header-anchor" href="#param-worker-evaluate-expression-js-worker-evaluate-workerfunction" aria-hidden="true">#</a> param: Worker.evaluate.expression = %%-js-worker-evaluate-workerfunction-%%</h3><ul><li>since: v1.8</li></ul><h3 id="param-worker-evaluate-arg" tabindex="-1"><a class="header-anchor" href="#param-worker-evaluate-arg" aria-hidden="true">#</a> param: Worker.evaluate.arg</h3><ul><li>since: v1.8</li></ul><ul><li><code>arg</code> ?&lt;[EvaluationArgument]&gt;</li></ul><p>Optional argument to pass to [<code>param: expression</code>].</p><h2 id="async-method-worker-evaluatehandle" tabindex="-1"><a class="header-anchor" href="#async-method-worker-evaluatehandle" aria-hidden="true">#</a> async method: Worker.evaluateHandle</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[JSHandle]&gt;</li></ul><p>Returns the return value of [<code>param: expression</code>] as a [JSHandle].</p><p>The only difference between [<code>method: Worker.evaluate</code>] and<br> [<code>method: Worker.evaluateHandle</code>] is that [<code>method: Worker.evaluateHandle</code>]<br> returns [JSHandle].</p><p>If the function passed to the [<code>method: Worker.evaluateHandle</code>] returns a [Promise], then [<code>method: Worker.evaluateHandle</code>] would wait for<br> the promise to resolve and return its value.</p><h3 id="param-worker-evaluatehandle-expression-evaluate-expression" tabindex="-1"><a class="header-anchor" href="#param-worker-evaluatehandle-expression-evaluate-expression" aria-hidden="true">#</a> param: Worker.evaluateHandle.expression = %%-evaluate-expression-%%</h3><ul><li>since: v1.8</li></ul><h3 id="param-worker-evaluatehandle-expression-js-worker-evaluate-workerfunction" tabindex="-1"><a class="header-anchor" href="#param-worker-evaluatehandle-expression-js-worker-evaluate-workerfunction" aria-hidden="true">#</a> param: Worker.evaluateHandle.expression = %%-js-worker-evaluate-workerfunction-%%</h3><ul><li>since: v1.8</li></ul><h3 id="param-worker-evaluatehandle-arg" tabindex="-1"><a class="header-anchor" href="#param-worker-evaluatehandle-arg" aria-hidden="true">#</a> param: Worker.evaluateHandle.arg</h3><ul><li>since: v1.8</li></ul><ul><li><code>arg</code> ?&lt;[EvaluationArgument]&gt;</li></ul><p>Optional argument to pass to [<code>param: expression</code>].</p><h2 id="method-worker-url" tabindex="-1"><a class="header-anchor" href="#method-worker-url" aria-hidden="true">#</a> method: Worker.url</h2><ul><li>since: v1.8</li></ul><ul><li>returns: &lt;[string]&gt;</li></ul><h2 id="async-method-worker-waitforclose" tabindex="-1"><a class="header-anchor" href="#async-method-worker-waitforclose" aria-hidden="true">#</a> async method: Worker.waitForClose</h2><ul><li>since: v1.10</li><li>langs: java</li></ul><ul><li>returns: &lt;[Worker]&gt;</li></ul><p>Performs action and waits for the Worker to close.</p><h3 id="option-worker-waitforclose-timeout-wait-for-event-timeout" tabindex="-1"><a class="header-anchor" href="#option-worker-waitforclose-timeout-wait-for-event-timeout" aria-hidden="true">#</a> option: Worker.waitForClose.timeout = %%-wait-for-event-timeout-%%</h3><ul><li>since: v1.9</li></ul><h3 id="param-worker-waitforclose-callback-java-wait-for-event-callback" tabindex="-1"><a class="header-anchor" href="#param-worker-waitforclose-callback-java-wait-for-event-callback" aria-hidden="true">#</a> param: Worker.waitForClose.callback = %%-java-wait-for-event-callback-%%</h3><ul><li>since: v1.9</li></ul>',39);function b(W,x){const s=p("ExternalLinkIcon");return r(),c("div",null,[i,u,n("p",null,[a("The Worker class represents a "),n("a",k,[a("WebWorker"),e(s)]),a(". "),d,v,a(" event is emitted on the page object to signal a worker creation. "),h,a(" event is emitted on the worker object when the"),m,a(" worker is gone.")]),w,n("p",null,[a("Emitted when this dedicated "),n("a",g,[a("WebWorker"),e(s)]),a(" is terminated.")]),f])}const q=o(l,[["render",b],["__file","class-worker.html.vue"]]);export{q as default};
