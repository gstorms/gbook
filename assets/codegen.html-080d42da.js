import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as r,a as n,b as a,d as s,w as i,f as t}from"./app-3f278ba4.js";const d={},u=t(`<p>Playwright comes with the ability to generate tests out of the box and is a great way to quickly get started with testing. It will open two windows, a browser window where you interact with the website you wish to test and the Playwright Inspector window where you can record your tests, copy the tests, clear your tests as well as change the language of your tests.</p><video width="100%" height="100%" controls muted><source src="https://user-images.githubusercontent.com/13063165/197979804-c4fa3347-8fab-4526-a728-c1b2fbd079b4.mp4" type="video/mp4"> Your browser does not support the video tag. </video><h2 id="running-codegen" tabindex="-1"><a class="header-anchor" href="#running-codegen" aria-hidden="true">#</a> Running Codegen</h2><p>Use the <code>codegen</code> command to run the test generator followed by the URL of the website you want to generate tests for. The URL is optional and you can always run the command without it and then add the URL directly into the browser window instead.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright codegen demo.playwright.dev/todomvc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;codegen demo.playwright.dev/todomvc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright codegen demo.playwright.dev/todomvc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 codegen demo.playwright.dev/todomvc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="recording-a-test" tabindex="-1"><a class="header-anchor" href="#recording-a-test" aria-hidden="true">#</a> Recording a test</h3><p>Run <code>codegen</code> and perform actions in the browser. Playwright will generate the code for the user interactions. <code>Codegen</code> will look at the rendered page and figure out the recommended locator, prioritizing role, text and test id locators. If the generator identifies multiple elements matching the locator, it will improve the locator to make it resilient and uniquely identify the target element, therefore eliminating and reducing test(s) failing and flaking due to locators.</p><h6 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h6><ul><li>langs: js</li></ul><img width="1365" alt="Recording a test" src="https://user-images.githubusercontent.com/13063165/212754505-b98e80fd-6dda-48f7-860b-b32b4fabee33.png"><h6 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h6><ul><li>langs: java</li></ul><img width="1365" alt="Recording a test" src="https://user-images.githubusercontent.com/13063165/212754804-0d9f9d52-0a48-45c8-970d-e672d4a91221.png"><h6 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-hidden="true">#</a></h6><ul><li>langs: python</li></ul><img width="1365" alt="Recording a test" src="https://user-images.githubusercontent.com/13063165/212751993-b7da2c40-a7cc-4b13-9a91-40ee837042a1.png"><h6 id="-3" tabindex="-1"><a class="header-anchor" href="#-3" aria-hidden="true">#</a></h6><ul><li>langs: csharp</li></ul><img width="1365" alt="Screenshot 2023-01-16 at 20 42 26" src="https://user-images.githubusercontent.com/13063165/212754994-fa637d81-b81d-44b8-bcd7-5dc218034f0a.png"><p>When you have finished interacting with the page, press the <strong>record</strong> button to stop the recording and use the <strong>copy</strong> button to copy the generated code to your editor.</p><p>Use the <strong>clear</strong> button to clear the code to start recording again. Once finished close the Playwright inspector window or stop the terminal command.</p>`,24),h=n("h3",{id:"generating-locators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#generating-locators","aria-hidden":"true"},"#"),a(" Generating locators")],-1),g=t(`<ul><li>Press the <code>&#39;Record&#39;</code> button to stop the recording and the <code>&#39;Pick Locator&#39;</code> button will appear.</li><li>Click on the <code>&#39;Pick Locator&#39;</code> button and then hover over elements in the browser window to see the locator highlighted underneath each element.</li><li>To choose a locator click on the element you would like to locate and the code for that locator will appear in the field next to the Pick Locator button.</li><li>You can then edit the locator in this field to fine tune it or use the copy button to copy it and paste it into your code.</li></ul><h6 id="-4" tabindex="-1"><a class="header-anchor" href="#-4" aria-hidden="true">#</a></h6><ul><li>langs: js</li></ul><img width="1321" alt="Picking a locator" src="https://user-images.githubusercontent.com/13063165/212753129-55fbcf69-0be3-422e-888a-f52060c7aa6b.png"><h6 id="-5" tabindex="-1"><a class="header-anchor" href="#-5" aria-hidden="true">#</a></h6><ul><li>langs: java</li></ul><img width="1321" alt="Picking a locator" src="https://user-images.githubusercontent.com/13063165/212753446-456484a8-8c37-4104-8db5-4525b74c8cf1.png"><h6 id="-6" tabindex="-1"><a class="header-anchor" href="#-6" aria-hidden="true">#</a></h6><ul><li>langs: python</li></ul><img width="1321" alt="Picking a locator" src="https://user-images.githubusercontent.com/13063165/212753605-861d66a4-fc1c-4559-b821-cb1f39059337.png"><h6 id="-7" tabindex="-1"><a class="header-anchor" href="#-7" aria-hidden="true">#</a></h6><ul><li>langs: csharp</li></ul><img width="1321" alt="Picking a locator" src="https://user-images.githubusercontent.com/13063165/212753728-49d35a7c-c05a-4298-bf66-89930d2cb578.png"><h2 id="emulation" tabindex="-1"><a class="header-anchor" href="#emulation" aria-hidden="true">#</a> Emulation</h2><p>You can use the test generator to generate tests using emulation so as to generate a test for a specific viewport, device, color scheme, as well as emulate the geolocation, language or timezone. The test generator can also generate a test while preserving authenticated state.</p><h3 id="emulate-viewport-size" tabindex="-1"><a class="header-anchor" href="#emulate-viewport-size" aria-hidden="true">#</a> Emulate viewport size</h3><p>Playwright opens a browser window with it&#39;s viewport set to a specific width and height and is not responsive as tests need to be run under the same conditions. Use the <code>--viewport</code> option to generate tests with a different viewport size.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright codegen --viewport-size<span class="token operator">=</span><span class="token number">800,600</span> playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;codegen --viewport-size=800,600 playwright.dev&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright codegen --viewport-size<span class="token operator">=</span><span class="token number">800,600</span> playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 codegen --viewport-size<span class="token operator">=</span><span class="token number">800,600</span> playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img width="1409" alt="Codegen generating code for tests for playwright.dev website with a specific viewport" src="https://user-images.githubusercontent.com/13063165/182360039-6db79ad6-fe82-4fd6-900a-b5e25f7f720f.png"><h3 id="emulate-devices" tabindex="-1"><a class="header-anchor" href="#emulate-devices" aria-hidden="true">#</a> Emulate devices</h3><p>Record scripts and tests while emulating a mobile device using the <code>--device</code> option which sets the viewport size and user agent among others.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright codegen <span class="token parameter variable">--device</span><span class="token operator">=</span><span class="token string">&quot;iPhone 11&quot;</span> playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&#39;codegen --device=&quot;iPhone 11&quot; playwright.dev&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright codegen <span class="token parameter variable">--device</span><span class="token operator">=</span><span class="token string">&quot;iPhone 11&quot;</span> playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 codegen <span class="token parameter variable">--device</span><span class="token operator">=</span><span class="token string">&quot;iPhone 11&quot;</span> playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img width="1254" alt="Codegen generating code for tests for playwright.dev website emulated for iPhone 11" src="https://user-images.githubusercontent.com/13063165/197976789-ee25ed24-69af-4684-b6a4-098673cfb035.png"><h3 id="emulate-color-scheme" tabindex="-1"><a class="header-anchor" href="#emulate-color-scheme" aria-hidden="true">#</a> Emulate color scheme</h3><p>Record scripts and tests while emulating the color scheme with the <code>--color-scheme</code> option.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright codegen --color-scheme<span class="token operator">=</span>dark playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;codegen --color-scheme=dark playwright.dev&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright codegen --color-scheme<span class="token operator">=</span>dark playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 codegen --color-scheme<span class="token operator">=</span>dark playwright.dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img width="1258" alt="Codegen generating code for tests for playwright.dev website in dark mode" src="https://user-images.githubusercontent.com/13063165/182359371-0bb4a7a2-abbb-4f73-8550-d67e0101f0ad.png"><h3 id="emulate-geolocation-language-and-timezone" tabindex="-1"><a class="header-anchor" href="#emulate-geolocation-language-and-timezone" aria-hidden="true">#</a> Emulate geolocation, language and timezone</h3><p>Record scripts and tests while emulating timezone, language &amp; location using the <code>--timezone</code>, <code>--geolocation</code> and <code>--lang</code> options. Once page opens, click the &quot;show your location&quot; icon at them bottom right corner of the map to see geolocation in action.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright codegen <span class="token parameter variable">--timezone</span><span class="token operator">=</span><span class="token string">&quot;Europe/Rome&quot;</span> <span class="token parameter variable">--geolocation</span><span class="token operator">=</span><span class="token string">&quot;41.890221,12.492348&quot;</span> <span class="token parameter variable">--lang</span><span class="token operator">=</span><span class="token string">&quot;it-IT&quot;</span> maps.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&#39;codegen --timezone=&quot;Europe/Rome&quot; --geolocation=&quot;41.890221,12.492348&quot; --lang=&quot;it-IT&quot; maps.google.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright codegen <span class="token parameter variable">--timezone</span><span class="token operator">=</span><span class="token string">&quot;Europe/Rome&quot;</span> <span class="token parameter variable">--geolocation</span><span class="token operator">=</span><span class="token string">&quot;41.890221,12.492348&quot;</span> <span class="token parameter variable">--lang</span><span class="token operator">=</span><span class="token string">&quot;it-IT&quot;</span> maps.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 codegen <span class="token parameter variable">--timezone</span><span class="token operator">=</span><span class="token string">&quot;Europe/Rome&quot;</span> <span class="token parameter variable">--geolocation</span><span class="token operator">=</span><span class="token string">&quot;41.890221,12.492348&quot;</span> <span class="token parameter variable">--lang</span><span class="token operator">=</span><span class="token string">&quot;it-IT&quot;</span> maps.google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img width="1276" alt="Codegen generating code for tests for google maps showing timezone, geolocation as Rome, Italy and in Italian language" src="https://user-images.githubusercontent.com/13063165/182394434-73e1c2a8-767e-411a-94e4-0912c1c50ecc.png"><h3 id="preserve-authenticated-state" tabindex="-1"><a class="header-anchor" href="#preserve-authenticated-state" aria-hidden="true">#</a> Preserve authenticated state</h3>`,44),m=n("code",null,"codegen",-1),k=n("code",null,"--save-storage",-1),v={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>After performing authentication and closing the browser, <code>auth.json</code> will contain the storage state.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright codegen --save-storage<span class="token operator">=</span>auth.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;codegen  --save-storage=auth.json&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright codegen --save-storage<span class="token operator">=</span>auth.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 codegen --save-storage<span class="token operator">=</span>auth.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img width="1264" alt="Screenshot 2022-08-03 at 13 28 02" src="https://user-images.githubusercontent.com/13063165/182599605-df2fbd05-622b-4cd7-8a32-0abdfea7d38d.png">`,6),y=n("code",null,"--load-storage",-1),f={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",target:"_blank",rel:"noopener noreferrer"},x={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright codegen --load-storage<span class="token operator">=</span>auth.json github.com/microsoft/playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;codegen --load-storage=auth.json github.com/microsoft/playwright&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright codegen --load-storage<span class="token operator">=</span>auth.json github.com/microsoft/playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 codegen --load-storage<span class="token operator">=</span>auth.json github.com/microsoft/playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img width="1261" alt="Screenshot 2022-08-03 at 13 33 40" src="https://user-images.githubusercontent.com/13063165/182599680-05297b4e-c258-4416-8daa-b8637c1db120.png"><p>Use the <code>open</code> command with <code>--load-storage</code> to open the saved <code>auth.json</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token function">open</span> --load-storage<span class="token operator">=</span>auth.json github.com/microsoft/playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;open --load-storage=auth.json github.com/microsoft/playwright&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright <span class="token function">open</span> --load-storage<span class="token operator">=</span>auth.json github.com/microsoft/playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 <span class="token function">open</span> --load-storage<span class="token operator">=</span>auth.json github.com/microsoft/playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="record-using-custom-setup" tabindex="-1"><a class="header-anchor" href="#record-using-custom-setup" aria-hidden="true">#</a> Record using custom setup</h2><p>If you would like to use codegen in some non-standard setup (for example, use [<code>method: BrowserContext.route</code>]), it is possible to call [<code>method: Page.pause</code>] that will open a separate window with codegen controls.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> chromium <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Make sure to run headed.</span>
  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> chromium<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Setup context however you like.</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* pass any options */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> route<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Pause the page, and start recording manually.</span>
  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>microsoft<span class="token punctuation">.</span>playwright<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Playwright</span> playwright <span class="token operator">=</span> <span class="token class-name">Playwright</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">BrowserType</span> chromium <span class="token operator">=</span> playwright<span class="token punctuation">.</span><span class="token function">chromium</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Make sure to run headed.</span>
      <span class="token class-name">Browser</span> browser <span class="token operator">=</span> chromium<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BrowserType<span class="token punctuation">.</span>LaunchOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeadless</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Setup context however you like.</span>
      <span class="token class-name">BrowserContext</span> context <span class="token operator">=</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token comment">/* pass any options */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      context<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> route<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Pause the page, and start recording manually.</span>
      <span class="token class-name">Page</span> page <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      page<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>async_api <span class="token keyword">import</span> async_playwright

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> async_playwright<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
        <span class="token comment"># Make sure to run headed.</span>
        browser <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

        <span class="token comment"># Setup context however you like.</span>
        context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Pass any options</span>
        <span class="token keyword">await</span> context<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>continue_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># Pause the page, and start recording manually.</span>
        page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span>new_page<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> page<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> sync_playwright

<span class="token keyword">with</span> sync_playwright<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
    <span class="token comment"># Make sure to run headed.</span>
    browser <span class="token operator">=</span> p<span class="token punctuation">.</span>chromium<span class="token punctuation">.</span>launch<span class="token punctuation">(</span>headless<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token comment"># Setup context however you like.</span>
    context <span class="token operator">=</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Pass any options</span>
    context<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> route<span class="token punctuation">:</span> route<span class="token punctuation">.</span>continue_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># Pause the page, and start recording manually.</span>
    page <span class="token operator">=</span> context<span class="token punctuation">.</span>new_page<span class="token punctuation">(</span><span class="token punctuation">)</span>
    page<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Playwright</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> playwright <span class="token operator">=</span> <span class="token keyword">await</span> Playwright<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> chromium <span class="token operator">=</span> playwright<span class="token punctuation">.</span>Chromium<span class="token punctuation">;</span>
<span class="token comment">// Make sure to run headed.</span>
<span class="token class-name"><span class="token keyword">var</span></span> browser <span class="token operator">=</span> <span class="token keyword">await</span> chromium<span class="token punctuation">.</span><span class="token function">LaunchAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">BrowserTypeLaunchOptions</span> <span class="token punctuation">{</span> Headless <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Setup context however you like.</span>
<span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">NewContextAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pass any options</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**/*&quot;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> route<span class="token punctuation">.</span><span class="token function">ContinueAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Pause the page, and start recording manually.</span>
<span class="token class-name"><span class="token keyword">var</span></span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">NewPageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">PauseAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function q(P,C){const o=p("RouterLink"),e=p("ExternalLinkIcon");return l(),r("div",null,[u,n("p",null,[a("To learn more about generating tests check out or detailed guide on "),s(o,{to:"/book/playwright/codegen.html"},{default:i(()=>[a("Codegen")]),_:1}),a(".")]),h,n("p",null,[a("You can generate "),s(o,{to:"/book/playwright/locators.html"},{default:i(()=>[a("locators")]),_:1}),a(" with the test generator.")]),g,n("p",null,[a("Run "),m,a(" with "),k,a(" to save "),n("a",v,[a("cookies"),s(e)]),a(" and "),n("a",b,[a("localStorage"),s(e)]),a(" at the end of the session. This is useful to separately record an authentication step and reuse it later in the tests.")]),w,n("p",null,[a("Run with "),y,a(" to consume previously loaded storage. This way, all "),n("a",f,[a("cookies"),s(e)]),a(" and "),n("a",x,[a("localStorage"),s(e)]),a(" will be restored, bringing most web apps to the authenticated state without the need to login again.")]),_])}const D=c(d,[["render",q],["__file","codegen.html.vue"]]);export{D as default};
