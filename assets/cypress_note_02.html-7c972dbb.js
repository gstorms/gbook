import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as d,f as r}from"./app-3f278ba4.js";const o={},c=r('<h1 id="cypress-断言" tabindex="-1"><a class="header-anchor" href="#cypress-断言" aria-hidden="true">#</a> cypress-断言</h1><table><thead><tr><th><strong>Chainer</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td>not</td><td><code>expect(name).to.not.equal(&#39;Jane&#39;)</code></td></tr><tr><td>deep</td><td><code>expect(obj).to.deep.equal({ name: &#39;Jane&#39; })</code></td></tr><tr><td>nested</td><td><code>expect({a: {b: [&#39;x&#39;, &#39;y&#39;]}}).to.have.nested.property(&#39;a.b[1]&#39;)</code></td></tr><tr><td><code>expect({a: {b: [&#39;x&#39;, &#39;y&#39;]}}).to.nested.include({&#39;a.b[1]&#39;: &#39;y&#39;})</code></td><td></td></tr><tr><td>ordered</td><td><code>expect([1, 2]).to.have.ordered.members([1, 2]).but.not.have.ordered.members([2, 1])</code></td></tr><tr><td>any</td><td><code>expect(arr).to.have.any.keys(&#39;age&#39;)</code></td></tr><tr><td>all</td><td><code>expect(arr).to.have.all.keys(&#39;name&#39;, &#39;age&#39;)</code></td></tr><tr><td>a(<em>type</em>)</td><td></td></tr><tr><td>**Aliases: **an</td><td><code>expect(&#39;test&#39;).to.be.a(&#39;string&#39;)</code></td></tr><tr><td>include(<em>value</em>)</td><td></td></tr><tr><td>**Aliases: **contain, includes, contains</td><td><code>expect([1,2,3]).to.include(2)</code></td></tr><tr><td>ok</td><td><code>expect(undefined).to.not.be.ok</code></td></tr><tr><td>true</td><td><code>expect(true).to.be.true</code></td></tr><tr><td>false</td><td><code>expect(false).to.be.false</code></td></tr><tr><td>null</td><td><code>expect(null).to.be.null</code></td></tr><tr><td>undefined</td><td><code>expect(undefined).to.be.undefined</code></td></tr><tr><td>exist</td><td><code>expect(myVar).to.exist</code></td></tr><tr><td>empty</td><td><code>expect([]).to.be.empty</code></td></tr><tr><td>arguments</td><td></td></tr><tr><td>**Aliases: **Arguments</td><td><code>expect(arguments).to.be.arguments</code></td></tr><tr><td>equal(<em>value</em>)</td><td></td></tr><tr><td>**Aliases: **equals, eq</td><td><code>expect(42).to.equal(42)</code></td></tr><tr><td>deep.equal(<em>value</em>)</td><td><code>expect({ name: &#39;Jane&#39; }).to.deep.equal({ name: &#39;Jane&#39; })</code></td></tr><tr><td>eql(<em>value</em>)</td><td></td></tr><tr><td>**Aliases: **eqls</td><td><code>expect({ name: &#39;Jane&#39; }).to.eql({ name: &#39;Jane&#39; })</code></td></tr><tr><td>greaterThan(<em>value</em>)</td><td></td></tr><tr><td>**Aliases: **gt, above</td><td><code>expect(10).to.be.greaterThan(5)</code></td></tr><tr><td>least(<em>value</em>)</td><td></td></tr><tr><td>**Aliases: **gte</td><td><code>expect(10).to.be.at.least(10)</code></td></tr><tr><td>lessThan(<em>value</em>)</td><td></td></tr><tr><td>**Aliases: **lt, below</td><td><code>expect(5).to.be.lessThan(10)</code></td></tr><tr><td>most(<em>value</em>)</td><td></td></tr><tr><td>**Aliases: **lte</td><td><code>expect(&#39;test&#39;).to.have.length.of.at.most(4)</code></td></tr><tr><td>within(<em>start</em>, <em>finish</em>)</td><td><code>expect(7).to.be.within(5,10)</code></td></tr><tr><td>instanceOf(<em>constructor</em>)</td><td></td></tr><tr><td>**Aliases: **instanceof</td><td><code>expect([1, 2, 3]).to.be.instanceOf(Array)</code></td></tr><tr><td>property(<em>name</em>, <em>[value]</em>)</td><td><code>expect(obj).to.have.property(&#39;name&#39;)</code></td></tr><tr><td>deep.property(<em>name</em>, <em>[value]</em>)</td><td><code>expect(deepObj).to.have.deep.property(&#39;tests[1]&#39;, &#39;e2e&#39;)</code></td></tr><tr><td>ownProperty(<em>name</em>)</td><td></td></tr><tr><td>**Aliases: **haveOwnProperty, own.property</td><td><code>expect(&#39;test&#39;).to.have.ownProperty(&#39;length&#39;)</code></td></tr><tr><td>ownPropertyDescriptor(<em>name</em>)</td><td></td></tr><tr><td>**Aliases: **haveOwnPropertyDescriptor</td><td><code>expect({a: 1}).to.have.ownPropertyDescriptor(&#39;a&#39;)</code></td></tr><tr><td>lengthOf(<em>value</em>)</td><td><code>expect(&#39;test&#39;).to.have.lengthOf(3)</code></td></tr><tr><td>match(<em>RegExp</em>)</td><td></td></tr><tr><td>**Aliases: **matches</td><td><code>expect(&#39;testing&#39;).to.match(/^test/)</code></td></tr><tr><td>string(<em>string</em>)</td><td><code>expect(&#39;testing&#39;).to.have.string(&#39;test&#39;)</code></td></tr><tr><td>keys(<em>key1</em>, <em>[key2]</em>, <em>[...]</em>)</td><td></td></tr><tr><td>**Aliases: **key</td><td><code>expect({ pass: 1, fail: 2 }).to.have.keys(&#39;pass&#39;, &#39;fail&#39;)</code></td></tr><tr><td>throw(<em>constructor</em>)</td><td></td></tr><tr><td>**Aliases: **throws, Throw</td><td><code>expect(fn).to.throw(Error)</code></td></tr><tr><td>respondTo(<em>method</em>)</td><td></td></tr><tr><td>**Aliases: **respondsTo</td><td><code>expect(obj).to.respondTo(&#39;getName&#39;)</code></td></tr><tr><td>itself</td><td><code>expect(Foo).itself.to.respondTo(&#39;bar&#39;)</code></td></tr><tr><td>satisfy(<em>method</em>)</td><td></td></tr><tr><td>**Aliases: **satisfies</td><td><code>expect(1).to.satisfy((num) =&gt; { return num &gt; 0 })</code></td></tr><tr><td>closeTo(<em>expected</em>, <em>delta</em>)</td><td></td></tr><tr><td>**Aliases: **approximately</td><td><code>expect(1.5).to.be.closeTo(1, 0.5)</code></td></tr><tr><td>members(<em>set</em>)</td><td><code>expect([1, 2, 3]).to.include.members([3, 2])</code></td></tr><tr><td>oneOf(<em>values</em>)</td><td><code>expect(2).to.be.oneOf([1,2,3])</code></td></tr><tr><td>change(<em>function</em>)</td><td></td></tr><tr><td>**Aliases: **changes</td><td><code>expect(fn).to.change(obj, &#39;val&#39;)</code></td></tr><tr><td>increase(<em>function</em>)</td><td></td></tr><tr><td>**Aliases: **increases</td><td><code>expect(fn).to.increase(obj, &#39;val&#39;)</code></td></tr><tr><td>decrease(<em>function</em>)</td><td></td></tr><tr><td>**Aliases: **decreases</td><td><code>expect(fn).to.decrease(obj, &#39;val&#39;)</code></td></tr></tbody></table>',2),a=[c];function s(n,m){return e(),d("div",null,a)}const i=t(o,[["render",s],["__file","cypress_note_02.html.vue"]]);export{i as default};
