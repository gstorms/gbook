import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-3f278ba4.js";const p={},e=t(`<p>Playwright scripts run in your Playwright environment. Your page scripts run in the browser page environment. Those environments don&#39;t intersect, they are running in different virtual machines in different processes and even potentially on different computers.</p><p>The [<code>method: Page.evaluate</code>] API can run a JavaScript function in the context<br> of the web page and bring results back to the Playwright environment. Browser globals like<br><code>window</code> and <code>document</code> can be used in <code>evaluate</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> href <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> href <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;document.location.href&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>href <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;() =&gt; document.location.href&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>href <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;() =&gt; document.location.href&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> href <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;document.location.href&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the result is a Promise or if the function is asynchronous evaluate will automatically wait until it&#39;s resolved:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span>status<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;async () =&gt; {\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  const response = await fetch(location.href);\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  return response.status;\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>status <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;async () =&gt; {
  response = await fetch(location.href)
  return response.status
}&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>status <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;async () =&gt; {
  response = await fetch(location.href)
  return response.status
}&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> status <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">@&quot;async () =&gt; {
  const response = await fetch(location.href);
  return response.status;
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="evaluation-argument" tabindex="-1"><a class="header-anchor" href="#evaluation-argument" aria-hidden="true">#</a> Evaluation Argument</h2><p>Playwright evaluation methods like [<code>method: Page.evaluate</code>] take a single optional argument. This argument can be a mix of [Serializable] values and [JSHandle] or [ElementHandle] instances. Handles are automatically converted to the value they represent.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// A primitive value.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// An array.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token parameter">array</span> <span class="token operator">=&gt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// An object.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token parameter">object</span> <span class="token operator">=&gt;</span> object<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// A single handle.</span>
<span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&#39;window.button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token parameter">button</span> <span class="token operator">=&gt;</span> button<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Alternative notation using elementHandle.evaluate.</span>
<span class="token keyword">await</span> button<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">button<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> button<span class="token punctuation">.</span>textContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object with multiple handles.</span>
<span class="token keyword">const</span> button1 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&#39;window.button1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> button2 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&#39;window.button2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
    <span class="token parameter">o</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>textContent <span class="token operator">+</span> o<span class="token punctuation">.</span>button2<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> button1<span class="token punctuation">,</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object destructuring works. Note that property names must match</span>
<span class="token comment">// between the destructured object and the argument.</span>
<span class="token comment">// Also note the required parenthesis.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> button1<span class="token punctuation">,</span> button2 <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> button1<span class="token punctuation">.</span>textContent <span class="token operator">+</span> button2<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> button1<span class="token punctuation">,</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Array works as well. Arbitrary names can be used for destructuring.</span>
<span class="token comment">// Note the required parenthesis.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b1<span class="token punctuation">.</span>textContent <span class="token operator">+</span> b2<span class="token punctuation">.</span>textContent<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>button1<span class="token punctuation">,</span> button2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Any non-cyclic mix of serializables and handles works.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
    <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>textContent <span class="token operator">+</span> x<span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> button1<span class="token punctuation">,</span> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span>button2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// A primitive value.</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;num =&gt; num&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// An array.</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;array =&gt; array.length&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// An object.</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;object =&gt; object.foo&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// A single handle.</span>
<span class="token class-name">ElementHandle</span> button <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;window.button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;button =&gt; button.textContent&quot;</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Alternative notation using elementHandle.evaluate.</span>
button<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;(button, from) =&gt; button.textContent.substring(from)&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object with multiple handles.</span>
<span class="token class-name">ElementHandle</span> button1 <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;window.button1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ElementHandle</span> button2 <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;window.button2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ElementHandle</span><span class="token punctuation">&gt;</span></span> arg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;button1&quot;</span><span class="token punctuation">,</span> button1<span class="token punctuation">)</span><span class="token punctuation">;</span>
arg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;button2&quot;</span><span class="token punctuation">,</span> button2<span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;o =&gt; o.button1.textContent + o.button2.textContent&quot;</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object destructuring works. Note that property names must match</span>
<span class="token comment">// between the destructured object and the argument.</span>
<span class="token comment">// Also note the required parenthesis.</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ElementHandle</span><span class="token punctuation">&gt;</span></span> arg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;button1&quot;</span><span class="token punctuation">,</span> button1<span class="token punctuation">)</span><span class="token punctuation">;</span>
arg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;button2&quot;</span><span class="token punctuation">,</span> button2<span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;({ button1, button2 }) =&gt; button1.textContent + button2.textContent&quot;</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Array works as well. Arbitrary names can be used for destructuring.</span>
<span class="token comment">// Note the required parenthesis.</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
  <span class="token string">&quot;([b1, b2]) =&gt; b1.textContent + b2.textContent&quot;</span><span class="token punctuation">,</span>
  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>button1<span class="token punctuation">,</span> button2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Any non-cyclic mix of serializables and handles works.</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;button1&quot;</span><span class="token punctuation">,</span> button1<span class="token punctuation">)</span><span class="token punctuation">;</span>
arg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>button2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
  <span class="token string">&quot;x =&gt; x.button1.textContent + x.list[0].textContent + String(x.foo)&quot;</span><span class="token punctuation">,</span>
  arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># A primitive value.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;num =&gt; num&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># An array.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;array =&gt; array.length&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># An object.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;object =&gt; object.foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># A single handle.</span>
button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;button =&gt; button.textContent&#39;</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span>

<span class="token comment"># Alternative notation using elementHandle.evaluate.</span>
<span class="token keyword">await</span> button<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;(button, from) =&gt; button.textContent.substring(from)&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment"># Object with multiple handles.</span>
button1 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>query_selector<span class="token punctuation">(</span><span class="token string">&#39;window.button1&#39;</span><span class="token punctuation">)</span>
button2 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>query_selector<span class="token punctuation">(</span><span class="token string">&#39;window.button2&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    o =&gt; o.button1.textContent + o.button2.textContent&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&#39;button1&#39;</span><span class="token punctuation">:</span> button1<span class="token punctuation">,</span> <span class="token string">&#39;button2&#39;</span><span class="token punctuation">:</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># Object destructuring works. Note that property names must match</span>
<span class="token comment"># between the destructured object and the argument.</span>
<span class="token comment"># Also note the required parenthesis.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    ({ button1, button2 }) =&gt; button1.textContent + button2.textContent&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&#39;button1&#39;</span><span class="token punctuation">:</span> button1<span class="token punctuation">,</span> <span class="token string">&#39;button2&#39;</span><span class="token punctuation">:</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># Array works as well. Arbitrary names can be used for destructuring.</span>
<span class="token comment"># Note the required parenthesis.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    ([b1, b2]) =&gt; b1.textContent + b2.textContent&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>button1<span class="token punctuation">,</span> button2<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Any non-cyclic mix of serializables and handles works.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    x =&gt; x.button1.textContent + x.list[0].textContent + String(x.foo)&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&#39;button1&#39;</span><span class="token punctuation">:</span> button1<span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>button2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># A primitive value.</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;num =&gt; num&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># An array.</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;array =&gt; array.length&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># An object.</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;object =&gt; object.foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># A single handle.</span>
button <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;window.button&#39;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;button =&gt; button.textContent&#39;</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span>

<span class="token comment"># Alternative notation using elementHandle.evaluate.</span>
button<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;(button, from) =&gt; button.textContent.substring(from)&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment"># Object with multiple handles.</span>
button1 <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;window.button1&#39;</span><span class="token punctuation">)</span>
button2 <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&#39;.button2&#39;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;o =&gt; o.button1.textContent + o.button2.textContent&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&#39;button1&#39;</span><span class="token punctuation">:</span> button1<span class="token punctuation">,</span> <span class="token string">&#39;button2&#39;</span><span class="token punctuation">:</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># Object destructuring works. Note that property names must match</span>
<span class="token comment"># between the destructured object and the argument.</span>
<span class="token comment"># Also note the required parenthesis.</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    ({ button1, button2 }) =&gt; button1.textContent + button2.textContent&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&#39;button1&#39;</span><span class="token punctuation">:</span> button1<span class="token punctuation">,</span> <span class="token string">&#39;button2&#39;</span><span class="token punctuation">:</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># Array works as well. Arbitrary names can be used for destructuring.</span>
<span class="token comment"># Note the required parenthesis.</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    ([b1, b2]) =&gt; b1.textContent + b2.textContent&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>button1<span class="token punctuation">,</span> button2<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Any non-cyclic mix of serializables and handles works.</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    x =&gt; x.button1.textContent + x.list[0].textContent + String(x.foo)&quot;&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token string">&#39;button1&#39;</span><span class="token punctuation">:</span> button1<span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>button2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// A primitive value.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;num =&gt; num&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// An array.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;array =&gt; array.length&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// An object.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;object =&gt; object.foo&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> foo <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// A single handle.</span>
<span class="token class-name"><span class="token keyword">var</span></span> button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;window.button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IJSHandle<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;button =&gt; button.textContent&quot;</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Alternative notation using elementHandle.EvaluateAsync.</span>
<span class="token keyword">await</span> button<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;(button, from) =&gt; button.textContent.substring(from)&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object with multiple handles.</span>
<span class="token class-name"><span class="token keyword">var</span></span> button1 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;window.button1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> button2 <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;window.button2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;o =&gt; o.button1.textContent + o.button2.textContent&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> button1<span class="token punctuation">,</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object destructuring works. Note that property names must match</span>
<span class="token comment">// between the destructured object and the argument.</span>
<span class="token comment">// Also note the required parenthesis.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;({ button1, button2 }) =&gt; button1.textContent + button2.textContent&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> button1<span class="token punctuation">,</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Array works as well. Arbitrary names can be used for destructuring.</span>
<span class="token comment">// Note the required parenthesis.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;([b1, b2]) =&gt; b1.textContent + b2.textContent&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> button1<span class="token punctuation">,</span> button2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Any non-cyclic mix of serializables and handles works.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;x =&gt; x.button1.textContent + x.list[0].textContent + String(x.foo)&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> button1<span class="token punctuation">,</span> list <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> button2 <span class="token punctuation">}</span><span class="token punctuation">,</span> foo <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token keyword">as</span> <span class="token class-name"><span class="token keyword">object</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Right:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Pass |data| as a parameter.</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span>myApp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;some data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Pass |data| as a parameter.</span>
<span class="token class-name">Object</span> result <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;data =&gt; {\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  window.myApp.use(data);\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token comment"># Pass |data| as a parameter.</span>
result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;data =&gt; {
  window.myApp.use(data)
}&quot;&quot;&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token comment"># Pass |data| as a parameter.</span>
result <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;data =&gt; {
  window.myApp.use(data)
}&quot;&quot;&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> text <span class="token operator">=</span> <span class="token string">&quot;some data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Pass data as a parameter</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;data =&gt; { window.myApp.use(data); }&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Wrong:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// There is no |data| in the web page.</span>
  window<span class="token punctuation">.</span>myApp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;some data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> result <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;() =&gt; {\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  // There is no |data| in the web page.\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  window.myApp.use(data);\\n&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;() =&gt; {
  # There is no |data| in the web page.
  window.myApp.use(data)
}&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
result <span class="token operator">=</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;() =&gt; {
  # There is no |data| in the web page.
  window.myApp.use(data)
}&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> text <span class="token operator">=</span> <span class="token string">&quot;some data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// Pass data as a parameter</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">@&quot;data =&gt; {
  // There is no |data| in the web page.
  window.myApp.use(data);
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),o=[e];function c(u,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","evaluating.html.vue"]]);export{r as default};
