import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c,a as t,b as n,d as s,w as a,f as r}from"./app-207e7d61.js";const u={},d=t("p",null,"Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.",-1),h=t("p",null,"Get started by installing Playwright and running the example test to see it in action.",-1),m={href:"https://pypi.org/project/pytest-playwright/",target:"_blank",rel:"noopener noreferrer"},g=r(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pytest-playwright
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Install the required browsers:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="add-example-test" tabindex="-1"><a class="header-anchor" href="#add-example-test" aria-hidden="true">#</a> Add Example Test</h2><p>Create a <code>test_my_application.py</code> file inside the current working directory or in a sub-directory with the code below:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> Page<span class="token punctuation">,</span> expect


<span class="token keyword">def</span> <span class="token function">test_homepage_has_Playwright_in_title_and_get_started_link_linking_to_the_intro_page</span><span class="token punctuation">(</span>page<span class="token punctuation">:</span> Page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://playwright.dev/&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># Expect a title &quot;to contain&quot; a substring.</span>
    expect<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span>to_have_title<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;Playwright&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># create a locator</span>
    get_started <span class="token operator">=</span> page<span class="token punctuation">.</span>get_by_role<span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;Get started&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># Expect an attribute &quot;to be strictly equal&quot; to the value.</span>
    expect<span class="token punctuation">(</span>get_started<span class="token punctuation">)</span><span class="token punctuation">.</span>to_have_attribute<span class="token punctuation">(</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/docs/intro&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># Click the get started link.</span>
    get_started<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Expects the URL to contain intro.</span>
    expect<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span>to_have_url<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;.*intro&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="running-the-example-test" tabindex="-1"><a class="header-anchor" href="#running-the-example-test" aria-hidden="true">#</a> Running the Example Test</h2><p>By default tests will be run on chromium. This can be configured via the CLI options. Tests are run in headless mode meaning no browser UI will open up when running the tests. Results of the tests and test logs will be shown in the terminal.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="what-s-next" tabindex="-1"><a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a> What&#39;s next</h2>`,10);function k(v,b){const e=i("RouterLink"),o=i("ExternalLinkIcon");return p(),c("div",null,[d,t("p",null,[n("Playwright recommends using the official "),s(e,{to:"/book/playwright/test-runners.html"},{default:a(()=>[n("Playwright Pytest plugin")]),_:1}),n(" to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the "),s(e,{to:"/book/playwright/library-python.html"},{default:a(()=>[n("library")]),_:1}),n(" to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library.")]),h,t("p",null,[n("Install the "),t("a",m,[n("Pytest plugin"),s(o)]),n(":")]),g,t("ul",null,[t("li",null,[s(e,{to:"/book/playwright/writing-tests-python.html"},{default:a(()=>[n("Write tests using web first assertions, page fixtures and locators")]),_:1})]),t("li",null,[s(e,{to:"/book/playwright/running-tests-python.html"},{default:a(()=>[n("Run single test, multiple tests, headed mode")]),_:1})]),t("li",null,[s(e,{to:"/book/playwright/codegen.html"},{default:a(()=>[n("Generate tests with Codegen")]),_:1})]),t("li",null,[s(e,{to:"/book/playwright/trace-viewer-intro.html"},{default:a(()=>[n("See a trace of your tests")]),_:1})])])])}const w=l(u,[["render",k],["__file","intro-python.html.vue"]]);export{w as default};
