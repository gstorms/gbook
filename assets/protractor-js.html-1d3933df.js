import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as u,e as r,a as n,b as s,d as a,w as o,f as p}from"./app-207e7d61.js";const k={},d=n("h2",{id:"migration-principles",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#migration-principles","aria-hidden":"true"},"#"),s(" Migration Principles")],-1),g=n("li",null,'No need for "webdriver-manager" / Selenium.',-1),m={href:"https://www.protractortest.org/#/api?view=ElementFinder",target:"_blank",rel:"noopener noreferrer"},v=n("a",{href:"./api/class-locator"},"Playwright Test Locator",-1),h={href:"https://www.protractortest.org/#/api?view=ProtractorBrowser.prototype.waitForAngular",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"waitForAngular",-1),b=n("li",null,"Donâ€™t forget to await in Playwright Test",-1),w=p(`<h2 id="cheat-sheet" tabindex="-1"><a class="header-anchor" href="#cheat-sheet" aria-hidden="true">#</a> Cheat Sheet</h2><table><thead><tr><th>Protractor</th><th>Playwright Test</th></tr></thead><tbody><tr><td><code>element(by.buttonText(&#39;...&#39;))</code></td><td><code>page.locator(&#39;button, input[type=&quot;button&quot;], input[type=&quot;submit&quot;] &gt;&gt; text=&quot;...&quot;&#39;)</code></td></tr><tr><td><code>element(by.css(&#39;...&#39;))</code></td><td><code>page.locator(&#39;...&#39;)</code></td></tr><tr><td><code>element(by.cssContainingText(&#39;..1..&#39;, &#39;..2..&#39;))</code></td><td><code>page.locator(&#39;..1.. &gt;&gt; text=..2..&#39;)</code></td></tr><tr><td><code>element(by.id(&#39;...&#39;))</code></td><td><code>page.locator(&#39;#...&#39;)</code></td></tr><tr><td><code>element(by.model(&#39;...&#39;))</code></td><td><code>page.locator(&#39;[ng-model=&quot;...&quot;]&#39;)</code></td></tr><tr><td><code>element(by.repeater(&#39;...&#39;))</code></td><td><code>page.locator(&#39;[ng-repeat=&quot;...&quot;]&#39;)</code></td></tr><tr><td><code>element(by.xpath(&#39;...&#39;))</code></td><td><code>page.locator(&#39;xpath=...&#39;)</code></td></tr><tr><td><code>element.all</code></td><td><code>page.locator</code></td></tr><tr><td><code>browser.get(url)</code></td><td><code>await page.goto(url)</code></td></tr><tr><td><code>browser.getCurrentUrl()</code></td><td><code>page.url()</code></td></tr></tbody></table><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Protractor:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;angularjs homepage todo list&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should add a todo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    browser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://angularjs.org&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">element</span><span class="token punctuation">(</span>by<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;todoList.todoText&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendKeys</span><span class="token punctuation">(</span><span class="token string">&#39;first test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">element</span><span class="token punctuation">(</span>by<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;[value=&quot;add&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> todoList <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>by<span class="token punctuation">.</span><span class="token function">repeater</span><span class="token punctuation">(</span><span class="token string">&#39;todo in todoList.todos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>todoList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>todoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">&#39;first test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// You wrote your first test, cross it off the list</span>
    todoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span>by<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> completedAmount <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>by<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">&#39;.done-true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>completedAmount<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Line-by-line migration to Playwright Test:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;angularjs homepage todo list&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should add a todo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 2, 3</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://angularjs.org&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>

    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;[ng-model=&quot;todoList.todoText&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;first test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;[value=&quot;add&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> todoList <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;[ng-repeat=&quot;todo in todoList.todos&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>todoList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>todoList<span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;first test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">useInnerText</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// You wrote your first test, cross it off the list</span>
    <span class="token keyword">await</span> todoList<span class="token punctuation">.</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;textbox&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> completedAmount <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.done-true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>completedAmount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Migration highlights (see inline comments in the Playwright Test code snippet):</p><ol><li>Each Playwright Test file has explicit import of the <code>test</code> and <code>expect</code> functions</li><li>Test function is marked with <code>async</code></li><li>Playwright Test is given a <code>page</code> as one of its parameters. This is one of the many <a href="./api/class-fixtures">useful fixtures</a> in Playwright Test.</li><li>Almost all Playwright calls are prefixed with <code>await</code></li><li>Locator creation with [<code>method: Page.locator</code>] is one of the few methods that is sync.</li></ol><h2 id="polyfilling-waitforangular" tabindex="-1"><a class="header-anchor" href="#polyfilling-waitforangular" aria-hidden="true">#</a> Polyfilling <code>waitForAngular</code></h2>`,10),y={href:"https://www.protractortest.org/#/api?view=ProtractorBrowser.prototype.waitForAngular",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"waitForAngular",-1),_=p(`<p>However, it might come handy in some edge cases.<br> Here&#39;s how to polyfill <code>waitForAngular</code> function in Playwright Test:</p><ol><li><p>Make sure you have protractor installed in your package.json</p></li><li><p>Polyfill function</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">waitForAngular</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
â€‹<span class="token keyword">const</span> clientSideScripts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;protractor/built/clientsidescripts.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

â€‹<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">executeScriptAsync</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> script<span class="token punctuation">,</span> <span class="token operator">...</span>scriptArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  â€‹<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    â€‹new Promise((resolve, reject) =&gt; {
      â€‹const callback = (errMessage) =&gt; {
        â€‹if (errMessage)
          â€‹reject(new Error(errMessage));
        â€‹else
          â€‹resolve();
      â€‹};
      â€‹(function() {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>script<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}).apply(null, [...</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>scriptArgs<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, callback]);
    â€‹})
  â€‹</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
â€‹<span class="token punctuation">}</span>

â€‹<span class="token keyword">await</span> <span class="token function">executeScriptAsync</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> clientSideScripts<span class="token punctuation">.</span>waitForAngular<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don&#39;t want to keep a version protractor around, you can also use this simpler approach using this function (only works for Angular 2+):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">waitForAngular</span><span class="token punctuation">(</span><span class="token parameter">page</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// @ts-expect-error</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>getAllAngularTestabilities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// @ts-expect-error</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">getAllAngularTestabilities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>whenStable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// @ts-expect-error</span>
      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">whenStable</span><span class="token punctuation">(</span><span class="token parameter">testability</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> testability<span class="token punctuation">.</span><span class="token function">whenStable</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Polyfill usage</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.org&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">waitForAngular</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="playwright-test-super-powers" tabindex="-1"><a class="header-anchor" href="#playwright-test-super-powers" aria-hidden="true">#</a> Playwright Test Super Powers</h2><p>Once you&#39;re on Playwright Test, you get a lot!</p><ul><li>Full zero-configuration TypeScript support</li><li>Run tests across <strong>all web engines</strong> (Chrome, Firefox, Safari) on <strong>any popular operating system</strong> (Windows, macOS, Ubuntu)</li><li>Full support for multiple origins, <a href="./api/class-frame">(i)frames</a>, <a href="./pages">tabs and contexts</a></li><li>Run tests in parallel across multiple browsers</li><li>Built-in test artifact collection: <a href="./test-configuration#record-video">video recording</a>, <a href="./test-configuration#automatic-screenshots">screenshots</a> and <a href="./test-configuration#record-test-trace">playwright traces</a></li></ul><p>You also get all these âœ¨ awesome tools âœ¨ that come bundled with Playwright Test:</p>`,6),P=n("li",null,[n("a",{href:"./auth#code-generation"},"Playwright Test Code generation")],-1),T=n("li",null,[n("a",{href:"./trace-viewer"},"Playwright Tracing"),s(" for post-mortem debugging")],-1),A=p('<h2 id="further-reading" tabindex="-1"><a class="header-anchor" href="#further-reading" aria-hidden="true">#</a> Further Reading</h2><p>Learn more about Playwright Test runner:</p><ul><li><a href="./intro">Getting Started</a></li><li><a href="./test-fixtures">Fixtures</a></li><li><a href="./locators">Locators</a></li><li><a href="./test-assertions">Assertions</a></li><li><a href="./actionability">Auto-waiting</a></li></ul>',3);function j(q,L){const t=c("ExternalLinkIcon"),e=c("RouterLink");return l(),u("div",null,[r(" TOC "),d,n("ul",null,[g,n("li",null,[s("Protractorâ€™s "),n("a",m,[s("ElementFinder"),a(t)]),s(" â‡„ "),v]),n("li",null,[s("Protractorâ€™s "),n("a",h,[f,a(t)]),s(" â‡„ Playwright Test "),a(e,{to:"/book/playwright/actionability.html"},{default:o(()=>[s("auto-waiting")]),_:1})]),b]),w,n("p",null,[s("Playwright Test has built-in "),a(e,{to:"/book/playwright/actionability.html"},{default:o(()=>[s("auto-waiting")]),_:1}),s(" that makes protractor's "),n("a",y,[x,a(t)]),s(" unneeded in general case.")]),_,n("ul",null,[n("li",null,[a(e,{to:"/book/playwright/debug.html"},{default:o(()=>[s("Playwright Inspector")]),_:1})]),P,T]),A])}const C=i(k,[["render",j],["__file","protractor-js.html.vue"]]);export{C as default};
