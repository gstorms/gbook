import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-cfbf85c1.js";const t={},e=p(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> python</h1><p>添加代码块</p><h3 id="docker中安装poetry" tabindex="-1"><a class="header-anchor" href="#docker中安装poetry" aria-hidden="true">#</a> Docker中安装poetry</h3><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> python:3.6.6-alpine3.7</span>

<span class="token instruction"><span class="token keyword">ARG</span> YOUR_ENV</span>

<span class="token instruction"><span class="token keyword">ENV</span> YOUR_ENV=<span class="token variable">\${YOUR_ENV}</span> </span>
  PYTHONFAULTHANDLER=1 
  PYTHONUNBUFFERED=1 
  PYTHONHASHSEED=random 
  PIP_NO_CACHE_DIR=off 
  PIP_DISABLE_PIP_VERSION_CHECK=on 
  PIP_DEFAULT_TIMEOUT=100 
  POETRY_VERSION=1.0.0

<span class="token comment"># System deps:</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install <span class="token string">&quot;poetry==$POETRY_VERSION&quot;</span></span>

<span class="token comment"># Copy only requirements to cache them in docker layer</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /code</span>
<span class="token instruction"><span class="token keyword">COPY</span> poetry.lock pyproject.toml /code/</span>

<span class="token comment"># Project initialization:</span>
<span class="token instruction"><span class="token keyword">RUN</span> poetry config virtualenvs.create false </span>
  &amp;&amp; poetry install $(test &quot;$YOUR_ENV&quot; == production &amp;&amp; echo &quot;--no-dev&quot;) --no-interaction --no-ansi

<span class="token comment"># Creating folders, and files for a project:</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /code</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="requests批量上传文件" tabindex="-1"><a class="header-anchor" href="#requests批量上传文件" aria-hidden="true">#</a> requests批量上传文件</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">upload_pic</span><span class="token punctuation">(</span>pics<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    上传图片到后台
    &quot;&quot;&quot;</span>
    url<span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>backurl<span class="token punctuation">}</span></span><span class="token string">/app/picmsg/picmsg.php&quot;</span></span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;method&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;uploadpic&quot;</span><span class="token punctuation">}</span>
    files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> pic <span class="token keyword">in</span> pics<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>pic<span class="token punctuation">)</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> pics<span class="token punctuation">:</span>
        <span class="token keyword">if</span> p<span class="token punctuation">[</span><span class="token string">&#39;isdownload&#39;</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        pic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;files[]&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token string">&#39;picname&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>base_path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>p<span class="token punctuation">[</span><span class="token string">&#39;picpath&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token string">&#39;picpath&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        files<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pic<span class="token punctuation">)</span>
    res<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">)</span>
    <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            resp <span class="token operator">=</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>resp<span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;上传图片到后台结束&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;上传图片到后台出错：</span><span class="token interpolation"><span class="token punctuation">{</span>res<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> JSONDecodeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;服务器返回数据有问题</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;上传图片到后台失败&quot;</span><span class="token punctuation">)</span>
    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;上传图片到后台结束&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps

<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">infunc</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
        res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;花费了</span><span class="token interpolation"><span class="token punctuation">{</span>end<span class="token operator">-</span>start<span class="token punctuation">}</span></span><span class="token string">秒&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
    <span class="token keyword">return</span> infunc

<span class="token decorator annotation punctuation">@timer</span>
<span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    冒泡排序
    &quot;&quot;&quot;</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token comment"># 遍历所有数组元素</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 最后i个元素已经就位</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 如果找到的元素大于下一个元素，则交换</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
    <span class="token keyword">return</span> arr


<span class="token comment">#     冒泡排序</span>

<span class="token comment"># bubble_sort</span>
<span class="token comment"># 花费了0.1639995574951172秒</span>
 装饰器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义一个装饰器函数</span>
<span class="token keyword">def</span> <span class="token function">cache</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cached_results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> args <span class="token keyword">in</span> cached_results<span class="token punctuation">:</span>
            <span class="token keyword">return</span> cached_results<span class="token punctuation">[</span>args<span class="token punctuation">]</span>
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
        cached_results<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> result
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> wrapper

<span class="token decorator annotation punctuation">@cache</span>
<span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n
    <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> 缓存
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="all-or-any" tabindex="-1"><a class="header-anchor" href="#all-or-any" aria-hidden="true">#</a> ALL OR ANY</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;At least one True&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token builtin">all</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Not one False&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;At least one True and one False&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pprint" tabindex="-1"><a class="header-anchor" href="#pprint" aria-hidden="true">#</a> PPrint</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> pprint
url <span class="token operator">=</span> <span class="token string">&#39;https://randomuser.me/api/?results=1&#39;</span>
users <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>users<span class="token punctuation">)</span> pprint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zip" tabindex="-1"><a class="header-anchor" href="#zip" aria-hidden="true">#</a> zip</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
zipped <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> vals<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span>
<span class="token comment"># {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组添加元素" tabindex="-1"><a class="header-anchor" href="#数组添加元素" aria-hidden="true">#</a> 数组添加元素</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment"># append 可以在列表后方添加一个元素</span>
arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment"># [1,2,3,4]</span>

<span class="token comment"># extend 可以在将另外一个列表的所有元素添加到该列表后边</span>
arr<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment"># [1,2,3,4,5,6]</span>

<span class="token comment"># insert 可以根据索引位置在列表指定的位置插入元素</span>
arr<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment"># [1, 2, &#39;b&#39;, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则分组匹配-p" tabindex="-1"><a class="header-anchor" href="#正则分组匹配-p" aria-hidden="true">#</a> 正则分组匹配 <code>(?P...)</code></h3><p>例：身份证 <code>1102231990xxxxxxxx</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
s <span class="token operator">=</span> <span class="token string">&#39;1102231990xxxxxxxx&#39;</span>
res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?P&lt;province&gt;\\d{3})(?P&lt;city&gt;\\d{3})(?P&lt;born_year&gt;\\d{4})&#39;</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>groupdict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此分组取出结果为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;province&#39;<span class="token operator">:</span> &#39;<span class="token number">110</span>&#39;<span class="token punctuation">,</span> &#39;city&#39;<span class="token operator">:</span> &#39;<span class="token number">223</span>&#39;<span class="token punctuation">,</span> &#39;born_year&#39;<span class="token operator">:</span> &#39;<span class="token number">1990</span>&#39;<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接将匹配结果直接转为字典模式，方便使用。</p><h3 id="python实现链式调用" tabindex="-1"><a class="header-anchor" href="#python实现链式调用" aria-hidden="true">#</a> Python实现链式调用</h3><p>在python中实现链式调用只需在函数返回对象自己就行了。 </p><p>原理：上一个方法返回对象，是下一个调用方法的执行对象，依次执行下去，就成了链式调用方法</p><p>链式调用，返回对象自己， 可以再方法后继续接方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name
        <span class="token keyword">return</span>  self
    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age
        <span class="token keyword">return</span>  self
    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age
p<span class="token operator">=</span>person<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token string">&#39;tyh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python-中文排序" tabindex="-1"><a class="header-anchor" href="#python-中文排序" aria-hidden="true">#</a> Python-中文排序</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pypinyin <span class="token keyword">import</span> lazy_pinyin

a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;中国&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;啊&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1您&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;台球&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;bu是&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># [&#39;中国&#39;, &#39;啊&#39;, &#39;你好&#39;, &#39;1您&#39;, &#39;台球&#39;, &#39;bu是&#39;]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lazy_pinyin<span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> a<span class="token punctuation">]</span>
<span class="token comment"># [&#39;zhongguo&#39;, &#39;a&#39;, &#39;nihao&#39;, &#39;1nin&#39;, &#39;taiwan&#39;, &#39;bushi&#39;]</span>
aa <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># {&#39;zhongguo&#39;: &#39;中国&#39;, &#39;a&#39;: &#39;啊&#39;, &#39;nihao&#39;: &#39;你好&#39;, &#39;1nin&#39;: &#39;1您&#39;, &#39;taiwan&#39;: &#39;台球&#39;, &#39;bushi&#39;: &#39;bu是&#39;}</span>
ss <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>aa<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> aa<span class="token punctuation">:</span>aa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># [(&#39;1nin&#39;, &#39;1您&#39;), (&#39;a&#39;, &#39;啊&#39;), (&#39;bushi&#39;, &#39;bu是&#39;), (&#39;nihao&#39;, &#39;你好&#39;), (&#39;taiwan&#39;, &#39;台球&#39;), (&#39;zhongguo&#39;, &#39;中国&#39;)]</span>
sa <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>
res <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>sa<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [&#39;1您&#39;, &#39;啊&#39;, &#39;bu是&#39;, &#39;你好&#39;, &#39;台球&#39;, &#39;中国&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="两个数组取交集、并集、差集" tabindex="-1"><a class="header-anchor" href="#两个数组取交集、并集、差集" aria-hidden="true">#</a> 两个数组取交集、并集、差集</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 数组取交集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>intersection<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 数组取并集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>union<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 数组取差集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="识别图片中的条码-快递单号" tabindex="-1"><a class="header-anchor" href="#识别图片中的条码-快递单号" aria-hidden="true">#</a> 识别图片中的条码（快递单号）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
<span class="token keyword">import</span> os
<span class="token keyword">import</span> re
<span class="token keyword">import</span> sys

<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pyzbar<span class="token punctuation">.</span>pyzbar <span class="token keyword">as</span> pyzbar


<span class="token keyword">def</span> <span class="token function">barcode</span><span class="token punctuation">(</span>gray<span class="token punctuation">)</span><span class="token punctuation">:</span>
    texts <span class="token operator">=</span> pyzbar<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>gray<span class="token punctuation">)</span>
    <span class="token keyword">if</span> texts <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        angle <span class="token operator">=</span> barcode_angle<span class="token punctuation">(</span>gray<span class="token punctuation">)</span>
        <span class="token keyword">if</span> angle <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">:</span>
            angle <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token operator">-</span> angle
        texts <span class="token operator">=</span> bar<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> angle<span class="token punctuation">)</span>
    <span class="token keyword">if</span> texts <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        gray <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1.1</span> <span class="token operator">*</span> gray <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        angle <span class="token operator">=</span> barcode_angle<span class="token punctuation">(</span>gray<span class="token punctuation">)</span>
        <span class="token keyword">if</span> angle <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">:</span>
            angle <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">90</span> <span class="token operator">-</span> angle
        texts <span class="token operator">=</span> bar<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> angle<span class="token punctuation">)</span>

    <span class="token keyword">if</span> texts<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            angle <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>i
            texts <span class="token operator">=</span> bar<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> angle<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> texts<span class="token punctuation">:</span>
                texts <span class="token operator">=</span> bar<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">-</span>angle<span class="token punctuation">)</span>
            <span class="token keyword">if</span> texts<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
    <span class="token keyword">return</span> texts

<span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> angle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    旋转后进行识别条码
    &quot;&quot;&quot;</span>
    gray <span class="token operator">=</span> image
    bar <span class="token operator">=</span> rotate_bound<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">-</span> angle<span class="token punctuation">)</span>
    roi <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>bar<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>
    texts <span class="token operator">=</span> pyzbar<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>roi<span class="token punctuation">)</span>
    <span class="token keyword">return</span> texts


<span class="token keyword">def</span> <span class="token function">barcode_angle</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    计算条形码的倾斜度
    &quot;&quot;&quot;</span>
    gray <span class="token operator">=</span> image
    ret<span class="token punctuation">,</span> binary <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">)</span>
    kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
    dilation <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    erosion <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>dilation<span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    erosion <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>erosion<span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    erosion <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>erosion<span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    
    contours<span class="token punctuation">,</span> hierarchy <span class="token operator">=</span> cv2<span class="token punctuation">.</span>findContours<span class="token punctuation">(</span>
        erosion<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>RETR_EXTERNAL<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CHAIN_APPROX_NONE<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>contours<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        rect <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        rect <span class="token operator">=</span> cv2<span class="token punctuation">.</span>minAreaRect<span class="token punctuation">(</span>contours<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># return -18</span>
    <span class="token keyword">return</span> rect<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">rotate_bound</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> angle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    旋转图片
    :param image 传入的图片
    :param angle 旋转的角度
    &quot;&quot;&quot;</span>
    <span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token punctuation">(</span>cX<span class="token punctuation">,</span> cY<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>w <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> h <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>

    M <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getRotationMatrix2D<span class="token punctuation">(</span><span class="token punctuation">(</span>cX<span class="token punctuation">,</span> cY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span>angle<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
    cos <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    sin <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    nW <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">*</span> sin<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>w <span class="token operator">*</span> cos<span class="token punctuation">)</span><span class="token punctuation">)</span>
    nH <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">*</span> cos<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>w <span class="token operator">*</span> sin<span class="token punctuation">)</span><span class="token punctuation">)</span>

    M<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>nW <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> cX
    M<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>nH <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> cY

    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>image<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token punctuation">(</span>nW<span class="token punctuation">,</span> nH<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_jpg</span><span class="token punctuation">(</span>img_base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    获取图片列表
    &quot;&quot;&quot;</span>
    jpgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>img_base<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#获取文件列表</span>
        <span class="token keyword">if</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;jpg&quot;</span> <span class="token keyword">or</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;png&quot;</span><span class="token punctuation">:</span>  <span class="token comment">#筛选jpg/png文件（截图）</span>
            jpgs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">return</span> jpgs

<span class="token keyword">def</span> <span class="token function">get_barcode</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tt <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    image<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>
    texts <span class="token operator">=</span> barcode<span class="token punctuation">(</span>gray<span class="token punctuation">)</span>
    <span class="token comment"># print(texts)</span>
    <span class="token keyword">if</span> texts<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;未识别成功&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> text <span class="token keyword">in</span> texts<span class="token punctuation">:</span>
            tt <span class="token operator">=</span> text<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token string">&quot;MMM&quot;</span> <span class="token keyword">in</span> tt<span class="token punctuation">:</span>
                patt <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;(?&lt;=&#39;k5&#39;:&#39;)(\\d+)&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    tt <span class="token operator">=</span> patt<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                    tt <span class="token operator">=</span> <span class="token string">&quot;识别失败&quot;</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;识别成功&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span>
    <span class="token keyword">return</span> tt


<span class="token keyword">def</span> <span class="token function">img2text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
    img_base <span class="token operator">=</span> path<span class="token operator">+</span><span class="token string">&#39;\\images&#39;</span>
    jpgs <span class="token operator">=</span> get_jpg<span class="token punctuation">(</span>img_base<span class="token punctuation">)</span>
    data_m <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> jpgs<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">&#39;*&#39;</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>
        img_path <span class="token operator">=</span> img_base<span class="token operator">+</span><span class="token string">&#39;\\\\&#39;</span><span class="token operator">+</span>i
        data <span class="token operator">=</span> get_barcode<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
        <span class="token comment"># data_m.append(data)</span>
        data_m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data
    <span class="token keyword">return</span> data_m

<span class="token comment"># img2text()</span>

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;数据需要在当前目录下的images文件夹中&quot;</span><span class="token punctuation">)</span>
    data_m<span class="token operator">=</span>img2text<span class="token punctuation">(</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data_m<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    result_path <span class="token operator">=</span> <span class="token string">&quot;result.json&quot;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>result_path<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> w<span class="token punctuation">:</span>
        w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除目录中所有文件和文件夹" tabindex="-1"><a class="header-anchor" href="#删除目录中所有文件和文件夹" aria-hidden="true">#</a> 删除目录中所有文件和文件夹</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os<span class="token punctuation">,</span> shutil
 
<span class="token builtin">dir</span> <span class="token operator">=</span> <span class="token string">&#39;path/to/dir&#39;</span>
<span class="token keyword">for</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">,</span> files<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fastapi定时任务" tabindex="-1"><a class="header-anchor" href="#fastapi定时任务" aria-hidden="true">#</a> fastapi定时任务</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> apscheduler<span class="token punctuation">.</span>schedulers<span class="token punctuation">.</span>background <span class="token keyword">import</span> BackgroundScheduler
<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI

app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>on_event</span><span class="token punctuation">(</span><span class="token string">&quot;startup&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">apschedule_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    定时任务
    &quot;&quot;&quot;</span>
    sche <span class="token operator">=</span> BackgroundScheduler<span class="token punctuation">(</span><span class="token punctuation">)</span>
    zip_job <span class="token operator">=</span> sche<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>
        func<span class="token operator">=</span>zip_job<span class="token punctuation">,</span> trigger<span class="token operator">=</span><span class="token string">&#39;interval&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;00001&#39;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;zip pic job&#39;</span><span class="token punctuation">,</span>
        jobstore<span class="token operator">=</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> executor<span class="token operator">=</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> replace_existing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span>
    <span class="token punctuation">)</span>
    upload_job <span class="token operator">=</span> sche<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>
        func<span class="token operator">=</span>upload_to_backend<span class="token punctuation">,</span> trigger<span class="token operator">=</span><span class="token string">&#39;interval&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;00002&#39;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;upload pic to backend job&#39;</span><span class="token punctuation">,</span>
        jobstore<span class="token operator">=</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> executor<span class="token operator">=</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> replace_existing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">1.5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span>
    <span class="token punctuation">)</span>

    clear_temp_jon <span class="token operator">=</span> sche<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>func<span class="token operator">=</span>clear_tmp<span class="token punctuation">,</span> trigger<span class="token operator">=</span><span class="token string">&quot;interval&quot;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;00003&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;clear temp dir&quot;</span><span class="token punctuation">,</span>
                                  jobstore<span class="token operator">=</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> executor<span class="token operator">=</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> replace_existing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span>

    sche<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
 fastapi定时任务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取本机ip地址" tabindex="-1"><a class="header-anchor" href="#获取本机ip地址" aria-hidden="true">#</a> 获取本机IP地址</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> socket
ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,41),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","python.html.vue"]]);export{k as default};
