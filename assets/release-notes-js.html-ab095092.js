import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as r,c as u,a as n,b as s,d as a,w as p,f as t}from"./app-207e7d61.js";const d={},k=n("p",null,"import LiteYouTube from '@site/src/components/LiteYouTube';",-1),h=n("h2",{id:"version-1-31",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#version-1-31","aria-hidden":"true"},"#"),s(" Version 1.31")],-1),m=n("h3",{id:"new-apis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-apis","aria-hidden":"true"},"#"),s(" New APIs")],-1),g=t(`<li><p>New property [<code>property: TestProject.dependencies</code>] to configure dependencies between projects.</p><p>Using dependencies allows global setup to produce traces and other artifacts,<br> see the setup steps in the test report and more.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">projects</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;setup&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">testMatch</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">global.setup\\.ts</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;chromium&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> devices<span class="token punctuation">[</span><span class="token string">&#39;Desktop Chrome&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;firefox&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> devices<span class="token punctuation">[</span><span class="token string">&#39;Desktop Firefox&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;webkit&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> devices<span class="token punctuation">[</span><span class="token string">&#39;Desktop Safari&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),v=n("code",null,"method: LocatorAssertions.toBeInViewport",-1),b={href:"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Make sure at least some part of element intersects viewport.</span>
<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Make sure element is fully outside of viewport.</span>
<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeInViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Make sure that at least half of the element intersects viewport.</span>
<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeInViewport</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">ratio</span><span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f=n("h3",{id:"miscellaneous",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#miscellaneous","aria-hidden":"true"},"#"),s(" Miscellaneous")],-1),y=t("<li>DOM snapshots in trace viewer can be now opened in a separate window.</li><li>New method <code>defineConfig</code> to be used in <code>playwright.config</code>.</li><li>New option [<code>option: Route.fetch.maxRedirects</code>] for method [<code>method: Route.fetch</code>].</li><li>Playwright now supports Debian 11 arm64.</li>",4),x=n("h3",{id:"⚠️-breaking-change-in-component-tests",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#⚠️-breaking-change-in-component-tests","aria-hidden":"true"},"#"),s(" ⚠️ Breaking change in component tests")],-1),_=n("p",null,[s("Note: "),n("strong",null,"component tests only"),s(", does not affect end-to-end tests.")],-1),P=n("code",null,"playwright-ct.config",-1),T=n("code",null,"defineConfig",-1),j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Before</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> type PlaywrightTestConfig<span class="token punctuation">,</span> devices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/experimental-ct-react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token literal-property property">config</span><span class="token operator">:</span> PlaywrightTestConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... config goes here ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Replace <code>config</code> variable definition with <code>defineConfig</code> call:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// After</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig<span class="token punctuation">,</span> devices <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/experimental-ct-react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ... config goes here ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="browser-versions" tabindex="-1"><a class="header-anchor" href="#browser-versions" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 111.0.5563.19</li><li>Mozilla Firefox 109.0</li><li>WebKit 16.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 110</li><li>Microsoft Edge 110</li></ul><h2 id="version-1-30" tabindex="-1"><a class="header-anchor" href="#version-1-30" aria-hidden="true">#</a> Version 1.30</h2><h3 id="browser-versions-1" tabindex="-1"><a class="header-anchor" href="#browser-versions-1" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 110.0.5481.38</li><li>Mozilla Firefox 108.0.2</li><li>WebKit 16.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 109</li><li>Microsoft Edge 109</li></ul><h2 id="version-1-29" tabindex="-1"><a class="header-anchor" href="#version-1-29" aria-hidden="true">#</a> Version 1.29</h2>`,13),C=n("h3",{id:"new-apis-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-apis-1","aria-hidden":"true"},"#"),s(" New APIs")],-1),A=t(`<li><p>New method [<code>method: Route.fetch</code>] and new option <code>json</code> for [<code>method: Route.fulfill</code>]:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/api/settings&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Fetch original settings.</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Force settings theme to a predefined value.</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  json<span class="token punctuation">.</span>theme <span class="token operator">=</span> <span class="token string">&#39;Solorized&#39;</span><span class="token punctuation">;</span>

  <span class="token comment">// Fulfill with modified data.</span>
  <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span> json <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>New method [<code>method: Locator.all</code>] to iterate over all matching elements:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Check all checkboxes!</span>
<span class="token keyword">const</span> checkboxes <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;checkbox&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> checkbox <span class="token keyword">of</span> <span class="token keyword">await</span> checkboxes<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> checkbox<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>[<code>method: Locator.selectOption</code>] matches now by value or label:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>red<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>green<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Green<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> element<span class="token punctuation">.</span><span class="token function">selectOption</span><span class="token punctuation">(</span><span class="token string">&#39;Red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,3),R=t(`<p>Retry blocks of code until all assertions pass:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S=t(`<li><p>Automatically capture <strong>full page screenshot</strong> on test failure:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">screenshot</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;only-on-failure&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fullPage</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),I=n("h3",{id:"miscellaneous-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#miscellaneous-1","aria-hidden":"true"},"#"),s(" Miscellaneous")],-1),B={href:"https://code.visualstudio.com/docs/languages/jsconfig",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"jsconfig.json",-1),V=n("li",null,[s("New options "),n("code",null,"args"),s(" and "),n("code",null,"proxy"),s(" for ["),n("code",null,"method: AndroidDevice.launchBrowser"),s("].")],-1),N=n("li",null,[s("Option "),n("code",null,"postData"),s(" in method ["),n("code",null,"method: Route.continue"),s("] now supports [Serializable] values.")],-1),M=t('<h3 id="browser-versions-2" tabindex="-1"><a class="header-anchor" href="#browser-versions-2" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 109.0.5414.46</li><li>Mozilla Firefox 107.0</li><li>WebKit 16.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 108</li><li>Microsoft Edge 108</li></ul><h2 id="version-1-28" tabindex="-1"><a class="header-anchor" href="#version-1-28" aria-hidden="true">#</a> Version 1.28</h2>',5),q=t(`<h3 id="playwright-tools" tabindex="-1"><a class="header-anchor" href="#playwright-tools" aria-hidden="true">#</a> Playwright Tools</h3><ul><li><strong>Record at Cursor in VSCode.</strong> You can run the test, position the cursor at the end of the test and continue generating the test.</li></ul><figure><img src="https://user-images.githubusercontent.com/746130/202005839-aba2eeba-217b-424d-8496-8b4f5fa72f41.png" alt="New VSCode Extension" tabindex="0" loading="lazy"><figcaption>New VSCode Extension</figcaption></figure><ul><li><strong>Live Locators in VSCode.</strong> You can hover and edit locators in VSCode to get them highlighted in the opened browser.</li><li><strong>Live Locators in CodeGen.</strong> Generate a locator for any element on the page using &quot;Explore&quot; tool.</li></ul><figure><img src="https://user-images.githubusercontent.com/746130/201796876-01567a0b-ca61-4a9d-b12b-04786c471671.png" alt="Locator Explorer" tabindex="0" loading="lazy"><figcaption>Locator Explorer</figcaption></figure><ul><li><strong>Codegen and Trace Viewer Dark Theme.</strong> Automatically picked up from operating system settings.</li></ul><figure><img src="https://user-images.githubusercontent.com/746130/201797969-603f74df-d7cf-4c56-befd-798dbd269796.png" alt="Dark Theme" tabindex="0" loading="lazy"><figcaption>Dark Theme</figcaption></figure><h3 id="test-runner" tabindex="-1"><a class="header-anchor" href="#test-runner" aria-hidden="true">#</a> Test Runner</h3><ul><li><p>Configure retries and test timeout for a file or a test with [<code>method: Test.describe.configure</code>].</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Each test in the file will be retried twice and have a timeout of 20 seconds.</span>
test<span class="token punctuation">.</span>describe<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">retries</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">20_000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;runs first&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;runs second&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Use [<code>property: TestProject.snapshotPathTemplate</code>] and [<code>property: TestConfig.snapshotPathTemplate</code>] to configure a template controlling location of snapshots generated by [<code>method: PageAssertions.toHaveScreenshot#1</code>] and [<code>method: SnapshotAssertions.toMatchSnapshot#1</code>].</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">testDir</span><span class="token operator">:</span> <span class="token string">&#39;./tests&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">snapshotPathTemplate</span><span class="token operator">:</span> <span class="token string">&#39;{testDir}/__screenshots__/{testFilePath}/{arg}{ext}&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="new-apis-2" tabindex="-1"><a class="header-anchor" href="#new-apis-2" aria-hidden="true">#</a> New APIs</h3><ul><li>[<code>method: Locator.blur</code>]</li><li>[<code>method: Locator.clear</code>]</li><li>[<code>method: Android.launchServer</code>] and [<code>method: Android.connect</code>]</li><li>[<code>event: AndroidDevice.close</code>]</li></ul><h3 id="browser-versions-3" tabindex="-1"><a class="header-anchor" href="#browser-versions-3" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 108.0.5359.29</li><li>Mozilla Firefox 106.0</li><li>WebKit 16.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 107</li><li>Microsoft Edge 107</li></ul><h2 id="version-1-27" tabindex="-1"><a class="header-anchor" href="#version-1-27" aria-hidden="true">#</a> Version 1.27</h2>`,16),E=n("h3",{id:"locators",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#locators","aria-hidden":"true"},"#"),s(" Locators")],-1),H=n("p",null,"With these new APIs writing locators is a joy:",-1),F=n("li",null,[s("["),n("code",null,"method: Page.getByText"),s("] to locate by text content.")],-1),D=n("code",null,"method: Page.getByRole",-1),z={href:"https://www.w3.org/TR/wai-aria-1.2/#roles",target:"_blank",rel:"noopener noreferrer"},W={href:"https://www.w3.org/TR/wai-aria-1.2/#aria-attributes",target:"_blank",rel:"noopener noreferrer"},U={href:"https://w3c.github.io/accname/#dfn-accessible-name",target:"_blank",rel:"noopener noreferrer"},O=t("<li>[<code>method: Page.getByLabel</code>] to locate a form control by associated label&#39;s text.</li><li>[<code>method: Page.getByTestId</code>] to locate an element based on its <code>data-testid</code> attribute (other attribute can be configured).</li><li>[<code>method: Page.getByPlaceholder</code>] to locate an input by placeholder.</li><li>[<code>method: Page.getByAltText</code>] to locate an element, usually image, by its text alternative.</li><li>[<code>method: Page.getByTitle</code>] to locate an element by its title.</li>",5),G=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;User Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;secret-password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Sign in&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome, John!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All the same methods are also available on [Locator], [FrameLocator] and [Frame] classes.</p><h3 id="other-highlights" tabindex="-1"><a class="header-anchor" href="#other-highlights" aria-hidden="true">#</a> Other highlights</h3><ul><li><p><code>workers</code> option in the <code>playwright.config.ts</code> now accepts a percentage string to use some of the available CPUs. You can also pass it in the command line:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> <span class="token parameter variable">--workers</span><span class="token operator">=</span><span class="token number">20</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>New options <code>host</code> and <code>port</code> for the html reporter.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">reporters</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&#39;9223&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>New field <code>FullConfig.configFile</code> is available to test reporters, specifying the path to the config file if any.</p></li><li><p>As announced in v1.25, Ubuntu 18 will not be supported as of Dec 2022. In addition to that, there will be no WebKit updates on Ubuntu 18 starting from the next Playwright release.</p></li></ul><h3 id="behavior-changes" tabindex="-1"><a class="header-anchor" href="#behavior-changes" aria-hidden="true">#</a> Behavior Changes</h3><ul><li><p>[<code>method: LocatorAssertions.toHaveAttribute</code>] with an empty value does not match missing attribute anymore. For example, the following snippet will succeed when <code>button</code> <strong>does not</strong> have a <code>disabled</code> attribute.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;disabled&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Command line options <code>--grep</code> and <code>--grep-invert</code> previously incorrectly ignored <code>grep</code> and <code>grepInvert</code> options specified in the config. Now all of them are applied together.</p></li></ul><h3 id="browser-versions-4" tabindex="-1"><a class="header-anchor" href="#browser-versions-4" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 107.0.5304.18</li><li>Mozilla Firefox 105.0.1</li><li>WebKit 16.0</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 106</li><li>Microsoft Edge 106</li></ul><h2 id="version-1-26" tabindex="-1"><a class="header-anchor" href="#version-1-26" aria-hidden="true">#</a> Version 1.26</h2>`,11),K=t(`<h3 id="assertions" tabindex="-1"><a class="header-anchor" href="#assertions" aria-hidden="true">#</a> Assertions</h3><ul><li>New option <code>enabled</code> for [<code>method: LocatorAssertions.toBeEnabled</code>].</li><li>[<code>method: LocatorAssertions.toHaveText</code>] now pierces open shadow roots.</li><li>New option <code>editable</code> for [<code>method: LocatorAssertions.toBeEditable</code>].</li><li>New option <code>visible</code> for [<code>method: LocatorAssertions.toBeVisible</code>].</li></ul><h3 id="other-highlights-1" tabindex="-1"><a class="header-anchor" href="#other-highlights-1" aria-hidden="true">#</a> Other highlights</h3><ul><li>New option <code>maxRedirects</code> for [<code>method: APIRequestContext.get</code>] and others to limit redirect count.</li><li>New command-line flag <code>--pass-with-no-tests</code> that allows the test suite to pass when no files are found.</li><li>New command-line flag <code>--ignore-snapshots</code> to skip snapshot expectations, such as <code>expect(value).toMatchSnapshot()</code> and <code>expect(page).toHaveScreenshot()</code>.</li></ul><h3 id="behavior-change" tabindex="-1"><a class="header-anchor" href="#behavior-change" aria-hidden="true">#</a> Behavior Change</h3><p>A bunch of Playwright APIs already support the <code>waitUntil: &#39;domcontentloaded&#39;</code> option.<br> For example:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">&#39;domcontentloaded&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Prior to 1.26, this would wait for all iframes to fire the <code>DOMContentLoaded</code><br> event.</p><p>To align with web specification, the <code>&#39;domcontentloaded&#39;</code> value only waits for<br> the target frame to fire the <code>&#39;DOMContentLoaded&#39;</code> event. Use <code>waitUntil: &#39;load&#39;</code> to wait for all iframes.</p><h3 id="browser-versions-5" tabindex="-1"><a class="header-anchor" href="#browser-versions-5" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 106.0.5249.30</li><li>Mozilla Firefox 104.0</li><li>WebKit 16.0</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 105</li><li>Microsoft Edge 105</li></ul><h2 id="version-1-25" tabindex="-1"><a class="header-anchor" href="#version-1-25" aria-hidden="true">#</a> Version 1.25</h2>`,14),Y=t(`<h3 id="vscode-extension" tabindex="-1"><a class="header-anchor" href="#vscode-extension" aria-hidden="true">#</a> VSCode Extension</h3><ul><li>Watch your tests running live &amp; keep devtools open.</li><li>Pick selector.</li><li>Record new test from current page state.</li></ul><figure><img src="https://user-images.githubusercontent.com/746130/183781999-1b9fdbc5-cfae-47d6-b4f7-5d4ae89716a8.jpg" alt="vscode extension screenshot" tabindex="0" loading="lazy"><figcaption>vscode extension screenshot</figcaption></figure><h3 id="test-runner-1" tabindex="-1"><a class="header-anchor" href="#test-runner-1" aria-hidden="true">#</a> Test Runner</h3><ul><li><p>[<code>method: Test.step</code>] now returns the value of the step function:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should work&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pageTitle <span class="token operator">=</span> <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token string">&#39;get title&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pageTitle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Added [<code>method: Test.describe.fixme</code>].</p></li><li><p>New <code>&#39;interrupted&#39;</code> test status.</p></li><li><p>Enable tracing via CLI flag: <code>npx playwright test --trace=on</code>.</p></li></ul><h3 id="announcements" tabindex="-1"><a class="header-anchor" href="#announcements" aria-hidden="true">#</a> Announcements</h3><ul><li>🎁 We now ship Ubuntu 22.04 Jammy Jellyfish docker image: <code>mcr.microsoft.com/playwright:v1.32.0-jammy</code>.</li><li>🪦 This is the last release with macOS 10.15 support (deprecated as of 1.21).</li><li>🪦 This is the last release with Node.js 12 support, we recommend upgrading to Node.js LTS (16).</li><li>⚠️ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.</li></ul><h3 id="browser-versions-6" tabindex="-1"><a class="header-anchor" href="#browser-versions-6" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 105.0.5195.19</li><li>Mozilla Firefox 103.0</li><li>WebKit 16.0</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 104</li><li>Microsoft Edge 104</li></ul><h2 id="version-1-24" tabindex="-1"><a class="header-anchor" href="#version-1-24" aria-hidden="true">#</a> Version 1.24</h2>`,12),J=t(`<h3 id="🌍-multiple-web-servers-in-playwright-config-ts" tabindex="-1"><a class="header-anchor" href="#🌍-multiple-web-servers-in-playwright-config-ts" aria-hidden="true">#</a> 🌍 Multiple Web Servers in <code>playwright.config.ts</code></h3><p>Launch multiple web servers, databases, or other processes by passing an array of configurations:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  webServer<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      command<span class="token operator">:</span> <span class="token string">&#39;npm run start&#39;</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
      timeout<span class="token operator">:</span> <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
      reuseExistingServer<span class="token operator">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      command<span class="token operator">:</span> <span class="token string">&#39;npm run backend&#39;</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3333</span><span class="token punctuation">,</span>
      timeout<span class="token operator">:</span> <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
      reuseExistingServer<span class="token operator">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  use<span class="token operator">:</span> <span class="token punctuation">{</span>
    baseURL<span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000/&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🐂-debian-11-bullseye-support" tabindex="-1"><a class="header-anchor" href="#🐂-debian-11-bullseye-support" aria-hidden="true">#</a> 🐂 Debian 11 Bullseye Support</h3><p>Playwright now supports Debian 11 Bullseye on x86_64 for Chromium, Firefox and WebKit. Let us know<br> if you encounter any issues!</p><p>Linux support looks like this:</p><p>| | Ubuntu 20.04 | Ubuntu 22.04 | Debian 11<br> | :--- | :---: | :---: | :---: | :---: |<br> | Chromium | ✅ | ✅ | ✅ |<br> | WebKit | ✅ | ✅ | ✅ |<br> | Firefox | ✅ | ✅ | ✅ |</p><h3 id="🕵️-anonymous-describe" tabindex="-1"><a class="header-anchor" href="#🕵️-anonymous-describe" aria-hidden="true">#</a> 🕵️ Anonymous Describe</h3><p>It is now possible to call [<code>method: Test.describe#2</code>] to create suites without a title. This is useful for giving a group of tests a common option with [<code>method: Test.use</code>].</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  test<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">{</span> colorScheme<span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🧩-component-tests-update" tabindex="-1"><a class="header-anchor" href="#🧩-component-tests-update" aria-hidden="true">#</a> 🧩 Component Tests Update</h3><p>Playwright 1.24 Component Tests introduce <code>beforeMount</code> and <code>afterMount</code> hooks.<br> Use these to configure your app for tests.</p><p>For example, this could be used to setup App router in Vue.js:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/component.spec.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/experimental-ct-vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mycomponent&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should work&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mount <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mount</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hooksConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">/* anything to configure your app */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright/index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../router&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> beforeMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/experimental-ct-vue/hooks&#39;</span><span class="token punctuation">;</span>

<span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> app<span class="token punctuation">,</span> hooksConfig <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A similar configuration in Next.js would look like this:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/component.spec.jsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/experimental-ct-react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mycomponent&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should work&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> mount <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Component<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// Pass mock value from test into \`beforeMount\`.</span>
    <span class="token literal-property property">hooksConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">router</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">per_page</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">asPath</span><span class="token operator">:</span> <span class="token string">&#39;/posts&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// playwright/index.js</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;next/router&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> beforeMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/experimental-ct-react/hooks&#39;</span><span class="token punctuation">;</span>

<span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> hooksConfig <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Before mount, redefine useRouter to return mock value from test.</span>
  router<span class="token punctuation">.</span><span class="token function-variable function">useRouter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> hooksConfig<span class="token punctuation">.</span>router<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="version-1-23" tabindex="-1"><a class="header-anchor" href="#version-1-23" aria-hidden="true">#</a> Version 1.23</h2>`,19),X=t(`<h3 id="network-replay" tabindex="-1"><a class="header-anchor" href="#network-replay" aria-hidden="true">#</a> Network Replay</h3><p>Now you can record network traffic into a HAR file and re-use this traffic in your tests.</p><p>To record network into HAR file:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token function">open</span> --save-har<span class="token operator">=</span>github.har.zip https://github.com/microsoft
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Alternatively, you can record HAR programmatically:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  recordHar<span class="token operator">:</span> <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;github.har.zip&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ... do stuff ...</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Q=n("code",null,"method: Page.routeFromHAR",-1),Z=n("code",null,"method: BrowserContext.routeFromHAR",-1),$={href:"http://www.softwareishard.com/blog/har-12-spec/",target:"_blank",rel:"noopener noreferrer"},nn=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">routeFromHAR</span><span class="token punctuation">(</span><span class="token string">&#39;github.har.zip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Read more in <a href="./network#record-and-replay-requests">our documentation</a>.</p><h3 id="advanced-routing" tabindex="-1"><a class="header-anchor" href="#advanced-routing" aria-hidden="true">#</a> Advanced Routing</h3><p>You can now use [<code>method: Route.fallback</code>] to defer routing to other handlers.</p><p>Consider the following example:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Remove a header from all requests.</span>
test<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> headers<span class="token punctuation">[</span><span class="token string">&#39;if-none-match&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">{</span> headers <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should work&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*&#39;</span><span class="token punctuation">,</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;image&#39;</span><span class="token punctuation">)</span>
      route<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      route<span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the new methods [<code>method: Page.routeFromHAR</code>] and [<code>method: BrowserContext.routeFromHAR</code>] also participate in routing and could be deferred to.</p><h3 id="web-first-assertions-update" tabindex="-1"><a class="header-anchor" href="#web-first-assertions-update" aria-hidden="true">#</a> Web-First Assertions Update</h3><ul><li>New method [<code>method: LocatorAssertions.toHaveValues</code>] that asserts all selected values of <code>&lt;select multiple&gt;</code> element.</li><li>Methods [<code>method: LocatorAssertions.toContainText</code>] and [<code>method: LocatorAssertions.toHaveText</code>] now accept <code>ignoreCase</code> option.</li></ul><h3 id="component-tests-update" tabindex="-1"><a class="header-anchor" href="#component-tests-update" aria-hidden="true">#</a> Component Tests Update</h3>`,10),sn={href:"https://www.npmjs.com/package/@playwright/experimental-ct-vue2",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"@playwright/experimental-ct-vue2",-1),en={href:"https://www.npmjs.com/package/create-react-app",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,".js",-1),on=t(`<p>Read more about <a href="./test-components">component testing with Playwright</a>.</p><h3 id="miscellaneous-2" tabindex="-1"><a class="header-anchor" href="#miscellaneous-2" aria-hidden="true">#</a> Miscellaneous</h3><ul><li>If there&#39;s a service worker that&#39;s in your way, you can now easily disable it with a new context option <code>serviceWorkers</code>:<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  use<span class="token operator">:</span> <span class="token punctuation">{</span>
    serviceWorkers<span class="token operator">:</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Using <code>.zip</code> path for <code>recordHar</code> context option automatically zips the resulting HAR:<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  recordHar<span class="token operator">:</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&#39;github.har.zip&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>If you intend to edit HAR by hand, consider using the <code>&quot;minimal&quot;</code> HAR recording mode<br> that only records information that is essential for replaying:<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  recordHar<span class="token operator">:</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">&#39;github.har&#39;</span><span class="token punctuation">,</span>
    mode<span class="token operator">:</span> <span class="token string">&#39;minimal&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64. We also publish new docker image <code>mcr.microsoft.com/playwright:v1.32.0-jammy</code>.</li></ul><h3 id="⚠️-breaking-changes-⚠️" tabindex="-1"><a class="header-anchor" href="#⚠️-breaking-changes-⚠️" aria-hidden="true">#</a> ⚠️ Breaking Changes ⚠️</h3><p>WebServer is now considered &quot;ready&quot; if request to the specified port has any of the following HTTP status codes:</p><ul><li><code>200-299</code></li><li><code>300-399</code> (new)</li><li><code>400</code>, <code>401</code>, <code>402</code>, <code>403</code> (new)</li></ul><h2 id="version-1-22" tabindex="-1"><a class="header-anchor" href="#version-1-22" aria-hidden="true">#</a> Version 1.22</h2>`,7),pn=n("h3",{id:"highlights",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#highlights","aria-hidden":"true"},"#"),s(" Highlights")],-1),cn=n("p",null,"Components Testing (preview)",-1),ln={href:"https://reactjs.org/",target:"_blank",rel:"noopener noreferrer"},rn=n("br",null,null,-1),un={href:"https://vuejs.org/",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://svelte.dev/",target:"_blank",rel:"noopener noreferrer"},kn=n("br",null,null,-1),hn=n("br",null,null,-1),mn=n("br",null,null,-1),gn=t(`<p>Here is what a typical component test looks like:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// App.spec.tsx</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/experimental-ct-react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Let&#39;s test component in a dark scheme!</span>
test<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">{</span> colorScheme<span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should render&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> mount <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// As with any Playwright test, assert locator text.</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">&#39;React&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Or do a screenshot 🚀</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveScreenshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Or use any Playwright method</span>
  <span class="token keyword">await</span> component<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more in <a href="./test-components">our documentation</a>.</p>`,3),vn={href:"https://www.w3.org/TR/wai-aria-1.2/#roles",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://www.w3.org/TR/wai-aria-1.2/#aria-attributes",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://w3c.github.io/accname/#dfn-accessible-name",target:"_blank",rel:"noopener noreferrer"},fn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Click a button with accessible name &quot;log in&quot;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;role=button[name=&quot;log in&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),yn=t(`<li><p>New [<code>method: Locator.filter</code>] API to filter an existing locator</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buttons <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;role=button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token keyword">const</span> submitButton <span class="token operator">=</span> buttons<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">hasText</span><span class="token operator">:</span> <span class="token string">&#39;Submit&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> submitButton<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>New web-first assertions [<code>method: PageAssertions.toHaveScreenshot#1</code>] and [<code>method: LocatorAssertions.toHaveScreenshot#1</code>] that<br> wait for screenshot stabilization and enhances test reliability.</p><p>The new assertions has screenshot-specific defaults, such as:</p><ul><li>disables animations</li><li>uses CSS scale option</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveScreenshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The new [<code>method: PageAssertions.toHaveScreenshot#1</code>] saves screenshots at the same<br> location as [<code>method: SnapshotAssertions.toMatchSnapshot#1</code>].</p></li>`,2),xn=n("h2",{id:"version-1-21",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#version-1-21","aria-hidden":"true"},"#"),s(" Version 1.21")],-1),_n=n("h3",{id:"highlights-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#highlights-1","aria-hidden":"true"},"#"),s(" Highlights")],-1),Pn={href:"https://www.w3.org/TR/wai-aria-1.2/#roles",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://www.w3.org/TR/wai-aria-1.2/#aria-attributes",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://w3c.github.io/accname/#dfn-accessible-name",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Click a button with accessible name &quot;log in&quot;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;role=button[name=&quot;log in&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),An=t("<li><p>New <code>scale</code> option in [<code>method: Page.screenshot</code>] for smaller sized screenshots.</p></li><li><p>New <code>caret</code> option in [<code>method: Page.screenshot</code>] to control text caret. Defaults to <code>&quot;hide&quot;</code>.</p></li>",2),Rn=t(`<p>New method <code>expect.poll</code> to wait for an arbitrary condition:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Poll the method until it returns an expected result.</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Sn=n("code",null,"expect.poll",-1),In=n("code",null,".toBe()",-1),Bn=n("code",null,".toContain()",-1),Ln=n("br",null,null,-1),Vn=t('<h3 id="behavior-changes-1" tabindex="-1"><a class="header-anchor" href="#behavior-changes-1" aria-hidden="true">#</a> Behavior Changes</h3><ul><li>ESM support when running TypeScript tests is now enabled by default. The <code>PLAYWRIGHT_EXPERIMENTAL_TS_ESM</code> env variable is<br> no longer required.</li><li>The <code>mcr.microsoft.com/playwright</code> docker image no longer contains Python. Please use <code>mcr.microsoft.com/playwright/python</code><br> as a Playwright-ready docker image with pre-installed Python.</li><li>Playwright now supports large file uploads (100s of MBs) via [<code>method: Locator.setInputFiles</code>] API.</li></ul><h3 id="browser-versions-7" tabindex="-1"><a class="header-anchor" href="#browser-versions-7" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 101.0.4951.26</li><li>Mozilla Firefox 98.0.2</li><li>WebKit 15.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 100</li><li>Microsoft Edge 100</li></ul><h2 id="version-1-20" tabindex="-1"><a class="header-anchor" href="#version-1-20" aria-hidden="true">#</a> Version 1.20</h2>',7),Nn=t(`<h3 id="highlights-2" tabindex="-1"><a class="header-anchor" href="#highlights-2" aria-hidden="true">#</a> Highlights</h3><ul><li><p>New options for methods [<code>method: Page.screenshot</code>], [<code>method: Locator.screenshot</code>] and [<code>method: ElementHandle.screenshot</code>]:</p><ul><li>Option <code>animations: &quot;disabled&quot;</code> rewinds all CSS animations and transitions to a consistent state</li><li>Option <code>mask: Locator[]</code> masks given elements, overlaying them with pink <code>#FF00FF</code> boxes.</li></ul></li><li><p><code>expect().toMatchSnapshot()</code> now supports anonymous snapshots: when snapshot name is missing, Playwright Test will generate one<br> automatically:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;Web is Awesome &lt;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>New <code>maxDiffPixels</code> and <code>maxDiffPixelRatio</code> options for fine-grained screenshot comparison using <code>expect().toMatchSnapshot()</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">maxDiffPixels</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token comment">// allow no more than 27 different pixels.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is most convenient to specify <code>maxDiffPixels</code> or <code>maxDiffPixelRatio</code> once in [<code>property: TestConfig.expect</code>].</p></li><li><p>Playwright Test now adds [<code>property: TestConfig.fullyParallel</code>] mode. By default, Playwright Test parallelizes between files. In fully parallel mode, tests inside a single file are also run in parallel. You can also use <code>--fully-parallel</code> command line flag.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  fullyParallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>[<code>property: TestProject.grep</code>] and [<code>property: TestProject.grepInvert</code>] are now configurable per project. For example, you can now<br> configure smoke tests project using <code>grep</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  projects<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;smoke tests&#39;</span><span class="token punctuation">,</span>
      grep<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@smoke</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><a href="./trace-viewer">Trace Viewer</a> now shows <a href="./test-api-testing">API testing requests</a>.</p></li><li><p>[<code>method: Locator.highlight</code>] visually reveals element(s) for easier debugging.</p></li></ul><h3 id="announcements-1" tabindex="-1"><a class="header-anchor" href="#announcements-1" aria-hidden="true">#</a> Announcements</h3><ul><li>We now ship a designated Python docker image <code>mcr.microsoft.com/playwright/python</code>. Please switch over to it if you use<br> Python. This is the last release that includes Python inside our javascript <code>mcr.microsoft.com/playwright</code> docker image.</li><li>v1.20 is the last release to receive WebKit update for macOS 10.15 Catalina. Please update MacOS to keep using latest &amp; greatest WebKit!</li></ul><h3 id="browser-versions-8" tabindex="-1"><a class="header-anchor" href="#browser-versions-8" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 101.0.4921.0</li><li>Mozilla Firefox 97.0.1</li><li>WebKit 15.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 99</li><li>Microsoft Edge 99</li></ul><h2 id="version-1-19" tabindex="-1"><a class="header-anchor" href="#version-1-19" aria-hidden="true">#</a> Version 1.19</h2>`,9),Mn=t(`<h3 id="playwright-test-update" tabindex="-1"><a class="header-anchor" href="#playwright-test-update" aria-hidden="true">#</a> Playwright Test Update</h3><ul><li><p>Playwright Test v1.19 now supports <em>soft assertions</em>. Failed soft assertions<br><strong>do not</strong> terminate test execution, but mark the test as failed.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Make a few checks that will not stop the test when failed...</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;#status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;#eta&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;1 day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ... and continue the test to check more things.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;#next-page&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;#title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Make another order&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more in <a href="./test-assertions#soft-assertions">our documentation</a></p></li><li><p>You can now specify a <strong>custom error message</strong> as a second argument to the <code>expect</code> and <code>expect.soft</code> functions, for example:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;text=Name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;should be logged in&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The error would look like this:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>    Error: should be logged <span class="token keyword">in</span>

    Call log:
      - expect.toBeVisible with <span class="token function">timeout</span> 5000ms
      - waiting <span class="token keyword">for</span> <span class="token string">&quot;getByText(&#39;Name&#39;)&quot;</span>


      <span class="token number">2</span> <span class="token operator">|</span>
      <span class="token number">3</span> <span class="token operator">|</span> test<span class="token punctuation">(</span><span class="token string">&#39;example test&#39;</span>, async<span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">|</span>   await expect<span class="token punctuation">(</span>page.locator<span class="token punctuation">(</span><span class="token string">&#39;text=Name&#39;</span><span class="token punctuation">)</span>, <span class="token string">&#39;should be logged in&#39;</span><span class="token punctuation">)</span>.toBeVisible<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">|</span>                                                                  ^
      <span class="token number">5</span> <span class="token operator">|</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token number">6</span> <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more in <a href="./test-assertions#custom-error-message">our documentation</a></p></li><li><p>By default, tests in a single file are run in order. If you have many independent tests in a single file, you can now<br> run them in parallel with [<code>method: Test.describe.configure</code>].</p></li></ul><h3 id="other-updates" tabindex="-1"><a class="header-anchor" href="#other-updates" aria-hidden="true">#</a> Other Updates</h3><ul><li><p>Locator now supports a <code>has</code> option that makes sure it contains another locator inside:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;article&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">has</span><span class="token operator">:</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.highlight&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more in <a href="./api/class-locator#locator-locator-option-has">locator documentation</a></p></li><li><p>New [<code>method: Locator.page</code>]</p></li><li><p>[<code>method: Page.screenshot</code>] and [<code>method: Locator.screenshot</code>] now automatically hide blinking caret</p></li><li><p>Playwright Codegen now generates locators and frame locators</p></li><li><p>New option <code>url</code> in [<code>property: TestConfig.webServer</code>] to ensure your web server is ready before running the tests</p></li><li><p>New [<code>property: TestInfo.errors</code>] and [<code>property: TestResult.errors</code>] that contain all failed assertions and soft assertions.</p></li></ul><h3 id="potentially-breaking-change-in-playwright-test-global-setup" tabindex="-1"><a class="header-anchor" href="#potentially-breaking-change-in-playwright-test-global-setup" aria-hidden="true">#</a> Potentially breaking change in Playwright Test Global Setup</h3><p>It is unlikely that this change will affect you, no action is required if your tests keep running as they did.</p>`,6),qn={href:"https://github.com/microsoft/playwright/issues/12018",target:"_blank",rel:"noopener noreferrer"},En=t('<h3 id="browser-versions-9" tabindex="-1"><a class="header-anchor" href="#browser-versions-9" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 100.0.4863.0</li><li>Mozilla Firefox 96.0.1</li><li>WebKit 15.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 98</li><li>Microsoft Edge 98</li></ul><h2 id="version-1-18" tabindex="-1"><a class="header-anchor" href="#version-1-18" aria-hidden="true">#</a> Version 1.18</h2>',5),Hn=t(`<h3 id="locator-improvements" tabindex="-1"><a class="header-anchor" href="#locator-improvements" aria-hidden="true">#</a> Locator Improvements</h3><ul><li>[<code>method: Locator.dragTo</code>]</li><li><a href="./test-assertions#locator-assertions-to-be-checked"><code>expect(locator).toBeChecked({ checked })</code></a></li><li>Each locator can now be optionally filtered by the text it contains:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasText</span><span class="token operator">:</span> <span class="token string">&#39;my item&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>Read more in <a href="./api/class-locator#locator-locator-option-has-text">locator documentation</a></li></ul><h3 id="testing-api-improvements" tabindex="-1"><a class="header-anchor" href="#testing-api-improvements" aria-hidden="true">#</a> Testing API improvements</h3><ul><li><a href="./test-assertions"><code>expect(response).toBeOK()</code></a></li><li><a href="./api/class-testinfo#test-info-attach"><code>testInfo.attach()</code></a></li><li><a href="./api/class-test#test-info"><code>test.info()</code></a></li></ul><h3 id="improved-typescript-support" tabindex="-1"><a class="header-anchor" href="#improved-typescript-support" aria-hidden="true">#</a> Improved TypeScript Support</h3>`,5),Fn=n("code",null,"tsconfig.json",-1),Dn={href:"https://www.typescriptlang.org/tsconfig#baseUrl",target:"_blank",rel:"noopener noreferrer"},zn=n("code",null,"baseUrl",-1),Wn={href:"https://www.typescriptlang.org/tsconfig#paths",target:"_blank",rel:"noopener noreferrer"},Un=n("code",null,"paths",-1),On=n("li",null,[s("There is a new environment variable "),n("code",null,"PW_EXPERIMENTAL_TS_ESM"),s(" that allows importing ESM modules in your TS code, without the need for the compile step. Don't forget the "),n("code",null,".js"),s(" suffix when you are importing your esm modules. Run your tests as follows:")],-1),Gn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i --save-dev @playwright/test@1.18.0-rc1
<span class="token assign-left variable">PW_EXPERIMENTAL_TS_ESM</span><span class="token operator">=</span><span class="token number">1</span> npx playwright <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-playwright" tabindex="-1"><a class="header-anchor" href="#create-playwright" aria-hidden="true">#</a> Create Playwright</h3><p>The <code>npm init playwright</code> command is now generally available for your use:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Run from your project&#39;s root directory</span>
<span class="token function">npm</span> init playwright@latest
<span class="token comment"># Or create a new project</span>
<span class="token function">npm</span> init playwright@latest new-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will create a Playwright Test configuration file, optionally add examples, a GitHub Action workflow and a first test <code>example.spec.ts</code>.</p><h3 id="new-apis-changes" tabindex="-1"><a class="header-anchor" href="#new-apis-changes" aria-hidden="true">#</a> New APIs &amp; changes</h3><ul><li>new <a href="./api/class-testcase#test-case-repeat-each-index"><code>testCase.repeatEachIndex</code></a> API</li><li><a href="./api/class-browser#browser-new-context-option-accept-downloads"><code>acceptDownloads</code></a> option now defaults to <code>true</code></li></ul><h3 id="breaking-change-custom-config-options" tabindex="-1"><a class="header-anchor" href="#breaking-change-custom-config-options" aria-hidden="true">#</a> Breaking change: custom config options</h3><p>Custom config options are a convenient way to parametrize projects with different values. Learn more in <a href="./test-parameterize#parameterized-projects">this guide</a>.</p><p>Previously, any fixture introduced through [<code>method: Test.extend</code>] could be overridden in the [<code>property: TestProject.use</code>] config section. For example,</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// WRONG: THIS SNIPPET DOES NOT WORK SINCE v1.18.</span>

<span class="token comment">// fixtures.js</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">myParameter</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// playwright.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">myParameter</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The proper way to make a fixture parametrized in the config file is to specify <code>option: true</code> when defining the fixture. For example,</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// CORRECT: THIS SNIPPET WORKS SINCE v1.18.</span>

<span class="token comment">// fixtures.js</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Fixtures marked as &quot;option: true&quot; will get a value specified in the config,</span>
  <span class="token comment">// or fallback to the default value.</span>
  <span class="token literal-property property">myParameter</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">option</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// playwright.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">myParameter</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="browser-versions-10" tabindex="-1"><a class="header-anchor" href="#browser-versions-10" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 99.0.4812.0</li><li>Mozilla Firefox 95.0</li><li>WebKit 15.4</li></ul><p>This version was also tested against the following stable channels:</p><ul><li>Google Chrome 97</li><li>Microsoft Edge 97</li></ul><h2 id="version-1-17" tabindex="-1"><a class="header-anchor" href="#version-1-17" aria-hidden="true">#</a> Version 1.17</h2>`,18),Kn=t(`<h3 id="frame-locators" tabindex="-1"><a class="header-anchor" href="#frame-locators" aria-hidden="true">#</a> Frame Locators</h3><p>Playwright 1.17 introduces <a href="./api/class-framelocator">frame locators</a> - a locator to the iframe on the page. Frame locators capture the logic sufficient to retrieve the <code>iframe</code> and then locate elements in that iframe. Frame locators are strict by default, will wait for <code>iframe</code> to appear and can be used in Web-First assertions.</p><figure><img src="https://user-images.githubusercontent.com/746130/142082759-2170db38-370d-43ec-8d41-5f9941f57d83.png" alt="Graphics" tabindex="0" loading="lazy"><figcaption>Graphics</figcaption></figure><p>Frame locators can be created with either [<code>method: Page.frameLocator</code>] or [<code>method: Locator.frameLocator</code>] method.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> locator <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">frameLocator</span><span class="token punctuation">(</span><span class="token string">&#39;#my-iframe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;text=Submit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> locator<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more at <a href="./api/class-framelocator">our documentation</a>.</p><h3 id="trace-viewer-update" tabindex="-1"><a class="header-anchor" href="#trace-viewer-update" aria-hidden="true">#</a> Trace Viewer Update</h3>`,7),Yn=n("strong",null,"available online",-1),Jn={href:"https://trace.playwright.dev",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"trace.zip",-1),Qn=n("strong",null,"NOTE",-1),Zn={href:"https://trace.playwright.dev",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://web.dev/progressive-web-apps/",target:"_blank",rel:"noopener noreferrer"},ns=t(`<ul><li>Playwright Test traces now include sources by default (these could be turned off with tracing option)</li><li>Trace Viewer now shows test name</li><li>New trace metadata tab with browser details</li><li>Snapshots now have URL bar</li></ul><figure><img src="https://user-images.githubusercontent.com/746130/141877831-29e37cd1-e574-4bd9-aab5-b13a463bb4ae.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="html-report-update" tabindex="-1"><a class="header-anchor" href="#html-report-update" aria-hidden="true">#</a> HTML Report Update</h3><ul><li>HTML report now supports dynamic filtering</li><li>Report is now a <strong>single static HTML file</strong> that could be sent by e-mail or as a slack attachment.</li></ul><figure><img src="https://user-images.githubusercontent.com/746130/141877402-e486643d-72c7-4db3-8844-ed2072c5d676.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="ubuntu-arm64-support-more" tabindex="-1"><a class="header-anchor" href="#ubuntu-arm64-support-more" aria-hidden="true">#</a> Ubuntu ARM64 support + more</h3><ul><li>Playwright now supports <strong>Ubuntu 20.04 ARM64</strong>. You can now run Playwright tests inside Docker on Apple M1 and on Raspberry Pi.</li><li>You can now use Playwright to install stable version of Edge on Linux:<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token function">install</span> msedge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="new-apis-3" tabindex="-1"><a class="header-anchor" href="#new-apis-3" aria-hidden="true">#</a> New APIs</h3><ul><li>Tracing now supports a <a href="./api/class-tracing#tracing-start-option-title"><code>&#39;title&#39;</code></a> option</li><li>Page navigations support a new <a href="./api/class-page#page-goto"><code>&#39;commit&#39;</code></a> waiting option</li><li>HTML reporter got <a href="./test-reporters#html-reporter">new configuration options</a></li><li><a href="./api/class-testconfig#test-config-snapshot-dir"><code>testConfig.snapshotDir</code> option</a></li><li><a href="./api/class-testinfo#test-info-parallel-index"><code>testInfo.parallelIndex</code></a></li><li><a href="./api/class-testinfo#test-info-title-path"><code>testInfo.titlePath</code></a></li><li><a href="./api/class-testoptions#test-options-trace"><code>testOptions.trace</code></a> has new options</li><li><a href="./test-assertions#expectvaluetomatchsnapshotname-options"><code>expect.toMatchSnapshot</code></a> supports subdirectories</li><li><a href="./api/class-reporter#reporter-prints-to-stdio"><code>reporter.printsToStdio()</code></a></li></ul><h2 id="version-1-16" tabindex="-1"><a class="header-anchor" href="#version-1-16" aria-hidden="true">#</a> Version 1.16</h2>`,10),ss=t(`<h3 id="🎭-playwright-test" tabindex="-1"><a class="header-anchor" href="#🎭-playwright-test" aria-hidden="true">#</a> 🎭 Playwright Test</h3><h4 id="api-testing" tabindex="-1"><a class="header-anchor" href="#api-testing" aria-hidden="true">#</a> API Testing</h4><p>Playwright 1.16 introduces new <a href="./api/class-apirequestcontext">API Testing</a> that lets you send requests to the server directly from Node.js!<br> Now you can:</p><ul><li>test your server API</li><li>prepare server side state before visiting the web application in a test</li><li>validate server side post-conditions after running some actions in the browser</li></ul><p>To do a request on behalf of Playwright&#39;s Page, use <strong>new [<code>property: Page.request</code>] API</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;context fetch&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do a GET request on behalf of page</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://example.com/foo.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To do a stand-alone request from node.js to an API endpoint, use <strong>new <a href="./api/class-fixtures#fixtures-request"><code>request</code> fixture</a></strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;context fetch&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> request <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do a GET request on behalf of page</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://example.com/foo.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more about it in our <a href="./test-api-testing">API testing guide</a>.</p><h4 id="response-interception" tabindex="-1"><a class="header-anchor" href="#response-interception" aria-hidden="true">#</a> Response Interception</h4><p>It is now possible to do response interception by combining <a href="./test-api-testing">API Testing</a> with <a href="./network#modify-requests">request interception</a>.</p><p>For example, we can blur all the images on the page:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> jimp <span class="token keyword">from</span> <span class="token string">&#39;jimp&#39;</span><span class="token punctuation">;</span> <span class="token comment">// image processing library</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;response interception&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**/*.jpeg&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>_request<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">await</span> jimp<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> image<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      response<span class="token punctuation">,</span>
      body<span class="token operator">:</span> <span class="token keyword">await</span> image<span class="token punctuation">.</span><span class="token function">getBufferAsync</span><span class="token punctuation">(</span><span class="token string">&#39;image/jpeg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more about <a href="./network#modify-responses">response interception</a>.</p><h4 id="new-html-reporter" tabindex="-1"><a class="header-anchor" href="#new-html-reporter" aria-hidden="true">#</a> New HTML reporter</h4><p>Try it out new HTML reporter with either <code>--reporter=html</code> or a <code>reporter</code> entry<br> in <code>playwright.config.ts</code> file:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx playwright <span class="token builtin class-name">test</span> <span class="token parameter variable">--reporter</span><span class="token operator">=</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The HTML reporter has all the information about tests and their failures, including surfacing<br> trace and image artifacts.</p><figure><img src="https://user-images.githubusercontent.com/746130/138324311-94e68b39-b51a-4776-a446-f60037a77f32.png" alt="html reporter" tabindex="0" loading="lazy"><figcaption>html reporter</figcaption></figure><p>Read more about <a href="./test-reporters#html-reporter">our reporters</a>.</p><h3 id="🎭-playwright-library" tabindex="-1"><a class="header-anchor" href="#🎭-playwright-library" aria-hidden="true">#</a> 🎭 Playwright Library</h3><h4 id="locator-waitfor" tabindex="-1"><a class="header-anchor" href="#locator-waitfor" aria-hidden="true">#</a> locator.waitFor</h4><p>Wait for a locator to resolve to a single element with a given state.<br> Defaults to the <code>state: &#39;visible&#39;</code>.</p><p>Comes especially handy when working with lists:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;context fetch&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> completeness <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;text=Success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> completeness<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatchSnapshot</span><span class="token punctuation">(</span><span class="token string">&#39;screen.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Read more about [<code>method: Locator.waitFor</code>].</p><h3 id="docker-support-for-arm64" tabindex="-1"><a class="header-anchor" href="#docker-support-for-arm64" aria-hidden="true">#</a> Docker support for Arm64</h3><p>Playwright Docker image is now published for Arm64 so it can be used on Apple Silicon.</p><p>Read more about <a href="./docker">Docker integration</a>.</p><h3 id="🎭-playwright-trace-viewer" tabindex="-1"><a class="header-anchor" href="#🎭-playwright-trace-viewer" aria-hidden="true">#</a> 🎭 Playwright Trace Viewer</h3><ul><li>web-first assertions inside trace viewer</li><li>run trace viewer with <code>npx playwright show-trace</code> and drop trace files to the trace viewer PWA</li><li>API testing is integrated with trace viewer</li><li>better visual attribution of action targets</li></ul><p>Read more about <a href="./trace-viewer">Trace Viewer</a>.</p><h3 id="browser-versions-11" tabindex="-1"><a class="header-anchor" href="#browser-versions-11" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 97.0.4666.0</li><li>Mozilla Firefox 93.0</li><li>WebKit 15.4</li></ul><p>This version of Playwright was also tested against the following stable channels:</p><ul><li>Google Chrome 94</li><li>Microsoft Edge 94</li></ul><h2 id="version-1-15" tabindex="-1"><a class="header-anchor" href="#version-1-15" aria-hidden="true">#</a> Version 1.15</h2>`,37),as=n("h3",{id:"🎭-playwright-library-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🎭-playwright-library-1","aria-hidden":"true"},"#"),s(" 🎭 Playwright Library")],-1),es=n("h4",{id:"🖱️-mouse-wheel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🖱️-mouse-wheel","aria-hidden":"true"},"#"),s(" 🖱️ Mouse Wheel")],-1),ts={href:"https://playwright.dev/docs/api/class-mouse#mouse-wheel",target:"_blank",rel:"noopener noreferrer"},os=n("code",null,"Page.mouse.wheel",-1),ps=n("h4",{id:"📜-new-headers-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#📜-new-headers-api","aria-hidden":"true"},"#"),s(" 📜 New Headers API")],-1),is=n("p",null,"Previously it was not possible to get multiple header values of a response. This is now possible and additional helper functions are available:",-1),cs={href:"https://playwright.dev/docs/api/class-request#request-all-headers",target:"_blank",rel:"noopener noreferrer"},ls={href:"https://playwright.dev/docs/api/class-request#request-headers-array",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://playwright.dev/docs/api/class-request#request-header-value",target:"_blank",rel:"noopener noreferrer"},us={href:"https://playwright.dev/docs/api/class-response#response-all-headers",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://playwright.dev/docs/api/class-response#response-headers-array",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://playwright.dev/docs/api/class-response#response-header-value",target:"_blank",rel:"noopener noreferrer"},hs={href:"https://playwright.dev/docs/api/class-response#response-header-values",target:"_blank",rel:"noopener noreferrer"},ms=n("h4",{id:"🌈-forced-colors-emulation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🌈-forced-colors-emulation","aria-hidden":"true"},"#"),s(" 🌈 Forced-Colors emulation")],-1),gs=n("code",null,"forced-colors",-1),vs={href:"https://playwright.dev/docs/api/class-browser#browser-new-context-option-forced-colors",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://playwright.dev/docs/api/class-page#page-emulate-media",target:"_blank",rel:"noopener noreferrer"},ws=n("h4",{id:"new-apis-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-apis-4","aria-hidden":"true"},"#"),s(" New APIs")],-1),fs={href:"https://playwright.dev/docs/api/class-page#page-route",target:"_blank",rel:"noopener noreferrer"},ys=n("code",null,"times",-1),xs={href:"https://playwright.dev/docs/api/class-page#page-set-checked",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://playwright.dev/docs/api/class-locator#locator-set-checked",target:"_blank",rel:"noopener noreferrer"},Ps={href:"https://playwright.dev/docs/api/class-request#request-sizes",target:"_blank",rel:"noopener noreferrer"},Ts={href:"https://playwright.dev/docs/api/class-tracing#tracing-start-chunk",target:"_blank",rel:"noopener noreferrer"},js={href:"https://playwright.dev/docs/api/class-tracing#tracing-stop-chunk",target:"_blank",rel:"noopener noreferrer"},Cs=t(`<h3 id="🎭-playwright-test-1" tabindex="-1"><a class="header-anchor" href="#🎭-playwright-test-1" aria-hidden="true">#</a> 🎭 Playwright Test</h3><h4 id="🤝-test-parallel-run-tests-in-the-same-file-in-parallel" tabindex="-1"><a class="header-anchor" href="#🤝-test-parallel-run-tests-in-the-same-file-in-parallel" aria-hidden="true">#</a> 🤝 <code>test.parallel()</code> run tests in the same file in parallel</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>test<span class="token punctuation">.</span>describe<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">&#39;group&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;runs in parallel 1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;runs in parallel 2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),As={href:"https://playwright.dev/docs/api/class-test#test-describe-parallel",target:"_blank",rel:"noopener noreferrer"},Rs=n("h4",{id:"🛠-add-debug-cli-flag",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🛠-add-debug-cli-flag","aria-hidden":"true"},"#"),s(" 🛠 Add "),n("code",null,"--debug"),s(" CLI flag")],-1),Ss=n("code",null,"npx playwright test --debug",-1),Is={href:"https://playwright.dev/docs/debug#playwright-inspector",target:"_blank",rel:"noopener noreferrer"},Bs=n("h3",{id:"browser-versions-12",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#browser-versions-12","aria-hidden":"true"},"#"),s(" Browser Versions")],-1),Ls=n("ul",null,[n("li",null,"Chromium 96.0.4641.0"),n("li",null,"Mozilla Firefox 92.0"),n("li",null,"WebKit 15.0")],-1),Vs=n("h2",{id:"version-1-14",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#version-1-14","aria-hidden":"true"},"#"),s(" Version 1.14")],-1),Ns=t(`<h3 id="🎭-playwright-library-2" tabindex="-1"><a class="header-anchor" href="#🎭-playwright-library-2" aria-hidden="true">#</a> 🎭 Playwright Library</h3><h4 id="⚡️-new-strict-mode" tabindex="-1"><a class="header-anchor" href="#⚡️-new-strict-mode" aria-hidden="true">#</a> ⚡️ New &quot;strict&quot; mode</h4><p>Selector ambiguity is a common problem in automation testing. <strong>&quot;strict&quot; mode</strong><br> ensures that your selector points to a single element and throws otherwise.</p><p>Pass <code>strict: true</code> into your action calls to opt in.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// This will throw if you have more than one button!</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">strict</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="📍-new-locators-api" tabindex="-1"><a class="header-anchor" href="#📍-new-locators-api" aria-hidden="true">#</a> 📍 New <a href="./api/class-locator"><strong>Locators API</strong></a></h4><p>Locator represents a view to the element(s) on the page. It captures the logic sufficient to retrieve the element at any given moment.</p><p>The difference between the <a href="./api/class-locator">Locator</a> and <a href="./api/class-elementhandle">ElementHandle</a> is that the latter points to a particular element, while <a href="./api/class-locator">Locator</a> captures the logic of how to retrieve that element.</p><p>Also, locators are <strong>&quot;strict&quot; by default</strong>!</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> locator <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> locator<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Learn more in the <a href="./api/class-locator">documentation</a>.</p>`,11),Ms={id:"🧩-experimental-react-and-vue-selector-engines",tabindex:"-1"},qs=n("a",{class:"header-anchor",href:"#🧩-experimental-react-and-vue-selector-engines","aria-hidden":"true"},"#",-1),Es=n("strong",null,"React",-1),Hs=n("strong",null,"Vue",-1),Fs={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors",target:"_blank",rel:"noopener noreferrer"},Ds=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;_react=SubmitButton[enabled=true]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;_vue=submit-button[enabled=true]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),zs={id:"✨-new-nth-and-visible-selector-engines",tabindex:"-1"},Ws=n("a",{class:"header-anchor",href:"#✨-new-nth-and-visible-selector-engines","aria-hidden":"true"},"#",-1),Us=n("strong",null,[n("code",null,"nth")],-1),Os=n("strong",null,[n("code",null,"visible")],-1),Gs=n("code",null,"nth",-1),Ks=n("code",null,":nth-match",-1),Ys=n("code",null,"visible",-1),Js=n("code",null,":visible",-1),Xs=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// select the first button among all buttons</span>
<span class="token keyword">await</span> button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button &gt;&gt; nth=0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or if you are using locators, you can use first(), nth() and last()</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// click a visible button</span>
<span class="token keyword">await</span> button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;button &gt;&gt; visible=true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🎭-playwright-test-2" tabindex="-1"><a class="header-anchor" href="#🎭-playwright-test-2" aria-hidden="true">#</a> 🎭 Playwright Test</h3><h4 id="✅-web-first-assertions" tabindex="-1"><a class="header-anchor" href="#✅-web-first-assertions" aria-hidden="true">#</a> ✅ Web-First Assertions</h4><p><code>expect</code> now supports lots of new web-first assertions.</p><p>Consider the following example:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">locator</span><span class="token punctuation">(</span><span class="token string">&#39;.status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Submitted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Playwright Test will be re-testing the node with the selector <code>.status</code> until fetched Node has the <code>&quot;Submitted&quot;</code> text. It will be re-fetching the node and checking it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the <a href="./api/class-testproject#test-project-expect"><code>testProject.expect</code></a> value in test config.</p><p>By default, the timeout for assertions is not set, so it&#39;ll wait forever, until the whole test times out.</p><p>List of all new assertions:</p><ul><li><a href="./test-assertions#expectlocatortobechecked"><code>expect(locator).toBeChecked()</code></a></li><li><a href="./test-assertions#expectlocatortobedisabled"><code>expect(locator).toBeDisabled()</code></a></li><li><a href="./test-assertions#expectlocatortobeeditable"><code>expect(locator).toBeEditable()</code></a></li><li><a href="./test-assertions#expectlocatortobeempty"><code>expect(locator).toBeEmpty()</code></a></li><li><a href="./test-assertions#expectlocatortobeenabled"><code>expect(locator).toBeEnabled()</code></a></li><li><a href="./test-assertions#expectlocatortobefocused"><code>expect(locator).toBeFocused()</code></a></li><li><a href="./test-assertions#expectlocatortobehidden"><code>expect(locator).toBeHidden()</code></a></li><li><a href="./test-assertions#expectlocatortobevisible"><code>expect(locator).toBeVisible()</code></a></li><li><a href="./test-assertions#expectlocatortocontaintexttext-options"><code>expect(locator).toContainText(text, options?)</code></a></li><li><a href="./test-assertions#expectlocatortohaveattributename-value"><code>expect(locator).toHaveAttribute(name, value)</code></a></li><li><a href="./test-assertions#expectlocatortohaveclassexpected"><code>expect(locator).toHaveClass(expected)</code></a></li><li><a href="./test-assertions#expectlocatortohavecountcount"><code>expect(locator).toHaveCount(count)</code></a></li><li><a href="./test-assertions#expectlocatortohavecssname-value"><code>expect(locator).toHaveCSS(name, value)</code></a></li><li><a href="./test-assertions#expectlocatortohaveidid"><code>expect(locator).toHaveId(id)</code></a></li><li><a href="./test-assertions#expectlocatortohavejspropertyname-value"><code>expect(locator).toHaveJSProperty(name, value)</code></a></li><li><a href="./test-assertions#expectlocatortohavetextexpected-options"><code>expect(locator).toHaveText(expected, options)</code></a></li><li><a href="./test-assertions#expectpagetohavetitletitle"><code>expect(page).toHaveTitle(title)</code></a></li><li><a href="./test-assertions#expectpagetohaveurlurl"><code>expect(page).toHaveURL(url)</code></a></li><li><a href="./test-assertions#expectlocatortohavevaluevalue"><code>expect(locator).toHaveValue(value)</code></a></li></ul><h4 id="⛓-serial-mode-with-describe-serial" tabindex="-1"><a class="header-anchor" href="#⛓-serial-mode-with-describe-serial" aria-hidden="true">#</a> ⛓ Serial mode with <a href="./api/class-test#test-describe-serial"><code>describe.serial</code></a></h4><p>Declares a group of tests that should always be run serially. If one of the tests fails, all subsequent tests are skipped. All tests in a group are retried together.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>test<span class="token punctuation">.</span>describe<span class="token punctuation">.</span><span class="token function">serial</span><span class="token punctuation">(</span><span class="token string">&#39;group&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;runs first&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;runs second&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Learn more in the <a href="./api/class-test#test-describe-serial">documentation</a>.</p><h4 id="🐾-steps-api-with-test-step" tabindex="-1"><a class="header-anchor" href="#🐾-steps-api-with-test-step" aria-hidden="true">#</a> 🐾 Steps API with <a href="./api/class-test#test-step"><code>test.step</code></a></h4><p>Split long tests into multiple steps using <code>test.step()</code> API:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token string">&#39;Log in&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> test<span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token string">&#39;news feed&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Step information is exposed in reporters API.</p><h4 id="🌎-launch-web-server-before-running-tests" tabindex="-1"><a class="header-anchor" href="#🌎-launch-web-server-before-running-tests" aria-hidden="true">#</a> 🌎 Launch web server before running tests</h4><p>To launch a server during the tests, use the <a href="./test-advanced#launching-a-development-web-server-during-the-tests"><code>webServer</code></a> option in the configuration file. The server will wait for a given port to be available before running the tests, and the port will be passed over to Playwright as a <a href="./api/class-fixtures#fixtures-base-url"><code>baseURL</code></a> when creating a context.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// playwright.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  webServer<span class="token operator">:</span> <span class="token punctuation">{</span>
    command<span class="token operator">:</span> <span class="token string">&#39;npm run start&#39;</span><span class="token punctuation">,</span> <span class="token comment">// command to launch</span>
    port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// port to await for</span>
    timeout<span class="token operator">:</span> <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    reuseExistingServer<span class="token operator">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Learn more in the <a href="./test-advanced#launching-a-development-web-server-during-the-tests">documentation</a>.</p><h3 id="browser-versions-13" tabindex="-1"><a class="header-anchor" href="#browser-versions-13" aria-hidden="true">#</a> Browser Versions</h3><ul><li>Chromium 94.0.4595.0</li><li>Mozilla Firefox 91.0</li><li>WebKit 15.0</li></ul><h2 id="version-1-13" tabindex="-1"><a class="header-anchor" href="#version-1-13" aria-hidden="true">#</a> Version 1.13</h2><h4 id="playwright-test" tabindex="-1"><a class="header-anchor" href="#playwright-test" aria-hidden="true">#</a> Playwright Test</h4>`,26),Qs={href:"https://github.com/microsoft/playwright/blob/65a9037461ffc15d70cdc2055832a0c5512b227c/packages/playwright-test/types/testReporter.d.ts",target:"_blank",rel:"noopener noreferrer"},Zs={href:"https://github.com/allure-framework/allure-js/pull/297",target:"_blank",rel:"noopener noreferrer"},$s=n("li",null,[n("strong",null,[s("⛺️ New "),n("a",{href:"./test-configuration#basic-options"},[n("code",null,"baseURL"),s(" fixture")])]),s(" to support relative paths in tests.")],-1),na=t('<h4 id="playwright" tabindex="-1"><a class="header-anchor" href="#playwright" aria-hidden="true">#</a> Playwright</h4><ul><li><strong>🖖 Programmatic drag-and-drop support</strong> via the [<code>method: Page.dragAndDrop</code>] API.</li><li><strong>🔎 Enhanced HAR</strong> with body sizes for requests and responses. Use via <code>recordHar</code> option in [<code>method: Browser.newContext</code>].</li></ul><h4 id="tools" tabindex="-1"><a class="header-anchor" href="#tools" aria-hidden="true">#</a> Tools</h4><ul><li>Playwright Trace Viewer now shows parameters, returned values and <code>console.log()</code> calls.</li><li>Playwright Inspector can generate Playwright Test tests.</li></ul><h4 id="new-and-overhauled-guides" tabindex="-1"><a class="header-anchor" href="#new-and-overhauled-guides" aria-hidden="true">#</a> New and Overhauled Guides</h4>',5),sa=t('<h4 id="browser-versions-14" tabindex="-1"><a class="header-anchor" href="#browser-versions-14" aria-hidden="true">#</a> Browser Versions</h4><ul><li>Chromium 93.0.4576.0</li><li>Mozilla Firefox 90.0</li><li>WebKit 14.2</li></ul><h4 id="new-playwright-apis" tabindex="-1"><a class="header-anchor" href="#new-playwright-apis" aria-hidden="true">#</a> New Playwright APIs</h4><ul><li>new <code>baseURL</code> option in [<code>method: Browser.newContext</code>] and [<code>method: Browser.newPage</code>]</li><li>[<code>method: Response.securityDetails</code>] and [<code>method: Response.serverAddr</code>]</li><li>[<code>method: Page.dragAndDrop</code>] and [<code>method: Frame.dragAndDrop</code>]</li><li>[<code>method: Download.cancel</code>]</li><li>[<code>method: Page.inputValue</code>], [<code>method: Frame.inputValue</code>] and [<code>method: ElementHandle.inputValue</code>]</li><li>new <code>force</code> option in [<code>method: Page.fill</code>], [<code>method: Frame.fill</code>], and [<code>method: ElementHandle.fill</code>]</li><li>new <code>force</code> option in [<code>method: Page.selectOption</code>], [<code>method: Frame.selectOption</code>], and [<code>method: ElementHandle.selectOption</code>]</li></ul><h2 id="version-1-12" tabindex="-1"><a class="header-anchor" href="#version-1-12" aria-hidden="true">#</a> Version 1.12</h2><h4 id="⚡️-introducing-playwright-test" tabindex="-1"><a class="header-anchor" href="#⚡️-introducing-playwright-test" aria-hidden="true">#</a> ⚡️ Introducing Playwright Test</h4>',6),aa=n("strong",null,"new test runner",-1),ea=t(`<ul><li>Run tests across all browsers.</li><li>Execute tests in parallel.</li><li>Enjoy context isolation and sensible defaults out of the box.</li><li>Capture videos, screenshots and other artifacts on failure.</li><li>Integrate your POMs as extensible fixtures.</li></ul><p>Installation:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @playwright/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Simple test <code>tests/foo.spec.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;basic test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> page <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">innerText</span><span class="token punctuation">(</span><span class="token string">&#39;.navbar__title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Playwright&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Running:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),ta=n("h4",{id:"🧟‍♂️-introducing-playwright-trace-viewer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#🧟‍♂️-introducing-playwright-trace-viewer","aria-hidden":"true"},"#"),s(" 🧟‍♂️ Introducing Playwright Trace Viewer")],-1),oa=t(`<ul><li>page DOM before and after each Playwright action</li><li>page rendering before and after each Playwright action</li><li>browser network during script execution</li></ul><p>Traces are recorded using the new [<code>property: BrowserContext.tracing</code>] API:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> chromium<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Start tracing before creating / navigating a page.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span> screenshots<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> snapshots<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Stop tracing and export it into a zip archive.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;trace.zip&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Traces are examined later with the Playwright CLI:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright show-trace trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>That will open the following GUI:</p><figure><img src="https://user-images.githubusercontent.com/746130/121109654-d66c4480-c7c0-11eb-8d4d-eb70d2b03811.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>`,7),pa=t('<h4 id="browser-versions-15" tabindex="-1"><a class="header-anchor" href="#browser-versions-15" aria-hidden="true">#</a> Browser Versions</h4><ul><li>Chromium 93.0.4530.0</li><li>Mozilla Firefox 89.0</li><li>WebKit 14.2</li></ul><p>This version of Playwright was also tested against the following stable channels:</p><ul><li>Google Chrome 91</li><li>Microsoft Edge 91</li></ul><h4 id="new-apis-5" tabindex="-1"><a class="header-anchor" href="#new-apis-5" aria-hidden="true">#</a> New APIs</h4><ul><li><code>reducedMotion</code> option in [<code>method: Page.emulateMedia</code>], [<code>method: BrowserType.launchPersistentContext</code>], [<code>method: Browser.newContext</code>] and [<code>method: Browser.newPage</code>]</li><li>[<code>event: BrowserContext.request</code>]</li><li>[<code>event: BrowserContext.requestFailed</code>]</li><li>[<code>event: BrowserContext.requestFinished</code>]</li><li>[<code>event: BrowserContext.response</code>]</li><li><code>tracesDir</code> option in [<code>method: BrowserType.launch</code>] and [<code>method: BrowserType.launchPersistentContext</code>]</li><li>new [<code>property: BrowserContext.tracing</code>] API namespace</li><li>new [<code>method: Download.page</code>] method</li></ul><h2 id="version-1-11" tabindex="-1"><a class="header-anchor" href="#version-1-11" aria-hidden="true">#</a> Version 1.11</h2>',7),ia={href:"https://youtu.be/_Jla6DyuEu4",target:"_blank",rel:"noopener noreferrer"},ca={href:"https://docs.google.com/presentation/d/1xFhZIJrdHkVe2CuMKOrni92HoG2SWslo0DhJJQMR1DI/edit?usp=sharing",target:"_blank",rel:"noopener noreferrer"},la=n("li",null,"We talked about Playwright",-1),ra=n("li",null,"Showed engineering work behind the scenes",-1),ua=n("li",null,"Did live demos with new features ✨",-1),da=n("strong",null,"Special thanks",-1),ka={href:"http://applitools.com/",target:"_blank",rel:"noopener noreferrer"},ha=t('<h4 id="browser-versions-16" tabindex="-1"><a class="header-anchor" href="#browser-versions-16" aria-hidden="true">#</a> Browser Versions</h4><ul><li>Chromium 92.0.4498.0</li><li>Mozilla Firefox 89.0b6</li><li>WebKit 14.2</li></ul><h4 id="new-apis-6" tabindex="-1"><a class="header-anchor" href="#new-apis-6" aria-hidden="true">#</a> New APIs</h4><ul><li>support for <strong>async predicates</strong> across the API in methods such as [<code>method: Page.waitForRequest</code>] and others</li><li>new <strong>emulation devices</strong>: Galaxy S8, Galaxy S9+, Galaxy Tab S4, Pixel 3, Pixel 4</li><li>new methods: <ul><li>[<code>method: Page.waitForURL</code>] to await navigations to URL</li><li>[<code>method: Video.delete</code>] and [<code>method: Video.saveAs</code>] to manage screen recording</li></ul></li><li>new options: <ul><li><code>screen</code> option in the [<code>method: Browser.newContext</code>] method to emulate <code>window.screen</code> dimensions</li><li><code>position</code> option in [<code>method: Page.check</code>] and [<code>method: Page.uncheck</code>] methods</li><li><code>trial</code> option to dry-run actions in [<code>method: Page.check</code>], [<code>method: Page.uncheck</code>], [<code>method: Page.click</code>], [<code>method: Page.dblclick</code>], [<code>method: Page.hover</code>] and [<code>method: Page.tap</code>]</li></ul></li></ul><h2 id="version-1-10" tabindex="-1"><a class="header-anchor" href="#version-1-10" aria-hidden="true">#</a> Version 1.10</h2>',5),ma={href:"https://github.com/microsoft/playwright-java",target:"_blank",rel:"noopener noreferrer"},ga=n("strong",null,"now stable",-1),va=n("li",null,[s("Run Playwright against "),n("strong",null,"Google Chrome"),s(" and "),n("strong",null,"Microsoft Edge"),s(" stable channels with the "),n("a",{href:"./browsers"},"new channels API"),s(".")],-1),ba=n("li",null,[s("Chromium screenshots are "),n("strong",null,"fast"),s(" on Mac & Windows.")],-1),wa=t('<h4 id="bundled-browser-versions" tabindex="-1"><a class="header-anchor" href="#bundled-browser-versions" aria-hidden="true">#</a> Bundled Browser Versions</h4><ul><li>Chromium 90.0.4430.0</li><li>Mozilla Firefox 87.0b10</li><li>WebKit 14.2</li></ul><p>This version of Playwright was also tested against the following stable channels:</p><ul><li>Google Chrome 89</li><li>Microsoft Edge 89</li></ul><h4 id="new-apis-7" tabindex="-1"><a class="header-anchor" href="#new-apis-7" aria-hidden="true">#</a> New APIs</h4><ul><li><a href="./api/class-browsertype#browsertypelaunchoptions"><code>browserType.launch()</code></a> now accepts the new <code>&#39;channel&#39;</code> option. Read more in <a href="./browsers">our documentation</a>.</li></ul><h2 id="version-1-9" tabindex="-1"><a class="header-anchor" href="#version-1-9" aria-hidden="true">#</a> Version 1.9</h2>',7),fa=n("strong",null,"new GUI tool",-1),ya=n("ul",null,[n("li",null,[n("strong",null,"Line-by-line debugging"),s(" of your Playwright scripts, with play, pause and step-through.")]),n("li",null,[s("Author new scripts by "),n("strong",null,"recording user actions"),s(".")]),n("li",null,[n("strong",null,"Generate element selectors"),s(" for your script by hovering over elements.")]),n("li",null,[s("Set the "),n("code",null,"PWDEBUG=1"),s(" environment variable to launch the Inspector")])],-1),xa=n("strong",null,"Pause script execution",-1),_a=n("code",null,"method: Page.pause",-1),Pa=n("strong",null,"New has-text pseudo-class",-1),Ta=n("code",null,':has-text("example")',-1),ja=n("code",null,'"example"',-1),Ca=n("strong",null,"Page dialogs are now auto-dismissed",-1),Aa=n("code",null,"dialog",-1),Ra={href:"https://github.com/microsoft/playwright-python",target:"_blank",rel:"noopener noreferrer"},Sa=n("strong",null,"now stable",-1),Ia=t('<h4 id="browser-versions-17" tabindex="-1"><a class="header-anchor" href="#browser-versions-17" aria-hidden="true">#</a> Browser Versions</h4><ul><li>Chromium 90.0.4421.0</li><li>Mozilla Firefox 86.0b10</li><li>WebKit 14.1</li></ul><h4 id="new-apis-8" tabindex="-1"><a class="header-anchor" href="#new-apis-8" aria-hidden="true">#</a> New APIs</h4><ul><li>[<code>method: Page.pause</code>].</li></ul><h2 id="version-1-8" tabindex="-1"><a class="header-anchor" href="#version-1-8" aria-hidden="true">#</a> Version 1.8</h2>',5),Ba=n("code",null,":left-of()",-1),La=n("code",null,":right-of()",-1),Va=n("code",null,":above()",-1),Na=n("code",null,":below()",-1),Ma=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),qa=n("li",null,[s("["),n("code",null,"method: Page.selectOption"),s("] now waits for the options to be present.")],-1),Ea=n("li",null,[s("New methods to "),n("a",{href:"./actionability#assertions"},"assert element state"),s(" like ["),n("code",null,"method: Page.isEditable"),s("].")],-1),Ha=t('<h4 id="new-apis-9" tabindex="-1"><a class="header-anchor" href="#new-apis-9" aria-hidden="true">#</a> New APIs</h4><ul><li>[<code>method: ElementHandle.isChecked</code>].</li><li>[<code>method: ElementHandle.isDisabled</code>].</li><li>[<code>method: ElementHandle.isEditable</code>].</li><li>[<code>method: ElementHandle.isEnabled</code>].</li><li>[<code>method: ElementHandle.isHidden</code>].</li><li>[<code>method: ElementHandle.isVisible</code>].</li><li>[<code>method: Page.isChecked</code>].</li><li>[<code>method: Page.isDisabled</code>].</li><li>[<code>method: Page.isEditable</code>].</li><li>[<code>method: Page.isEnabled</code>].</li><li>[<code>method: Page.isHidden</code>].</li><li>[<code>method: Page.isVisible</code>].</li><li>New option <code>&#39;editable&#39;</code> in [<code>method: ElementHandle.waitForElementState</code>].</li></ul><h4 id="browser-versions-18" tabindex="-1"><a class="header-anchor" href="#browser-versions-18" aria-hidden="true">#</a> Browser Versions</h4><ul><li>Chromium 90.0.4392.0</li><li>Mozilla Firefox 85.0b5</li><li>WebKit 14.1</li></ul><h2 id="version-1-7" tabindex="-1"><a class="header-anchor" href="#version-1-7" aria-hidden="true">#</a> Version 1.7</h2>',5),Fa=n("strong",null,"New Java SDK",-1),Da={href:"https://github.com/microsoft/playwright-java",target:"_blank",rel:"noopener noreferrer"},za={href:"https://github.com/microsoft/playwright",target:"_blank",rel:"noopener noreferrer"},Wa={href:"https://github.com/microsoft/playwright-python",target:"_blank",rel:"noopener noreferrer"},Ua={href:"https://github.com/microsoft/playwright-dotnet",target:"_blank",rel:"noopener noreferrer"},Oa=n("li",null,[n("strong",null,"Browser storage API"),s(": New convenience APIs to save and load browser storage state (cookies, local storage) to simplify automation scenarios with authentication.")],-1),Ga=n("strong",null,"New CSS selectors",-1),Ka=n("strong",null,"New website",-1),Ya={href:"https://playwright.dev/",target:"_blank",rel:"noopener noreferrer"},Ja={href:"https://v2.docusaurus.io/",target:"_blank",rel:"noopener noreferrer"},Xa=n("li",null,[n("strong",null,"Support for Apple Silicon"),s(": Playwright browser binaries for WebKit and Chromium are now built for Apple Silicon.")],-1),Qa=t('<h4 id="new-apis-10" tabindex="-1"><a class="header-anchor" href="#new-apis-10" aria-hidden="true">#</a> New APIs</h4><ul><li>[<code>method: BrowserContext.storageState</code>] to get current state for later reuse.</li><li><code>storageState</code> option in [<code>method: Browser.newContext</code>] and [<code>method: Browser.newPage</code>] to setup browser context state.</li></ul><h4 id="browser-versions-19" tabindex="-1"><a class="header-anchor" href="#browser-versions-19" aria-hidden="true">#</a> Browser Versions</h4><ul><li>Chromium 89.0.4344.0</li><li>Mozilla Firefox 84.0b9</li><li>WebKit 14.1</li></ul>',4);function Za($a,ne){const e=c("ExternalLinkIcon"),o=c("RouterLink"),i=c("LiteYouTube");return r(),u("div",null,[k,h,m,n("ul",null,[g,n("li",null,[n("p",null,[s("New assertion ["),v,s("] ensures that locator points to an element that intersects viewport, according to the "),n("a",b,[s("intersection observer API"),a(e)]),s(".")]),w])]),f,n("ul",null,[y,n("li",null,[s("Official "),a(o,{to:"/book/playwright/docker.html"},{default:p(()=>[s("docker images")]),_:1}),s(" now include Node 18 instead of Node 16.")])]),x,_,n("p",null,[P,s(" configuration file for "),a(o,{to:"/book/playwright/test-components.html"},{default:p(()=>[s("component testing")]),_:1}),s(" now requires calling "),T,s(".")]),j,a(i,{id:"VbVlz61VtNo",title:"Playwright 1.29"}),C,n("ul",null,[A,n("li",null,[R,n("p",null,[s("Read more in "),a(o,{to:"/book/playwright/test-assertions.html#retrying"},{default:p(()=>[s("our documentation")]),_:1}),s(".")])]),S]),I,n("ul",null,[n("li",null,[s("Playwright Test now respects "),n("a",B,[L,a(e)]),s(".")]),V,N]),M,a(i,{id:"tVSq-0n-TY4",title:"Playwright 1.28"}),q,a(i,{id:"b84eqab3kwc",title:"Playwright 1.27"}),E,H,n("ul",null,[F,n("li",null,[s("["),D,s("] to locate by "),n("a",z,[s("ARIA role"),a(e)]),s(", "),n("a",W,[s("ARIA attributes"),a(e)]),s(" and "),n("a",U,[s("accessible name"),a(e)]),s(".")]),O]),G,a(i,{id:"b84eqab3kwc",title:"Playwright 1.26"}),K,a(i,{id:"NFLHA57a-so",title:"Playwright 1.25"}),Y,a(i,{id:"9F05o1shxcY",title:"Playwright 1.24"}),J,a(i,{id:"NRGOV46P3kU",title:"Playwright 1.23"}),X,n("p",null,[s("Use the new methods ["),Q,s("] or ["),Z,s("] to serve matching responses from the "),n("a",$,[s("HAR"),a(e)]),s(" file:")]),nn,n("ul",null,[n("li",null,[s("Support for Vue2 via the "),n("a",sn,[an,a(e)]),s(" package.")]),n("li",null,[s("Support for component tests for "),n("a",en,[s("create-react-app"),a(e)]),s(" with components in "),tn,s(" files.")])]),on,a(i,{id:"keV2CIgtBlg",title:"Playwright 1.22"}),pn,n("ul",null,[n("li",null,[cn,n("p",null,[s("Playwright Test can now test your "),n("a",ln,[s("React"),a(e)]),s(","),rn,n("a",un,[s("Vue.js"),a(e)]),s(" or "),n("a",dn,[s("Svelte"),a(e)]),s(" components."),kn,s(" You can use all the features"),hn,s(" of Playwright Test (such as parallelization, emulation & debugging) while running components"),mn,s(" in real browsers.")]),gn]),n("li",null,[n("p",null,[s("Role selectors that allow selecting elements by their "),n("a",vn,[s("ARIA role"),a(e)]),s(", "),n("a",bn,[s("ARIA attributes"),a(e)]),s(" and "),n("a",wn,[s("accessible name"),a(e)]),s(".")]),fn,n("p",null,[s("Read more in "),a(o,{to:"/book/playwright/locators.html#locate-by-role"},{default:p(()=>[s("our documentation")]),_:1}),s(".")])]),yn]),xn,a(i,{id:"45HZdbmgEw8",title:"Playwright 1.21"}),_n,n("ul",null,[n("li",null,[n("p",null,[s("New role selectors that allow selecting elements by their "),n("a",Pn,[s("ARIA role"),a(e)]),s(", "),n("a",Tn,[s("ARIA attributes"),a(e)]),s(" and "),n("a",jn,[s("accessible name"),a(e)]),s(".")]),Cn,n("p",null,[s("Read more in "),a(o,{to:"/book/playwright/locators.html#locate-by-role"},{default:p(()=>[s("our documentation")]),_:1}),s(".")])]),An,n("li",null,[Rn,n("p",null,[Sn,s(" supports most synchronous matchers, like "),In,s(", "),Bn,s(", etc."),Ln,s(" Read more in "),a(o,{to:"/book/playwright/test-assertions.html#polling"},{default:p(()=>[s("our documentation")]),_:1}),s(".")])])]),Vn,a(i,{id:"6vV-XXKsrbA",title:"Playwright 1.20"}),Nn,a(i,{id:"z0EOFvlf14U",title:"Playwright 1.19"}),Mn,n("p",null,[s("We've noticed that in rare cases, the set of tests to be executed was configured in the global setup by means of the environment variables. We also noticed some applications that were post processing the reporters' output in the global teardown. If you are doing one of the two, "),n("a",qn,[s("learn more"),a(e)])]),En,a(i,{id:"ABLYpw2BN_g",title:"Playwright 1.18"}),Hn,n("ol",null,[n("li",null,[s("Playwright Test now respects "),Fn,s("'s "),n("a",Dn,[zn,a(e)]),s(" and "),n("a",Wn,[Un,a(e)]),s(", so you can use aliases")]),On]),Gn,a(i,{id:"7iyIdeoAP04",title:"Playwright 1.17"}),Kn,n("p",null,[s("Playwright Trace Viewer is now "),Yn,s(" at "),n("a",Jn,[s("https://trace.playwright.dev"),a(e)]),s("! Just drag-and-drop your "),Xn,s(" file to inspect its contents.")]),n("blockquote",null,[n("p",null,[Qn,s(": trace files are not uploaded anywhere; "),n("a",Zn,[s("trace.playwright.dev"),a(e)]),s(" is a "),n("a",$n,[s("progressive web application"),a(e)]),s(" that processes traces locally.")])]),ns,a(i,{id:"OQKwFDmY64g",title:"Playwright 1.16"}),ss,a(i,{id:"6RwzsDeEj7Y",title:"Playwright 1.15"}),as,es,n("p",null,[s("By using "),n("a",ts,[os,a(e)]),s(" you are now able to scroll vertically or horizontally.")]),ps,is,n("ul",null,[n("li",null,[n("a",cs,[s("Request.allHeaders()"),a(e)])]),n("li",null,[n("a",ls,[s("Request.headersArray()"),a(e)])]),n("li",null,[n("a",rs,[s("Request.headerValue(name: string)"),a(e)])]),n("li",null,[n("a",us,[s("Response.allHeaders()"),a(e)])]),n("li",null,[n("a",ds,[s("Response.headersArray()"),a(e)])]),n("li",null,[n("a",ks,[s("Response.headerValue(name: string)"),a(e)])]),n("li",null,[n("a",hs,[s("Response.headerValues(name: string)"),a(e)])])]),ms,n("p",null,[s("Its now possible to emulate the "),gs,s(" CSS media feature by passing it in the "),n("a",vs,[s("context options"),a(e)]),s(" or calling "),n("a",bs,[s("Page.emulateMedia()"),a(e)]),s(".")]),ws,n("ul",null,[n("li",null,[n("a",fs,[s("Page.route()"),a(e)]),s(" accepts new "),ys,s(" option to specify how many times this route should be matched.")]),n("li",null,[n("a",xs,[s("Page.setChecked(selector: string, checked: boolean)"),a(e)]),s(" and "),n("a",_s,[s("Locator.setChecked(selector: string, checked: boolean)"),a(e)]),s(" was introduced to set the checked state of a checkbox.")]),n("li",null,[n("a",Ps,[s("Request.sizes()"),a(e)]),s(" Returns resource size information for given http request.")]),n("li",null,[n("a",Ts,[s("BrowserContext.tracing.startChunk()"),a(e)]),s(" - Start a new trace chunk.")]),n("li",null,[n("a",js,[s("BrowserContext.tracing.stopChunk()"),a(e)]),s(" - Stops a new trace chunk.")])]),Cs,n("p",null,[s("By default, tests in a single file are run in order. If you have many independent tests in a single file, you can now run them in parallel with "),n("a",As,[s("test.describe.parallel(title, callback)"),a(e)]),s(".")]),Rs,n("p",null,[s("By using "),Ss,s(" it will enable the "),n("a",Is,[s("Playwright Inspector"),a(e)]),s(" for you to debug your tests.")]),Bs,Ls,Vs,a(i,{id:"LczBDR0gOhk",title:"Playwright 1.14"}),Ns,n("h4",Ms,[qs,s(" 🧩 Experimental "),a(o,{to:"/book/playwright/other-locators.html#react-locator"},{default:p(()=>[Es]),_:1}),s(" and "),a(o,{to:"/book/playwright/other-locators.html#vue-locator"},{default:p(()=>[Hs]),_:1}),s(" selector engines")]),n("p",null,[s("React and Vue selectors allow selecting elements by its component name and/or property values. The syntax is very similar to "),n("a",Fs,[s("attribute selectors"),a(e)]),s(" and supports all attribute selector operators.")]),Ds,n("p",null,[s("Learn more in the "),a(o,{to:"/book/playwright/other-locators.html#react-locator"},{default:p(()=>[s("react selectors documentation")]),_:1}),s(" and the "),a(o,{to:"/book/playwright/other-locators.html#vue-locator"},{default:p(()=>[s("vue selectors documentation")]),_:1}),s(".")]),n("h4",zs,[Ws,s(" ✨ New "),a(o,{to:"/book/playwright/other-locators.html#n-th-element-locator"},{default:p(()=>[Us]),_:1}),s(" and "),a(o,{to:"/book/playwright/other-locators.html#css-matching-only-visible-elements"},{default:p(()=>[Os]),_:1}),s(" selector engines")]),n("ul",null,[n("li",null,[a(o,{to:"/book/playwright/other-locators.html#n-th-element-locator"},{default:p(()=>[Gs]),_:1}),s(" selector engine is equivalent to the "),Ks,s(" pseudo class, but could be combined with other selector engines.")]),n("li",null,[a(o,{to:"/book/playwright/other-locators.html#css-matching-only-visible-elements"},{default:p(()=>[Ys]),_:1}),s(" selector engine is equivalent to the "),Js,s(" pseudo class, but could be combined with other selector engines.")])]),Xs,n("ul",null,[n("li",null,[n("strong",null,[s("⚡️ Introducing "),n("a",Qs,[s("Reporter API"),a(e)])]),s(" which is already used to create an "),n("a",Zs,[s("Allure Playwright reporter"),a(e)]),s(".")]),$s]),na,n("ul",null,[n("li",null,[a(o,{to:"/book/playwright/intro-js.html"},{default:p(()=>[s("Intro")]),_:1})]),n("li",null,[a(o,{to:"/book/playwright/auth.html"},{default:p(()=>[s("Authentication")]),_:1})]),n("li",null,[a(o,{to:"/book/playwright/chrome-extensions.html"},{default:p(()=>[s("Chrome Extensions")]),_:1})]),n("li",null,[a(o,{to:"/book/playwright/test-annotations.html"},{default:p(()=>[s("Playwright Test Annotations")]),_:1})]),n("li",null,[a(o,{to:"/book/playwright/test-configuration.html"},{default:p(()=>[s("Playwright Test Configuration")]),_:1})]),n("li",null,[a(o,{to:"/book/playwright/test-fixtures.html"},{default:p(()=>[s("Playwright Test Fixtures")]),_:1})])]),sa,n("p",null,[a(o,{to:"/book/playwright/intro-js.html"},{default:p(()=>[s("Playwright Test")]),_:1}),s(" is a "),aa,s(" built from scratch by Playwright team specifically to accommodate end-to-end testing needs:")]),ea,n("p",null,[s("👉 Read more in "),a(o,{to:"/book/playwright/intro-js.html"},{default:p(()=>[s("Playwright Test documentation")]),_:1}),s(".")]),ta,n("p",null,[a(o,{to:"/book/playwright/trace-viewer.html"},{default:p(()=>[s("Playwright Trace Viewer")]),_:1}),s(" is a new GUI tool that helps exploring recorded Playwright traces after the script ran. Playwright traces let you examine:")]),oa,n("p",null,[s("👉 Read more in "),a(o,{to:"/book/playwright/trace-viewer.html"},{default:p(()=>[s("trace viewer documentation")]),_:1}),s(".")]),pa,n("p",null,[s("🎥 New video: "),n("a",ia,[s("Playwright: A New Test Automation Framework for the Modern Web"),a(e)]),s(" ("),n("a",ca,[s("slides"),a(e)]),s(")")]),n("ul",null,[la,ra,ua,n("li",null,[da,s(" to "),n("a",ka,[s("applitools"),a(e)]),s(" for hosting the event and inviting us!")])]),ha,n("ul",null,[n("li",null,[n("a",ma,[s("Playwright for Java v1.10"),a(e)]),s(" is "),ga,s("!")]),va,ba]),wa,n("ul",null,[n("li",null,[n("p",null,[a(o,{to:"/book/playwright/debug.html"},{default:p(()=>[s("Playwright Inspector")]),_:1}),s(" is a "),fa,s(" to author and debug your tests.")]),ya]),n("li",null,[n("p",null,[xa,s(" with ["),_a,s("] in headed mode. Pausing the page launches "),a(o,{to:"/book/playwright/debug.html"},{default:p(()=>[s("Playwright Inspector")]),_:1}),s(" for debugging.")])]),n("li",null,[n("p",null,[Pa,s(" for CSS selectors. "),Ta,s(" matches any element containing "),ja,s(" somewhere inside, possibly in a child or a descendant element. See "),a(o,{to:"/book/playwright/other-locators.html#css-matching-by-text"},{default:p(()=>[s("more examples")]),_:1}),s(".")])]),n("li",null,[n("p",null,[Ca,s(" during execution, unless a listener for "),Aa,s(" event is configured. "),a(o,{to:"/book/playwright/dialogs.html"},{default:p(()=>[s("Learn more")]),_:1}),s(" about this.")])]),n("li",null,[n("p",null,[n("a",Ra,[s("Playwright for Python"),a(e)]),s(" is "),Sa,s(" with an idiomatic snake case API and pre-built "),a(o,{to:"/book/playwright/docker.html"},{default:p(()=>[s("Docker image")]),_:1}),s(" to run tests in CI/CD.")])])]),Ia,n("ul",null,[n("li",null,[a(o,{to:"/book/playwright/other-locators.html#css-matching-elements-based-on-layout"},{default:p(()=>[s("Selecting elements based on layout")]),_:1}),s(" with "),Ba,s(", "),La,s(", "),Va,s(" and "),Na,s(".")]),n("li",null,[s("Playwright now includes "),a(o,{to:"/book/playwright/cli.html"},{default:p(()=>[s("command line interface")]),_:1}),s(", former playwright-cli."),Ma]),qa,Ea]),Ha,n("ul",null,[n("li",null,[Fa,s(": "),n("a",Da,[s("Playwright for Java"),a(e)]),s(" is now on par with "),n("a",za,[s("JavaScript"),a(e)]),s(", "),n("a",Wa,[s("Python"),a(e)]),s(" and "),n("a",Ua,[s(".NET bindings"),a(e)]),s(".")]),Oa,n("li",null,[Ga,s(": We heard your feedback for more flexible selectors and have revamped the selectors implementation. Playwright 1.7 introduces "),a(o,{to:"/book/playwright/other-locators.html#css-locator"},{default:p(()=>[s("new CSS extensions")]),_:1}),s(" and there's more coming soon.")]),n("li",null,[Ka,s(": The docs website at "),n("a",Ya,[s("playwright.dev"),a(e)]),s(" has been updated and is now built with "),n("a",Ja,[s("Docusaurus"),a(e)]),s(".")]),Xa]),Qa])}const ee=l(d,[["render",Za],["__file","release-notes-js.html.vue"]]);export{ee as default};
