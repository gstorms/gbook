import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o,c as d,a as s,d as a,w as n,b as e,f as i}from"./app-207e7d61.js";const c={},h=s("p",null,"You can run a single test, a set of tests or all tests. Tests can be run on one browser or multiple browsers. By default tests are run in a headless manner meaning no browser window will be opened while running the tests and results will be seen in the terminal.",-1),u=s("p",null,[s("strong",null,"You will learn")],-1),p={class:"hint-container note"},g=s("p",{class:"hint-container-title"},"æ³¨",-1),b=i(`<h2 id="command-line" tabindex="-1"><a class="header-anchor" href="#command-line" aria-hidden="true">#</a> Command Line</h2><ul><li><p>Running all tests</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Running a single test file</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> landing-page.spec.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Run a set of test files</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> tests/todo-page/ tests/landing-page/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Run files that have <code>landing</code> or <code>login</code> in the file name</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> landing login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Run the test with the title</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> <span class="token parameter variable">-g</span> <span class="token string">&quot;add a todo item&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Running tests in headed mode</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> landing-page.spec.ts <span class="token parameter variable">--headed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Running tests on a specific project</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> landing-page.ts <span class="token parameter variable">--project</span><span class="token operator">=</span>chromium
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="debugging-tests" tabindex="-1"><a class="header-anchor" href="#debugging-tests" aria-hidden="true">#</a> Debugging Tests</h2>`,3),m=s("code",null,"console.log",-1),v=i(`<ul><li><p>Debugging all tests:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Debugging one test file:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> example.spec.ts <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Debugging a test from the line number where the <code>test(..</code> is defined:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> example.spec.ts:10 <span class="token parameter variable">--debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><img width="1394" alt="Debugging Tests with the Playwright inspector" src="https://user-images.githubusercontent.com/13063165/212744309-4b7e431b-de2a-45ca-b287-6360124adc33.png">`,2),w=s("h2",{id:"test-reports",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#test-reports","aria-hidden":"true"},"#"),e(" Test Reports")],-1),f=i(`<p>To open the report first run your tests:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>By default, the HTML report is opened automatically if some of the tests failed. If you need to open the report manually you can use the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright show-report
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img width="1392" alt="HTML Report &gt; Test Reports view" src="https://user-images.githubusercontent.com/13063165/212744633-826cce1b-fab1-455a-8ca7-68867c4d4698.png"><p>You can open a detailed view of each test by clicking on the test name. You can then explore the tests errors as well as expand each step of the test to see the code for that step and how long each step took to run.</p><img width="1247" alt="HTML Reporter &gt; Test Reports detailed view" src="https://user-images.githubusercontent.com/13063165/212868173-2bf680bb-274a-4aec-932b-d07255adcc74.png"><p>For projects created with <code>create-playwright</code> the HTML report is enabled by default. If you have a config which does not use the HTML report or running the show-report command yields to no reports, you can run it with <code>--reporter=html</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright show-report <span class="token parameter variable">--reporter</span><span class="token operator">=</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="what-s-next" tabindex="-1"><a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a> What&#39;s Next</h2>`,10);function y(x,k){const t=r("RouterLink");return o(),d("div",null,[h,u,s("ul",null,[s("li",null,[a(t,{to:"/book/playwright/running-tests-js.html#command-line"},{default:n(()=>[e("How to run tests from the command line")]),_:1})]),s("li",null,[a(t,{to:"/book/playwright/running-tests-js.html#debugging-tests"},{default:n(()=>[e("How to debug tests")]),_:1})]),s("li",null,[a(t,{to:"/book/playwright/running-tests-js.html#test-reports"},{default:n(()=>[e("How to open the HTML test reporter")]),_:1})])]),s("div",p,[g,s("p",null,[e("For a better debugging experience check out the "),a(t,{to:"/book/playwright/getting-started-vscode.html"},{default:n(()=>[e("VS Code Extension")]),_:1}),e(" for Playwright where you can run tests, add breakpoints and debug your tests right from the VS Code editor.")])]),b,s("p",null,[e("Since Playwright runs in Node.js, you can debug it with your debugger of choice e.g. using "),m,e(" or inside your IDE or directly in VS Code with the "),a(t,{to:"/book/playwright/getting-started-vscode.html"},{default:n(()=>[e("VS Code Extension")]),_:1}),e(". Playwright comes with the "),a(t,{to:"/book/playwright/debug.html#playwright-inspector"},{default:n(()=>[e("Playwright Inspector")]),_:1}),e(" which allows you to step through Playwright API calls, see their debug logs and explore "),a(t,{to:"/book/playwright/locators.html"},{default:n(()=>[e("locators")]),_:1}),e(".")]),v,s("p",null,[e("Check out our "),a(t,{to:"/book/playwright/debug.html"},{default:n(()=>[e("debugging guide")]),_:1}),e(" to learn more about the "),a(t,{to:"/book/playwright/debug.html#playwright-inspector"},{default:n(()=>[e("Playwright Inspector")]),_:1}),e(" as well as debugging with "),a(t,{to:"/book/playwright/debug.html#browser-developer-tools"},{default:n(()=>[e("Browser Developer tools")]),_:1}),e(".")]),w,s("p",null,[e("The "),a(t,{to:"/book/playwright/test-reporters.html#html-reporter"},{default:n(()=>[e("HTML Reporter")]),_:1}),e(" is a built in reporter which shows you a full report of all your tests that have been ran. It shows the name of the test as well as the file name with the line number of the test next to it as well as how long each test took to run and what browsers they were ran on. You can filter the report by passed tests, failed tests, skipped tests or flaky tests. You can also filter by browsers by clicking on the name of the browser next to a test. You can also search for a particular test or browser using the search bar.")]),f,s("ul",null,[s("li",null,[a(t,{to:"/book/playwright/codegen-intro.html"},{default:n(()=>[e("Generate tests with Codegen")]),_:1})]),s("li",null,[a(t,{to:"/book/playwright/trace-viewer-intro.html"},{default:n(()=>[e("See a trace of your tests")]),_:1})])])])}const R=l(c,[["render",y],["__file","running-tests-js.html.vue"]]);export{R as default};
