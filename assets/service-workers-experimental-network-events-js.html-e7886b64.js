import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as i,c as l,a as s,b as n,d as a,w as u,f as o}from"./app-207e7d61.js";const r={},d={class:"hint-container warning"},k=s("p",{class:"hint-container-title"},"注意",-1),v={href:"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"fetch",-1),h=s("strong",null,"network proxy",-1),w={href:"https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent#examples",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"Many sites that use Service Workers simply use them as a transparent optimization technique. While users might notice a faster experience, the app's implementation is unaware of their existence. Running the app with or without Service Workers enabled appears functionally equivalent.",-1),f=s("h2",{id:"how-to-enable",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-enable","aria-hidden":"true"},"#"),n(" How to Enable")],-1),y=s("p",null,[n("Playwright's inspection and routing of requests made by Service Workers are "),s("strong",null,"experimental"),n(" and disabled by default.")],-1),q=s("p",null,[n("Set the "),s("code",null,"PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS"),n(" environment variable to "),s("code",null,"1"),n(" (or any other value) to enable the feature. Only Chrome/Chromium are currently supported.")],-1),x={href:"https://github.com/microsoft/playwright/issues/15684",target:"_blank",rel:"noopener noreferrer"},W=s("h2",{id:"service-worker-fetch",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#service-worker-fetch","aria-hidden":"true"},"#"),n(" Service Worker Fetch")],-1),_=s("h3",{id:"accessing-service-workers-and-waiting-for-activation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#accessing-service-workers-and-waiting-for-activation","aria-hidden":"true"},"#"),n(" Accessing Service Workers and Waiting for Activation")],-1),j=s("code",null,"method: BrowserContext.serviceWorkers",-1),S={href:"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register",target:"_blank",rel:"noopener noreferrer"},R=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> serviceWorkerPromise <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">waitForEvent</span><span class="token punctuation">(</span><span class="token string">&#39;serviceworker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;/example-with-a-service-worker.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> serviceworker <span class="token operator">=</span> <span class="token keyword">await</span> serviceWorkerPromise<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> serviceWorkerPromise <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">waitForEvent</span><span class="token punctuation">(</span><span class="token string">&#39;serviceworker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;/example-with-a-service-worker.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> serviceworker <span class="token operator">=</span> <span class="token keyword">await</span> serviceWorkerPromise<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> context<span class="token punctuation">.</span>expect_event<span class="token punctuation">(</span><span class="token string">&quot;serviceworker&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> event_info<span class="token punctuation">:</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&#39;/example-with-a-service-worker.html&#39;</span><span class="token punctuation">)</span>
serviceworker <span class="token operator">=</span> <span class="token keyword">await</span> event_info<span class="token punctuation">.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> context<span class="token punctuation">.</span>expect_event<span class="token punctuation">(</span><span class="token string">&quot;serviceworker&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> event_info<span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&#39;/example-with-a-service-worker.html&#39;</span><span class="token punctuation">)</span>
serviceworker <span class="token operator">=</span> event_info<span class="token punctuation">.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> waitForServiceWorkerTask <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">WaitForServiceWorkerAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">GotoAsync</span><span class="token punctuation">(</span>&#39;<span class="token operator">/</span>example<span class="token operator">-</span>with<span class="token operator">-</span>a<span class="token operator">-</span>service<span class="token operator">-</span>worker<span class="token punctuation">.</span>html&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> serviceworker <span class="token operator">=</span> <span class="token keyword">await</span> waitForServiceWorkerTask<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Worker</span> serviceWorker <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">waitForRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  page<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>&#39;<span class="token operator">/</span>example<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>a<span class="token operator">-</span>service<span class="token operator">-</span>worker<span class="token punctuation">.</span>html&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[<code>event: BrowserContext.serviceWorker</code>] is fired <em><strong>before</strong></em> the Service Worker&#39;s main script has been evaluated, so <em><strong>before</strong></em> calling service[<code>method: Worker.evaluate</code>] you should wait on its activation.</p><p>There are more idiomatic methods of waiting for a Service Worker to be activated, but the following is an implementation agnostic method:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> registration <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">getRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>registration<span class="token punctuation">.</span>active<span class="token operator">?.</span>state <span class="token operator">===</span> <span class="token string">&#39;activated&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;controllerchange&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> registration <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">getRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>registration<span class="token punctuation">.</span>active<span class="token operator">?.</span>state <span class="token operator">===</span> <span class="token string">&#39;activated&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;controllerchange&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;async () =&gt; {
  const registration = await window.navigator.serviceWorker.getRegistration();
  if (registration.active?.state === &#39;activated&#39;)
    return;
  await new Promise(res =&gt; window.navigator.serviceWorker.addEventListener(&#39;controllerchange&#39;, res));
}&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;async () =&gt; {
  const registration = await window.navigator.serviceWorker.getRegistration();
  if (registration.active?.state === &#39;activated&#39;)
    return;
  await new Promise(res =&gt; window.navigator.serviceWorker.addEventListener(&#39;controllerchange&#39;, res));
}&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">@&quot;async () =&gt; {
  const registration = await window.navigator.serviceWorker.getRegistration();
  if (registration.active?.state === &#39;activated&#39;)
    return;
  await new Promise(res =&gt; window.navigator.serviceWorker.addEventListener(&#39;controllerchange&#39;, res));
}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>
  <span class="token string">&quot;async () =&gt; {&quot;</span>
  <span class="token string">&quot;  const registration = await window.navigator.serviceWorker.getRegistration();&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  if (registration.active?.state === &#39;activated&#39;)&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;    return;&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;  await new Promise(res =&gt; window.navigator.serviceWorker.addEventListener(&#39;controllerchange&#39;, res));&quot;</span> <span class="token operator">+</span>
  <span class="token string">&quot;}&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="network-events-and-routing" tabindex="-1"><a class="header-anchor" href="#network-events-and-routing" aria-hidden="true">#</a> Network Events and Routing</h3><p>Any network request made by the <strong>Service Worker</strong> will have:</p><ul><li>[<code>event: BrowserContext.request</code>] and its corresponding events ([<code>event: BrowserContext.requestFinished</code>] and [<code>event: BrowserContext.response</code>], or [<code>event: BrowserContext.requestFailed</code>])</li><li>[<code>method: BrowserContext.route</code>] will see the request</li><li>[<code>method: Request.serviceWorker</code>] will be set to the Service [Worker] instance, and [<code>method: Request.frame</code>] will <strong>throw</strong></li><li>[<code>method: Response.fromServiceWorker</code>] will return <code>false</code></li></ul><p>Additionally, any network request made by the <strong>Page</strong> (including its sub-[Frame]s) will have:</p><ul><li>[<code>event: BrowserContext.request</code>] and its corresponding events ([<code>event: BrowserContext.requestFinished</code>] and [<code>event: BrowserContext.response</code>], or [<code>event: BrowserContext.requestFailed</code>])</li><li>[<code>event: Page.request</code>] and its corresponding events ([<code>event: Page.requestFinished</code>] and [<code>event: Page.response</code>], or [<code>event: Page.requestFailed</code>])</li><li>[<code>method: Page.route</code>] and [<code>method: Page.route</code>] will <strong>not</strong> see the request (if a Service Worker&#39;s fetch handler was registered)</li><li>[<code>method: Request.serviceWorker</code>] will be set to <code>null</code>, and [<code>method: Request.frame</code>] will return the [Frame]</li><li>[<code>method: Response.fromServiceWorker</code>] will return <code>true</code> (if a Service Worker&#39;s fetch handler was registered)</li></ul><p>Many Service Worker implementations simply execute the request from the page (possibly with some custom caching/offline logic omitted for simplicity):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// filename: transparent-service-worker.js</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;fetch&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// actually make the request</span>
  <span class="token keyword">const</span> responsePromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// send it back to the page</span>
  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>responsePromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;activate&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>clients<span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If a page registers the above Service Worker:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- filename: index.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  window<span class="token punctuation">.</span>registrationPromise <span class="token operator">=</span> navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;/transparent-service-worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the first visit to the page via [<code>method: Page.goto</code>], the following Request/Response events would be emitted (along with the corresponding network lifecycle events):</p><table><thead><tr><th>Event</th><th>Owner</th><th>URL</th><th>Routed</th><th>[<code>method: Response.fromServiceWorker</code>]</th></tr></thead><tbody><tr><td>[<code>event: BrowserContext.request</code>]</td><td>[Frame]</td><td>index.html</td><td>Yes</td><td></td></tr><tr><td>[<code>event: Page.request</code>]</td><td>[Frame]</td><td>index.html</td><td>Yes</td><td></td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>Service [Worker]</td><td>transparent-service-worker.js</td><td>Yes</td><td></td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>Service [Worker]</td><td>data.json</td><td>Yes</td><td></td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>[Frame]</td><td>data.json</td><td></td><td>Yes</td></tr><tr><td>[<code>event: Page.request</code>]</td><td>[Frame]</td><td>data.json</td><td></td><td>Yes</td></tr></tbody></table><p>Since the example Service Worker just acts a basic transparent &quot;proxy&quot;:</p><ul><li>There&#39;s 2 [<code>event: BrowserContext.request</code>] events for <code>data.json</code>; one [Frame]-owned, the other Service [Worker]-owned.</li><li>Only the Service [Worker]-owned request for the resource was routable via [<code>method: BrowserContext.route</code>]; the [Frame]-owned events for <code>data.json</code> are not routeable, as they would not have even had the possibility to hit the external network since the Service Worker has a fetch handler registered.</li></ul><p>:::caution<br> It&#39;s important to note: calling [<code>method: Request.frame</code>] or [<code>method: Response.frame</code>] will <strong>throw</strong> an exception, if called on a [Request]/[Response] that has a non-null [<code>method: Request.serviceWorker</code>].<br> :::</p><h4 id="advanced-example" tabindex="-1"><a class="header-anchor" href="#advanced-example" aria-hidden="true">#</a> Advanced Example</h4><p>When a Service Worker handles a page&#39;s request, the Service Worker can make 0 to n requests to the external network. The Service Worker might respond directly from a cache, generate a response in memory, rewrite the request, make two requests and then combine into 1, etc.</p><p>Consider the code snippets below to understand Playwright&#39;s view into the Request/Responses and how it impacts routing in some of these cases.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// filename: complex-service-worker.js</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;install&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1. Pre-fetches and caches /addressbook.json</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;/addressbook.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Opt to handle FetchEvent&#39;s from the page</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;fetch&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1. Try to first serve directly from caches</span>
      <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token keyword">return</span> response<span class="token punctuation">;</span>

      <span class="token comment">// 2. Re-write request for /foo to /bar</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;./bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 3. Prevent tracker.js from being retrieved, and returns a placeholder response</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;tracker.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">&#39;console.log(&quot;no trackers!&quot;)&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
          <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/javascript&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 4. Otherwise, fallthrough, perform the fetch and respond</span>
      <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;activate&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>clients<span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And a page that simply registers the Service Worker:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- filename: index.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  window<span class="token punctuation">.</span>registrationPromise <span class="token operator">=</span> navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;/complex-service-worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the first visit to the page via [<code>method: Page.goto</code>], the following Request/Response events would be emitted:</p><table><thead><tr><th>Event</th><th>Owner</th><th>URL</th><th>Routed</th><th>[<code>method: Response.fromServiceWorker</code>]</th></tr></thead><tbody><tr><td>[<code>event: BrowserContext.request</code>]</td><td>[Frame]</td><td>index.html</td><td>Yes</td><td></td></tr><tr><td>[<code>event: Page.request</code>]</td><td>[Frame]</td><td>index.html</td><td>Yes</td><td></td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>Service [Worker]</td><td>complex-service-worker.js</td><td>Yes</td><td></td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>Service [Worker]</td><td>addressbook.json</td><td>Yes</td><td></td></tr></tbody></table>`,36),P={href:"https://developer.mozilla.org/en-US/docs/Web/API/Cache/add",target:"_blank",rel:"noopener noreferrer"},E=s("code",null,"cache.add",-1),F=s("code",null,"addressbook.json",-1),C=o(`<p>Once the Service Worker is activated and handling FetchEvents, if the page makes the following requests:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/addressbook.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/tracker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/fallthrough.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/addressbook.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/tracker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/fallthrough.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/addressbook.json&#39;)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/foo&#39;)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/tracker.js&#39;)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/fallthrough.txt&#39;)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/addressbook.json&#39;)&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/foo&#39;)&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/tracker.js&#39;)&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/fallthrough.txt&#39;)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/addressbook.json&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/foo&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/tracker.js&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/fallthrough.txt&#39;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/addressbook.json&#39;)&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/foo&#39;)&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/tracker.js&#39;)&quot;</span><span class="token punctuation">)</span>
page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;/fallthrough.txt&#39;)&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following Request/Response events would be emitted:</p><table><thead><tr><th>Event</th><th>Owner</th><th>URL</th><th>Routed</th><th>[<code>method: Response.fromServiceWorker</code>]</th></tr></thead><tbody><tr><td>[<code>event: BrowserContext.request</code>]</td><td>[Frame]</td><td>addressbook.json</td><td></td><td>Yes</td></tr><tr><td>[<code>event: Page.request</code>]</td><td>[Frame]</td><td>addressbook.json</td><td></td><td>Yes</td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>Service [Worker]</td><td>bar</td><td>Yes</td><td></td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>[Frame]</td><td>foo</td><td></td><td>Yes</td></tr><tr><td>[<code>event: Page.request</code>]</td><td>[Frame]</td><td>foo</td><td></td><td>Yes</td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>[Frame]</td><td>tracker.js</td><td></td><td>Yes</td></tr><tr><td>[<code>event: Page.request</code>]</td><td>[Frame]</td><td>tracker.js</td><td></td><td>Yes</td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>Service [Worker]</td><td>fallthrough.txt</td><td>Yes</td><td></td></tr><tr><td>[<code>event: BrowserContext.request</code>]</td><td>[Frame]</td><td>fallthrough.txt</td><td></td><td>Yes</td></tr><tr><td>[<code>event: Page.request</code>]</td><td>[Frame]</td><td>fallthrough.txt</td><td></td><td>Yes</td></tr></tbody></table><p>It&#39;s important to note:</p><ul><li>The page requested <code>/foo</code>, but the Service Worker requested <code>/bar</code>, so there are only [Frame]-owned events for <code>/foo</code>, but not <code>/bar</code>.</li><li>Likewise, the Service Worker never hit the network for <code>tracker.js</code>, so only [Frame]-owned events were emitted for that request.</li></ul><h2 id="routing-service-worker-requests-only" tabindex="-1"><a class="header-anchor" href="#routing-service-worker-requests-only" aria-hidden="true">#</a> Routing Service Worker Requests Only</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// NB: calling route.request().frame() here would THROW</span>
    <span class="token keyword">return</span> route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;from sw&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> route<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&#39;**&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// NB: calling route.request().frame() here would THROW</span>
    <span class="token keyword">return</span> route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;from sw&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> route<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">:</span> Route<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> route<span class="token punctuation">.</span>request<span class="token punctuation">.</span>service_worker<span class="token punctuation">:</span>
    <span class="token comment"># NB: calling route.request.frame here would THROW</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>content_type<span class="token operator">=</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">&#39;from sw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span>continue_<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&#39;**&#39;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>route<span class="token punctuation">:</span> Route<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> route<span class="token punctuation">.</span>request<span class="token punctuation">.</span>service_worker<span class="token punctuation">:</span>
    <span class="token comment"># NB: calling route.request.frame here would THROW</span>
    route<span class="token punctuation">.</span>fulfill<span class="token punctuation">(</span>content_type<span class="token operator">=</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">&#39;from sw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    route<span class="token punctuation">.</span>continue_<span class="token punctuation">(</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">&#39;**&#39;</span><span class="token punctuation">,</span> handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">RouteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;**&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> route <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serviceWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// NB: calling route.request.frame here would THROW</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">FulfillAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      ContentType <span class="token operator">=</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">,</span>
      Status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>
      Body <span class="token operator">=</span> <span class="token string">&quot;from sw&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> route<span class="token punctuation">.</span><span class="token function">Continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>browserContext<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">&quot;**&quot;</span><span class="token punctuation">,</span> route <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// calling route.request().frame() here would THROW</span>
    route<span class="token punctuation">.</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Route<span class="token punctuation">.</span>FulfillOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;from sw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="known-limitations" tabindex="-1"><a class="header-anchor" href="#known-limitations" aria-hidden="true">#</a> Known Limitations</h2>`,19),B={href:"https://github.com/microsoft/playwright/issues/14711",target:"_blank",rel:"noopener noreferrer"};function A(T,L){const p=e("RouterLink"),t=e("ExternalLinkIcon");return i(),l("div",null,[s("div",d,[k,s("p",null,[n("If you're looking to do general network mocking, routing, and interception, please see the "),a(p,{to:"/book/playwright/network.html"},{default:u(()=>[n("Network Guide")]),_:1}),n(" first. Playwright provides built-in APIs for this use case that don't require the information below. However, if you're interested in requests made by Service Workers themselves, please read below.")])]),s("p",null,[s("a",v,[n("Service Workers"),a(t)]),n(" provide a browser-native method of handling requests made by a page with the native "),s("a",m,[n("Fetch API ("),g,n(")"),a(t)]),n(" along with other network-requested assets (like scripts, css, and images).")]),s("p",null,[n("They can act as a "),h,n(" between the page and the external network to perform caching logic or can provide users with an offline experience if the Service Worker adds a "),s("a",w,[n("FetchEvent"),a(t)]),n(" listener.")]),b,f,y,q,s("p",null,[n("If you're using (or are interested in using this this feature), please comment on "),s("a",x,[n("this issue"),a(t)]),n(" letting us know your use case.")]),W,_,s("p",null,[n("You can use ["),j,n("] to list the Service [Worker]s, or specifically watch for the Service [Worker] if you anticipate a page will trigger its "),s("a",S,[n("registration"),a(t)]),n(":")]),R,s("p",null,[n("It's important to note that "),s("a",P,[E,a(t)]),n(" caused the Service Worker to make a request (Service [Worker]-owned), even before "),F,n(" was asked for in the page.")]),C,s("p",null,[n("Requests for updated Service Worker main script code currently cannot be routed ("),s("a",B,[n("https://github.com/microsoft/playwright/issues/14711"),a(t)]),n(").")])])}const I=c(r,[["render",A],["__file","service-workers-experimental-network-events-js.html.vue"]]);export{I as default};
