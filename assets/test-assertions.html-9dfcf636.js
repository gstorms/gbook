import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as d,a as n,b as s,d as t,w as a,f as e}from"./app-207e7d61.js";const k={},m=n("code",null,"expect",-1),g=n("code",null,"expect(value)",-1),v=n("code",null,"toEqual",-1),h=n("code",null,"toContain",-1),b=n("code",null,"toBeTruthy",-1),f=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),y=n("br",null,null,-1),x=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByTestId</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Submitted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Playwright will be re-testing the element with the test id of <code>status</code> until the fetched element has the <code>&quot;Submitted&quot;</code> text. It will re-fetch the element and check it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the [<code>property: TestConfig.expect</code>] value in the test config.</p>`,2),w=e(`<h2 id="list-of-assertions" tabindex="-1"><a class="header-anchor" href="#list-of-assertions" aria-hidden="true">#</a> List of assertions</h2><table><thead><tr><th style="text-align:left;">Assertion</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeChecked</code>]</td><td style="text-align:left;">Checkbox is checked</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeDisabled</code>]</td><td style="text-align:left;">Element is disabled</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeEditable</code>]</td><td style="text-align:left;">Element is enabled</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeEmpty</code>]</td><td style="text-align:left;">Container is empty</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeEnabled</code>]</td><td style="text-align:left;">Element is enabled</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeFocused</code>]</td><td style="text-align:left;">Element is focused</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeHidden</code>]</td><td style="text-align:left;">Element is not visible</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeInViewport</code>]</td><td style="text-align:left;">Element intersects viewport</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeVisible</code>]</td><td style="text-align:left;">Element is visible</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toContainText</code>]</td><td style="text-align:left;">Element contains text</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveAttribute</code>]</td><td style="text-align:left;">Element has a DOM attribute</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveClass</code>]</td><td style="text-align:left;">Element has a class property</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveCount</code>]</td><td style="text-align:left;">List has exact number of children</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveCSS</code>]</td><td style="text-align:left;">Element has CSS property</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveId</code>]</td><td style="text-align:left;">Element has an ID</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveJSProperty</code>]</td><td style="text-align:left;">Element has a JavaScript property</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveScreenshot#1</code>]</td><td style="text-align:left;">Element has a screenshot</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveText</code>]</td><td style="text-align:left;">Element matches text</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveValue</code>]</td><td style="text-align:left;">Input has a value</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveValues</code>]</td><td style="text-align:left;">Select has options selected</td></tr><tr><td style="text-align:left;">[<code>method: PageAssertions.toHaveScreenshot#1</code>]</td><td style="text-align:left;">Page has a screenshot</td></tr><tr><td style="text-align:left;">[<code>method: PageAssertions.toHaveTitle</code>]</td><td style="text-align:left;">Page has a title</td></tr><tr><td style="text-align:left;">[<code>method: PageAssertions.toHaveURL</code>]</td><td style="text-align:left;">Page has a URL</td></tr><tr><td style="text-align:left;">[<code>method: APIResponseAssertions.toBeOK</code>]</td><td style="text-align:left;">Response has an OK status</td></tr></tbody></table><h2 id="negating-matchers" tabindex="-1"><a class="header-anchor" href="#negating-matchers" aria-hidden="true">#</a> Negating Matchers</h2><p>In general, we can expect the opposite to be true by adding a <code>.not</code> to the front<br> of the matchers:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>locator<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toContainText</span><span class="token punctuation">(</span><span class="token string">&quot;some text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="soft-assertions" tabindex="-1"><a class="header-anchor" href="#soft-assertions" aria-hidden="true">#</a> Soft Assertions</h2><p>By default, failed assertion will terminate test execution. Playwright also<br> supports <em>soft assertions</em>: failed soft assertions <strong>do not</strong> terminate test execution,<br> but mark the test as failed.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Make a few checks that will not stop the test when failed...</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByTestId</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByTestId</span><span class="token punctuation">(</span><span class="token string">&#39;eta&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;1 day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ... and continue the test to check more things.</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;next page&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;heading&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Make another order&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At any point during test execution, you can check whether there were any<br> soft assertion failures:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Make a few checks that will not stop the test when failed...</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByTestId</span><span class="token punctuation">(</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">soft</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getByTestId</span><span class="token punctuation">(</span><span class="token string">&#39;eta&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveText</span><span class="token punctuation">(</span><span class="token string">&#39;1 day&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Avoid running further if there were soft assertion failures.</span>
<span class="token function">expect</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that soft assertions only work with Playwright test runner.</p><h2 id="custom-expect-message" tabindex="-1"><a class="header-anchor" href="#custom-expect-message" aria-hidden="true">#</a> Custom Expect Message</h2><p>You can specify a custom error message as a second argument to the <code>expect</code> function, for example:</p>`,13),_=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token function"},"expect"),n("span",{class:"token punctuation"},"("),s("page"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getByText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Name'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'should be logged in'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toBeVisible"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),A=n("p",null,"The error would look like this:",-1),B=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("    Error: should be logged "),n("span",{class:"token keyword"},"in"),s(`

    Call log:
      - expect.toBeVisible with `),n("span",{class:"token function"},"timeout"),s(` 5000ms
      - waiting `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token string"},`"getByText('Name')"`),s(`


      `),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"|"),s(`
      `),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"|"),s(" test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'example test'"),s(", async"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" page "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"4"),s(),n("span",{class:"token operator"},"|"),s("   await expect"),n("span",{class:"token punctuation"},"("),s("page.getByText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Name'"),n("span",{class:"token punctuation"},")"),s(", "),n("span",{class:"token string"},"'should be logged in'"),n("span",{class:"token punctuation"},")"),s(".toBeVisible"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token operator"},"|"),s(`                                                                  ^
      `),n("span",{class:"token number"},"5"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token number"},"6"),s(),n("span",{class:"token operator"},"|"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,"The same works with soft assertions:",-1),E=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[s("expect"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"soft"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'my soft assertion'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toBe"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"56"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("expect"),n("span",{class:"token punctuation"},"("),s("page"),n("span",{class:"token punctuation"},"."),s("get_by_text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Name"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"should be logged in"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("to_be_visible"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),L=n("p",null,"The error would look like this:",-1),P=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("    def test_foobar"),n("span",{class:"token punctuation"},"("),s("page: Page"),n("span",{class:"token punctuation"},")"),s(" -"),n("span",{class:"token operator"},">"),s(` None:
`),n("span",{class:"token operator"},">"),s("       expect"),n("span",{class:"token punctuation"},"("),s("page.get_by_text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Name"'),n("span",{class:"token punctuation"},")"),s(", "),n("span",{class:"token string"},'"should be logged in"'),n("span",{class:"token punctuation"},")"),s(".to_be_visible"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
E       AssertionError: should be logged `),n("span",{class:"token keyword"},"in"),s(`
E       Actual value: None 
E       Call log:
E       LocatorAssertions.to_be_visible with `),n("span",{class:"token function"},"timeout"),s(` 5000ms
E       waiting `),n("span",{class:"token keyword"},"for"),s(" get_by_text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Name"'),n("span",{class:"token punctuation"},")"),s(`
E       waiting `),n("span",{class:"token keyword"},"for"),s(" get_by_text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Name"'),n("span",{class:"token punctuation"},")"),s(`

tests/test_foobar.py:22: AssertionError
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=e(`<h2 id="polling" tabindex="-1"><a class="header-anchor" href="#polling" aria-hidden="true">#</a> Polling</h2><p>You can convert any synchronous <code>expect</code> to an asynchronous polling one using <code>expect.poll</code>.</p><p>The following method will poll given function until it returns HTTP status 200:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Custom error message, optional.</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;make sure API eventually succeeds&#39;</span><span class="token punctuation">,</span> <span class="token comment">// custom error message</span>
  <span class="token comment">// Poll for 10 seconds; defaults to 5 seconds. Pass 0 to disable timeout.</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also specify custom polling intervals:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> expect<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe, .... Defaults to [100, 250, 500, 1000].</span>
  <span class="token literal-property property">intervals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1_000</span><span class="token punctuation">,</span> <span class="token number">2_000</span><span class="token punctuation">,</span> <span class="token number">10_000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">60_000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="retrying" tabindex="-1"><a class="header-anchor" href="#retrying" aria-hidden="true">#</a> Retrying</h2><p>You can retry blocks of code until they are passing successfully.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also specify custom timeout for retry intervals:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Probe, wait 1s, probe, wait 2s, probe, wait 10s, probe, wait 10s, probe, .... Defaults to [100, 250, 500, 1000].</span>
  <span class="token literal-property property">intervals</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1_000</span><span class="token punctuation">,</span> <span class="token number">2_000</span><span class="token punctuation">,</span> <span class="token number">10_000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">60_000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function C(N,S){const o=l("RouterLink"),i=l("Tabs");return r(),d("div",null,[n("p",null,[s("Playwright includes test assertions in the form of "),m,s(" function. To make an assertion, call "),g,s(" and choose a matcher that reflects the expectation. There are many "),t(o,{to:"/book/playwright/api/class-genericassertions.html"},{default:a(()=>[s("generic matchers")]),_:1}),s(" like "),v,s(", "),h,s(", "),b,s(" that can be used to assert any conditions.")]),f,n("p",null,[s("Playwright also includes web-specific "),t(o,{to:"/book/playwright/api/class-locatorassertions.html"},{default:a(()=>[s("async matchers")]),_:1}),s(" that will wait until"),y,s(" the expected condition is met. Consider the following example:")]),x,n("p",null,[s("By default, the timeout for assertions is set to 5 seconds. Learn more about "),t(o,{to:"/book/playwright/test-timeouts.html"},{default:a(()=>[s("various timeouts")]),_:1}),s(".")]),w,t(i,{id:"250",data:[{id:"js"},{id:"python"}]},{title0:a(({value:p,isActive:c})=>[s("js")]),title1:a(({value:p,isActive:c})=>[s("python")]),tab0:a(({value:p,isActive:c})=>[_,A,B,j,E]),tab1:a(({value:p,isActive:c})=>[T,L,P]),_:1}),H])}const q=u(k,[["render",C],["__file","test-assertions.html.vue"]]);export{q as default};
