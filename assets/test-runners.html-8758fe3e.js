import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as r,a as s,b as n,d as e,w as i,f as t}from"./app-207e7d61.js";const u={},d={href:"https://docs.pytest.org/en/stable/",target:"_blank",rel:"noopener noreferrer"},h=s("h2",{id:"usage",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),n(" Usage")],-1),m={href:"https://docs.pytest.org/en/stable/",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--browser</span> webkit <span class="token parameter variable">--headed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),v={href:"https://docs.pytest.org/en/stable/reference.html#ini-options-ref",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment"># content of pytest.ini</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span>
<span class="token comment"># Run firefox with UI</span>
<span class="token key attr-name">addopts</span> <span class="token punctuation">=</span> <span class="token value attr-value">--headed --browser firefox</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cli-arguments" tabindex="-1"><a class="header-anchor" href="#cli-arguments" aria-hidden="true">#</a> CLI arguments</h2>`,2),g=t("<li><code>--headed</code>: Run tests in headed mode (default: headless).</li><li><code>--browser</code>: Run tests in a different browser <code>chromium</code>, <code>firefox</code>, or <code>webkit</code>. It can be specified multiple times (default: <code>chromium</code>).</li>",2),f=s("code",null,"--browser-channel",-1),y=s("li",null,[s("code",null,"--slowmo"),n(" Run tests with slow mo.")],-1),_=s("code",null,"--device",-1),w=s("li",null,[s("code",null,"--output"),n(" Directory for artifacts produced by tests (default: "),s("code",null,"test-results"),n(").")],-1),x=s("code",null,"--tracing",-1),q=s("code",null,"on",-1),T=s("code",null,"off",-1),C=s("code",null,"retain-on-failure",-1),P=s("code",null,"off",-1),I=t("<li><code>--video</code> Whether to record video for each test. <code>on</code>, <code>off</code>, or <code>retain-on-failure</code> (default: <code>off</code>).</li><li><code>--screenshot</code> Whether to automatically capture a screenshot after each test. <code>on</code>, <code>off</code>, or <code>only-on-failure</code> (default: <code>off</code>).</li>",2),B=s("h2",{id:"fixtures",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fixtures","aria-hidden":"true"},"#"),n(" Fixtures")],-1),D={href:"https://docs.pytest.org/en/latest/fixture.html",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_my_app_is_working</span><span class="token punctuation">(</span>fixture_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Test using fixture_name</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Function scope</strong>: These fixtures are created when requested in a test function and destroyed when the test ends.</p>`,2),L=s("code",null,"context",-1),S={href:"https://playwright.dev/python/docs/browser-contexts",target:"_blank",rel:"noopener noreferrer"},U=s("code",null,"page",-1),E={href:"https://playwright.dev/python/docs/pages",target:"_blank",rel:"noopener noreferrer"},N=s("p",null,[s("strong",null,"Session scope"),n(": These fixtures are created when requested in a test function and destroyed when all tests end.")],-1),W=s("code",null,"playwright",-1),z={href:"https://playwright.dev/python/docs/api/class-playwright",target:"_blank",rel:"noopener noreferrer"},M=s("code",null,"browser_type",-1),O={href:"https://playwright.dev/python/docs/api/class-browsertype",target:"_blank",rel:"noopener noreferrer"},V=s("code",null,"browser",-1),F={href:"https://playwright.dev/python/docs/api/class-browser",target:"_blank",rel:"noopener noreferrer"},j=s("li",null,[s("code",null,"browser_name"),n(": Browser name as string.")],-1),G=s("li",null,[s("code",null,"browser_channel"),n(": Browser channel as string.")],-1),H=s("li",null,[s("code",null,"is_chromium"),n(", "),s("code",null,"is_webkit"),n(", "),s("code",null,"is_firefox"),n(": Booleans for the respective browser types.")],-1),A=t('<p><strong>Customizing fixture options</strong>: For <code>browser</code> and <code>context</code> fixtures, use the following fixtures to define custom launch options.</p><ul><li><code>browser_type_launch_args</code>: Override launch arguments for [<code>method: BrowserType.launch</code>]. It should return a Dict.</li><li><code>browser_context_args</code>: Override the options for [<code>method: Browser.newContext</code>]. It should return a Dict.</li></ul><h2 id="parallelism-running-multiple-tests-at-once" tabindex="-1"><a class="header-anchor" href="#parallelism-running-multiple-tests-at-once" aria-hidden="true">#</a> Parallelism: Running Multiple Tests at Once</h2>',3),J={href:"https://pypi.org/project/pytest-xdist/",target:"_blank",rel:"noopener noreferrer"},K=s("code",null,"pytest-xdist",-1),Q=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># install dependency</span>
pip <span class="token function">install</span> pytest-xdist
<span class="token comment"># use the --numprocesses flag</span>
pytest <span class="token parameter variable">--numprocesses</span> auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Depending on the hardware and nature of your tests, you can set <code>numprocesses</code> to be anywhere from <code>2</code> to the number of CPUs on the machine. If set too high, you may notice unexpected behavior.</p>`,2),X=s("code",null,"pytest",-1),Y=t(`<h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><h3 id="configure-mypy-typings-for-auto-completion" tabindex="-1"><a class="header-anchor" href="#configure-mypy-typings-for-auto-completion" aria-hidden="true">#</a> Configure Mypy typings for auto-completion</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_my_application.py</span>
<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> Page

<span class="token keyword">def</span> <span class="token function">test_visit_admin_dashboard</span><span class="token punctuation">(</span>page<span class="token punctuation">:</span> Page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configure-slow-mo" tabindex="-1"><a class="header-anchor" href="#configure-slow-mo" aria-hidden="true">#</a> Configure slow mo</h3><p>Run tests with slow mo with the <code>--slowmo</code> argument.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest <span class="token parameter variable">--slowmo</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="skip-test-by-browser" tabindex="-1"><a class="header-anchor" href="#skip-test-by-browser" aria-hidden="true">#</a> Skip test by browser</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_my_application.py</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip_browser</span><span class="token punctuation">(</span><span class="token string">&quot;firefox&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_visit_example</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run-on-a-specific-browser" tabindex="-1"><a class="header-anchor" href="#run-on-a-specific-browser" aria-hidden="true">#</a> Run on a specific browser</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>only_browser</span><span class="token punctuation">(</span><span class="token string">&quot;chromium&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_visit_example</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run-with-a-custom-browser-channel-like-google-chrome-or-microsoft-edge" tabindex="-1"><a class="header-anchor" href="#run-with-a-custom-browser-channel-like-google-chrome-or-microsoft-edge" aria-hidden="true">#</a> Run with a custom browser channel like Google Chrome or Microsoft Edge</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest --browser-channel chrome
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_my_application.py</span>
<span class="token keyword">def</span> <span class="token function">test_example</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configure-base-url" tabindex="-1"><a class="header-anchor" href="#configure-base-url" aria-hidden="true">#</a> Configure base-url</h3>`,14),Z=s("code",null,"base-url",-1),$={href:"https://github.com/pytest-dev/pytest-base-url",target:"_blank",rel:"noopener noreferrer"},nn=s("code",null,"pytest-base-url",-1),sn=s("br",null,null,-1),en=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pytest --base-url http://localhost:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># test_my_application.py</span>
<span class="token keyword">def</span> <span class="token function">test_visit_example</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># -&gt; Will result in http://localhost:8080/admin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ignore-https-errors" tabindex="-1"><a class="header-anchor" href="#ignore-https-errors" aria-hidden="true">#</a> Ignore HTTPS errors</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">browser_context_args</span><span class="token punctuation">(</span>browser_context_args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">**</span>browser_context_args<span class="token punctuation">,</span>
        <span class="token string">&quot;ignore_https_errors&quot;</span><span class="token punctuation">:</span> <span class="token boolean">True</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-custom-viewport-size" tabindex="-1"><a class="header-anchor" href="#use-custom-viewport-size" aria-hidden="true">#</a> Use custom viewport size</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">browser_context_args</span><span class="token punctuation">(</span>browser_context_args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">**</span>browser_context_args<span class="token punctuation">,</span>
        <span class="token string">&quot;viewport&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;width&quot;</span><span class="token punctuation">:</span> <span class="token number">1920</span><span class="token punctuation">,</span>
            <span class="token string">&quot;height&quot;</span><span class="token punctuation">:</span> <span class="token number">1080</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="device-emulation" tabindex="-1"><a class="header-anchor" href="#device-emulation" aria-hidden="true">#</a> Device emulation</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py</span>
<span class="token keyword">import</span> pytest

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">browser_context_args</span><span class="token punctuation">(</span>browser_context_args<span class="token punctuation">,</span> playwright<span class="token punctuation">)</span><span class="token punctuation">:</span>
    iphone_11 <span class="token operator">=</span> playwright<span class="token punctuation">.</span>devices<span class="token punctuation">[</span><span class="token string">&#39;iPhone 11 Pro&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token operator">**</span>browser_context_args<span class="token punctuation">,</span>
        <span class="token operator">**</span>iphone_11<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or via the CLI <code>--device=&quot;iPhone 11 Pro&quot;</code></p><h3 id="persistent-context" tabindex="-1"><a class="header-anchor" href="#persistent-context" aria-hidden="true">#</a> Persistent context</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># conftest.py</span>
<span class="token keyword">import</span> pytest
<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> BrowserType
<span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict

<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">&quot;session&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">context</span><span class="token punctuation">(</span>
    browser_type<span class="token punctuation">:</span> BrowserType<span class="token punctuation">,</span>
    browser_type_launch_args<span class="token punctuation">:</span> Dict<span class="token punctuation">,</span>
    browser_context_args<span class="token punctuation">:</span> Dict
<span class="token punctuation">)</span><span class="token punctuation">:</span>
    context <span class="token operator">=</span> browser_type<span class="token punctuation">.</span>launch_persistent_context<span class="token punctuation">(</span><span class="token string">&quot;./foobar&quot;</span><span class="token punctuation">,</span> <span class="token operator">**</span><span class="token punctuation">{</span>
        <span class="token operator">**</span>browser_type_launch_args<span class="token punctuation">,</span>
        <span class="token operator">**</span>browser_context_args<span class="token punctuation">,</span>
        <span class="token string">&quot;locale&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;de-DE&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span> context
    context<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When using that all pages inside your test are created from the persistent context.</p><h3 id="using-with-unittest-testcase" tabindex="-1"><a class="header-anchor" href="#using-with-unittest-testcase" aria-hidden="true">#</a> Using with <code>unittest.TestCase</code></h3><p>See the following example for using it with <code>unittest.TestCase</code>. This has a limitation,<br> that only a single browser can be specified and no matrix of multiple browsers gets<br> generated when specifying multiple.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pytest
<span class="token keyword">import</span> unittest

<span class="token keyword">from</span> playwright<span class="token punctuation">.</span>sync_api <span class="token keyword">import</span> Page


<span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> page<span class="token punctuation">:</span> Page<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>page <span class="token operator">=</span> page

    <span class="token keyword">def</span> <span class="token function">test_foobar</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://microsoft.com&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>page<span class="token punctuation">.</span>locator<span class="token punctuation">(</span><span class="token string">&quot;#foobar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>page<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token string">&quot;1 + 1&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h2><h3 id="use-with-pdb" tabindex="-1"><a class="header-anchor" href="#use-with-pdb" aria-hidden="true">#</a> Use with pdb</h3>`,17),an=s("code",null,"breakpoint()",-1),tn={href:"https://docs.python.org/3/library/pdb.html",target:"_blank",rel:"noopener noreferrer"},on=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_bing_is_working</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://bing.com&quot;</span><span class="token punctuation">)</span>
    breakpoint<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deploy-to-ci" tabindex="-1"><a class="header-anchor" href="#deploy-to-ci" aria-hidden="true">#</a> Deploy to CI</h2>`,2);function pn(cn,ln){const a=p("ExternalLinkIcon"),o=p("RouterLink");return l(),r("div",null,[s("p",null,[n("Playwright provides a "),s("a",d,[n("Pytest"),e(a)]),n(" plugin to write end-to-end tests. To get started with it, refer to the "),e(o,{to:"/book/playwright/intro-python.html"},{default:i(()=>[n("getting started guide")]),_:1}),n(".")]),h,s("p",null,[n("To run your tests, use "),s("a",m,[n("Pytest"),e(a)]),n(" CLI.")]),k,s("p",null,[n("If you want to add the CLI arguments automatically without specifying them, you can use the "),s("a",v,[n("pytest.ini"),e(a)]),n(" file:")]),b,s("ul",null,[g,s("li",null,[f,n(),e(o,{to:"/book/playwright/browsers.html"},{default:i(()=>[n("Browser channel")]),_:1}),n(" to be used.")]),y,s("li",null,[_,n(),e(o,{to:"/book/playwright/emulation.html"},{default:i(()=>[n("Device")]),_:1}),n(" to be emulated.")]),w,s("li",null,[x,n(" Whether to record a "),e(o,{to:"/book/playwright/trace-viewer.html"},{default:i(()=>[n("trace")]),_:1}),n(" for each test. "),q,n(", "),T,n(", or "),C,n(" (default: "),P,n(").")]),I]),B,s("p",null,[n("This plugin configures Playwright-specific "),s("a",D,[n("fixtures for pytest"),e(a)]),n(". To use these fixtures, use the fixture name as an argument to the test function.")]),R,s("ul",null,[s("li",null,[L,n(": New "),s("a",S,[n("browser context"),e(a)]),n(" for a test.")]),s("li",null,[U,n(": New "),s("a",E,[n("browser page"),e(a)]),n(" for a test.")])]),N,s("ul",null,[s("li",null,[W,n(": "),s("a",z,[n("Playwright"),e(a)]),n(" instance.")]),s("li",null,[M,n(": "),s("a",O,[n("BrowserType"),e(a)]),n(" instance of the current browser.")]),s("li",null,[V,n(": "),s("a",F,[n("Browser"),e(a)]),n(" instance launched by Playwright.")]),j,G,H]),A,s("p",null,[n("If your tests are running on a machine with a lot of CPUs, you can speed up the overall execution time of your test suite by using "),s("a",J,[K,e(a)]),n(" to run multiple tests at once:")]),Q,s("p",null,[n("See "),e(o,{to:"/book/playwright/running-tests-python.html"},{default:i(()=>[n("Running Tests")]),_:1}),n(" for general information on "),X,n(" options.")]),Y,s("p",null,[n("Start Pytest with the "),Z,n(" argument. The "),s("a",$,[nn,e(a)]),n(" plugin is used"),sn,n(" for that which allows you to set the base url from the config, CLI arg or as a fixture.")]),en,s("p",null,[n("Use the "),an,n(" statement in your test code to pause execution and get a "),s("a",tn,[n("pdb"),e(a)]),n(" REPL.")]),on,s("p",null,[n("See the "),e(o,{to:"/book/playwright/ci.html"},{default:i(()=>[n("guides for CI providers")]),_:1}),n(" to deploy your tests to CI/CD.")])])}const dn=c(u,[["render",pn],["__file","test-runners.html.vue"]]);export{dn as default};
