import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a,b as n,d as e,f as t}from"./app-3f278ba4.js";const r={},l=a("a",{href:"#viewing-the-trace"},"locally",-1),u={href:"https://trace.playwright.dev",target:"_blank",rel:"noopener noreferrer"},d=a("code",null,"trace.playwright.dev",-1),h=a("video",{width:"100%",height:"100%",controls:"",muted:""},[a("source",{src:"https://user-images.githubusercontent.com/13063165/219132713-17b9d75b-71e3-42c4-a43f-3f9e2e15f834.mp4",type:"video/mp4"}),n(" Your browser does not support the video tag. ")],-1),k=a("h2",{id:"viewing-the-trace",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#viewing-the-trace","aria-hidden":"true"},"#"),n(" Viewing the trace")],-1),v={href:"https://trace.playwright.dev",target:"_blank",rel:"noopener noreferrer"},g=a("code",null,"trace.playwright.dev",-1),m=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright show-trace trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;show-trace trace.zip&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright show-trace trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h2><p>Once trace is opened, you will see the list of actions Playwright performed on the left hand side:</p><img width="300" alt="Trace Viewer Actions Tab" src="https://user-images.githubusercontent.com/13063165/189152329-23e965de-581e-4a20-aed7-12cbf0583c92.png"><p><br><br></p><p><strong>Selecting each action reveals:</strong></p><ul><li>action snapshots,</li><li>action log,</li><li>source code location,</li><li>network log for this action</li></ul><p>In the properties pane you will also see rendered DOM snapshots associated with each action.</p><h2 id="metadata" tabindex="-1"><a class="header-anchor" href="#metadata" aria-hidden="true">#</a> Metadata</h2><p>See metadata such as the time the action was performed, what browser engine was used, what the viewport was and if it was mobile and how many pages, actions and events were recorded.</p><img width="296" alt="Trace Viewer Metadata Tab" src="https://user-images.githubusercontent.com/13063165/189155450-3865a993-cb45-439c-a02f-1ddfe60a1719.png"><h2 id="screenshots" tabindex="-1"><a class="header-anchor" href="#screenshots" aria-hidden="true">#</a> Screenshots</h2><p>When tracing with the [<code>option: screenshots</code>] option turned on, each trace records a screencast and renders it as a film strip:</p><img width="1078" alt="Playwright Trace viewer &gt; Film strip" src="https://user-images.githubusercontent.com/13063165/189174647-3e647d3d-6500-4be2-a237-9191f418eb12.png"><p><br><br></p><p>You can hover over the film strip to see a magnified image of for each action and state which helps you easily find the action you want to inspect.</p><img width="819" alt="Playwright Trace viewer magnify" src="https://user-images.githubusercontent.com/13063165/189174658-ba218339-2abc-4336-812e-526dbc4d2907.png"><h2 id="snapshots" tabindex="-1"><a class="header-anchor" href="#snapshots" aria-hidden="true">#</a> Snapshots</h2><p>When tracing with the [<code>option: snapshots</code>] option turned on, Playwright captures a set of complete DOM snapshots for each action. Depending on the type of the action, it will capture:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Before</td><td>A snapshot at the time action is called.</td></tr><tr><td>Action</td><td>A snapshot at the moment of the performed input. This type of snapshot is especially useful when exploring where exactly Playwright clicked.</td></tr><tr><td>After</td><td>A snapshot after the action.</td></tr></tbody></table><br><p>Here is what the typical Action snapshot looks like:</p><img width="634" alt="Playwright Trace Viewer &gt; Snapshots" src="https://user-images.githubusercontent.com/13063165/189153245-0bdcad4d-16a3-4a71-90d8-71a8038c0720.png"><p>Notice how it highlights both, the DOM Node as well as the exact click position.</p><h2 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> Call</h2><p>See what action was called, the time and duration as well as parameters, return value and log.</p><img width="321" alt="Trace Viewer Call Tab" src="https://user-images.githubusercontent.com/13063165/189155306-3c9275bc-d4cd-4e91-8b63-225832a66f51.png"><h2 id="console" tabindex="-1"><a class="header-anchor" href="#console" aria-hidden="true">#</a> Console</h2><p>See the console output for the action where you can see console logs or errors.</p><img width="299" alt="Trace Viewer Console Tab" src="https://user-images.githubusercontent.com/13063165/189173154-41d438dd-9334-4664-8c77-ee85f5040061.png"><h2 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h2><p>See any network requests that were made during the action.</p><img width="321" alt="Trace Viewer Network Tab" src="https://user-images.githubusercontent.com/13063165/189155367-e19f1c89-4e62-4258-970d-6a740e891711.png"><h2 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p>See the source code for your entire test.</p><img width="476" alt="Trace Viewer Source Tab" src="https://user-images.githubusercontent.com/13063165/189155239-c0f6045c-ab67-404a-8140-e98f78c58ae1.png"><h2 id="recording-a-trace-locally" tabindex="-1"><a class="header-anchor" href="#recording-a-trace-locally" aria-hidden="true">#</a> Recording a trace locally</h2><ul><li>langs: js</li></ul><p>To record a trace during development mode set the <code>--trace</code> flag to <code>on</code> when running your tests.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright <span class="token builtin class-name">test</span> <span class="token parameter variable">--trace</span> on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can then open the HTML report and click on the trace icon to open the trace.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright show-report
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="recording-a-trace-on-ci" tabindex="-1"><a class="header-anchor" href="#recording-a-trace-on-ci" aria-hidden="true">#</a> Recording a trace on CI</h2><ul><li>langs: js</li></ul><p>Traces should be run on continuous integration on the first retry of a failed test<br> by setting the <code>trace: &#39;on-first-retry&#39;</code> option in the test configuration file. This will produce a <code>trace.zip</code> file for each test that was retried.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// @ts-check</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">retries</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">trace</span><span class="token operator">:</span> <span class="token string">&#39;on-first-retry&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">retries</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">trace</span><span class="token operator">:</span> <span class="token string">&#39;on-first-retry&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> chromium<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Start tracing before creating / navigating a page.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">screenshots</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">snapshots</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Stop tracing and export it into a zip archive.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;trace.zip&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Available options to record a trace:</p><ul><li><code>&#39;on-first-retry&#39;</code> - Record a trace only when retrying a test for the first time.</li><li><code>&#39;off&#39;</code> - Do not record a trace.</li><li><code>&#39;on&#39;</code> - Record a trace for each test. (not recommended as it&#39;s performance heavy)</li><li><code>&#39;retain-on-failure&#39;</code> - Record a trace for each test, but remove it from successful test runs.</li></ul><p>You can also use <code>trace: &#39;retain-on-failure&#39;</code> if you do not enable retries but still want traces for failed tests.</p><p>If you are not using Playwright as a Test Runner, use the [<code>property: BrowserContext.tracing</code>] API instead.</p><h2 id="recording-a-trace" tabindex="-1"><a class="header-anchor" href="#recording-a-trace" aria-hidden="true">#</a> Recording a trace</h2><ul><li>langs: java, csharp, python</li></ul><p>Traces can be recorded using the [<code>property: BrowserContext.tracing</code>] API as follows:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Browser</span> browser <span class="token operator">=</span> browserType<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BrowserContext</span> context <span class="token operator">=</span> browser<span class="token punctuation">.</span><span class="token function">newContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Start tracing before creating / navigating a page.</span>
context<span class="token punctuation">.</span><span class="token function">tracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tracing<span class="token punctuation">.</span>StartOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setScreenshots</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setSnapshots</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setSources</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Page</span> page <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
page<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&quot;https://playwright.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Stop tracing and export it into a zip archive.</span>
context<span class="token punctuation">.</span><span class="token function">tracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tracing<span class="token punctuation">.</span>StopOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;trace.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>browser <span class="token operator">=</span> <span class="token keyword">await</span> chromium<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Start tracing before creating / navigating a page.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span>start<span class="token punctuation">(</span>screenshots<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> snapshots<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> sources<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://playwright.dev&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Stop tracing and export it into a zip archive.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span>stop<span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;trace.zip&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>browser <span class="token operator">=</span> chromium<span class="token punctuation">.</span>launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
context <span class="token operator">=</span> browser<span class="token punctuation">.</span>new_context<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Start tracing before creating / navigating a page.</span>
context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span>start<span class="token punctuation">(</span>screenshots<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> snapshots<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> sources<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&quot;https://playwright.dev&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Stop tracing and export it into a zip archive.</span>
context<span class="token punctuation">.</span>tracing<span class="token punctuation">.</span>stop<span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;trace.zip&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> browser <span class="token operator">=</span> playwright<span class="token punctuation">.</span>Chromium<span class="token punctuation">.</span><span class="token function">LaunchAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> context <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">NewContextAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Start tracing before creating / navigating a page.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>Tracing<span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Screenshots <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  Snapshots <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  Sources <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> page <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">NewPageAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">GotoAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://playwright.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Stop tracing and export it into a zip archive.</span>
<span class="token keyword">await</span> context<span class="token punctuation">.</span>Tracing<span class="token punctuation">.</span><span class="token function">StopAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Path <span class="token operator">=</span> <span class="token string">&quot;trace.zip&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This will record the trace and place it into the file named <code>trace.zip</code>.</p><h2 id="viewing-the-trace-1" tabindex="-1"><a class="header-anchor" href="#viewing-the-trace-1" aria-hidden="true">#</a> Viewing the trace</h2>`,64),b={href:"https://trace.playwright.dev",target:"_blank",rel:"noopener noreferrer"},w=a("code",null,"trace.playwright.dev",-1),f=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright show-trace trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;show-trace trace.zip&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright show-trace trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),y={id:"using-trace-playwright-dev",tabindex:"-1"},x=a("a",{class:"header-anchor",href:"#using-trace-playwright-dev","aria-hidden":"true"},"#",-1),_={href:"https://trace.playwright.dev",target:"_blank",rel:"noopener noreferrer"},T={href:"https://trace.playwright.dev",target:"_blank",rel:"noopener noreferrer"},S=t(`<img width="1119" alt="Drop Playwright Trace to load" src="https://user-images.githubusercontent.com/13063165/194577918-b4d45726-2692-4093-8a28-9e73552617ef.png"><h2 id="viewing-remote-traces" tabindex="-1"><a class="header-anchor" href="#viewing-remote-traces" aria-hidden="true">#</a> Viewing remote traces</h2><p>You can open remote traces using it&#39;s URL. They could be generated on a CI run which makes it easy to view the remote trace without having to manually download the file.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx playwright show-trace https://example.com/trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn exec:java <span class="token parameter variable">-e</span> <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.mainClass</span><span class="token operator">=</span>com.microsoft.playwright.CLI <span class="token parameter variable">-D</span> <span class="token assign-left variable">exec.args</span><span class="token operator">=</span><span class="token string">&quot;show-trace https://example.com/trace.zip&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>playwright show-trace https://example.com/trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pwsh bin/Debug/netX/playwright.ps1 show-trace https://example.com/trace.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also pass the URL of your uploaded trace (e.g. inside your CI) from some accessible storage as a parameter. CORS (Cross-Origin Resource Sharing) rules might apply.</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>https://trace.playwright.dev/?trace=https://demo.playwright.dev/reports/todomvc/data/cb0fa77ebd9487a5c899f3ae65a7ffdbac681182.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9);function C(z,q){const s=p("ExternalLinkIcon");return c(),i("div",null,[a("p",null,[n("Playwright Trace Viewer is a GUI tool that helps you explore recorded Playwright traces after the script has ran. You can open traces "),l,n(" or in your browser on "),a("a",u,[d,e(s)]),n(".")]),h,k,a("p",null,[n("You can open the saved trace using Playwright CLI or in your browser on "),a("a",v,[g,e(s)]),n(".")]),m,a("p",null,[n("You can open the saved trace using Playwright CLI or in your browser on "),a("a",b,[w,e(s)]),n(".")]),f,a("h2",y,[x,n(" Using "),a("a",_,[n("trace.playwright.dev"),e(s)])]),a("p",null,[a("a",T,[n("trace.playwright.dev"),e(s)]),n(" is a statically hosted variant of the Trace Viewer. You can upload trace files using drag and drop.")]),S])}const A=o(r,[["render",C],["__file","trace-viewer.html.vue"]]);export{A as default};
