import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,a as n,b as t,d as a,w as e,f as o}from"./app-3f278ba4.js";const r={},u=n("p",null,"Playwright tests are simple, they",-1),d=n("ul",null,[n("li",null,[n("strong",null,"perform actions"),t(", and")]),n("li",null,[n("strong",null,"assert the state"),t(" against expectations.")])],-1),h=n("br",null,null,-1),k=n("br",null,null,-1),g=n("p",null,[t("There is also no need to deal with the race conditions when performing the checks -"),n("br"),t(" Playwright assertions are designed in a way that they describe the expectations"),n("br"),t(" that need to be eventually met.")],-1),m=n("p",null,[t("That's it! These design choices allow Playwright users to forget about flaky"),n("br"),t(" timeouts and racy checks in their tests altogether.")],-1),f=n("p",null,[n("strong",null,"You will learn")],-1),v=o(`<h2 id="first-test" tabindex="-1"><a class="header-anchor" href="#first-test" aria-hidden="true">#</a> First test</h2><p>Take a look at the following example to see how to write a test.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@playwright/test&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;has title&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Expect a title &quot;to contain&quot; a substring.</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTitle</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Playwright</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;get started link&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Click the get started link.</span>
  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Get started&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Expects the URL to contain intro.</span>
  <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveURL</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*intro</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">æ³¨</p><p>Add <code>// @ts-check</code> at the start of each test file when using JavaScript in<br> VS Code to get automatic type checking.</p></div><h2 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h2><h3 id="navigation" tabindex="-1"><a class="header-anchor" href="#navigation" aria-hidden="true">#</a> Navigation</h3><p>Most of the tests will start with navigating page to the URL. After that, test<br> will be able to interact with the page elements.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&#39;https://playwright.dev/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Playwright will wait for page to reach the load state prior to moving forward.<br> Learn more about the [<code>method: Page.goto</code>] options.</p><h3 id="interactions" tabindex="-1"><a class="header-anchor" href="#interactions" aria-hidden="true">#</a> Interactions</h3>`,10),y=n("br",null,null,-1),b=n("br",null,null,-1),w=n("br",null,null,-1),x=n("br",null,null,-1),_=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Create a locator.</span>
<span class="token keyword">const</span> getStarted <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Get started&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Click it.</span>
<span class="token keyword">await</span> getStarted<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In most cases, it&#39;ll be written in one line:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Get started&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="basic-actions" tabindex="-1"><a class="header-anchor" href="#basic-actions" aria-hidden="true">#</a> Basic actions</h3>`,4),j=n("br",null,null,-1),L=n("br",null,null,-1),P=o('<table><thead><tr><th style="text-align:left;">Action</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">[<code>method: Locator.check</code>]</td><td style="text-align:left;">Check the input checkbox</td></tr><tr><td style="text-align:left;">[<code>method: Locator.click</code>]</td><td style="text-align:left;">Click the element</td></tr><tr><td style="text-align:left;">[<code>method: Locator.uncheck</code>]</td><td style="text-align:left;">Uncheck the input checkbox</td></tr><tr><td style="text-align:left;">[<code>method: Locator.hover</code>]</td><td style="text-align:left;">Hover mouse over the element</td></tr><tr><td style="text-align:left;">[<code>method: Locator.fill</code>]</td><td style="text-align:left;">Fill the form field (fast)</td></tr><tr><td style="text-align:left;">[<code>method: Locator.focus</code>]</td><td style="text-align:left;">Focus the element</td></tr><tr><td style="text-align:left;">[<code>method: Locator.press</code>]</td><td style="text-align:left;">Press single key</td></tr><tr><td style="text-align:left;">[<code>method: Locator.setInputFiles</code>]</td><td style="text-align:left;">Pick files to upload</td></tr><tr><td style="text-align:left;">[<code>method: Locator.selectOption</code>]</td><td style="text-align:left;">Select option in the drop down</td></tr><tr><td style="text-align:left;">[<code>method: Locator.type</code>]</td><td style="text-align:left;">Type text character by character (slow)</td></tr></tbody></table><h2 id="assertions" tabindex="-1"><a class="header-anchor" href="#assertions" aria-hidden="true">#</a> Assertions</h2>',2),A=n("code",null,"expect",-1),T=n("code",null,"expect(value)",-1),H=o(`<p>There are many generic matchers like <code>toEqual</code>, <code>toContain</code>, <code>toBeTruthy</code> that can be used to assert any conditions.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Playwright also includes async matchers that will wait until the expected condition is met. Using these matchers allows making the tests non-flaky and resilient. For example, this code will wait until the page gets the title containing &quot;Playwright&quot;:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTitle</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Playwright</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),q=o('<table><thead><tr><th style="text-align:left;">Assertion</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeChecked</code>]</td><td style="text-align:left;">Checkbox is checked</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeEnabled</code>]</td><td style="text-align:left;">Control is enabled</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toBeVisible</code>]</td><td style="text-align:left;">Element is visible</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toContainText</code>]</td><td style="text-align:left;">Element contains text</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveAttribute</code>]</td><td style="text-align:left;">Element has attribute</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveCount</code>]</td><td style="text-align:left;">List of elements has given length</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveText</code>]</td><td style="text-align:left;">Element matches text</td></tr><tr><td style="text-align:left;">[<code>method: LocatorAssertions.toHaveValue</code>]</td><td style="text-align:left;">Input element has value</td></tr><tr><td style="text-align:left;">[<code>method: PageAssertions.toHaveTitle</code>]</td><td style="text-align:left;">Page has title</td></tr><tr><td style="text-align:left;">[<code>method: PageAssertions.toHaveURL</code>]</td><td style="text-align:left;">Page has URL</td></tr><tr><td style="text-align:left;">[<code>method: PageAssertions.toHaveScreenshot#1</code>]</td><td style="text-align:left;">Page has screenshot</td></tr></tbody></table><h3 id="test-isolation" tabindex="-1"><a class="header-anchor" href="#test-isolation" aria-hidden="true">#</a> Test Isolation</h3>',2),C=n("a",{href:"./test-fixtures#built-in-fixtures"},"built in page fixture",-1),B=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;basic test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-test-hooks" tabindex="-1"><a class="header-anchor" href="#using-test-hooks" aria-hidden="true">#</a> Using Test Hooks</h3>`,2),E=n("code",null,"test.describe",-1),R=n("code",null,"test.beforeEach",-1),U=n("code",null,"test.afterEach",-1),I=n("code",null,"test.beforeAll",-1),N=n("code",null,"test.afterAll",-1),S=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@playwright/test&quot;</span><span class="token punctuation">;</span>

test<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&quot;navigation&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  test<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Go to the starting url before each test.</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">&quot;https://playwright.dev/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;main navigation&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> page <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Assertions use the expect API.</span>
    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveURL</span><span class="token punctuation">(</span><span class="token string">&quot;https://playwright.dev/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="what-s-next" tabindex="-1"><a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a> What&#39;s Next</h2>`,2);function V(F,G){const s=i("RouterLink");return c(),p("div",null,[u,d,n("p",null,[t("There is no need to wait for anything prior to performing an action: Playwright"),h,t(" automatically waits for the wide range of "),a(s,{to:"/book/playwright/actionability.html"},{default:e(()=>[t("actionability")]),_:1}),k,t(" checks to pass prior to performing each action.")]),g,m,f,n("ul",null,[n("li",null,[a(s,{to:"/book/playwright/writing-tests-js.html#first-test"},{default:e(()=>[t("How to write the first test")]),_:1})]),n("li",null,[a(s,{to:"/book/playwright/writing-tests-js.html#actions"},{default:e(()=>[t("How to perform actions")]),_:1})]),n("li",null,[a(s,{to:"/book/playwright/writing-tests-js.html#assertions"},{default:e(()=>[t("How to use assertions")]),_:1})]),n("li",null,[a(s,{to:"/book/playwright/writing-tests-js.html#test-isolation"},{default:e(()=>[t("How tests run in isolation")]),_:1})]),n("li",null,[a(s,{to:"/book/playwright/writing-tests-js.html#using-test-hooks"},{default:e(()=>[t("How to use test hooks")]),_:1})])]),v,n("p",null,[t("Performing actions starts with locating the elements. Playwright uses"),y,a(s,{to:"/book/playwright/locators.html"},{default:e(()=>[t("Locators API")]),_:1}),t(" for that. Locators represent a way to find"),b,t(" element(s) on the page at any moment, learn more about the"),w,a(s,{to:"/book/playwright/locators.html"},{default:e(()=>[t("different types")]),_:1}),t(" of locators available. Playwright will wait for the element to be "),a(s,{to:"/book/playwright/actionability.html"},{default:e(()=>[t("actionable")]),_:1}),x,t(" prior to performing the action, so there is no need to wait for it to become available.")]),_,n("p",null,[t("This is the list of the most popular Playwright actions. Note that there are"),j,t(" many more, so make sure to check the "),a(s,{to:"/book/playwright/api/class-locator.html"},{default:e(()=>[t("Locator API")]),_:1}),t(" section to"),L,t(" learn more about them.")]),P,n("p",null,[t("Playwright includes "),a(s,{to:"/book/playwright/test-assertions.html"},{default:e(()=>[t("test assertions")]),_:1}),t(" in the form of "),A,t(" function. To make an assertion, call "),T,t(" and choose a matcher that reflects the expectation.")]),H,n("p",null,[t("Here is the list of the most popular async assertions. Note that there are "),a(s,{to:"/book/playwright/test-assertions.html"},{default:e(()=>[t("many more")]),_:1}),t(" to get familiar with:")]),q,n("p",null,[t("Playwright Test is based on the concept of "),a(s,{to:"/book/playwright/test-fixtures.html"},{default:e(()=>[t("test fixtures")]),_:1}),t(" such as the "),C,t(", which is passed into your test. Pages are isolated between tests due to the Browser Context, which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser.")]),B,n("p",null,[t("You can use various "),a(s,{to:"/book/playwright/test-api/class-test.html"},{default:e(()=>[t("test hooks")]),_:1}),t(" such as "),E,t(" to declare a group of tests and "),R,t(" and "),U,t(" which are executed before/after each test. Other hooks include the "),I,t(" and "),N,t(" which are executed once per worker before/after all tests.")]),S,n("ul",null,[n("li",null,[a(s,{to:"/book/playwright/running-tests-js.html"},{default:e(()=>[t("Run single test, multiple tests, headed mode")]),_:1})]),n("li",null,[a(s,{to:"/book/playwright/codegen-intro.html"},{default:e(()=>[t("Generate tests with Codegen")]),_:1})]),n("li",null,[a(s,{to:"/book/playwright/trace-viewer-intro.html"},{default:e(()=>[t("See a trace of your tests")]),_:1})])])])}const O=l(r,[["render",V],["__file","writing-tests-js.html.vue"]]);export{O as default};
