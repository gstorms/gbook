import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-3f278ba4.js";const t={},p=e(`<h1 id="正则表达式预查的解释与应用" tabindex="-1"><a class="header-anchor" href="#正则表达式预查的解释与应用" aria-hidden="true">#</a> 正则表达式预查的解释与应用</h1><h2 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h2><p>预查又称环视（Lookaround）、属于零宽断言（Zero-Length Assertions）的一种，有 4 个语法：</p><table><thead><tr><th>语法</th><th>中文名</th><th>英文名</th></tr></thead><tbody><tr><td>(?=regex)</td><td>肯定性前瞻</td><td>Positive lookahead</td></tr><tr><td>(?!regex)</td><td>否定性前瞻</td><td>Negative lookahead</td></tr><tr><td>(?&lt;=regex)</td><td>肯定性后顾</td><td>Positive lookbehind</td></tr><tr><td>(?&lt;!regex)</td><td>否定性后顾</td><td>Negative lookbehind</td></tr></tbody></table><p>比较通俗的解释：</p><ul><li>肯定性：匹配 regex</li><li>否定性：不匹配 regex</li><li>前瞻：向前（右、正向）看（预查）</li><li>后顾：向后（左、反向）看（预查）</li><li>肯定性前瞻：先看看前方（右边）是否匹配 regex，但不向前走</li><li>否定性前瞻：先看看前方（右边）是否不匹配 regex，但不向前走</li><li>肯定性后顾：回头看后方（左边）是否匹配 regex</li><li>否定性后顾：回头看后方（左边）是否不匹配 regex</li></ul><p>为什么右边是正向、前向，左边是反向、后向？</p><p>因为正则是<strong>从左往右</strong>匹配的，<strong>就像一个人在走，那么向前看（前瞻）就是右边、正向，向后看（后顾）就是左边、反向</strong>，特别注意不要和前缀后缀搞混</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p>1、判断是否同时包含但不限于大写字母、小写字母和数字，且不能包含 114514，长度为 8~32 个字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?!.*114514).{8,32}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;10086@qq.COM&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、判断不以 80、82、84、86、88 开头</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?!8[02468])\\d+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;81789110&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、匹配由空白分割的字符串中的纯数字串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;123 abc   1st\\r\\n4   1970\\&#39;s 56 @10086 789&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!\\S)\\d+(?!\\S)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
<span class="token comment">// [&#39;123&#39;, &#39;4&#39;, &#39;56&#39;, &#39;789&#39;]</span>
<span class="token string">&#39;123 abc   1st\\r\\n4   1970\\&#39;s 56 @10086 789&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=^|\\s)\\d+(?=\\s|$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
<span class="token comment">// [&#39;123&#39;, &#39;4&#39;, &#39;56&#39;, &#39;789&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、仅删除夹在数字中的逗号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;And then, I have 1,003,334, you have 996,6,6,6&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\d),(?=\\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;And then, I have 1003334, you have 996666&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>5、在数字中添加分组逗号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;And then, I have 1003334, you have 996666&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\d)(?=(?:\\d{3})+(?!\\d))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;And then, I have 1,003,334, you have 996,666&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>6、判断是否仅包含字母，但不包含小写元音字母</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:(?![aeiou])[A-Za-z])+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
<span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">^</span>aeiou<span class="token punctuation">]</span><span class="token operator">+</span>$<span class="token operator">/</span>g<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7、判断是否是字母或数字或字母+数字，不能为空</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?=.)[a-z]*\\d*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;Add1&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>8、匹配长度为 11 的号码，注意不能是其他号码的子串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">name:123456789
id:11012345678910
tel:12345678910
name:abc11111111111
id:888888888888
tel:11966</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!\\d)\\d{11}(?!\\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
<span class="token comment">// [&#39;12345678910&#39;, &#39;11111111111&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>9、如果缺少协议前缀，则添加 http://，忽略空行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">segmentfault.com
//bing.com
\\baidu.com

127.0.0.1
ftp://127.0.0.1

https://google.com

</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?![a-z]+:)[\\\\/]*(?=.)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gim</span></span><span class="token punctuation">,</span> <span class="token string">&#39;http://&#39;</span><span class="token punctuation">)</span>
<span class="token comment">/*
http://segmentfault.com
http://bing.com
http://baidu.com

http://127.0.0.1
ftp://127.0.0.1

https://google.com

*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),i=[p];function l(c,o){return n(),a("div",null,i)}const u=s(t,[["render",l],["__file","正则表达式.html.vue"]]);export{u as default};
