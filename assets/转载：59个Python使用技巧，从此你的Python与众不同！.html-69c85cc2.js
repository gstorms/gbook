import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as p,f as t}from"./app-3f278ba4.js";const l={},u=n("h1",{id:"转载-59个python使用技巧-从此你的python与众不同",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#转载-59个python使用技巧-从此你的python与众不同","aria-hidden":"true"},"#"),s(" 转载：59个Python使用技巧，从此你的Python与众不同！")],-1),r=n("p",null,"原文:59个Python使用技巧，从此你的Python与众不同！",-1),d={href:"https://www.jianshu.com/p/541cfbb53b7a",target:"_blank",rel:"noopener noreferrer"},k=t(`<h2 id="_1-枚举-enumerate-可以有参数哦" tabindex="-1"><a class="header-anchor" href="#_1-枚举-enumerate-可以有参数哦" aria-hidden="true">#</a> 1. 枚举 - enumerate 可以有参数哦</h2><p>之前我们这样操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>
<span class="token keyword">print</span> i<span class="token punctuation">,</span> item
 i <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们这样操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>

 <span class="token keyword">print</span> i<span class="token punctuation">,</span> item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>enumerate函数还可以接收第二个参数。就像下面这样：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-字典-集合-解析" tabindex="-1"><a class="header-anchor" href="#_2-字典-集合-解析" aria-hidden="true">#</a> 2. 字典/集合 解析</h2><p>你也许知道如何进行列表解析，但是可能不知道字典/集合解析。它们简单易用且高效。就像下面这个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> i <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span> 
my_set <span class="token operator">=</span> <span class="token punctuation">{</span>i <span class="token operator">*</span> <span class="token number">15</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token comment"># There is only a difference of &#39;:&#39; in both</span>
<span class="token comment"># 两者的区别在于字典推导中有冒号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-强制浮点除法" tabindex="-1"><a class="header-anchor" href="#_3-强制浮点除法" aria-hidden="true">#</a> 3. 强制浮点除法</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division 
result <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span>
<span class="token comment"># print(result)</span>
<span class="token comment"># 0.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-对python表达式求值" tabindex="-1"><a class="header-anchor" href="#_4-对python表达式求值" aria-hidden="true">#</a> 4. 对Python表达式求值</h2><p>我们都知道eval函数，但是我们知道literal_eval函数么？也许很多人都不知道吧。可以用这种操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> ast 
my_list <span class="token operator">=</span> ast<span class="token punctuation">.</span>literal_eval<span class="token punctuation">(</span>expr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>来代替以下这种操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>expr <span class="token operator">=</span> <span class="token string">&quot;[1, 2, 3]&quot;</span>
my_list <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我相信对于大多数人来说这种形式是第一次看见，但是实际上这个在Python中已经存在很长时间了。</p><h2 id="_5-字符串-数列-逆序" tabindex="-1"><a class="header-anchor" href="#_5-字符串-数列-逆序" aria-hidden="true">#</a> 5. 字符串/数列 逆序</h2><p>你可以用以下方法快速逆序排列数列：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment"># This creates a new reversed list. </span>
<span class="token comment"># If you want to reverse a list in place you can do:</span>
 
a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这总方式也同样适用于字符串的逆序：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo <span class="token operator">=</span> <span class="token string">&quot;yasoob&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">&#39;boosay&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-三元运算" tabindex="-1"><a class="header-anchor" href="#_6-三元运算" aria-hidden="true">#</a> 6. 三元运算</h2><p>三元运算是if-else 语句的快捷操作，也被称为条件运算。这里有几个例子可以供你参考，它们可以让你的代码更加紧凑，更加美观。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">[</span>on_true<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">[</span>on_false<span class="token punctuation">]</span>
x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">25</span>
small <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-python里面如何拷贝一个对象" tabindex="-1"><a class="header-anchor" href="#_7-python里面如何拷贝一个对象" aria-hidden="true">#</a> 7. Python里面如何拷贝一个对象</h2><p>标准库中的copy模块提供了两个方法来实现拷贝.一个方法是copy,它返回和参数包含内容一样的对象.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> copy
new_list <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>existing_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有些时候,你希望对象中的属性也被复制,可以使用deepcopy方法:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> copy
new_list_of_dicts <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>existing_list_of_dicts<span class="token punctuation">)</span>
copy<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
Shallow copy operation on arbitrary Python objects<span class="token punctuation">.</span>
deepcopy<span class="token punctuation">(</span>x<span class="token punctuation">,</span> memo<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> _nil<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Deep copy operation on arbitrary Python objects<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-python中如何判断对象相等" tabindex="-1"><a class="header-anchor" href="#_8-python中如何判断对象相等" aria-hidden="true">#</a> 8. python中如何判断对象相等</h2><p>首先是C#中字符串的==和equal方法。<br><code>==</code> :<br> 对于内置值类型而言， == 判断两个内存值是否相等。<br> 对于用户自定义的值类型而言(Struct)， == 需要重载，否则不能使用。<br> 对于引用类型而言，默认是同一引用才返回true，但是系统重载了很多引用类型的 == （比如下文提到的string），所以c#中引用类型的比较并不建议使用 ==。<br><code>equals</code> :<br> 对于值类型而言， 内存相等才返回true。<br> 对于引用类型而言，指向同一个引用才算相等。<br> 但是比较特殊的是字符串String,是一个特殊的引用型类型，在C#语言中，重载了string的equals()方法，使string对象用起来就像是值类型一样。</p><p>python中的 ==<br> python中的对象包含三要素:<code>id</code>, <code>type</code>, <code>value</code><br><code>id</code> 用来标识唯一一个对象，type标识对象的类型，value用来设置对象的值。<br><code>is</code> 判断是否是一个对象，使用id来判断的。<br><code>==</code> 是判断a对象的值是否是b对象的值，默认调用它的__eq__方法。</p><h2 id="_9-命名技巧" tabindex="-1"><a class="header-anchor" href="#_9-命名技巧" aria-hidden="true">#</a> 9. 命名技巧</h2><p>今天阅读代码，发现一个不错的函数命名方式:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>_argv<span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就是把所有的参数前面都加上_下划线，这样你在函数体中，一眼就可以看出那些是局部变量，那些是作为参数传入的，类似把全局变量前面加上g。</p><h2 id="_10-开发者工具集锦" tabindex="-1"><a class="header-anchor" href="#_10-开发者工具集锦" aria-hidden="true">#</a> 10. 开发者工具集锦</h2><ul><li><code>pydoc</code>： 模块可以根据源代码中的<code>docstrings</code>为任何可导入模块生成格式良好的文档。</li><li><code>doctest</code>模块：该模块可以从源代码或独立文件的例子中抽取出测试用例。</li><li><code>unittest</code>模块：该模块是一个全功能的自动化测试框架，该框架提供了对测试准备(test fixtures), 预定义测试集(predefined test suite)以及测试发现(test discovery)的支持。</li><li><code>trace</code>：模块可以监控Python执行程序的方式，同时生成一个报表来显示程序的每一行执行的次数。这些信息可以用来发现未被自动化测试集所覆盖的程序执行路径，也可以用来研究程序调用图，进而发现模块之间的依赖关系。编写并执行测试可以发现绝大多数程序中的问题，Python使得debug工作变得更加简单，这是因为在大部分情况下，Python都能够将未被处理的错误打印到控制台中，我们称这些错误信息为traceback。如果程序不是在文本控制台中运行的，traceback也能够将错误信息输出到日志文件或是消息对话框中。当标准的traceback无法提供足够的信息时，可以使用cgitb 模块来查看各级栈和源代码上下文中的详细信息，比如局部变量。cgitb模块还能够将这些跟踪信息以HTML的形式输出，用来报告web应用中的错误。</li><li><code>pdb</code>：该模块可以显示出程序在错误产生时的执行路径，同时可以动态地调整对象和代码进行调试。</li><li><code>profile</code>, timeit: 开发者可以使用profile以及timit模块来测试程序的速度，找出程序中到底是哪里很慢，进而对这部分代码独立出来进行调优的工作。</li><li><code>compileall</code>: Python程序是通过解释器执行的，解释器的输入是原有程序的字节码编译版本。这个字节码编译版本可以在程序执行时动态地生成，也可以在程序打包的时候就生成。compileall模块可以处理程序打包的事宜，它暴露出了打包相关的接口，该接口能够被安装程序和打包工具用来生成包含模块字节码的文件。同时，在开发环境中，compileall模块也可以用来验证源文件是否包含了语法错误。</li><li><code>YAPF</code>：Google开源的Python代码格式化工具。</li><li><code>iPDB</code>: iPDB是一个极好的工具，我已经用它查出了很多匪夷所思的bug。pip install ipdb 安装该工具，然后在你的代码中import ipdb; ipdb.set_trace()，然后你会在你的程序运行时，获得一个很好的交互式提示。它每次执行程序的一行并且检查变量。</li><li><code>pycallgraph</code>: 在一些场合，我使用pycallgraph来追踪性能问题。它可以创建函数调用时间和次数的图表。</li><li><code>objgraph</code>: objgraph对于查找内存泄露非常有用。</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/12492743/1611201032586-660c039b-e811-4e9d-b025-b1ebc6e7cabf.jpeg#align=left&amp;display=inline&amp;height=444&amp;margin=[object Object]&amp;originHeight=444&amp;originWidth=568&amp;size=0&amp;status=done&amp;style=none&amp;width=568" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_11-python代码微优化之加快查找" tabindex="-1"><a class="header-anchor" href="#_11-python代码微优化之加快查找" aria-hidden="true">#</a> 11. Python代码微优化之加快查找</h2><p>collections.OrderedDict类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> dict_setitem<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">.</span>__setitem__<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> key <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">:</span>
        root <span class="token operator">=</span> self<span class="token punctuation">.</span>__root
        last <span class="token operator">=</span> root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        last<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>__map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>last<span class="token punctuation">,</span> root<span class="token punctuation">,</span> key<span class="token punctuation">]</span>
    <span class="token keyword">return</span> dict_setitem<span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意最后一个参数：<code>dict_setitem=dict.__setitem__</code>。如果你仔细想就会感觉有道理。将值关联到键上，你只需要给<code>__setitem__</code>传递三个参数：要设置的键，与键关联的值，传递给内建dict类的<code>__setitem__</code>类方法。等会，好吧，也许最后一个参数没什么意义。 最后一个参数其实是将一个函数绑定到局部作用域中的一个函数上。具体是通过将dict.<code>__setitem__</code>赋值为参数的默认值。这里还有另一个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">not_list_or_dict</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">not_list_or_dict</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> _isinstance<span class="token operator">=</span><span class="token builtin">isinstance</span><span class="token punctuation">,</span> _dict<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">,</span> _list<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>_isinstance<span class="token punctuation">(</span>value<span class="token punctuation">,</span> _dict<span class="token punctuation">)</span> <span class="token keyword">or</span> _isinstance<span class="token punctuation">(</span>value<span class="token punctuation">,</span> _list<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们做同样的事情，把本来将会在内建命名空间中的对象绑定到局部作用域中去。因此，python将会使用LOCAL_FAST而不是LOAD_GLOBAL（全局查找）。那么这到底有多快呢？我们做个简单的测试：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>$ python <span class="token operator">-</span>m timeit <span class="token operator">-</span>s <span class="token string">&#39;def not_list_or_dict(value): return not (isinstance(value, dict) or isinstance(value, list))&#39;</span> <span class="token string">&#39;not_list_or_dict(50)&#39;</span>

<span class="token number">1000000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0.48</span> usec per loop

$ python <span class="token operator">-</span>m timeit <span class="token operator">-</span>s <span class="token string">&#39;def not_list_or_dict(value, _isinstance=isinstance, _dict=dict, _list=list): return not (_isinstance(value, _dict) or _isinstance(value, _list))&#39;</span> <span class="token string">&#39;not_list_or_dict(50)&#39;</span>

<span class="token number">1000000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0.423</span> usec per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>换句话说，大概有11.9%的提升 [2]。比我在文章开始处承诺的5%还多！</p><h2 id="_12-包管理" tabindex="-1"><a class="header-anchor" href="#_12-包管理" aria-hidden="true">#</a> 12. 包管理</h2><p>Python世界最棒的地方之一，就是大量的第三方程序包。同样，管理这些包也非常容易。按照惯例，会在 requirements.txt 文件中列出项目所需要的包。每个包占一行，通常还包含版本号。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pelican==3.3

Markdown

pelican-extended-sitemap==1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13-python函数参数默认值的陷阱和原理深究" tabindex="-1"><a class="header-anchor" href="#_13-python函数参数默认值的陷阱和原理深究" aria-hidden="true">#</a> 13. Python函数参数默认值的陷阱和原理深究</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Python <span class="token number">2.7</span><span class="token number">.9</span> <span class="token punctuation">(</span>default<span class="token punctuation">,</span> Dec <span class="token number">19</span> <span class="token number">2014</span><span class="token punctuation">,</span> <span class="token number">06</span><span class="token punctuation">:</span><span class="token number">05</span><span class="token punctuation">:</span><span class="token number">48</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span>GCC <span class="token number">4.2</span><span class="token number">.1</span> Compatible Apple LLVM <span class="token number">6.0</span> <span class="token punctuation">(</span>clang<span class="token operator">-</span><span class="token number">600.0</span><span class="token number">.56</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on darwin

Type <span class="token string">&quot;help&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;copyright&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;credits&quot;</span> <span class="token keyword">or</span> <span class="token string">&quot;license&quot;</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">generate_new_list_with</span><span class="token punctuation">(</span>my_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> element<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> my_list

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list_1 <span class="token operator">=</span> generate_new_list_with<span class="token punctuation">(</span>element<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list_1

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list_2 <span class="token operator">=</span> generate_new_list_with<span class="token punctuation">(</span>element<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> list_2

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见代码运行结果并不和我们预期的一样。list_2在函数的第二次调用时并没有得到一个新的list并填入2，而是在第一次调用结果的基础上append了一个2。为什么会发生这样在其他编程语言中简直就是设计bug一样的问题呢？ 可见如果参数默认值是在函数编译compile阶段就已经被确定。之后所有的函数调用时，如果参数不显示的给予赋值，那么所谓的参数默认值不过是一个指向那个在compile阶段就已经存在的对象的指针。如果调用函数时，没有显示指定传入参数值得话。那么所有这种情况下的该参数都会作为编译时创建的那个对象的一种别名存在。如果参数的默认值是一个不可变(Imuttable)数值，那么在函数体内如果修改了该参数，那么参数就会重新指向另一个新的不可变值。而如果参数默认值是和本文最开始的举例一样，是一个可变对象(Muttable)，那么情况就比较糟糕了。所有函数体内对于该参数的修改，实际上都是对compile阶段就已经确定的那个对象的修改。</p><h2 id="_14-单下划线" tabindex="-1"><a class="header-anchor" href="#_14-单下划线" aria-hidden="true">#</a> 14. 单下划线（_）</h2><p>1、在解释器中：在这种情况下，“_”代表交互式解释器会话中上一条执行的语句的结果。这种用法首先被标准CPython解释器采用，然后其他类型的解释器也先后采用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _ Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span> 

File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span> 

NameError<span class="token punctuation">:</span> name <span class="token string">&#39;_&#39;</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined 

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">42</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _ 

<span class="token number">42</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;alright!&#39;</span> <span class="token keyword">if</span> _ <span class="token keyword">else</span> <span class="token string">&#39;:(&#39;</span>

<span class="token string">&#39;alright!&#39;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _ 

<span class="token string">&#39;alright!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、作为一个名称：这与上面一点稍微有些联系，此时“<em>”作为临时性的名称使用。这样，当其他人阅读你的代码时将会知道，你分配了一个特定的名称，但是并不会在后面再次用到该名称。例如，下面的例子中，你可能对循环计数中的实际值并不感兴趣，此时就可以使用“</em>”。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token number">42</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> 

    do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、国际化：也许你也曾看到”_“会被作为一个函数来使用。这种情况下，它通常用于实现国际化和本地化字符串之间翻译查找的函数名称，这似乎源自并遵循相应的C约定。例如，在Django文档“转换”章节中，你将能看到如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>translation <span class="token keyword">import</span> ugettext <span class="token keyword">as</span> _ 

<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse 

<span class="token keyword">def</span> <span class="token function">my_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span> 

    output <span class="token operator">=</span> _<span class="token punctuation">(</span><span class="token string">&quot;Welcome to my site.&quot;</span><span class="token punctuation">)</span> 

    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>output<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，场景二和场景三中的使用方法可能会相互冲突，所以我们需要避免在使用“<em>”作为国际化查找转换功能的代码块中同时使用“</em>”作为临时名称。</p><h2 id="_15-名称前的单下划线-如-shahriar" tabindex="-1"><a class="header-anchor" href="#_15-名称前的单下划线-如-shahriar" aria-hidden="true">#</a> 15. 名称前的单下划线（如：_shahriar）</h2><p>程序员使用名称前的单下划线，用于指定该名称属性为“私有”。这有点类似于惯例，为了使其他人（或你自己）使用这些代码时将会知道以“_”开头的名称只供内部使用。正如Python文档中所述：<br> 以下划线 __ 为前缀的名称（如_pam）应该被视为API中非公开的部分（不管是函数、方法还是数据成员）。此时，应该将它们看作是一种实现细节，在修改它们时无需对外部通知。<br> 正如上面所说，这确实类似一种惯例，因为它对解释器来说确实有一定的意义，如果你写了代码 : from &lt;模块/包名&gt; import *<br> ，那么以 _ 开头的名称都不会被导入，除非模块或包中的 <strong>all</strong><br> 列表显式地包含了它们。了解更多请查看 Importing * in Python</p><h2 id="_16-名称前的双下划线-如-shahriar" tabindex="-1"><a class="header-anchor" href="#_16-名称前的双下划线-如-shahriar" aria-hidden="true">#</a> 16. 名称前的双下划线（如：__shahriar）</h2><p>名称（具体为一个方法名）前双下划线 _ 的用法并不是一种惯例，对解释器来说它有特定的意义。Python中的这种用法是为了避免与子类定义的名称冲突。Python文档指出，**spam 这种形式（至少两个前导下划线，最多一个后续下划线）的任何标识符将会被 正如所预料的，“<strong>internal_use”并未改变，而“_method_name”却被变成了“_ClassName</strong>method_name”。此时，如果你创建A的一个子类B，那么你将不能轻易地覆写A中的方法“**method_name”。spam 这种形式原文取代，在这里 classname 是去掉前导下划线的当前类名。例如下面的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">_internal_use</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> 

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">pass</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">__method_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> 

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">pass</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 

<span class="token punctuation">[</span><span class="token string">&#39;_A__method_name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&#39;_internal_use&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如所预料的，“_internal_use”并未改变，而“**method_name”却被变成了“**ClassName_method_name”。此时，如果你创建A的一个子类B，那么你将不能轻易地覆写A中的方法“__method_name”。</p><h2 id="_17-名称前后的双下划线-如-init" tabindex="-1"><a class="header-anchor" href="#_17-名称前后的双下划线-如-init" aria-hidden="true">#</a> 17. 名称前后的双下划线（如：init）</h2><p>这种用法表示Python中特殊的方法名。其实，这只是一种惯例，对Python系统来说，这将确保不会与用户自定义的名称冲突。通常，你将会覆写这些方法，并在里面实现你所需要的功能，以便Python调用它们。例如，当定义一个类时，你经常会覆写“<strong>init</strong>”方法。<br> 虽然你也可以编写自己的特殊方法名，但不要这样做。</p><h2 id="_17-隐藏特性-1-函数unpack" tabindex="-1"><a class="header-anchor" href="#_17-隐藏特性-1-函数unpack" aria-hidden="true">#</a> 17. 隐藏特性 1，函数unpack</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>

 <span class="token keyword">print</span> x<span class="token punctuation">,</span> y

alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

adict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>

foo<span class="token punctuation">(</span><span class="token operator">*</span>alist<span class="token punctuation">)</span> <span class="token comment"># 1, 2</span>

foo<span class="token punctuation">(</span><span class="token operator">**</span>adict<span class="token punctuation">)</span> <span class="token comment"># 1, 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-隐藏特性-2-链式比较操作符" tabindex="-1"><a class="header-anchor" href="#_18-隐藏特性-2-链式比较操作符" aria-hidden="true">#</a> 18. 隐藏特性 2， 链式比较操作符</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">3</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">5</span>

<span class="token boolean">True</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">&gt;</span> x <span class="token operator">&gt;=</span><span class="token number">3</span>

<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-隐藏特性-3-函数的默认参数" tabindex="-1"><a class="header-anchor" href="#_19-隐藏特性-3-函数的默认参数" aria-hidden="true">#</a> 19. 隐藏特性 3，函数的默认参数</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span> x

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更安全的做法是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">if</span> x <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span> x

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_20-隐藏特性-4-字典的get方法" tabindex="-1"><a class="header-anchor" href="#_20-隐藏特性-4-字典的get方法" aria-hidden="true">#</a> 20. 隐藏特性 4，字典的get方法</h2><h2 id="_21-隐藏特性-5-带关键字的格式化" tabindex="-1"><a class="header-anchor" href="#_21-隐藏特性-5-带关键字的格式化" aria-hidden="true">#</a> 21. 隐藏特性 5，带关键字的格式化</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> <span class="token string">&quot;Hello %(name)s !&quot;</span> <span class="token operator">%</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;James&#39;</span><span class="token punctuation">}</span>

Hello James !

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> <span class="token string">&quot;I am years %(age)i years old&quot;</span> <span class="token operator">%</span> <span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>

I am years <span class="token number">18</span> years old
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新些的格式化:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> <span class="token string">&quot;Hello {name} !&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">)</span>

Hello James !
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-隐藏特性-6-切片操作的步长参数" tabindex="-1"><a class="header-anchor" href="#_22-隐藏特性-6-切片操作的步长参数" aria-hidden="true">#</a> 22. 隐藏特性 6，切片操作的步长参数</h2><p>可以用步长 -1 来反转链表：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-隐藏特性-7-嵌套列表推导式" tabindex="-1"><a class="header-anchor" href="#_23-隐藏特性-7-嵌套列表推导式" aria-hidden="true">#</a> 23. 隐藏特性 7，嵌套列表推导式</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表推导构造permutation：可以用 itertools.permutations 来实现。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span>

In<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span>k <span class="token keyword">for</span> i <span class="token keyword">in</span> a <span class="token keyword">for</span> j <span class="token keyword">in</span> a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

Out<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">:</span> 

<span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;abd&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;acb&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;acd&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;adb&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;adc&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;bac&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;bad&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;bca&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;bcd&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;bda&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;bdc&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;cab&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;cad&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;cbd&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;cda&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;cdb&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;dab&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;dac&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;dba&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;dbc&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;dca&#39;</span><span class="token punctuation">,</span>

 <span class="token string">&#39;dcb&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_24-隐藏特性-8-print-重定向输出到文件" tabindex="-1"><a class="header-anchor" href="#_24-隐藏特性-8-print-重定向输出到文件" aria-hidden="true">#</a> 24. 隐藏特性 8，print 重定向输出到文件</h2><p>注意打开的模式: “w+” 而不能 “w” , 当然 “a” 是可以的</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span> <span class="token operator">&gt;&gt;</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;somefile&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_25-隐藏特性-9-python3中的元组unpack" tabindex="-1"><a class="header-anchor" href="#_25-隐藏特性-9-python3中的元组unpack" aria-hidden="true">#</a> 25. 隐藏特性 9， Python3中的元组unpack</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a

<span class="token number">0</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b

<span class="token number">1</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rest

<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token operator">*</span>rest<span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> first

<span class="token number">0</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> second

<span class="token number">1</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> last

<span class="token number">9</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rest

<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_26-隐藏特性-10-pow的第三个参数" tabindex="-1"><a class="header-anchor" href="#_26-隐藏特性-10-pow的第三个参数" aria-hidden="true">#</a> 26. 隐藏特性 10，pow的第三个参数</h2><p>其实第三个参数是来求模的: pow(x, y, z) == (x ** y) % z，注意，内置的 pow 和 math.pow 并不是一个函数，后者只接受2个参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token number">0</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-隐藏特性-11-enumerate还有第二个参数¶" tabindex="-1"><a class="header-anchor" href="#_27-隐藏特性-11-enumerate还有第二个参数¶" aria-hidden="true">#</a> 27. 隐藏特性 11，enumerate还有第二个参数¶</h2><p>enumerate 很赞，可以给我们索引和序列值的对, 但是它还有第二个参数，这个参数用来: 指明索引的起始值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_28-隐藏特性-12-显式的声明一个集合" tabindex="-1"><a class="header-anchor" href="#_28-隐藏特性-12-显式的声明一个集合" aria-hidden="true">#</a> 28. 隐藏特性 12，显式的声明一个集合</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>在Python <span class="token number">2.7</span> 之后可以这么声明一个集合。
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>

<span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29-隐藏特性-13-用切片来删除序列的某一段" tabindex="-1"><a class="header-anchor" href="#_29-隐藏特性-13-用切片来删除序列的某一段" aria-hidden="true">#</a> 29. 隐藏特性 13，用切片来删除序列的某一段</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然用 del a[1:4] 也是可以的，去除偶数项(偶数索引的):</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_30-隐藏特性-14-isinstance可以接收一个元组" tabindex="-1"><a class="header-anchor" href="#_30-隐藏特性-14-isinstance可以接收一个元组" aria-hidden="true">#</a> 30. 隐藏特性 14，isinstance可以接收一个元组</h2><p>这个真的鲜为人知, 我们可以用 isinstance(x, (float, int)) 来判断 x 是不是数，也就是那个元组里面是 或 的关系，只要是其中一个的实例就返回 True。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token boolean">True</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token boolean">True</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">&quot;1.3&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-让关键代码依赖于外部包" tabindex="-1"><a class="header-anchor" href="#_31-让关键代码依赖于外部包" aria-hidden="true">#</a> 31. 让关键代码依赖于外部包</h2><p>虽然Python让许多编程任务变得容易，但它可能并不总能为紧急的任务提供最佳性能。你可以为紧急的任务使用C、C++或机器语言编写的外部包，这样可以提高应用程序的性能。这些包都是不能跨平台的，这意味着你需要根据你正在使用的平台，寻找合适的包。简而言之，这个方案放弃了一些应用程序的可移植性，以换取只有在特定主机上直接编程才能获得的程序性能。这里有一些你应该考虑加入到你的“性能兵工厂”的包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cython
PyInlne
PyPy
Pyrex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些包以不同的方式提高性能。例如，Pyrex能够扩展Python所能做的事情，例如使用C的数据类型来让内存任务更加有效或直接。PyInIne让你在Python应用程序中直接使用C代码。程序中的内联代码单独编译，但它在利用C语言所能提供的效率的同时，也让所有的代码都在同一个地方。<br> #32. 排序时使用键（key）<br> 有很多老的Python排序代码，它们在你创建一个自定义的排序时花费你的时间，但在运行时确实能加速执行排序过程。元素排序的最好方法是尽可能使用键（key）和默认的sort()排序方法。例如，考虑下面的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> operator

somelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

somelist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

somelist

<span class="token comment">#Output = [(1, 5, 8), (6, 2, 4), (9, 7, 5)]</span>

somelist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

somelist

<span class="token comment">#Output = [(6, 2, 4), (1, 5, 8), (9, 7, 5)]</span>

somelist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

somelist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个实例中，根据你选择的作为key参数部分的索引，数组进行了排序。类似于利用数字进行排序，这种方法同样适用于利用字符串排序。<br> #33. 优化循环<br> 每种编程语言都会强调需要优化循环。当使用Python的时候，你可以依靠大量的技巧使得循环运行得更快。然而，开发者经常漏掉的一个方法是：避免在一个循环中使用点操作。例如，考虑下面的代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lowerlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;this&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lowercase&#39;</span><span class="token punctuation">]</span>

upper <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>upper

upperlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

append <span class="token operator">=</span> upperlist<span class="token punctuation">.</span>append

<span class="token keyword">for</span> word <span class="token keyword">in</span> lowerlist<span class="token punctuation">:</span>

 append<span class="token punctuation">(</span>upper<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span>

 <span class="token keyword">print</span><span class="token punctuation">(</span>upperlist<span class="token punctuation">)</span>

 <span class="token comment">#Output = [&#39;THIS&#39;, &#39;IS&#39;, &#39;LOWERCASE&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一次你调用方法str.upper，Python都会求该方法的值。然而，如果你用一个变量代替求得的值，值就变成了已知的，Python就可以更快地执行任务。优化循环的关键，是要减少Python在循环内部执行的工作量，因为Python原生的解释器在那种情况下，真的会减缓执行的速度。<br> （注意：优化循环的方法有很多，这只是其中的一个。例如，许多程序员都会说，列表推导是在循环中提高执行速度的最好方式。这里的关键是，优化循环是程序取得更高的执行速度的更好方式之一。）</p><h2 id="_34-尝试多种编码方法" tabindex="-1"><a class="header-anchor" href="#_34-尝试多种编码方法" aria-hidden="true">#</a> 34. 尝试多种编码方法</h2><p>如果每次你创建一个应用程序都是用相同的编码方法，几乎肯定会导致一些你的应用程序比它能够达到的运行效率慢的情况。作为分析过程的一部分，你可以尝试一些实验。例如，在一个字典中管理一些元素，你可以采用安全的方法确定元素是否已经存在并更新，或者你可以直接添加元素，然后作为异常处理该元素不存在情况。考虑第一个编码的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token number">16</span>

myDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>

 char <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span>

 <span class="token keyword">if</span> char <span class="token keyword">not</span> <span class="token keyword">in</span> myDict<span class="token punctuation">:</span>

 myDict<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>

 myDict<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

 <span class="token keyword">print</span><span class="token punctuation">(</span>myDict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码通常会在myDict开始为空时运行得更快。然而，当mydict通常被数据填充（或者至少大部分被充填）时，另一种方法效果更好。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token number">16</span>

myDict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>

 char <span class="token operator">=</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span>

 <span class="token keyword">try</span><span class="token punctuation">:</span>

 myDict<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

 <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>

 myDict<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

 <span class="token keyword">print</span><span class="token punctuation">(</span>myDict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种情况下具有相同的输出：{‘d’: 4, ‘c’: 4, ‘b’: 4, ‘a’: 4}。唯一的不同是这个输出是如何得到的。跳出固定的思维模式，创造新的编码技巧，能够帮助你利用你的应用程序获得更快的结果。</p><h2 id="_35-使用列表推导式" tabindex="-1"><a class="header-anchor" href="#_35-使用列表推导式" aria-hidden="true">#</a> 35. 使用列表推导式</h2><p>一个列表推导式包含以下几个部分：<br> 一个输入序列<br> 一个表示输入序列成员的变量<br> 一个可选的断言表达式<br> 一个将输入序列中满足断言表达式的成员变换成输出列表成员的输出表达式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

filtered_and_squared <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

 

<span class="token keyword">for</span> number <span class="token keyword">in</span> num<span class="token punctuation">:</span>

    <span class="token keyword">if</span> number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>

        filtered_and_squared<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> filtered_and_squared

 

<span class="token comment"># [1, 16, 100, 4, 9]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果使用filter、lambda和map函数，则能够将代码大大简化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

filtered_and_squared <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> filtered_and_squared

 

<span class="token comment"># [1, 16, 100, 4, 9]</span>

<span class="token comment">## 更简化的一种写法 </span>

num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

filtered_and_squared <span class="token operator">=</span> <span class="token punctuation">[</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> num <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">]</span>

<span class="token keyword">print</span> filtered_and_squared

 

<span class="token comment"># [1, 16, 100, 4, 9]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/12492743/1611201032596-a783afa9-73a4-46f2-8463-076d637a7fbe.jpeg#align=left&amp;display=inline&amp;height=356&amp;margin=[object Object]&amp;originHeight=356&amp;originWidth=625&amp;size=0&amp;status=done&amp;style=none&amp;width=625" alt="" loading="lazy"><br> 列表推导也可能会有一些负面效应，那就是整个列表必须一次性加载于内存之中，这对上面举的例子而言不是问题，甚至扩大若干倍之后也都不是问题。但是总会达到极限，内存总会被用完。<br> 针对上面的问题，生成器(Generator)能够很好的解决。生成器表达式不会一次将整个列表加载到内存之中，而是生成一个生成器对象(Generator objector)，所以一次只加载一个列表元素。<br> 生成器表达式同列表推导式有着几乎相同的语法结构，区别在于生成器表达式是被圆括号包围，而不是方括号：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

filtered_and_squared <span class="token operator">=</span> <span class="token punctuation">(</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> num <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>

<span class="token keyword">print</span> filtered_and_squared

 

<span class="token comment"># &lt;generator object &lt;genexpr&gt; at 0x00583E18&gt;</span>

 

<span class="token keyword">for</span> item <span class="token keyword">in</span> filtered_and_squared<span class="token punctuation">:</span>

    <span class="token keyword">print</span> item

 

<span class="token comment"># 1, 16, 100 4,9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这比列表推导效率稍微提高一些，让我们再一次改造一下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

 

<span class="token keyword">def</span> <span class="token function">square_generator</span><span class="token punctuation">(</span>optional_parameter<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> num <span class="token keyword">if</span> x <span class="token operator">&gt;</span> optional_parameter<span class="token punctuation">)</span>

 

<span class="token keyword">print</span> square_generator<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># &lt;generator object &lt;genexpr&gt; at 0x004E6418&gt;</span>

 

<span class="token comment"># Option I</span>

<span class="token keyword">for</span> k <span class="token keyword">in</span> square_generator<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">print</span> k

<span class="token comment"># 1, 16, 100, 4, 9</span>

 

<span class="token comment"># Option II</span>

g <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>square_generator<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> g

<span class="token comment"># [1, 16, 100, 4, 9]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除非特殊的原因，应该经常在代码中使用生成器表达式。但除非是面对非常大的列表，否则是不会看出明显区别的。 再来看一个通过两阶列表推导式遍历目录的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">def</span> <span class="token function">tree</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">for</span> path<span class="token punctuation">,</span> names<span class="token punctuation">,</span> fnames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token keyword">for</span> fname <span class="token keyword">in</span> fnames<span class="token punctuation">:</span>

            <span class="token keyword">yield</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> fname<span class="token punctuation">)</span>

 

<span class="token keyword">for</span> name <span class="token keyword">in</span> tree<span class="token punctuation">(</span><span class="token string">&#39;C:\\Users\\XXX\\Downloads\\Test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">print</span> name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_36-装饰器-decorators" tabindex="-1"><a class="header-anchor" href="#_36-装饰器-decorators" aria-hidden="true">#</a> 36. 装饰器(Decorators)</h2><p>装饰器为我们提供了一个增加已有函数或类的功能的有效方法。听起来是不是很像Java中的面向切面编程(Aspect-Oriented Programming)概念？两者都很简单，并且装饰器有着更为强大的功能。举个例子，假定你希望在一个函数的入口和退出点做一些特别的操作(比如一些安全、追踪以及锁定等操作)就可以使用装饰器。<br> 装饰器是一个包装了另一个函数的特殊函数：主函数被调用，并且其返回值将会被传给装饰器，接下来装饰器将返回一个包装了主函数的替代函数，程序的其他部分看到的将是这个包装函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps

 

<span class="token keyword">def</span> <span class="token function">timethis</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token triple-quoted-string string">&#39;&#39;&#39;

    Decorator that reports the execution time.

    &#39;&#39;&#39;</span>

    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>

        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token punctuation">)</span>

        <span class="token keyword">return</span> result

    <span class="token keyword">return</span> wrapper

 

<span class="token decorator annotation punctuation">@timethis</span>

<span class="token keyword">def</span> <span class="token function">countdown</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>

        n <span class="token operator">-=</span> <span class="token number">1</span>

 

countdown<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>

 

<span class="token comment"># (&#39;countdown&#39;, 0.006999969482421875)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_37-上下文管理库-contextlib" tabindex="-1"><a class="header-anchor" href="#_37-上下文管理库-contextlib" aria-hidden="true">#</a> 37. 上下文管理库(ContextLib)</h2><p>contextlib模块包含了与上下文管理器和with声明相关的工具。通常如果你想写一个上下文管理器，则你需要定义一个类包含<strong>enter</strong>方法以及<strong>exit</strong>方法，例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">class</span> <span class="token class-name">demo</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>

        self<span class="token punctuation">.</span>label <span class="token operator">=</span> label

 

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>

        self<span class="token punctuation">.</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

 

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_ty<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>

        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">,</span> end <span class="token operator">-</span> self<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的例子在此：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

 

<span class="token keyword">class</span> <span class="token class-name">demo</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>

        self<span class="token punctuation">.</span>label <span class="token operator">=</span> label

 

    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>

        self<span class="token punctuation">.</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

 

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_ty<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>

        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">,</span> end <span class="token operator">-</span> self<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>

 

<span class="token keyword">with</span> demo<span class="token punctuation">(</span><span class="token string">&#39;counting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    n <span class="token operator">=</span> <span class="token number">10000000</span>

    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>

        n <span class="token operator">-=</span> <span class="token number">1</span>

 

<span class="token comment"># counting: 1.36000013351</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上下文管理器被with声明所激活，这个API涉及到两个方法。<br><strong>enter</strong>方法，当执行流进入with代码块时，<strong>enter</strong>方法将执行。并且它将返回一个可供上下文使用的对象。<br> 当执行流离开with代码块时，<strong>exit</strong>方法被调用，它将清理被使用的资源。</p><p>利用@contextmanager装饰器改写上面那个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> contextlib <span class="token keyword">import</span> contextmanager

<span class="token keyword">import</span> time

 

<span class="token decorator annotation punctuation">@contextmanager</span>

<span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">:</span>

    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>

        <span class="token keyword">yield</span>

    <span class="token keyword">finally</span><span class="token punctuation">:</span>

        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>

 

<span class="token keyword">with</span> demo<span class="token punctuation">(</span><span class="token string">&#39;counting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    n <span class="token operator">=</span> <span class="token number">10000000</span>

    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>

        n <span class="token operator">-=</span> <span class="token number">1</span>

 

<span class="token comment"># counting: 1.32399988174</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看上面这个例子，函数中yield之前的所有代码都类似于上下文管理器中<strong>enter</strong>方法的内容。而yield之后的所有代码都如<strong>exit</strong>方法的内容。如果执行过程中发生了异常，则会在yield语句触发。</p><h2 id="_38-描述器-descriptors" tabindex="-1"><a class="header-anchor" href="#_38-描述器-descriptors" aria-hidden="true">#</a> 38. 描述器(Descriptors)</h2><p>描述器决定了对象属性是如何被访问的。描述器的作用是定制当你想引用一个属性时所发生的操作。<br> 构建描述器的方法是至少定义以下三个方法中的一个。需要注意，下文中的instance是包含被访问属性的对象实例，而owner则是被描述器修辞的类。<br><strong>get</strong>(self, instance, owner) – 这个方法是当属性被通过(value = obj.attr)的方式获取时调用，这个方法的返回值将被赋给请求此属性值的代码部分。 <strong>set</strong>(self, instance, value) – 这个方法是当希望设置属性的值(obj.attr = ‘value’)时被调用，该方法不会返回任何值。 <strong>delete</strong>(self, instance) – 当从一个对象中删除一个属性时(del obj.attr)，调用此方法。 译者注：对于instance和owner的理解，考虑以下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Celsius</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        self<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token keyword">return</span> self<span class="token punctuation">.</span>value

    <span class="token keyword">def</span> <span class="token function">__set__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>

        self<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

 

<span class="token keyword">class</span> <span class="token class-name">Temperature</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    celsius <span class="token operator">=</span> Celsius<span class="token punctuation">(</span><span class="token punctuation">)</span>

 

temp<span class="token operator">=</span>Temperature<span class="token punctuation">(</span><span class="token punctuation">)</span>

temp<span class="token punctuation">.</span>celsius <span class="token comment">#calls Celsius.__get__</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_39-zipping-and-unzipping-lists-and-iterables" tabindex="-1"><a class="header-anchor" href="#_39-zipping-and-unzipping-lists-and-iterables" aria-hidden="true">#</a> 39. Zipping and unzipping lists and iterables</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> z

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_40-grouping-adjacent-list-items-using-zip" tabindex="-1"><a class="header-anchor" href="#_40-grouping-adjacent-list-items-using-zip" aria-hidden="true">#</a> 40. Grouping adjacent list items using zip</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Using iterators</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">iter</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># Using slices</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> islice

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>islice<span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> group_adjacent<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_41-sliding-windows-n-grams-using-zip-and-iterators" tabindex="-1"><a class="header-anchor" href="#_41-sliding-windows-n-grams-using-zip-and-iterators" aria-hidden="true">#</a> 41. Sliding windows (n-grams) using zip and iterators</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> islice

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">n_grams</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> z <span class="token operator">=</span> <span class="token punctuation">(</span>islice<span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>z<span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n_grams<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n_grams<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> n_grams<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_42-inverting-a-dictionary-using-zip" tabindex="-1"><a class="header-anchor" href="#_42-inverting-a-dictionary-using-zip" aria-hidden="true">#</a> 42. Inverting a dictionary using zip</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mi <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mi

<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_43-flattening-lists" tabindex="-1"><a class="header-anchor" href="#_43-flattening-lists" aria-hidden="true">#</a> 43. Flattening lists</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>chain<span class="token punctuation">.</span>from_iterable<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> l <span class="token keyword">in</span> a <span class="token keyword">for</span> x <span class="token keyword">in</span> l<span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> l1 <span class="token keyword">in</span> a <span class="token keyword">for</span> l2 <span class="token keyword">in</span> l1 <span class="token keyword">for</span> x <span class="token keyword">in</span> l2<span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> flatten <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span>y <span class="token keyword">for</span> l <span class="token keyword">in</span> x <span class="token keyword">for</span> y <span class="token keyword">in</span> flatten<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">list</span> <span class="token keyword">else</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> flatten<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_44-dictionary-comprehensions" tabindex="-1"><a class="header-anchor" href="#_44-dictionary-comprehensions" aria-hidden="true">#</a> 44. Dictionary comprehensions</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m

<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m

<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">&#39;A0&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;A1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;A2&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&#39;A3&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">&#39;A4&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">&#39;A5&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">&#39;A6&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">&#39;A7&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">&#39;A8&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">&#39;A9&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_45-常犯错误-滥用表达式作为函数参数默认值" tabindex="-1"><a class="header-anchor" href="#_45-常犯错误-滥用表达式作为函数参数默认值" aria-hidden="true">#</a> 45. 常犯错误，滥用表达式作为函数参数默认值</h2><p>Python允许开发者指定一个默认值给函数参数，虽然这是该语言的一个特征，但当参数可变时，很容易导致混乱，例如，下面这段函数定义：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># bar is optional and defaults to [] if not specified</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bar<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">)</span> <span class="token comment"># but this line could be problematic, as we&#39;ll see...</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这段代码里，一旦重复调用foo()函数（没有指定一个bar参数），那么将一直返回’bar’，因为没有指定参数，那么foo()每次被调用的时候，都会赋予[]。下面来看看，这样做的结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">if</span> bar <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token comment"># or if not bar:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bar<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">return</span> bar

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_46-误解python规则范围" tabindex="-1"><a class="header-anchor" href="#_46-误解python规则范围" aria-hidden="true">#</a> 46. 误解Python规则范围</h2><p>Python的作用域解析是基于LEGB规则，分别是Local、Enclosing、Global、Built-in。实际上，这种解析方法也有一些玄机，看下面这个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token number">10</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> x <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span> x

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>

 File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>

 File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> foo

UnboundLocalError<span class="token punctuation">:</span> local variable <span class="token string">&#39;x&#39;</span> referenced before assignment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>许多人会感动惊讶，当他们在工作的函数体里添加一个参数语句，会在先前工作的代码里报UnboundLocalError错误（ 点击这里查看更详细描述）。 在使用列表时，开发者是很容易犯这种错误的，看看下面这个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># This works ok...</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo1<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> lst

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> lst <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment"># ... but this bombs!</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foo2<span class="token punctuation">(</span><span class="token punctuation">)</span>

Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>

 File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>

 File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> foo

UnboundLocalError<span class="token punctuation">:</span> local variable <span class="token string">&#39;lst&#39;</span> referenced before assignment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么foo2失败而foo1运行正常？ 答案与前面那个例子是一样的，但又有一些微妙之处。foo1没有赋值给lst，而foo2赋值了。lst += [5]实际上就是lst = lst + [5]，试图给lst赋值（因此，假设Python是在局部作用域里）。然而，我们正在寻找指定给lst的值是基于lst本身，其实尚未确定。</p><h2 id="_47-修改遍历列表" tabindex="-1"><a class="header-anchor" href="#_47-修改遍历列表" aria-hidden="true">#</a> 47. 修改遍历列表</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> odd <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">if</span> odd<span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">del</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment"># BAD: Deleting item from a list while iterating over it</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>

 File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>

IndexError<span class="token punctuation">:</span> <span class="token builtin">list</span> index out of <span class="token builtin">range</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在遍历的时候，对列表进行删除操作，这是很低级的错误。稍微有点经验的人都不会犯。 对上面的代码进行修改，正确地执行：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> odd <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> numbers <span class="token keyword">if</span> <span class="token keyword">not</span> odd<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># ahh, the beauty of it all</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers

<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_48-合理使用copy与deepcopy" tabindex="-1"><a class="header-anchor" href="#_48-合理使用copy与deepcopy" aria-hidden="true">#</a> 48. 合理使用copy与deepcopy</h2><p>对于dict和list等数据结构的对象，直接赋值使用的是引用的方式。而有些情况下需要复制整个对象，这时可以使用copy包里的copy和deepcopy，这两个函数的不同之处在于后者是递归复制的。效率也不一样：（以下程序在ipython中运行）<br> timeit后面的-n表示运行的次数，后两行对应的是两个timeit的输出，下同。由此可见后者慢一个数量级。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> copy

a <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">10</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 运行10次 copy.copy(a)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">10</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token number">10</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">1.55</span> ms per loop

<span class="token number">10</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">151</span> ms per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_49-合理使用生成器-generator-和yield" tabindex="-1"><a class="header-anchor" href="#_49-合理使用生成器-generator-和yield" aria-hidden="true">#</a> 49. 合理使用生成器（generator）和yield</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> b <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">1.54</span> ms per loop

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">4.56</span> ms per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用()得到的是一个generator对象，所需要的内存空间与列表的大小无关，所以效率会高一些。在具体应用上，比如set(i for i in range(100000))会比set([i for i in range(100000)])快。<br> 但是对于需要循环遍历的情况：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">10</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">10</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">pass</span>

<span class="token number">10</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">6.51</span> ms per loop

<span class="token number">10</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">5.54</span> ms per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后者的效率反而更高，但是如果循环里有break,用generator的好处是显而易见的。yield也是用于创建generator：</p><h2 id="_50-使用级联比较x-y-z" tabindex="-1"><a class="header-anchor" href="#_50-使用级联比较x-y-z" aria-hidden="true">#</a> 50. 使用级联比较x &lt; y &lt; z</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">1000000</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token operator">&lt;</span> z<span class="token punctuation">:</span><span class="token keyword">pass</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">1000000</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">and</span> y <span class="token operator">&lt;</span> z<span class="token punctuation">:</span><span class="token keyword">pass</span>

<span class="token number">1000000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">101</span> ns per loop

<span class="token number">1000000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">121</span> ns per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>x &lt; y &lt; z效率略高，而且可读性更好。</p><h2 id="_51-while-1-比-while-true-更快" tabindex="-1"><a class="header-anchor" href="#_51-while-1-比-while-true-更快" aria-hidden="true">#</a> 51. while 1 比 while True 更快</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">while_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

 n <span class="token operator">=</span> <span class="token number">100000</span>

 <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>

 n <span class="token operator">-=</span> <span class="token number">1</span>

 <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>

<span class="token keyword">def</span> <span class="token function">while_true</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

 n <span class="token operator">=</span> <span class="token number">100000</span>

 <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>

 n <span class="token operator">-=</span> <span class="token number">1</span>

 <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span> 

m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">1000000</span> 

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> while_1<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> while_true<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">3.69</span> ms per loop

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">5.61</span> ms per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>while 1 比 while true快很多，原因是在python2.x中，True是一个全局变量，而非关键字。</p><h2 id="_52-使用-而不是pow" tabindex="-1"><a class="header-anchor" href="#_52-使用-而不是pow" aria-hidden="true">#</a> 52. 使用**而不是pow</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">10000</span> c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">10000</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">20</span>

<span class="token number">10000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">284</span> ns per loop

<span class="token number">10000</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">16.9</span> ns per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_53-使用-cprofile-cstringio-和-cpickle等用c实现相同功能-分别对应profile-stringio-pickle-的包" tabindex="-1"><a class="header-anchor" href="#_53-使用-cprofile-cstringio-和-cpickle等用c实现相同功能-分别对应profile-stringio-pickle-的包" aria-hidden="true">#</a> 53. 使用 cProfile, cStringIO 和 cPickle等用c实现相同功能（分别对应profile, StringIO, pickle）的包</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cPickle

<span class="token keyword">import</span> pickle

a <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> x <span class="token operator">=</span> cPickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">1.58</span> ms per loop

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">17</span> ms per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由c实现的包，速度快10倍以上！</p><h2 id="_54-使用最佳的反序列化方式" tabindex="-1"><a class="header-anchor" href="#_54-使用最佳的反序列化方式" aria-hidden="true">#</a> 54. 使用最佳的反序列化方式</h2><p>下面比较了eval, cPickle, json方式三种对相应字符串反序列化的效率，可见json比cPickle快近3倍，比eval快20多倍。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">import</span> cPickle

a <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>

s1 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

s2 <span class="token operator">=</span> cPickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

s3 <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> x <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> x <span class="token operator">=</span> cPickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>

<span class="token operator">%</span>timeit <span class="token operator">-</span>n <span class="token number">100</span> x <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>s3<span class="token punctuation">)</span>

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">16.8</span> ms per loop

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">2.02</span> ms per loop

<span class="token number">100</span> loops<span class="token punctuation">,</span> best of <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">798</span> µs per loop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_55-怎么才算精通python" tabindex="-1"><a class="header-anchor" href="#_55-怎么才算精通python" aria-hidden="true">#</a> 55. 怎么才算精通python</h2>`,203),v={href:"http://www.zhihu.com/question/19794855",target:"_blank",rel:"noopener noreferrer"},m=t('<ol><li>熟悉语法以及原声数据结构</li><li>熟悉基本实现中的性能特点，就是知道什么操作会慢</li><li>会使用profile以及基于profile的性能分析工具</li><li>会使用运行时编译和静态编译的工具。pypy，numba，cython，ctypes，original C/C++ extension</li><li>熟悉你所在领域的拓展库，比如我，科学计算方面的库不要太多，numpy衍生出来的一大堆大堆</li><li>了解基本的编译过程，基本的操作系统知识（只要你C、C++学的还行就可以了）</li><li>要想精通python，写的代码首先得pythonic</li><li>研读牛B的开源代码，在这过程中会遇到python的许多高阶用法</li><li>理解装饰器，生成器，描述符，元类</li><li>掌握list comprehension，</li><li>多用内置函数：map，reduce，filter，iter，range，divmod，round，chr，enumerate，all，any，slice，zip+</li></ol><h2 id="_56-python-猴子补丁相关" tabindex="-1"><a class="header-anchor" href="#_56-python-猴子补丁相关" aria-hidden="true">#</a> 56. python 猴子补丁相关</h2><p>python里有一个很奇妙的monkey patch，中文叫做猴子补丁，是指的是在运行时动态替换某些已加载的模块的实现。第一次了解这个概念是在使用gevent的时候，需要把python自带的socket，os等相关模块的实现改变成异步形式，但同时不改动python的源代码。</p><h2 id="_57-了解-functools-partial" tabindex="-1"><a class="header-anchor" href="#_57-了解-functools-partial" aria-hidden="true">#</a> 57. 了解 functools.partial</h2>',4),b={href:"http://blog.csdn.net/handsomekang/article/details/9712125",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="_58-python-中时间格式转换" tabindex="-1"><a class="header-anchor" href="#_58-python-中时间格式转换" aria-hidden="true">#</a> 58. python 中时间格式转换</h2><figure><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/12492743/1611201032477-e7f3c4ba-52ae-41d7-90b0-e7c4bd1bc941.jpeg#align=left&amp;display=inline&amp;height=549&amp;margin=[object Object]&amp;originHeight=549&amp;originWidth=739&amp;size=0&amp;status=done&amp;style=none&amp;width=739" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_59-python-一行代码启动-http-服务器" tabindex="-1"><a class="header-anchor" href="#_59-python-一行代码启动-http-服务器" aria-hidden="true">#</a> 59. python 一行代码启动 http 服务器</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python -mSimpleHTTPServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function h(y,_){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,n("blockquote",null,[n("p",null,[n("a",d,[s("https://www.jianshu.com/p/541cfbb53b7a"),p(a)])])]),k,n("p",null,[s("这个问题比较难回答，我是看 "),n("a",v,[s("怎么样才算是精通 Python"),p(a)]),s(" 这个知乎问答，按照自己的看法整理了一些观点。不要问我是按什么标准整理的，我只能说，整理的这些点，第一，在我看来都说得不错；第二，我自己都会去按照这些点来看看自己离 “精通” python还有多远。")]),m,n("p",null,[s("先参考 "),n("a",b,[s("飘逸的python - 偏函数functools.partial"),p(a)])]),g])}const x=e(l,[["render",h],["__file","转载：59个Python使用技巧，从此你的Python与众不同！.html.vue"]]);export{x as default};
